<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014</copyright>
    <lastBuildDate>Sun, 29 Mar 2015 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>JAXB Is Doing It Wrong; Try Xembly</title>
      <link>http://www.yegor256.com/2015/03/26/jaxb-vs-xembly.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.xembly.org'&gt;&lt;img src='http://img.xembly.org/logo-256x256.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_Architecture_for_XML_Binding&quot;&gt;JAXB&lt;/a&gt;
is a 10-year-old Java technology that allows us to
convert a Java object into an XML document (marshalling) and
back (unmarshalling). This technology is based on
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;setters and getters&lt;/a&gt;
and, in my opinion, violates key principles of object-oriented
programming by turning objects into &lt;strong&gt;passive data structures&lt;/strong&gt;. I would
recommend you use &lt;a href=&quot;http://www.xembly.org&quot;&gt;Xembly&lt;/a&gt;
instead for marshalling Java objects into XML documents.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This is how JAXB marshalling works. Say you have a &lt;code&gt;Book&lt;/code&gt; class that needs to be
marshalled into an XML document. You have to create getters and annotate them:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.xml.bind.annotation.XmlElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.xml.bind.annotation.XmlRootElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@XmlRootElement&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@XmlElement&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@XmlElement&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you create a marshaller and ask it to convert an instance of class
&lt;code&gt;Book&lt;/code&gt; into XML:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0132350882&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Clean Code&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Marshaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marshaller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jaxbContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createMarshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;marshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;marshal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should be expecting something like this in the output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;book&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;isbn&amp;gt;&lt;/span&gt;0132350882&lt;span class=&quot;nt&quot;&gt;&amp;lt;/isbn&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Clean Code&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/book&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So what&amp;#39;s wrong with it? Pretty much the same thing that&amp;#39;s wrong with
object-relational mapping, which is explained in
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;ORM Is an Offensive Anti-Pattern&lt;/a&gt;.
JAXB is treating an object as a bag of data, extracting the data
and converting it into XML the way JAXB wants. The object has no control
over this process. Therefore an object is not
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;an object&lt;/a&gt;
anymore but rather a passive bag of data.&lt;/p&gt;

&lt;p&gt;An ideal approach would be to redesign our class &lt;code&gt;Book&lt;/code&gt; this way:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toXML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create XML document and return&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, there are a few problems with this approach. First of all, there&amp;#39;s
massive code duplication. Building an XML document is a rather verbose
process in Java. If every class had to re-implement it in its
&lt;code&gt;toXML()&lt;/code&gt; method, we would have a big problem with duplicate code.&lt;/p&gt;

&lt;p&gt;The second problem is that we don&amp;#39;t know exactly what type of wrapping
our XML document should be delivered in. It may be a &lt;code&gt;String&lt;/code&gt; or an &lt;code&gt;InputStream&lt;/code&gt;
or maybe an instance of &lt;code&gt;org.w3c.dom.Document&lt;/code&gt;. Making many &lt;code&gt;toXML()&lt;/code&gt; methods
in each object would definitely be a disaster.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.xembly.org&quot;&gt;Xembly&lt;/a&gt; provides a solution. As I&amp;#39;ve
&lt;a href=&quot;/2014/04/09/xembly-intro.html&quot;&gt;mentioned before&lt;/a&gt;, it is
an imperative language for XML constructions and manipulations. Here is
how we can implement our &lt;code&gt;Book&lt;/code&gt; object with the help of Xembly:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.xembly.Directive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Directive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toXembly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Directives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;isbn&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, in order to build an XML document, we should use this code
outside the object:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0132350882&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Clean Code&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Xembler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toXembly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;a href=&quot;http://www.xembly.org/apidocs-0.21/org/xembly/Xembler.html&quot;&gt;&lt;code&gt;Xembler&lt;/code&gt;&lt;/a&gt;
class will convert Xembly directives into an XML document.&lt;/p&gt;

&lt;p&gt;The beauty of this solution is that the internals of the object are
not exposed via getters and the object is fully in charge of the XML
marshalling process. In addition, the compexity of these directives
may be very high &amp;mdash; much higher than the rather cumbersome annotations of JAXB.&lt;/p&gt;

&lt;p&gt;Xembly is an open-source project, so feel free to submit your questions
or corrections to &lt;a href=&quot;https://github.com/yegor256/xembly&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/03/26/jaxb-vs-xembly.html</guid>
      <dc:date>2015-03-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Java Web App Architecture In Takes Framework</title>
      <link>http://www.yegor256.com/2015/03/22/takes-java-web-framework.html</link>
      <description>&lt;p&gt;I used to utilize Servlets, JSP, JAX-RS, Spring Framework, Play Framework,
JSF with Facelets, and a bit of Spark Framework. All of these solutions,
in my humble opinion, are very far from being object-oriented and elegant.
They all are full of static methods, untestable data structures, and
dirty hacks. So about a month ago, I decided to create my own Java web
framework. I put a few basic principles into its foundation: 1) No NULLs,
2) no public static methods, 3) no mutable classes, and 4) no class casting, reflection,
and &lt;code&gt;instanceof&lt;/code&gt; operators. These four basic principles should guarantee
clean code and transparent architecture. That&amp;#39;s how the
&lt;a href=&quot;http://www.takes.org&quot;&gt;Takes&lt;/a&gt; framework was born.
Let&amp;#39;s see what was created and how it works.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/03/godfather-shooting-scene.jpg' style='width:600px;' alt='Making of The Godfather (1972) by Francis Ford Coppola'/&gt;&lt;figcaption&gt;Making of The Godfather (1972) by Francis Ford Coppola&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;java-web-architecture-in-a-nutshell&quot;&gt;Java Web Architecture in a Nutshell&lt;/h2&gt;

&lt;p&gt;This is how I understand a web application architecture and its
components, in simple terms.&lt;/p&gt;

&lt;p&gt;First, to create a web server, we should create
a new &lt;a href=&quot;http://en.wikipedia.org/wiki/Network_socket&quot;&gt;network socket&lt;/a&gt;,
that accepts connections on a certain &lt;a href=&quot;http://en.wikipedia.org/wiki/Port_%28computer_networking%29&quot;&gt;TCP port&lt;/a&gt;.
Usually it is 80, but I&amp;#39;m going to use 8080 for testing purposes.
This is done in Java with the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/net/ServerSocket.html&quot;&gt;&lt;code&gt;ServerSocket&lt;/code&gt;&lt;/a&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.ServerSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerSocket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServerSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#39;s enough to start a web server. Now, the socket is ready and listening
on port 8080. When someone opens &lt;code&gt;http://localhost:8080&lt;/code&gt; in their browser,
the connection will be established and the browser will spin its waiting
wheel forever. Compile this snippet and try. We just built a simple web
server without the use of any frameworks. We&amp;#39;re not doing anything with
incoming connections yet, but we&amp;#39;re not rejecting them either. All of them
are being lined up inside that &lt;code&gt;server&lt;/code&gt; object. It&amp;#39;s being done in a background
thread; that&amp;#39;s why we need to put that &lt;code&gt;while(true)&lt;/code&gt; in afterward. Without this endless pause,
the app will finish its execution immediately and the server socket will
shut down.&lt;/p&gt;

&lt;p&gt;The next step is to accept the incoming connections. In Java, that&amp;#39;s done through
a blocking call to the &lt;code&gt;accept()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Socket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The method is blocking its thread and waiting until a new connection arrives. As
soon as that happens, it returns an instance of &lt;code&gt;Socket&lt;/code&gt;. In order to accept
the next connection, we should call &lt;code&gt;accept()&lt;/code&gt; again. So basically, our
web server should work like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerSocket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServerSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Socket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 1. Read HTTP request from the socket&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 2. Prepare an HTTP response&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 3. Send HTTP response to the socket&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 4. Close the socket&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s an endless cycle that accepts a new connection, understands it,
creates a response, returns the response, and accepts a new connection again.
HTTP protocol is stateless, which means the server should not
remember what happened in any previous connection. All it cares about is
the incoming HTTP request in this particular connection.&lt;/p&gt;

&lt;p&gt;The HTTP request is coming from the input stream of the socket and looks like
a multi-line block of text. This is what you would see if you read
an input stream of the socket:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will see something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET / HTTP/1.1
Host: localhost:8080
Connection: keep-alive
Cache-Control: max-age=0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36
Accept-Encoding: gzip, deflate, sdch
Accept-Language: en-US,en;q=0.8,ru;q=0.6,uk;q=0.4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The client (the Google Chrome browser, for example) passes this text into the
connection established. It connects to port 8080 at &lt;code&gt;localhost&lt;/code&gt;, and as soon
as the connection is ready, it immediately sends this text into it, then waits
for a response.&lt;/p&gt;

&lt;p&gt;Our job is to create an HTTP response using the information we get in the
request. If our server is very primitive, we can basically ignore all the
information in the request and just return &amp;quot;Hello, world!&amp;quot; to all requests
(I&amp;#39;m using
&lt;a href=&quot;https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html&quot;&gt;&lt;code&gt;IOUtils&lt;/code&gt;&lt;/a&gt;
for simplicity):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.Socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.ServerSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.io.IOUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerSocket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServerSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Socket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IOUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;IOUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;HTTP/1.1 200 OK\r\n\r\nHello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#39;s it. The server is ready. Try to compile and run it. Point your browser
to &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;, and you will see &lt;code&gt;Hello, world!&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;javac -cp commons-io.jar Foo.java
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java -cp commons-io.jar:. Foo &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://localhost:8080 -v
* Rebuilt URL to: http://localhost:8080/
* Connected to localhost &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;::1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; port &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0)&lt;/span&gt;
&amp;gt; GET / HTTP/1.1
&amp;gt; User-Agent: curl/7.37.1
&amp;gt; Host: localhost:8080
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span class=&quot;m&quot;&gt;200&lt;/span&gt; OK
* no chunk, no close, no size. Assume close to signal end
&amp;lt;
* Closing connection 0
Hello, world!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#39;s all you need to build a web server. Now let&amp;#39;s discuss how to make
it object-oriented and composable. Let&amp;#39;s try to see how the &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes&lt;/a&gt;
framework was built.&lt;/p&gt;

&lt;h2 id=&quot;routing/dispatching&quot;&gt;Routing/Dispatching&lt;/h2&gt;

&lt;p&gt;The most important step is to decide who is responsible for building
an HTTP response. Each HTTP request has 1) a query, 2) a method, and 3) a number
of headers. Using these three parameters, we need to instantiate an object
that will build a response for us. This process, in most web frameworks,
is called request dispatching or routing. Here is how we do it in Takes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;takes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are basically two steps. The first one is creating an instance of
&lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/Take.html&quot;&gt;&lt;code&gt;Take&lt;/code&gt;&lt;/a&gt;
from &lt;code&gt;takes&lt;/code&gt;, and the second one is creating an instance of &lt;code&gt;Response&lt;/code&gt; from &lt;code&gt;take&lt;/code&gt;.
Why is it done this way? Mostly in order to separate responsibilities. An
instance of &lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/Takes.html&quot;&gt;&lt;code&gt;Takes&lt;/code&gt;&lt;/a&gt;
is responsible for dispatching a request and instantiating
the right &lt;code&gt;Take&lt;/code&gt;, and an instance of &lt;code&gt;Take&lt;/code&gt; is responsible for creating a response.&lt;/p&gt;

&lt;p&gt;To create a simple application in Takes, you should create two classes. First,
an implementation of &lt;code&gt;Takes&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.Take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.Takes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TsFoo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Takes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;re using these &lt;code&gt;Ts&lt;/code&gt; and &lt;code&gt;Tk&lt;/code&gt; prefixes for
&lt;code&gt;Takes&lt;/code&gt; and &lt;code&gt;Take&lt;/code&gt;, respectively.
The second class you should create is an implementation of &lt;code&gt;Take&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.Take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.rs.RsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkFoo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now it&amp;#39;s time to start a server:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.http.Exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.http.FtBasic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FtBasic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TsFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NEVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/http/FtBasic.html&quot;&gt;&lt;code&gt;FtBasic&lt;/code&gt;&lt;/a&gt;
class does the exact same socket manipulations explained
above. It starts a server socket on port 8080 and dispatches all incoming
connections through an instance of &lt;code&gt;TsFoo&lt;/code&gt; that we are giving to its constructor.
It does this dispatching in an endless cycle, checking every second whether
it&amp;#39;s time to stop with an instance of
&lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/http/Exit.html&quot;&gt;&lt;code&gt;Exit&lt;/code&gt;&lt;/a&gt;.
Obviously, &lt;code&gt;Exit.NEVER&lt;/code&gt; always responds with, &amp;quot;Don&amp;#39;t stop, please&amp;quot;.&lt;/p&gt;

&lt;h2 id=&quot;http-request&quot;&gt;HTTP Request&lt;/h2&gt;

&lt;p&gt;Now let&amp;#39;s see what&amp;#39;s inside the HTTP request arriving at &lt;code&gt;TsFoo&lt;/code&gt; and what
we can get out of it. This is how the
&lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/Request.html&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt;
interface is defined in &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The request is divided into two parts: the head and the body. The head
contains all lines that go before the empty line that starts
a body, according to HTTP specification in
&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html&quot;&gt;RFC 2616&lt;/a&gt;. There are many useful
decorators for &lt;code&gt;Request&lt;/code&gt; in the framework. For example, &lt;code&gt;RqMethod&lt;/code&gt; will
help you get the method name from the first line of the header:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RqMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;RqHref&lt;/code&gt; will help extract the query part and parse it. For example,
this is the request:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Host:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code will extract that &lt;code&gt;123&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RqHref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;RqPrint&lt;/code&gt; can get the entire request or its body printed as a &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RqPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The idea here is to keep the &lt;code&gt;Request&lt;/code&gt; interface simple and provide
this request parsing functionality to its decorators. This approach helps the
framework keep classes small and cohesive. Each decorator is very
small and solid, doing exactly one thing. All of these decorators
are in the &lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/rq/index.html&quot;&gt;&lt;code&gt;org.takes.rq&lt;/code&gt;&lt;/a&gt; package.
As you already probably understand, the &lt;code&gt;Rq&lt;/code&gt; prefix stands for &lt;code&gt;Request&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;first-real-web-app&quot;&gt;First Real Web App&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s create our first real web application, which will do something
useful. I would recommend starting with an &lt;code&gt;Entry&lt;/code&gt; class, which is
required by Java to start an app from the command line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.http.Exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.http.FtCLI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FtCLI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TsApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NEVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This class contains just a single &lt;code&gt;main()&lt;/code&gt; static method that will be
called by JVM when the app starts from the command line. As you see, it
instantiates &lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/http/FtCLI.html&quot;&gt;&lt;code&gt;FtCLI&lt;/code&gt;&lt;/a&gt;,
giving it an instance of class &lt;code&gt;TsApp&lt;/code&gt; and command
line arguments. We&amp;#39;ll create the &lt;code&gt;TsApp&lt;/code&gt; class in a second. &lt;code&gt;FtCLI&lt;/code&gt;
(translates to &amp;quot;front-end with command line interface&amp;quot;) makes an instance
of the same &lt;code&gt;FtBasic&lt;/code&gt;, wrapping it into a few useful decorators and configuring
it according to command line arguments. For example, &lt;code&gt;--port=8080&lt;/code&gt; will
be converted into a &lt;code&gt;8080&lt;/code&gt; port number and passed as a second argument of
the &lt;code&gt;FtBasic&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;The web application itself is called &lt;code&gt;TsApp&lt;/code&gt; and extends &lt;code&gt;TsWrap&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.Take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.Takes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.facets.fork.FkRegex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.facets.fork.TsFork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.ts.TsWrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.ts.TsClasspath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TsApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TsWrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TsApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TsApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Takes&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TsFork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkRegex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/robots.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkRegex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/css/.*&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TsClasspath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkRegex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;ll discuss this &lt;code&gt;TsFork&lt;/code&gt; class in a minute.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re using Maven, this is the &lt;code&gt;pom.xml&lt;/code&gt; you should start with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;xmlns:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xsi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;xsi:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schemaLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SNAPSHOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;takes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;takes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Maven&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Central&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finalName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finalName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;executions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;executions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running &lt;code&gt;mvn clean package&lt;/code&gt; should build a &lt;code&gt;foo.jar&lt;/code&gt; file in &lt;code&gt;target&lt;/code&gt; directory
and a collection of all JAR dependencies in &lt;code&gt;target/deps&lt;/code&gt;. Now you
can run the app from the command line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mvn clean package
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java -Dfile.encoding&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;UTF-8 -cp ./target/foo.jar:./target/deps/* foo.Entry --port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8080&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The application is ready, and you can deploy it to, say, Heroku. Just
create a &lt;code&gt;Procfile&lt;/code&gt; file in the root of the repository and push the repo
to Heroku. This is what &lt;code&gt;Procfile&lt;/code&gt; should look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;web: java -Dfile.encoding=UTF-8 -cp target/foo.jar:target/deps/* foo.Entry --port=${PORT}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;tsfork&quot;&gt;TsFork&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/facets/fork/TsFork.html&quot;&gt;&lt;code&gt;TsFork&lt;/code&gt;&lt;/a&gt;
class seems to be one of the core elements of the framework. It
helps route an incoming HTTP request to the right &lt;em&gt;take&lt;/em&gt;. Its logic is very
simple, and there are just a few lines of code inside it. It encapsulates
a collection of &amp;quot;forks&amp;quot;, which are instances of the
&lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/facets/fork/Fork.html&quot;&gt;&lt;code&gt;Fork&amp;lt;Take&amp;gt;&lt;/code&gt;&lt;/a&gt; interface:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Its only &lt;code&gt;route()&lt;/code&gt; method either returns an empty iterator or an iterator
with a single &lt;code&gt;Take&lt;/code&gt;. &lt;code&gt;TsFork&lt;/code&gt; goes through all forks, calling their
&lt;code&gt;route()&lt;/code&gt; methods until one of them returns a &lt;em&gt;take&lt;/em&gt;. Once that happens,
&lt;code&gt;TsFork&lt;/code&gt; returns this &lt;em&gt;take&lt;/em&gt; to the caller, which is
&lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/http/FtBasic.html&quot;&gt;&lt;code&gt;FtBasic&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s create a simple fork ourselves now. For example, we want to show
the status of the application when the &lt;code&gt;/status&lt;/code&gt; URL is requested. Here is
the code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TsApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TsWrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Takes&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TsFork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AtTake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;takes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RqHref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/status&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;takes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;takes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I believe the logic here is clear. We either return an empty iterator
or an iterator with an instance of &lt;code&gt;TkStatus&lt;/code&gt; inside. If an empty
iterator is returned, &lt;code&gt;TsFork&lt;/code&gt; will try to find another fork in the
collection that actually gets an instance of &lt;code&gt;Take&lt;/code&gt; in order to produce a &lt;code&gt;Response&lt;/code&gt;.
By the way, if nothing is found and all forks return empty iterators,
&lt;code&gt;TsFork&lt;/code&gt; will throw a &amp;quot;Page not found&amp;quot; exception.&lt;/p&gt;

&lt;p&gt;This exact logic is implemented by an out-of-the-box fork called &lt;code&gt;FkRegex&lt;/code&gt;,
which attempts to match a request URI path with the regular expression
provided:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TsApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TsWrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Takes&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TsFork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkRegex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/status&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can compose a multi-level structure of &lt;code&gt;TsFork&lt;/code&gt; classes; for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TsApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TsWrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Takes&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TsFork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkRegex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;/status&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TsFork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkStatusJSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkStatusXML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, I believe it&amp;#39;s obvious. The instance of &lt;code&gt;FkRegex&lt;/code&gt; will ask an
encapsulated instance of &lt;code&gt;TsFork&lt;/code&gt; to return a &lt;em&gt;take&lt;/em&gt;, and it will try to
fetch it from one that &lt;code&gt;FkParams&lt;/code&gt; encapsulated. If the HTTP query is
&lt;code&gt;/status?f=xml&lt;/code&gt;, an instance of &lt;code&gt;TkStatusXML&lt;/code&gt; will be returned.&lt;/p&gt;

&lt;h2 id=&quot;http-response&quot;&gt;HTTP Response&lt;/h2&gt;

&lt;p&gt;Now let&amp;#39;s discuss the structure of the HTTP response and its object-oriented
abstraction, &lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/Response.html&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt;.
This is how the interface looks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks very similar to the &lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/Request.html&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt;,
doesn&amp;#39;t it? Well, it&amp;#39;s identical, mostly because the structure of the HTTP request and
response is almost identical. The only difference is the first line.&lt;/p&gt;

&lt;p&gt;There is a collection of useful decorators that help in response building. They
are &lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;composable&lt;/a&gt;,
which makes them very convenient. For example, if you want to build a response
that contains an HTML page, you compose them like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkIndex&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;html&amp;gt;Hello, world!&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, the decorator &lt;code&gt;RsWithBody&lt;/code&gt;
creates a response with a body but with no headers at all. Then,
&lt;code&gt;RsWithType&lt;/code&gt; adds the header &lt;code&gt;Content-Type: text/html&lt;/code&gt; to it. Then, &lt;code&gt;RsWithStatus&lt;/code&gt;
makes sure the first line of the response contains &lt;code&gt;HTTP/1.1 200 OK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can create your own decorators that can reuse existing ones. Take a look
at how it&amp;#39;s done in &lt;a href=&quot;https://github.com/yegor256/rultor/blob/1.50.2/src/main/java/com/rultor/web/RsPage.java&quot;&gt;&lt;code&gt;RsPage&lt;/code&gt;&lt;/a&gt;
from rultor.com.&lt;/p&gt;

&lt;h2 id=&quot;how-about-templates?&quot;&gt;How About Templates?&lt;/h2&gt;

&lt;p&gt;Returning simple &amp;quot;Hello, world&amp;quot; pages is not a big problem, as we can see. But
what about more complex output like HTML pages, XML documents, JSON
data sets, etc? There are a few convenient &lt;code&gt;Response&lt;/code&gt; decorators that
enable all of that. Let&amp;#39;s start with &lt;a href=&quot;http://velocity.apache.org&quot;&gt;Velocity&lt;/a&gt;,
a simple templating engine. Well, it&amp;#39;s not that simple. It&amp;#39;s rather powerful,
but I would suggest to use it in simple situations only. Here is how it
works:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkIndex&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsVelocity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, ${name}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeffrey&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/rs/RsVelocity.html&quot;&gt;&lt;code&gt;RsVelocity&lt;/code&gt;&lt;/a&gt; constructor
accepts a single argument that has to be a Velocity template. Then, you call
the &lt;code&gt;with()&lt;/code&gt; method, injecting data into the Velocity context. When it&amp;#39;s time
to render the HTTP response, &lt;code&gt;RsVelocity&lt;/code&gt; will &amp;quot;evaluate&amp;quot; the template
against the context configured. Again, I would recommend you use
this templating approach only for simple outputs.&lt;/p&gt;

&lt;p&gt;For more complex HTML documents, I would recommend you use XML/XSLT
in combination with Xembly. I explained this idea in a few previous posts:
&lt;a href=&quot;/2014/06/25/xml-and-xslt-in-browser.html&quot;&gt;XML+XSLT in a Browser&lt;/a&gt;
and &lt;a href=&quot;/2014/09/09/restful-web-sites.html&quot;&gt;RESTful API and a Web Site in the Same URL&lt;/a&gt;.
It is simple and powerful &amp;mdash; Java generates XML output and the XSLT
processor transforms it into HTML documents. This is how we separate
representation from data. The XSL stylesheet is a &amp;quot;view&amp;quot; and &lt;code&gt;TkIndex&lt;/code&gt; is a &amp;quot;controller&amp;quot;,
in terms of &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll write a separate article about templating with Xembly and XSL very soon.&lt;/p&gt;

&lt;p&gt;In the meantime, we&amp;#39;ll create decorators for &lt;a href=&quot;http://en.wikipedia.org/wiki/Facelets&quot;&gt;JSF/Facelets&lt;/a&gt;
and &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaServer_Pages&quot;&gt;JSP&lt;/a&gt; rendering
in Takes. If you&amp;#39;re interested in helping, please fork the framework
and submit your pull requests.&lt;/p&gt;

&lt;h2 id=&quot;what-about-persistence?&quot;&gt;What About Persistence?&lt;/h2&gt;

&lt;p&gt;Now, a question that comes up is what to do with persistent entities, like databases,
in-memory structures, network connections, etc. My suggestion is to
initialize them inside the &lt;code&gt;Entry&lt;/code&gt; class and pass them as arguments into
the &lt;code&gt;TsApp&lt;/code&gt; constructor. Then, the &lt;code&gt;TsApp&lt;/code&gt; will pass them into the
constructors of custom &lt;em&gt;takes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example, we have a PostgreSQL database that contains
some table data that we need to render. Here is how I would
initialize a connection to it in the &lt;code&gt;Entry&lt;/code&gt; class (I&amp;#39;m using
a &lt;a href=&quot;http://jolbox.com/&quot;&gt;BoneCP&lt;/a&gt; connection pool):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FtCLI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TsApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NEVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoneCPDataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BoneCPDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDriverClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.postgresql.Driver&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setJdbcUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jdbc:postgresql://localhost/db&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;super-secret-password&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, the constructor of &lt;code&gt;TsApp&lt;/code&gt; must accept a single argument of type
&lt;code&gt;java.sql.Source&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TsApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TsWrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TsApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TsApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Takes&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TsFork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkRegex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Class &lt;code&gt;TkIndex&lt;/code&gt; also accepts a single argument of class &lt;code&gt;Source&lt;/code&gt;. I believe
you know what to do with it inside &lt;code&gt;TkIndex&lt;/code&gt; in order to fetch the SQL
table data and convert it into HTML. The point here is that the dependency
must be injected into the application (instance of class &lt;code&gt;TsApp&lt;/code&gt;) at the
moment of its instantiation. This is a pure and clean dependency injection
mechanism, which is absolutely container-free. Read more about it in
&lt;a href=&quot;/2014/10/03/di-containers-are-evil.html&quot;&gt;&amp;quot;Dependency Injection Containers Are Code Polluters&amp;quot;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;/h2&gt;

&lt;p&gt;Since every class is immutable and all dependencies are injected only
through constructors, unit testing is extremely easy. Let&amp;#39;s say we want
to test &lt;code&gt;TkStatus&lt;/code&gt;, which is supposed to return an HTML response
(I&amp;#39;m using &lt;a href=&quot;http://junit.org/&quot;&gt;JUnit 4&lt;/a&gt; and &lt;a href=&quot;http://www.hamcrest.org/&quot;&gt;Hamcrest&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hamcrest.MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hamcrest.Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkIndexTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;returnsHtmlPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;html&amp;gt;Hello, world!&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also, we can start the entire application or any individual &lt;em&gt;take&lt;/em&gt; in a
test HTTP server and test its behavior via a real TCP socket; for example
(I&amp;#39;m using &lt;a href=&quot;http://http.jcabi.com&quot;&gt;jcabi-http&lt;/a&gt; to make an HTTP request and check the output):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkIndexTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;returnsHtmlPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FtRemote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TsFixed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FtRemote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdkRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RestResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HTTP_OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.takes.org/apidocs-0.9/org/takes/http/FtRemote.html&quot;&gt;&lt;code&gt;FtRemote&lt;/code&gt;&lt;/a&gt;
starts a test web server at a random TCP port and calls the
&lt;code&gt;exec()&lt;/code&gt; method at the provided instance of &lt;code&gt;FtRemote.Script&lt;/code&gt;. The first
argument of this method is a URI of the just-started web server homepage.&lt;/p&gt;

&lt;p&gt;The architecture of Takes framework is very modular and composable. Any
individual &lt;em&gt;take&lt;/em&gt; can be tested as a standalone component, absolutely
independent from the framework and other &lt;em&gt;takes&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-the-name?&quot;&gt;Why the Name?&lt;/h2&gt;

&lt;p&gt;That&amp;#39;s the question I&amp;#39;ve been hearing rather often. The idea is simple, and it
originates from the movie business. When a movie is made, the crew shoots many &lt;em&gt;takes&lt;/em&gt; in order
to capture the reality and put it on film. Each capture is called a &lt;em&gt;take&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In other words, a &lt;em&gt;take&lt;/em&gt; is like a snapshot of the reality.&lt;/p&gt;

&lt;p&gt;The same applies to this framework. Each instance of &lt;code&gt;Take&lt;/code&gt; represents
a reality at one particular moment in time. This reality is then sent to the
user in the form of a &lt;code&gt;Response&lt;/code&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/03/22/takes-java-web-framework.html</guid>
      <dc:date>2015-03-22T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Composable Decorators vs. Imperative Utility Methods</title>
      <link>http://www.yegor256.com/2015/02/26/composable-decorators.html</link>
      <description>&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt;
is my favorite among all other patterns I&amp;#39;m aware of. It is a very simple
and yet very powerful mechanism to make your code
&lt;a href=&quot;http://en.wikipedia.org/wiki/Cohesion_%28computer_science%29&quot;&gt;highly cohesive&lt;/a&gt; and
&lt;a href=&quot;http://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;loosely coupled&lt;/a&gt;.
However, I believe decorators are not used often enough. They should
be everywhere, but they are not. The biggest advantage we get from decorators
is that they make our code &lt;em&gt;composable&lt;/em&gt;. That&amp;#39;s why the title of this
post is composable decorators. Unfortunately, instead of decorators, we often use imperative
utility methods, which make our code procedural rather than object-oriented.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/02/russina-matroshka.jpg' style='width:600px;' alt='Матрёшка'/&gt;&lt;figcaption&gt;Матрёшка&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, a practical example. Here is an interface for an object that is
supposed to read a text somewhere and return it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is an implementation that reads the text from a file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextInFile&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TextInFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAllBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now the decorator, which is another implementation of &lt;code&gt;Text&lt;/code&gt; that
removes all unprintable characters from the text:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PrintableText&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrintableText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[^\p{Print}]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how I&amp;#39;m using it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrintableText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TextInFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/a.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the &lt;code&gt;PrintableText&lt;/code&gt; doesn&amp;#39;t read the text from the file. It doesn&amp;#39;t
really care where the text is coming from. It &lt;em&gt;delegates&lt;/em&gt; text reading to
the encapsulated instance of &lt;code&gt;Text&lt;/code&gt;. How this encapsulated object will
deal with the text and where it will get it doesn&amp;#39;t concern &lt;code&gt;PrintableText&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s continue and try to create an implemetation of &lt;code&gt;Text&lt;/code&gt;
that will capitalize all letters in the text:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AllCapsText&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AllCapsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ENGLISH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How about a &lt;code&gt;Text&lt;/code&gt; that trims the input:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrimmedText&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TrimmedText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I can go on and on with these decorators. I can create many of them,
suitable for their own individual use cases. But let&amp;#39;s see how they all
can play together. Let&amp;#39;s say I want to read the text from the file,
capitalize it, trim it, and remove all unprintable characters. And I want
to be &lt;em&gt;declarative&lt;/em&gt;. Here is what I do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AllCapsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TrimmedText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrintableText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TextInFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/a.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, I create an instance of &lt;code&gt;Text&lt;/code&gt;, &lt;em&gt;composing&lt;/em&gt; multiple decorators into
a single object. I declaratively define the behavior of &lt;code&gt;text&lt;/code&gt; without
actually executing anything. Until method &lt;code&gt;read()&lt;/code&gt; is called, the file is not touched
and the processing of the text is not started. The object &lt;code&gt;text&lt;/code&gt; is just
a composition of decorators, not an executable &lt;em&gt;procedure&lt;/em&gt;. Check out this
article about declarative and imperative styles of programming:
&lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;Utility Classes Have Nothing to Do With Functional Programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This design is much more flexible and reusable than a more traditional one,
where the &lt;code&gt;Text&lt;/code&gt; object is smart enough to perform all said operations. For
example, class &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/String.html&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;
from Java is a good example of a bad design. It has
more than 20 &lt;em&gt;utility methods&lt;/em&gt; that should have been provided as decorators instead: &lt;code&gt;trim()&lt;/code&gt;, &lt;code&gt;toUpperCase()&lt;/code&gt;, &lt;code&gt;substring()&lt;/code&gt;, &lt;code&gt;split()&lt;/code&gt;, and many others, for example.
When I want to trim my string, uppercase it, and then split it into pieces,
here is what my code will look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is imperative and procedural programming. Composable decorators,
on the other hand, would make this code object-oriented and declarative. Something
like this would be great to have in Java instead (pseudo-code):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UpperCased&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Trimmed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To conclude, I recommend you think twice every time you add
a new utility method to the interface/class. Try to avoid utility methods as much
as possible, and use decorators instead. An ideal interface should contain
only methods that you absolutely cannot remove. Everything else should be
done through composable decorators.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/26/composable-decorators.html</guid>
      <dc:date>2015-02-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>A Haircut</title>
      <link>http://www.yegor256.com/2015/02/23/haircut.html</link>
      <description>&lt;p&gt;I received a haircut today, and the niceness of my hairdresser led him to fill the
appointment with courteous questions about how I wanted my hair cut, what size of clipper
he should use, how long the sides should be, and how much should be removed
from the front. He also offered me many types of shampoo and a cup of tea.
All this reminded me of the work we do as programmers, and I
decided to write a short post about it. I&amp;#39;ve already
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;mentioned before&lt;/a&gt;
that trying to make a customer happy is a false objective. This hairdresser
was a perfect illustrative example of this very mistake. By the way, in the end,
I wasn&amp;#39;t happy, and he got no tip. How could this happen if he was so
friendly and nice?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/02/the-man-who-wasnt-there.jpg' style='width:600px;' alt='The Man Who Wasn&amp;amp;apos;t There (2001) by Coen Brothers'/&gt;&lt;figcaption&gt;The Man Who Wasn't There (2001) by Coen Brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m not a hairdresser, and I have very little understanding of how to deal
with hair. I came to him because I assumed he knew more about this
business than I did. I chose him through the assistance of Yelp. I wanted &lt;em&gt;him&lt;/em&gt; to tell me
how long the hair on the sides should be and how much should be removed on the
top. I expected &lt;em&gt;him&lt;/em&gt; to give me his professional judgement and stand by it.&lt;/p&gt;

&lt;p&gt;Instead of asking me how much I wanted removed on the sides, he should have
told me there should be less on the sides. This is what
a true professional would do. A true professional would give me &lt;em&gt;his&lt;/em&gt; vision
of the haircut that best suits me and would try to convince me that
it was the best choice.&lt;/p&gt;

&lt;p&gt;A true professional would not ask me but would &lt;em&gt;tell&lt;/em&gt; me instead, because
he would understand that my goal was not to boss him around and make him do my
hair the way I wanted it. My goal was to get the best out
of his professional skill.&lt;/p&gt;

&lt;p&gt;Unfortunately, the guy was either weak or immature. He didn&amp;#39;t argue with me
and didn&amp;#39;t try to convince me. He tried to &lt;em&gt;please&lt;/em&gt; me. In the end, he
lost.&lt;/p&gt;

&lt;p&gt;Exactly the same thing happens when we ask our customers about
the technologies they want us to use. I hear this question very often:
&lt;em&gt;What language do you want us to use&lt;/em&gt; (meaning Java or Ruby or something else)?
Or &lt;em&gt;what database should we use?&lt;/em&gt; Or &lt;em&gt;how do you want us to design this?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t do that. Don&amp;#39;t lose like that hairdresser. Don&amp;#39;t ask your clients
what they want. Instead, &lt;em&gt;learn&lt;/em&gt; their business requirements and then
&lt;em&gt;suggest&lt;/em&gt; the solution you think is the best for them. Then, insist and argue
if they don&amp;#39;t agree. Convince them. Even if they fire you in the end for
your stubbornness, it&amp;#39;s better than being that hairdresser who is doomed
to please every single client without getting anywhere further.&lt;/p&gt;

&lt;p&gt;Remember, the client is not the king; his hairs are.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/23/haircut.html</guid>
      <dc:date>2015-02-23T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Utility Classes Have Nothing to Do With Functional Programming</title>
      <link>http://www.yegor256.com/2015/02/20/utility-classes-vs-functional-programming.html</link>
      <description>&lt;p&gt;I was recently &lt;a href=&quot;https://twitter.com/lukaseder/status/564866432790708224&quot;&gt;accused&lt;/a&gt; of being against
&lt;a href=&quot;http://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional programming&lt;/a&gt;
because &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;I call utility classes an anti-pattern&lt;/a&gt;.
That&amp;#39;s absolutely wrong! Well, I do consider them a terrible anti-pattern,
but they have nothing to do with functional programming. I believe there are
two basic reasons why. First, functional programming is declarative, while
utility class methods are imperative. Second,
functional programming is based on lambda calculus, where
a function can be assigned to a variable. Utility class methods
are not functions in this sense. I&amp;#39;ll decode these statements in a minute.&lt;/p&gt;

&lt;p&gt;In Java, there are basically two valid alternatives to these ugly utility
classes aggressively promoted by &lt;a href=&quot;https://code.google.com/p/guava-libraries/&quot;&gt;Guava&lt;/a&gt;,
&lt;a href=&quot;http://commons.apache.org/&quot;&gt;Apache Commons&lt;/a&gt;, and others. The first one
is the use of traditional classes, and the second one is &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;Java 8 lambda&lt;/a&gt;.
Now let&amp;#39;s see why utility classes are not even close to functional programming
and where this misconception is coming from.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/02/color-me-kubrick.png' style='width:600px;' alt='Color Me Kubrick (2005) by Brian W. Cook'/&gt;&lt;figcaption&gt;Color Me Kubrick (2005) by Brian W. Cook&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is a typical example of a utility class
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; from Java 1.0:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// a few dozens of other methods of the same style&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how you would use it when you want to calculate an absolute
value of a floating point number:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.1415926d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What&amp;#39;s wrong with it? We need a function, and we get it from class &lt;code&gt;Math&lt;/code&gt;.
The class has many useful functions inside it that can be used for many typical
mathematical operations, like calculating maximum, minimum, sine, cosine, etc.
It is a very popular concept; just look at any commercial or open source product.
These utility classes are used everywhere since Java was invented (this
&lt;code&gt;Math&lt;/code&gt; class was introduced in Java&amp;#39;s first version). Well, technically
there is nothing wrong. The code will work. But it is not object-oriented
programming. Instead, it is imperative and procedural. Do we care? Well,
it&amp;#39;s up to you to decide. Let&amp;#39;s see what the difference is.&lt;/p&gt;

&lt;p&gt;There are basically two different approaches: declarative and imperative.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Imperative_programming&quot;&gt;Imperative programming&lt;/a&gt;
is focused on describing &lt;strong&gt;how&lt;/strong&gt; a program operates
in terms of statements that change a program state. We just saw an example
of imperative programming above. Here is another (this is pure imperative/procedural
programming that has nothing to do with OOP):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;Declarative programming&lt;/a&gt;
focuses on &lt;strong&gt;what&lt;/strong&gt; the program should accomplish without prescribing
how to do it in terms of sequences of actions to be taken. This is how
the same code would look in Lisp, a functional programming language:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What&amp;#39;s the catch? Just a difference in syntax? Not really.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;http://en.wikipedia.org/wiki/Comparison_of_programming_paradigms&quot;&gt;many definitions&lt;/a&gt;
of the difference between imperative and declarative styles, but I will try to
give my own. There are basically three roles interacting in the scenario
with this &lt;code&gt;f&lt;/code&gt; function/method: a &lt;em&gt;buyer&lt;/em&gt;, a &lt;em&gt;packager&lt;/em&gt; of the result,
and a &lt;em&gt;consumer&lt;/em&gt; of the result. Let&amp;#39;s say I call this function like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;max+abs equals to &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, method &lt;code&gt;calc()&lt;/code&gt; is a buyer, method &lt;code&gt;Math.f()&lt;/code&gt; is a packager of the result,
and method &lt;code&gt;foo()&lt;/code&gt; is a consumer. No matter which programming style is used,
there are always these three guys participating in the process:
the buyer, the packager, and the consumer.&lt;/p&gt;

&lt;p&gt;Imagine you&amp;#39;re a buyer and want to purchase a gift for your (girl|boy)friend. The first
option is to visit a shop, pay $50, let them package that perfume for you,
and then deliver it to the friend (and get a kiss in return). This is an &lt;strong&gt;imperative&lt;/strong&gt; style.&lt;/p&gt;

&lt;p&gt;The second option is to visit a shop, pay $50, and get a gift card. You then
present this card to the friend (and get a kiss in return). When he or she decides to convert it
to perfume, he or she will visit the shop and get it. This
is a &lt;strong&gt;declarative&lt;/strong&gt; style.&lt;/p&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;In the first case, which is imperative, you force the packager (a beauty shop)
to find that perfume in stock, package it, and present it to you as
a ready-to-be-used product. In the second scenario, which is declarative,
you&amp;#39;re just getting a promise from the shop that eventually, when it&amp;#39;s
necessary, the staff will find the perfume in stock, package it, and provide it to
those who need it. If your friend never visits the shop with that gift card,
the perfume will remain in stock.&lt;/p&gt;

&lt;p&gt;Moreover, your friend can use that gift card as a product itself, never
visiting the shop. He or she may instead present it to somebody else as a gift
or just exchange it for another card or product. The gift card itself
becomes a product!&lt;/p&gt;

&lt;p&gt;So the difference is what the consumer is getting &amp;mdash; either a
product ready to be used (imperative) or a voucher for the product, which
can later be converted into a real product (declarative).&lt;/p&gt;

&lt;p&gt;Utility classes, like &lt;code&gt;Math&lt;/code&gt; from JDK or &lt;code&gt;StringUtils&lt;/code&gt; from Apache Commons,
return products ready to be used immediately, while functions in Lisp
and other functional languages return &amp;quot;vouchers&amp;quot;. For example, if you
call the &lt;code&gt;max&lt;/code&gt; function in Lisp, the actual maximum between two numbers
will only be calculated when you actually start using it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;X equals to &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Until this &lt;code&gt;print&lt;/code&gt; actually starts to output characters to the
screen, the function &lt;code&gt;max&lt;/code&gt; won&amp;#39;t be called. This &lt;code&gt;x&lt;/code&gt; is a &amp;quot;voucher&amp;quot; returned
to you when you attempted to &amp;quot;buy&amp;quot; a maximum between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note, however, that nesting Java static functions one into another doesn&amp;#39;t
make them declarative. The code is still imperative, because its execution
delivers the result here and now:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;quot;Okay,&amp;quot; you may say, &amp;quot;I got it, but why is declarative style better than imperative?
What&amp;#39;s the big deal?&amp;quot; I&amp;#39;m getting to it. Let me first show the difference
between functions in functional programming and static methods in OOP.
As mentioned above, this is the second big difference between utility
classes and functional programming.&lt;/p&gt;

&lt;p&gt;In any functional programming language, you can do this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, later, you can call that &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;defining&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;passing&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Static methods in Java are not &lt;em&gt;functions&lt;/em&gt; in terms of functional programming.
You can&amp;#39;t do anything like this with a static method. You can&amp;#39;t pass a static
method as an argument to another method. Basically, static
methods are procedures or, simply put, Java statements grouped under a unique
name. The only way to access them is to call a procedure and pass all
necessary arguments to it. The procedure will calculate something and return
a result that is immediately ready for usage.&lt;/p&gt;

&lt;p&gt;And now we&amp;#39;re getting to the final question I can hear you asking:
&amp;quot;Okay, utility classes are not functional programming, but they look like
functional programming, they work very fast, and they are very easy to
use. Why not use them? Why aim for perfection when 20 years of Java history
proves that utility classes are the main instrument of each Java developer?&amp;quot;&lt;/p&gt;

&lt;p&gt;Besides OOP fundamentalism, which I&amp;#39;m very often accused of, there are
a few very practical reasons (BTW, I am an OOP fundamentalist):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testability&lt;/strong&gt;.
Calls to static methods in utility classes are hard-coded dependencies that
can never be broken for testing purposes. If your class is calling
&lt;code&gt;FileUtils.readFile()&lt;/code&gt;, I will never be able to test it without using
a real file on disk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Efficiency&lt;/strong&gt;.
Utility classes, due to their imperative nature, are much less efficient
than their &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;declarative alternatives&lt;/a&gt;.
They simply do all calculations right here and now, taking processor
resources even when it&amp;#39;s not yet necessary. Instead of returning a promise
to break down a string into chunks, &lt;code&gt;StringUtils.split()&lt;/code&gt; breaks it down
right now. And it breaks it down into all possible chunks, even if only
the first one is required by the &amp;quot;buyer&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Readability&lt;/strong&gt;.
Utility classes tend to be huge (try to read the source code of &lt;code&gt;StringUtils&lt;/code&gt;
or &lt;code&gt;FileUtils&lt;/code&gt; from Apache Commons). The entire idea of separation of concerns,
which makes OOP so beautiful, is absent in utility classes. They just
put all possible procedures into one huge &lt;code&gt;.java&lt;/code&gt; file, which becomes
absolutely unmaintainable when it surpasses a dozen static methods.&lt;/p&gt;

&lt;p&gt;To conclude, let me reiterate: Utility classes have nothing to do
with functional programming. They are simply bags of static methods, which
are imperative procedures. Try to stay as far as possible away from them and
use solid, cohesive objects no matter how many of them you have to declare
and how small they are.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/20/utility-classes-vs-functional-programming.html</guid>
      <dc:date>2015-02-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Code For the User, Not for Yourself</title>
      <link>http://www.yegor256.com/2015/02/12/top-down-design.html</link>
      <description>&lt;p&gt;First, no matter what the methodology is, we all write software for our
users (a.k.a. customers, project sponsors, end users, or clients). Second,
no matter what the methodology is, we write incrementally, releasing
features and bug fixes one by one. Maybe I&amp;#39;m saying something absolutely obvious here,
but it&amp;#39;s important to remember that each new version should first of all satisfy
the needs of the user, not of us programmers. In other words, the way
we decompose a big task into smaller pieces should be user-targeted, and that&amp;#39;s
why you always work &lt;strong&gt;top down&lt;/strong&gt;. Let&amp;#39;s see what I mean through a practical example.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/02/delicatessen.png' style='width:600px;' alt='Delicatessen (1991) by Jean-Pierre Jeunet'/&gt;&lt;figcaption&gt;Delicatessen (1991) by Jean-Pierre Jeunet&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Say I&amp;#39;m contracted by a friend of mine to create a word-counting command line
tool very similar to &lt;a href=&quot;http://en.wikipedia.org/wiki/Wc_%28Unix%29&quot;&gt;wc&lt;/a&gt;. He
promised to pay me $200 for this work, and I promised him I&amp;#39;d deliver the
product in two increments &amp;mdash; an alpha and beta version. I promised him
I&amp;#39;d release the alpha version on Saturday and the beta version on Sunday. He is
going to pay me $100 after the first release and the rest after the second release.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll write in C, and he will pay in cash.&lt;/p&gt;

&lt;p&gt;The tool is very primitive, and it only took me a few minutes to write. Take a look at it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STDIN_FILENO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But let&amp;#39;s be professional and not forget about build automation and unit
testing. Here is a simple &lt;code&gt;Makefile&lt;/code&gt; that does them both:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-makefile&quot; data-lang=&quot;makefile&quot;&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wc&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  gcc -o wc wc.c
&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wc&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ./wc &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, world! How are you?&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ./wc &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I run &lt;code&gt;make&lt;/code&gt; from a command line and get this output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ make
echo &amp;#39;&amp;#39; | ./wc | grep &amp;#39;0&amp;#39;
0
echo &amp;#39;Hello, world! How are you?&amp;#39; | ./wc | grep &amp;#39;5&amp;#39;
5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All clean!&lt;/p&gt;

&lt;p&gt;I&amp;#39;m ready to get my $200. Wait, the deal was to deliver two
versions and get cash in two installments. Let&amp;#39;s back up a little and
think &amp;mdash; how can we break this small tool into two parts?&lt;/p&gt;

&lt;p&gt;On first thought, let&amp;#39;s release the tool itself first and
build automation and testing next. Is that a good idea? Can we
deliver any software without running it first with a test? How can I be
sure that it works if I don&amp;#39;t ship tests together with it? What will my friend
think about me releasing anything without tests? This would be
a total embarassment.&lt;/p&gt;

&lt;p&gt;Okay, let&amp;#39;s release &lt;code&gt;Makefile&lt;/code&gt; first and &lt;code&gt;wc.c&lt;/code&gt; next. But what will my
friend do with a couple of tests and no product in hand? This first
release will be absolutely pointless, and I won&amp;#39;t get my $100.&lt;/p&gt;

&lt;p&gt;Now we&amp;#39;re getting to the point of this article. What I&amp;#39;m trying to say
is that every new increment must add some value to the product as it
is perceived by the customer, not by us programmers. The &lt;code&gt;Makefile&lt;/code&gt; is
definitely a valuable artifact, but it provides no value to my friend.
He doesn&amp;#39;t need it, but I need it.&lt;/p&gt;

&lt;p&gt;Here is what I&amp;#39;m going to do. I&amp;#39;ll release a skeleton of the tool, backed
by the tests but with an absolutely dummy implementation. Look at it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;5&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And I will modify the &lt;code&gt;Makefile&lt;/code&gt; accordingly. I will disable the first test
to make sure the build passes.&lt;/p&gt;

&lt;p&gt;Does my tool work? Yes, it does. Does it count words? Yes, it does for
some inputs. Does it have value to my friend. Obviously! He
can run it from the command line, and he can pass a file as an input. He will
always get number &amp;quot;5&amp;quot; as a result of counting, though. That&amp;#39;s a bummer, but it&amp;#39;s
an alpha version. He doesn&amp;#39;t expect it to work perfectly.&lt;/p&gt;

&lt;p&gt;However, it works, it is backed by tests, and it is properly packaged.&lt;/p&gt;

&lt;p&gt;What I just did is a top-down approach to design. First of all, I created
something that provides value to my customer. I made sure it also satisfies
my technical objectives, like proper unit test coverage and build automation.
But the most important goal for me was to make sure my friend received
something ... and paid me.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/12/top-down-design.html</guid>
      <dc:date>2015-02-12T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Don't Repeat Yourself in Maven POMs; Use Jcabi-Parent</title>
      <link>http://www.yegor256.com/2015/02/05/jcabi-parent-maven-pom.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Maven is a build automation tool mostly for Java projects. It&amp;#39;s a great
tool, but it has one important drawback that has motivated the creation
of similar tools, like Gradle and SBT. That weakness is its verbosity of configuration.
Maven gets all project build parameters from &lt;code&gt;pom.xml&lt;/code&gt;, an XML
file that can get very long. I&amp;#39;ve seen POM files of 3,000-plus lines.
Taking into account 1) recent DSL buzz and 2) fear of XML, it&amp;#39;s
only logical that many people don&amp;#39;t like Maven because of its &lt;code&gt;pom.xml&lt;/code&gt; verbosity.&lt;/p&gt;

&lt;p&gt;But even if you&amp;#39;re an XML fan who enjoys its strictness and elegance
(like myself), you won&amp;#39;t like the necessity to repeat yourself in &lt;code&gt;pom.xml&lt;/code&gt;
for every project. If you&amp;#39;re working on multiple projects, code duplication
will be enormous. An average Java web app uses a few dozen standard Maven plugins
and almost the same number of pretty common dependencies, like
JUnit, Apache Commons, Log4J, Mockito, etc. All of them have their versions
and configurations, which have to be specified if you want to keep
the project stable and avoid Maven warnings. Thus, once a new version
of a plugin is released, you have to go through all &lt;code&gt;pom.xml&lt;/code&gt; files in
the projects you&amp;#39;re working on and update it there. You obviously understand
what code duplication means. It&amp;#39;s a disaster. However, there is a solution.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;http://parent.jcabi.com&quot;&gt;jcabi-parent&lt;/a&gt; is a very simple Maven dependency
with nothing inside it except a large &lt;code&gt;pom.xml&lt;/code&gt; with multiple pre-configured
dependencies, profiles, and plugins. All you need to do in order to reuse them
all in your project is define &lt;code&gt;com.jcabi:parent&lt;/code&gt; as your parent POM:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.jcabi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- check the latest version at http://parent.jcabi.com --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.32.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#39;s all you need. Now you can remove most of your custom configurations
from &lt;code&gt;pom.xml&lt;/code&gt; and rely on defaults provided by jcabi-parent. Its
&lt;a href=&quot;https://github.com/jcabi/jcabi-parent/blob/master/pom.xml&quot;&gt;&lt;code&gt;pom.xml&lt;/code&gt;&lt;/a&gt;
is rather large and properly configured. Multiple projects depend on it, so you
can be confident that you&amp;#39;re using the best possible configuration of
all standard plugins.&lt;/p&gt;

&lt;p&gt;Here are a few examples of &lt;code&gt;pom.xml&lt;/code&gt; from projects that are using
jcabi-parent (you can see how compact they are):
&lt;a href=&quot;https://github.com/yegor256/xembly/blob/master/pom.xml&quot;&gt;Xembly&lt;/a&gt;
&lt;a href=&quot;https://github.com/yegor256/rexsl/blob/master/pom.xml&quot;&gt;ReXSL&lt;/a&gt;
&lt;a href=&quot;https://github.com/jcabi/jcabi-http/blob/master/pom.xml&quot;&gt;jcabi-http&lt;/a&gt;
&lt;a href=&quot;https://github.com/teamed/qulice/blob/master/pom.xml&quot;&gt;Qulice&lt;/a&gt;&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/05/jcabi-parent-maven-pom.html</guid>
      <dc:date>2015-02-05T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>XSL Transformation in Java: An Easy Way</title>
      <link>http://www.yegor256.com/2015/02/02/xsl-transformations-in-java.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/xslt20/&quot;&gt;XSL transformation&lt;/a&gt;
(XSLT) is a powerful mechanism for converting one
XML document into another. However, in Java, XML manipulations
are rather verbose and complex. Even for a simple XSL transformation,
you have to write a few dozen lines of code &amp;mdash; and maybe even more
than that if proper exception handling and logging is needed.
&lt;a href=&quot;http://xml.jcabi.com&quot;&gt;jcabi-xml&lt;/a&gt; is
a small open source library that makes life much easier by enabling
XML parsing and XPath traversing with
&lt;a href=&quot;/2014/04/24/java-xml-parsing-and-traversing.html&quot;&gt;a few simple methods&lt;/a&gt;. Let&amp;#39;s
see how this library helps in XSL transformations.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, take a look at a practical example &amp;mdash; &lt;a href=&quot;http://www.rultor.com&quot;&gt;rultor.com&lt;/a&gt; &amp;mdash;
a hosted DevOps assistant that
&lt;a href=&quot;/&quot;&gt;automates&lt;/a&gt;
release, merge, and deploy operations. Rultor keeps each conversation session with an end user (a.k.a. &amp;quot;talk&amp;quot;)
in a DynamoDB record. There are multiple situations to handle
in each talk; that&amp;#39;s why using multiple columns of a record is not
really feasible. Instead, we&amp;#39;re keeping only a few parameters of each talk
in record columns (like ID and name) and putting all the rest in a single
XML column.&lt;/p&gt;

&lt;p&gt;This is approximately how our DynamoDB table looks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;+----+---------------+--------------------------------------+
| id | name          | xml                                  |
+----+---------------+--------------------------------------+
| 12 | jcabi-xml#54  | &amp;lt;?xml version=&amp;#39;1.0&amp;#39;?&amp;gt;                |
|    |               | &amp;lt;talk public=&amp;quot;true&amp;quot;&amp;gt;                 |
|    |               |   &amp;lt;request id=&amp;quot;e5f4b3&amp;quot;&amp;gt;...&amp;lt;/request&amp;gt; |
|    |               | &amp;lt;/talk&amp;gt;                              |
+----+---------------+--------------------------------------+
| 13 | jcabi-email#2 | &amp;lt;?xml version=&amp;#39;1.0&amp;#39;?&amp;gt;                |
|    |               | &amp;lt;talk public=&amp;quot;true&amp;quot;&amp;gt;                 |
|    |               |   &amp;lt;daemon id=&amp;quot;f787fe&amp;quot;&amp;gt;...&amp;lt;/daemon&amp;gt;   |
|    |               | &amp;lt;/talk&amp;gt;                              |
+----+---------------+--------------------------------------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once a user posts &lt;code&gt;@rultor status&lt;/code&gt; into a Github ticket, Rultor
has to answer with a full status report about the current talk. In order
to create such a text answer (a regular user would not appreciate an XML response),
we have to fetch that &lt;code&gt;xml&lt;/code&gt; column from the necessary DynamoDB record and convert
it to plain English text.&lt;/p&gt;

&lt;p&gt;Here is how we&amp;#39;re doing that with the help of &lt;a href=&quot;http://xml.jcabi.com&quot;&gt;jcabi-xml&lt;/a&gt; and its
class, &lt;a href=&quot;http://xml.jcabi.com/apidocs-0.15/com/jcabi/xml/XSLDocument.html&quot;&gt;&lt;code&gt;XSLDocument&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// comes from DynamoDB&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XSL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xsl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XSLDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;status.xsl&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#39;s it. Now let&amp;#39;s see what&amp;#39;s there in that &lt;code&gt;status.xsl&lt;/code&gt; file
(this is just a skeleton of it; the full version is &lt;a href=&quot;https://github.com/yegor256/rultor/blob/1.48/src/main/resources/com/rultor/agents/github/qtn/status.xsl&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/talk&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;Hi, here is your status report:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;node()|@*&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:copy&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;node()|@*&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:copy&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is good practice to create XSL documents only once per application
run. We have a static utility method &lt;a href=&quot;http://xml.jcabi.com/apidocs-0.15/com/jcabi/xml/XSLDocument.html#make%28java.io.InputStream%29&quot;&gt;&lt;code&gt;XSLDocument.make()&lt;/code&gt;&lt;/a&gt; for this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XSL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STYLESHEET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XSLDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet.xsl&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XML&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XML&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STYLESHEET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pay attention to the fact we&amp;#39;re using XSLT 2.0. Built-in Java implementation of XSLT
doesn&amp;#39;t support version 2.0, and in order to make it work, we&amp;#39;re using
these two Maven Saxon dependencies:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.sourceforge.saxon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;saxon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;9.1.0.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.sourceforge.saxon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;saxon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;9.1.0.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;classifier&amp;gt;&lt;/span&gt;xpath&lt;span class=&quot;nt&quot;&gt;&amp;lt;/classifier&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All you need to do to start using &lt;code&gt;jcabi-xml&lt;/code&gt; for XSL transformations is
add this dependency to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.jcabi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jcabi-xml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you have any problems or suggestions, don&amp;#39;t hesitate to submit an issue
to the Github &lt;a href=&quot;https://github.com/jcabi/jcabi-xml/issues&quot;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/02/xsl-transformations-in-java.html</guid>
      <dc:date>2015-02-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Making Your Boss Happy Is a False Objective</title>
      <link>http://www.yegor256.com/2015/01/26/happy-boss-false-objective.html</link>
      <description>&lt;p&gt;We all have bosses. We also have customers who pay us for running
their software projects. They are my bosses for the time of the contract. I&amp;#39;m also
acting as a boss for developers who are working for &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;.
It is obvious that a good employee/contractor is one who makes his
boss/customer happy. But only a bad employee works toward
this goal. Trying to make your boss happy is a false target that,
if pursued, ruins the project. A professional employee works
for the project, not for the boss.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/the-million-dollar-hotel.png' style='width:600px;' alt='The Million Dollar Hotel (2000) by Wim Wenders'/&gt;&lt;figcaption&gt;The Million Dollar Hotel (2000) by Wim Wenders&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;We all work on &lt;strong&gt;projects&lt;/strong&gt; as developers, designers, programmers, managers,
testers, you name it. The boss is also a member of the project. More
formally, he or she is a &lt;strong&gt;stakeholder&lt;/strong&gt;, same as every one of us. Each stakeholder
has his own &lt;strong&gt;needs&lt;/strong&gt; for the project: 1) Jeff, the developer, wants to learn Scala
and collect his paychecks every two weeks; 2) Sally, the product owner,
wants to attend an expo in Paris and also collect her paychecks;
3) Bob, the CTO, wants to raise round A funding and collect a big paycheck; etc.&lt;/p&gt;

&lt;p&gt;The project has its own &lt;strong&gt;objectives&lt;/strong&gt;, to achieve 1 million downloads
in less than six months and under $300,000, for example.
This is what the project works for. This is what all of us are here for.&lt;/p&gt;

&lt;p&gt;Our personal needs may be fully satisfied
while we&amp;#39;re all working toward this goal, or some of them may
be sacrificed. I mean all of us, including the boss, whoever he or she is,
either a CTO, a co-founder, a project manager, or a team lead.&lt;/p&gt;

&lt;p&gt;The project is the source of our checks. Not the CFO.&lt;/p&gt;

&lt;p&gt;The CFO is a stakeholder, like everyone else. The project gives him more
power than others because it&amp;#39;s necessary for the whole mechanism to
work properly. Every project member has his or her own &lt;strong&gt;roles and responsibilities&lt;/strong&gt;.
I write code; the CFO writes checks. I eat at McDonalds; he drives
a Jaguar. We have different needs, and we both agreed that the project
would satisfy them. Otherwise we wouldn&amp;#39;t be here, right?&lt;/p&gt;

&lt;p&gt;We&amp;#39;re all parts of a mechanism called a &amp;quot;project&amp;quot;, which works according
to the rules and principles of &lt;strong&gt;project management&lt;/strong&gt; whether we are aware of
them or not. Whether we have a project manager or not. Even if we violate
all of them and manage ourselves in total chaos, we still have a scope,
cost, schedule, and all other attributes of project management.&lt;/p&gt;

&lt;p&gt;A professional and savvy boss understands that his role in the mechanism
is to clearly define project objectives and make sure everybody&amp;#39;s needs are
aligned with those objectives. In a properly managed and organized project,
everybody sees and feels how his or her personal needs are satisfied
when the project achieves its objectives: Jeff learns Scala, Sally
sees Paris, and Bob buys a new house.&lt;/p&gt;

&lt;p&gt;However, if Jeff wants to learn Scala and we&amp;#39;re
developing an iOS application, that is a problem for the boss to resolve.
Either convince Jeff to fall in love with Swift (I doubt that&amp;#39;s possible)
or replace him with someone who is already in love with it. It&amp;#39;s clear that
a professional boss will resort to such a tragic act as firing Jeff
not because of his personal feelings towards Jeff but because
they are both working toward the project objectives. Jeff and the boss
will both understand that Jeff&amp;#39;s need to learn Scala is not aligned
with the objective of the project.&lt;/p&gt;

&lt;p&gt;It is the CTO&amp;#39;s responsibility to do something about Jeff when his personal
needs become misaligned with the objectives of the project that is paying
his salary. A professional CEO understands that and
always acts in the best interest of the project, not of himself or
anyone else personally.&lt;/p&gt;

&lt;p&gt;I believe a professional team player does two things:
&lt;strong&gt;obeys and resists&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, you have to understand that the boss is here in order
to help you organize your time, your tasks, your communications,
your plans, etc. He knows more about the project and uses that
information to help you do your job. Your real boss is the project;
the boss you interact with is just a hired manager who translates
project objectives into plans, instructions, schedules, etc.&lt;/p&gt;

&lt;p&gt;This boss is your colleague who does management while you&amp;#39;re
writing code. You&amp;#39;re both equal. You and he are in the same boat. Your
functions are different than his; that&amp;#39;s all. You&amp;#39;re not working
&lt;em&gt;for&lt;/em&gt; him but &lt;em&gt;with&lt;/em&gt; him on a project. A true professional team player
feels himself equal to all other members of the project, no matter
how high they are in the hierarchy.&lt;/p&gt;

&lt;p&gt;At the same time, he strictly follows the process and
obeys all project rules and instructions, not because he is afraid of
being fired but because he wants the project to succeed.&lt;/p&gt;

&lt;p&gt;Second, being a professional team player requires a constant readiness
to resist each and every instruction if you feel it contradicts
the project objectives. A true professional doesn&amp;#39;t work for a boss.
He doesn&amp;#39;t want to make the boss happy. He actually doesn&amp;#39;t care whether the
boss is happy or not. He knows that the real boss is the project and tries
to make the project successful and ... happy.&lt;/p&gt;

&lt;p&gt;A true professional always works for himself. Jeff wants to learn Scala
and earn a certain amount of cash. He joined the project in order to satisfy these
needs. If the project fails, Jeff won&amp;#39;t get the money and won&amp;#39;t fully learn Scala.
So if the boss tells Jeff to do something that may jeopardize the
project&amp;#39;s success, will Jeff do it? Does he care about disappointing the boss?
Absolutely not. All he cares about is the project&amp;#39;s success, which translates to his
personal success.&lt;/p&gt;

&lt;p&gt;Thus, making your boss happy is a goal for the immature, fearsome, lazy, and weak.
Making your project successful is an objective for professional,
strong, mature, and brave team players.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/26/happy-boss-false-objective.html</guid>
      <dc:date>2015-01-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>If. Then. Throw. Else. WTF?</title>
      <link>http://www.yegor256.com/2015/01/21/if-then-throw-else.html</link>
      <description>&lt;p&gt;This is the code I could never understand:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X can&amp;#39;t be negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is positive or zero&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have been trying to find a proper metaphor to explain its incorrectness.
Today I finally found it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;If-then-else is a forking mechanism of procedural programming. The CPU
either goes to the left and &lt;strong&gt;then&lt;/strong&gt; does something or goes to the right and
does something &lt;strong&gt;else&lt;/strong&gt;. Imagine yourself driving a car and seeing this sign:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/if-then-throw-1.png' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;It looks logical, doesn&amp;#39;t it? You can go in the left lane if you&amp;#39;re not driving a truck.
Otherwise you should go in the right lane. Both lanes meet up
in a while. No matter which one you choose, you will end up on the same road.
This is what this code block does:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is positive or zero&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, try to imagine this sign:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/if-then-throw-2.png' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;It looks very strange to me, and you will never see this sign anywhere
simply because a dead end means an &lt;em&gt;end&lt;/em&gt;, a full stop, a finish.
What is the point of drawing a lane
after the dead end sign? There is no point.&lt;/p&gt;

&lt;p&gt;This is how a proper sign would look:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/if-then-throw-3.png' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;This is how a proper code block would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X can&amp;#39;t be negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is positive or zero&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The same is true for loops. This is wrong:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;found positive number&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this is right:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;found positive number&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is no road after the dead end! If you draw it, your code looks
like this very funny snippet I found a few years ago reviewing
sources written by some very well-paid developer in one very serious
company:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don&amp;#39;t do this.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/21/if-then-throw-else.html</guid>
      <dc:date>2015-01-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Cut Corners and Stay Cool</title>
      <link>http://www.yegor256.com/2015/01/15/how-to-cut-corners.html</link>
      <description>&lt;p&gt;You have a task assigned to you, and you don&amp;#39;t like it. You are simply
not in the mood. You don&amp;#39;t know how to fix that damn bug. You have no idea
how that bloody module was designed, and you don&amp;#39;t know how it works. But
you have to fix the issue, which was reported by someone who has no clue how
this software works. You get frustrated and blame that stupid project manager and
programmers who were fired two years ago. You spend hours just to find out
how the code works. Then even more hours trying to fix it. In the end,
you miss the deadline and &lt;strong&gt;everybody blames you&lt;/strong&gt;. Been there, done that?&lt;/p&gt;

&lt;p&gt;There is, however, an alternative approach that provides a professional exit
from this situation. Here are some tips I recommend to my peers who code with me
in &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt; projects.
In a nutshell, I&amp;#39;m going to explain how you can &lt;strong&gt;cut corners&lt;/strong&gt; and remain
professional, 1) protecting your nerves, 2) optimizing your project&amp;#39;s expenses,
and 3) increasing the quality of the source code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is a list of options you have, in order of preference. I would
recommend you start with the first one on the list and proceed down when you
have to.&lt;/p&gt;

&lt;h2 id=&quot;create-dependencies,-blame-them,-and-wait&quot;&gt;Create Dependencies, Blame Them, and Wait&lt;/h2&gt;

&lt;p&gt;This is the first and most preferable option. If you can&amp;#39;t figure out
how to fix an issue or how to implement a new feature, it&amp;#39;s a fault
of the project, not you. Even if you can&amp;#39;t figure it out because you
don&amp;#39;t know anything about Ruby and they hired you to fix bugs
in a Ruby on Rails code base &amp;mdash; it&amp;#39;s their fault. Why did they hire
you when you know nothing about Ruby?&lt;/p&gt;

&lt;p&gt;So be positive; don&amp;#39;t blame yourself. If you don&amp;#39;t know how this
damn code works, it&amp;#39;s a fault of the code, not you. Good code is
easy to understand and maintain.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-1.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Don&amp;#39;t try to eat spaghetti code; complain to the chef and ask
him or her to cook something better (BTW, I love spaghetti).&lt;/p&gt;

&lt;p&gt;How can you do that? Create dependencies &amp;mdash; new bugs complaining
about unclear design, lack of unit tests, absence of necessary classes, or
whatever. Be creative and offensive &amp;mdash; in a constructive and professional way,
of course. Don&amp;#39;t get personal. No matter who cooked that spaghetti, you have
nothing against him or her personally. You just want another dish, that&amp;#39;s all.&lt;/p&gt;

&lt;p&gt;Once you have those dependencies reported, explain in the main ticket
that you can&amp;#39;t continue until all of them are resolved. You will
legally stop working, and someone else will improve the code you need. Later,
when all dependencies are resolved and the code looks better, try to
get back to it again. If you still see issues, create new dependencies.
Keep doing this until the code in front of you is clean and easy to fix.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t be a hero &amp;mdash; don&amp;#39;t rush into fixing the bad code you inherited. Think
&lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;like a developer, not a hacker&lt;/a&gt;.
Remember that your first and most important responsibility as
a disciplined engineer is to help the project &lt;strong&gt;reveal&lt;/strong&gt; maintainability issues.
Who will fix them and how is the responsibility of a project manager.
Your job is to reveal, not to hide. By being a hero and trying to fix everything
in the scope of a single task, you&amp;#39;re not doing the project a favor
&amp;mdash; you&amp;#39;re concealing the problem(s).&lt;/p&gt;

&lt;p&gt;Edit: Another good example of a dependency may be a question raised
at, for example, StackOverflow.com or a user list of a third-party library.
If you can&amp;#39;t find a solution yourself and the problem is outside of the scope
of your project &amp;mdash; submit a question to SO and put its link to the
source code (in JavaDoc block, for example).&lt;/p&gt;

&lt;h2 id=&quot;demand-better-documentation-and-wait&quot;&gt;Demand Better Documentation and Wait&lt;/h2&gt;

&lt;p&gt;All dependencies are resolved and the code looks clean, but you still
don&amp;#39;t understand how to fix the problem or implement a new feature. It&amp;#39;s
too complex. Or maybe you just don&amp;#39;t know how this library works. Or you&amp;#39;ve
never done anything like that before. Anyhow, you can&amp;#39;t continue because
you don&amp;#39;t understand. And in order to understand, you will need a lot of time &amp;mdash;
much more than you have from your project manager or your Scrum board. What
do you do?&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-2.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Again, think positively and don&amp;#39;t blame yourself. If the software is not
clear enough for a total stranger, it&amp;#39;s &amp;quot;their&amp;quot; fault, not yours. They created
the software in a way that&amp;#39;s difficult to digest and modify. But the code is
clean; it&amp;#39;s not spaghetti anymore. It&amp;#39;s a perfectly cooked lobster, but
you don&amp;#39;t know how to eat lobster! You&amp;#39;ve never ate it before.&lt;/p&gt;

&lt;p&gt;The chef did a good job; he cooked it well, but the restaraunt didn&amp;#39;t give
you any instructions on how to eat such a sophisticated dish. What do you do?&lt;/p&gt;

&lt;p&gt;You ask for a manual. You ask for documentation. Properly designed
and written source code must be properly documented. Once you see that
something is not clear for you, create new dependencies that ask for better
documentation of certain aspects of the code.&lt;/p&gt;

&lt;p&gt;Again, don&amp;#39;t be a hero and try to understand everything yourself. Of course
you&amp;#39;re a smart guy, but the project doesn&amp;#39;t need a single smart guy. The
project needs maintainable code that is easy to modify, even by someone
who is not as smart as yourself. So do your project a favor: reveal the
documentation issue, and ask someone to fix it for you. Not just for you,
for everybody. The entire team will benefit from such a request.
Once the documentation is fixed, you will continue with your
task, and everybody will get source code that is a bit better than it
was before. Win-win, isn&amp;#39;t it?&lt;/p&gt;

&lt;h2 id=&quot;reproduce-the-bug-and-call-it-a-day&quot;&gt;Reproduce the Bug and Call It a Day&lt;/h2&gt;

&lt;p&gt;Now the code is clean, the documentation is good enough,
but you&amp;#39;re stuck anyway. What to do?
Well, I&amp;#39;m a big fan of test-driven development, so my next suggestion would be
to create a test that reproduces the bug. Basically, this is what you should start
every ticket with, be it a bug or a feature. Catch the bug with a unit test!
Prove that the bug exists by failing the build with a new test.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=7SI6P3M636MLCO5E'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/working-effectively-with-legacy-code.png' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;This may be rather difficult to achieve, especially when the software you&amp;#39;re
trying to fix or modify was written by &lt;span class=&quot;strike&quot;&gt;idiots&lt;/span&gt;
someone who had no idea about unit testing. There are plenty of techniques
that may help you find a way to make such software more testable. I would
highly recommend you read
&lt;a href=&quot;http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=7SI6P3M636MLCO5E&quot;&gt;Working Effectively with Legacy Code&lt;/a&gt;
by Michael Feathers. There are many different patterns, and most of them work.&lt;/p&gt;

&lt;p&gt;Once you manage to reproduce the bug and the build fails, stop right there.
That&amp;#39;s more than enough for a single piece of work. Skip the test
(for example, using &lt;code&gt;@Ignore&lt;/code&gt; annotation in JUnit 4) and commit your changes.
Then add documentation to the unit test you just created, preferably in the
form of a &lt;code&gt;@todo&lt;/code&gt;. Explain there that you managed to reproduce the problem
but didn&amp;#39;t have enough time to fix it. Or maybe you just don&amp;#39;t know how to
fix it. Be honest and give all possible details.&lt;/p&gt;

&lt;p&gt;I believe that catching a bug with a unit test is, in most cases, more than 80% of success.
The rest is way more simple: just fix the code and make the test pass. Leave
this job to someone else.&lt;/p&gt;

&lt;h2 id=&quot;prove-a-bug&amp;#39;s-absence&quot;&gt;Prove a Bug&amp;#39;s Absence&lt;/h2&gt;

&lt;p&gt;Very often you simply can&amp;#39;t reproduce a bug. That&amp;#39;s not because the code is not
testable and can&amp;#39;t be used in a unit test but because you can&amp;#39;t reproduce
an error situation. You know that the code crashes in production, but you can&amp;#39;t
crash it in a test. The error stack trace reported by the end user or your
production logging system is not reproducable. It&amp;#39;s a very common situation.
What do you do?&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-3.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;I think the best option here is to create a test that will prove that
the code works as intended. The test won&amp;#39;t fail, and the build will remain clean.
You will commit it to the repository and ... report that the problem is solved.
You will say that the reported bug doesn&amp;#39;t really exist in real life. You
will state that there is no bug &amp;mdash; &amp;quot;our software works correctly; here
is the proof: see my new unit test.&amp;quot;&lt;/p&gt;

&lt;p&gt;Will they believe you? I don&amp;#39;t think so, but they don&amp;#39;t have a choice. They
can&amp;#39;t push you any further. You&amp;#39;ve already done something &amp;mdash; created
a new test that proves everything is fine. The ticket will be closed
and the project will move on.&lt;/p&gt;

&lt;p&gt;If, later on, the same problem occurs in
production, a new bug will be reported. It will be linked to your ticket. Your
experience will help someone investigate the bug further. Maybe that
guy will also fail to catch the bug with a test and will also create
a new, successful and &amp;quot;useless&amp;quot; test. And this may happen again and again.
Eventually, this cumulative group experience will help the last guy
catch the bug and fix it.&lt;/p&gt;

&lt;p&gt;Thus, a new passing test is a good response to a bug that you can&amp;#39;t catch
with a unit test.&lt;/p&gt;

&lt;h2 id=&quot;disable-the-feature&quot;&gt;Disable the Feature&lt;/h2&gt;

&lt;p&gt;Sometimes the unit test technique won&amp;#39;t work, mostly because a bug will be
too important to be ignored. They won&amp;#39;t agree with you when you show them
a unit test that proves the bug doesn&amp;#39;t exist. They will tell you
that &amp;quot;when our users are trying to download a PDF, they get a blank page.&amp;quot;
And they will also say they don&amp;#39;t really care about your bloody
unit tests. All they care about is that PDF document that should be
downloadable. So the trick with a unit test won&amp;#39;t work. What do you do?&lt;/p&gt;

&lt;p&gt;It depends on many factors, and most of these factors are not technical.
They are political, organizational, managerial, social, you name it. However,
in most cases, I would recommend you disable that toxic feature,
release a new version, and close the ticket.&lt;/p&gt;

&lt;p&gt;You will take the problem off your shoulders and everybody will be pleased.
Well, except that poor end user. But this is not your problem. This is the
fault of management, which didn&amp;#39;t organize pre-production testing properly.
Again, don&amp;#39;t take this blame on yourself. Your job is to keep the code
clean and finish your tickets in a reasonable amount of time. Their
job is to make sure that developers, testers, DevOps, marketers, product
managers, and designers work together to deliver the product with an
acceptable number of errors.&lt;/p&gt;

&lt;p&gt;Production errors are not programmers&amp;#39; mistakes, though delayed
tickets are. If you keep a ticket in your hands for too long, you become
an unmanageable unit of work. They simply can&amp;#39;t manage you anymore. You&amp;#39;re doing
something, trying to fix the bug, saying &amp;quot;I&amp;#39;m trying, I&amp;#39;m trying ...&amp;quot;
How can they manage such a guy? Instead, you should deliver quickly, even if
it comes at the cost of a temporarily disabled feature.&lt;/p&gt;

&lt;h2 id=&quot;say-no&quot;&gt;Say No&lt;/h2&gt;

&lt;p&gt;OK, let&amp;#39;s say none of the above works. The code is clean, the documentation
is acceptable, but you can&amp;#39;t catch the bug, and they don&amp;#39;t accept a unit
test from you as proof of the bug&amp;#39;s absence. They also don&amp;#39;t allow you to
disable a feature, because it is critical to the user experience. What choices
do you have? Just one.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-4.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Be professional and say &amp;quot;No, I can&amp;#39;t do this; find someone else.&amp;quot;
Being a professional developer doesn&amp;#39;t mean being able to fix any problem. Instead,
it means honesty. If you see that you can&amp;#39;t
fix the problem, say so as soon as possible. Let them decide what to do.
If they eventually decide to fire you because of that, you will remain a
professional. They will remember you as a guy who was honest and took his
reputation seriously. In the end, you will win.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t hold the task in your hands. The minute you realize you&amp;#39;re
not the best guy for it or you simply can&amp;#39;t fix it &amp;mdash; notify
your manager. Make it his problem. Actually, it is his problem in the
first place. He hired you. He interviewed you. He decided to give you this
task. He estimated your abilities and your skills.
So it&amp;#39;s payback time.&lt;/p&gt;

&lt;p&gt;Your &amp;quot;No!&amp;quot; will be very valuable feedback for him. It will help him
make his next important management decisions.&lt;/p&gt;

&lt;p&gt;On the other hand, if you lie just to give the impression you&amp;#39;re a guy who
can fix anything and yet fail in the end, you will damage not only your
reputation but also the project&amp;#39;s performance and objectives.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/15/how-to-cut-corners.html</guid>
      <dc:date>2015-01-15T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>A Compound Name Is a Code Smell</title>
      <link>http://www.yegor256.com/2015/01/12/compound-name-is-code-smell.html</link>
      <description>&lt;p&gt;Do you name variables like &lt;code&gt;textLength&lt;/code&gt;, &lt;code&gt;table_name&lt;/code&gt;, or &lt;code&gt;current-user-email&lt;/code&gt;?
All three are compound names that consist of more than one word. Even though
they look more descriptive than &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, or &lt;code&gt;email&lt;/code&gt;, I would strongly
recommend avoiding them. I believe a variable name that is more complex than a noun
is a code smell. Why? Because we usually give a variable a compound name when its scope
is so big and complex that a simple noun would sound ambiguous.
And a big, complex scope is an obvious code smell.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/meaning-of-life-every-sperm.png' style='width:600px;' alt='The Meaning of Life (1983) by Terry Jones and Terry Gilliam'/&gt;&lt;figcaption&gt;The Meaning of Life (1983) by Terry Jones and Terry Gilliam&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The scope of a variable is the place where it is visible, like a method, for example. Look
at this Ruby class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CSV&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvFileName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;csvLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The visible scope of variable &lt;code&gt;csvFileName&lt;/code&gt; is method &lt;code&gt;initialize()&lt;/code&gt;, which
is a constructor of the class &lt;code&gt;CSV&lt;/code&gt;. Why does it need a compound name
that consists of three words? Isn&amp;#39;t it already clear that a single-argument
constructor of class &lt;code&gt;CSV&lt;/code&gt; expects the name of a file with
comma-separated values? I would rename it to &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, the scope of &lt;code&gt;@fileName&lt;/code&gt; is the entire &lt;code&gt;CSV&lt;/code&gt; class. Renaming a single
variable in the class to just &lt;code&gt;@file&lt;/code&gt; won&amp;#39;t introduce
any confusion. It&amp;#39;s still clear what file we&amp;#39;re dealing with.
The same situation exists with the &lt;code&gt;csvLine&lt;/code&gt; variable. It is clear that we&amp;#39;re
dealing with CSV lines here. The &lt;code&gt;csv&lt;/code&gt; prefix is just a redundancy.
Here is how I would refactor the class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CSV&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now it looks clear and concise.&lt;/p&gt;

&lt;p&gt;If you can&amp;#39;t perform such a refactoring, it means your scope is too
big and/or too complex. An ideal method should deal with up to five variables,
and an ideal class should encapsulate up to five properties.&lt;/p&gt;

&lt;p&gt;If we have five variables, can&amp;#39;t we find five nouns to name them?&lt;/p&gt;

&lt;p&gt;Adam and Eve didn&amp;#39;t have second names. They were unique in Eden,
as were many other characters in the Old Testament. Second and middle
names were invented later in order to resolve ambiguity. To keep
your methods and classes clean and solid, and to prevent ambiguity, try to give your variables
and methods unique single-word names, just like Adam and Eve were named
by you know who :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/12/compound-name-is-code-smell.html</guid>
      <dc:date>2015-01-12T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Be Honest and Keep a Customer</title>
      <link>http://www.yegor256.com/2015/01/05/how-to-be-honest-and-keep-customer.html</link>
      <description>&lt;p&gt;Most of our clients are rather surprised when we explain to them that
they will have full access to the source code from the first day
of the project. We let them see everything that is happening in
the project, including the Git repository, bug reports, discussions
between programmers, continuous integration fails, etc.
They often tell me that other software development outsourcing teams
keep this information in-house and deliver only final releases,
rarely together with the source code.&lt;/p&gt;

&lt;p&gt;I understand why other developers are trying to hide as much as possible.
Giving a project sponsor full access to the development environment
is not easy at all. Here is a summary
of problems we&amp;#39;ve been having and our solutions. I hope they help you
honestly show your clients all project internals and still keep them on board.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/99-francs.png' style='width:600px;' alt='99 francs (2007) by Jan Kounen'/&gt;&lt;figcaption&gt;99 francs (2007) by Jan Kounen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;he-is-breaking-our-process&quot;&gt;He Is Breaking Our Process&lt;/h2&gt;

&lt;p&gt;This is the most popular problem we face with our new clients. Once they
gain access to the development environment, they try to give instructions
directly to programmers, walking around
&lt;a href=&quot;/2014/10/06/software-project-lifecycle.html&quot;&gt;our existing process&lt;/a&gt;.
&amp;quot;I&amp;#39;m paying these guys; why can&amp;#39;t I tell them what to do?&amp;quot; is a very typical mindset.
Instead of submitting requests through our standard change management mechanism,
such a client goes directly to one of the programmers and tells him what
should be fixed, how, and when. It&amp;#39;s micro-management in its worst form.
We see it very often. What do we do?&lt;/p&gt;

&lt;p&gt;First, we try to understand why it&amp;#39;s happening. The simplest answer
is that the client is a moron. Sometimes this is exactly the case, but it&amp;#39;s a rare one. Much more
often, our clients are not that bad. What is it, then? Why can&amp;#39;t they follow
the process and abide by the rules? There are a few possible reasons.&lt;/p&gt;

&lt;p&gt;Maybe the &lt;strong&gt;rules are not explained well&lt;/strong&gt;.
This is the most popular root cause &amp;mdash; the rules of work are not clear
enough for the client. He just doesn&amp;#39;t know what he is supposed to do in order
to submit a request and get it implemented. To prevent this, we try to educate
our clients at the beginning of a new project. We even write guidance
manuals for clients. Most of them are happy to read them and learn the
way we work, because they understand that this is the best way to achieve
success while working with us.&lt;/p&gt;

&lt;p&gt;Maybe our &lt;strong&gt;management is chaotic&lt;/strong&gt;, and the client is trying to &amp;quot;organize&amp;quot;
us by giving explicit instructions regarding the most important tasks. We&amp;#39;ve
seen it before, and we are always trying to learn from this. As soon as
we see that the client is trying to micro-manage us, we ask
ourselves: &amp;quot;Is our process transparent enough? Do we give enough
information to the client about milestones, risks, plans, costs, etc.?&amp;quot;
In most cases, it&amp;#39;s our own fault, and we&amp;#39;re trying to learn and improve.
If so, it&amp;#39;s important to react fast, before the client becomes too agressive in his
orders and instructions. It will be very difficult to escort him back to the normal
process once he gets &amp;quot;micro-management&amp;quot; in his blood.&lt;/p&gt;

&lt;p&gt;Maybe the client is not busy enough and has &lt;strong&gt;a lot of free time&lt;/strong&gt;, which he
is happy to spend by giving orders and distracting your team. I&amp;#39;ve seen
this many times. A solution? Keep him busy. Turn him into a member of the
team and assign him some tasks related to documentation and research. In
my experience, most clients would be happy to do this work and help the
project.&lt;/p&gt;

&lt;h2 id=&quot;he-is-asking-too-much&quot;&gt;He Is Asking Too Much&lt;/h2&gt;

&lt;p&gt;A technically-savvy client can turn the life of
&lt;a href=&quot;/&quot;&gt;an architect&lt;/a&gt;
into a nightmare by constantly asking him to explain every
single technical decision made, from &amp;quot;Why PostgreSQL instead of MySQL?&amp;quot;
to &amp;quot;Why doesn&amp;#39;t this method throw a checked exception?&amp;quot; Constantly answering
such questions can turn a project into a school of programming.
Even though he is paying for our time, that doesn&amp;#39;t mean we should teach him
how to develop software, right? On the other hand, he is interested in knowing
how &lt;em&gt;his&lt;/em&gt; software is developed and how it works. It&amp;#39;s a fair request, isn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;I believe there is a &lt;em&gt;win-win&lt;/em&gt; solution to this problem. Here is how we
manage it. First of all, we make all his requests formal. We ask
a client to create a new ticket for each request, properly explaining
what is not clear and how much detail is expected in the explanation.&lt;/p&gt;

&lt;p&gt;Second, we look at such requests positively &amp;mdash; they
are good indicators of certain inconsistencies in the software. If it&amp;#39;s
not clear for the client why PostgreSQL is used and not MySQL, it&amp;#39;s a fault
of &lt;a href=&quot;/&quot;&gt;our architect&lt;/a&gt;.
He didn&amp;#39;t document his decision and didn&amp;#39;t explain
how it was made, what other options were considered, what selection criteria
were applied, etc. Thus, a request from a client is &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;a bug&lt;/a&gt;
we get for free. So, we look at it positively.&lt;/p&gt;

&lt;p&gt;Finally, we charge our clients for the answers given. Every question, submitted
as a ticket, goes through the full flow and
&lt;a href=&quot;/2014/10/21/incremental-billing.html&quot;&gt;gets billed&lt;/a&gt;
just as any other ticket. This
approach prevents the client from asking for too much. He realizes that we&amp;#39;re
ready to explain anything he wants, but he will pay for it.&lt;/p&gt;

&lt;h2 id=&quot;he-is-telling-too-much&quot;&gt;He Is Telling Too Much&lt;/h2&gt;

&lt;p&gt;This problem is even bigger than the previous one. Some clients
believe they are savvy enough to argue with
&lt;a href=&quot;/&quot;&gt;our architect&lt;/a&gt;
and our programmers about how the software should be developed. They don&amp;#39;t just
ask why PostgreSQL is used, they tell us that we should use MySQL,
because &amp;quot;I know that it&amp;#39;s a great database; my friend is using it, and his
business is growing!&amp;quot; Sometimes it gets even worse, when suggestions
are directed at every class or even a method, like &amp;quot;You should use
a Singleton pattern here!&amp;quot;&lt;/p&gt;

&lt;p&gt;Our first choice is to agree and do what he wants. But it&amp;#39;s a road to nowhere.
Once you do it, your project is ruined, and you should start thinking
about a divorce with this client. Your entire team will quickly turn into
a group of coding monkeys, micro-managed by someone with some cash. It&amp;#39;s a very
wrong direction; don&amp;#39;t even think about going there.&lt;/p&gt;

&lt;p&gt;The second choice is to tell the client to mind his own business and let
us do ours. He hired us because we&amp;#39;re professional enough to develop the
software according to his requirements. If he questions our capabilities,
he is free to change the contractor. But until then, he has
to trust our decisions. Will this work? I doubt it. It&amp;#39;s the same as
giving him the finger. He will get offended, and you won&amp;#39;t get anything.&lt;/p&gt;

&lt;p&gt;The solution here is to turn the client&amp;#39;s demands into project requirements.
Most of them will be lost in the process, because they won&amp;#39;t be sane enough
to form a good requirement. Others will be documented, estimated, and crossed-out
by the client himself, becuase he will realize they are pointless or too expensive. Only
a few of them will survive, since they will be reasonable enough. And they will
help the project. So it is also a &lt;em&gt;win-win&lt;/em&gt; solution.&lt;/p&gt;

&lt;p&gt;For example, he says that &amp;quot;you should use MySQL because it&amp;#39;s great&amp;quot;. You tell
him that the project requirements document doesn&amp;#39;t limit you to choose whichever
database you like. Should it? He says yes, of course! OK, let&amp;#39;s try to
document such a requirement. How will it sound? How about, &amp;quot;We should only
use great databases?&amp;quot; Sound correct? If so, then PostgreSQL satisfies this
requirement. Problem solved; let us continue to do our work. He will have a
hard time figuring out how to write a requirement in a way that disallows
PostgreSQL but allows MySQL. It is simply not possible in most cases.&lt;/p&gt;

&lt;p&gt;Sometimes, though, it will make sense; for example, &amp;quot;We should use a database server
that understands our legacy data in MySQL format&amp;quot;. This is a perfectly sane
requirement, and the only way to satisfy it is to use MySQL.&lt;/p&gt;

&lt;p&gt;Thus, my recommendation is to never take a client&amp;#39;s demands directly to execution,
but rather use them first to amend the requirements documentation. Even if you don&amp;#39;t
have such documentation, create a simple one-page document. Agree with the
client that you work against this document, and when anyone wants to change
something, you first have to amend the document and then have your team ensure the
software satisfies it. This kind of discipline will be accepted by any client
and will protect you against sudden and distracting corrections.&lt;/p&gt;

&lt;h2 id=&quot;he-is-questioning-our-skills&quot;&gt;He Is Questioning Our Skills&lt;/h2&gt;

&lt;p&gt;When source code is open to the client, and he is technically capable
of reading it, it is very possible that one day he will tell us that
our code is crap and we have to learn how to program better. It has not
happened in our projects for many years, but it has happened before,
when we weren&amp;#39;t using static analysis as a &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;mandatory step&lt;/a&gt;
in our continuous integration pipeline.&lt;/p&gt;

&lt;p&gt;Another funny possibility is when the client shows the source code to a &amp;quot;friend&amp;quot;,
and he gives a &amp;quot;professional&amp;quot; opinion, which sounds like, &amp;quot;They don&amp;#39;t know what they
are doing.&amp;quot; Once such an opinion hits your client&amp;#39;s ears, the project is at
a significant risk of closure. It&amp;#39;ll be very difficult, almost impossible,
to convince the client not to listen to the &amp;quot;friend&amp;quot; and continue
to work with you. That&amp;#39;s why most outsourcers prefer to keep their sources
private until the very end of the project, when the final invoice is paid.&lt;/p&gt;

&lt;p&gt;I think that an accidental appearance of a &amp;quot;friend&amp;quot; with a negative opinion
is un-preventable. If it happens, it happens. You can&amp;#39;t avoid it.
On the other hand, if you think your code is perfect and your team
has only talented programmers writing beautiful software, this is not
going to protect you either. An opinion coming from a &amp;quot;friend&amp;quot; won&amp;#39;t be objective;
it will just be very personal, and that&amp;#39;s why it&amp;#39;s very credible. He is a friend
of a client, and he doesn&amp;#39;t send him bills every week. Why would he lie?
Of course, he is speaking from the heart! (I&amp;#39;m being sarcastic.) So, no matter
how beautiful your architecture and your source code is, the &amp;quot;friend&amp;quot; will
always be right.&lt;/p&gt;

&lt;p&gt;In my opinion, the only way to prevent such a situation or minimize its
consequences is to organize regular and systematic
&lt;a href=&quot;/2014/12/18/independent-technical-reviews.html&quot;&gt;independent technical reviews&lt;/a&gt;.
They will give confindence to the client that the team
is not lying to him about the quality of the product and key technical
decisions made internally.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;To conclude, I strongly believe it is important to be honest
and open with each client, no matter how difficult it is. Try to
learn from every conflict with each client, and improve your management
process and your principles of work. Hiding source code is not
professional and makes you look bad in the eyes of your clients and
the entire industry.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/05/how-to-be-honest-and-keep-customer.html</guid>
      <dc:date>2015-01-05T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>You Do Need Independent Technical Reviews!</title>
      <link>http://www.yegor256.com/2014/12/18/independent-technical-reviews.html</link>
      <description>&lt;p&gt;Do you have a team of brilliant and enthusiastic programmers? Of course! You&amp;#39;ve carefully
chosen them from a hundred candidates! Are they passionate about the product?
Absolutely! They use cutting-edge technologies, never sleep, and hardly eat or drink
anything except coffee! Do they believe in your business success? No doubts about it;
they live and breathe all those features, releases, continuous delivery, user
experience, etc. Are you sure they are developing the product correctly?
Well, yes, you&amp;#39;re pretty sure; why wouldn&amp;#39;t they? ...&lt;/p&gt;

&lt;p&gt;Does this sound familiar? I can&amp;#39;t count how many times I&amp;#39;ve heard
these stories told by startup founders. Most of them are in love with their teams ...
until that day when it&amp;#39;s time to hire a new one. There could be many
possible reasons for such a fiasco, but one of them is a lack of
regular, systematic, and independent &lt;strong&gt;technical reviews&lt;/strong&gt;.
Nothing demotivates a development team more than a lack of attention
to their deliverables. On the other hand, a regular
reconciliation of their results and your quality expectations is one
of the key factors that will guarantee technical success for your
startup. Below I summarize my experience with organizing such technical reviews.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/arizona-dream-car-shop.png' style='width:600px;' alt='Arizona Dream (1992) by Emir Kusturica'/&gt;&lt;figcaption&gt;Arizona Dream (1992) by Emir Kusturica&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;An independent review is when you ask someone outside of your team
to look at your source code and other technical resources
and give you an objective opinion about them.
Every modern software team should also use internal code reviews, which is
is something else entirely. An internal review occurs when one programmer
shows his code to other peers on the team and asks their opinion. This usually
happens as a daily activity and has nothing to do with independent
reviews.&lt;/p&gt;

&lt;p&gt;An independent review is performed by a programmer who knows nothing about your team.
He comes on board, checks out the code from your repository, spends a few hours
(or days) looking at it and trying to understand what it does. Then, he
tells you what is wrong and where. He explains how he would do it better,
where he would change it, and what he would do instead. Then, you pay him
and he leaves. You may never see him again, but his conclusions and suggestions
help you &lt;em&gt;check the reality&lt;/em&gt; of your code and evaluate how your team is really doing.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.teamed.io'&gt;&lt;img src='http://img.teamed.io/logo.svg' style='width:120px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;We, at &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;, do independent reviews
with every project of ours, and this is a list of principles we use:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Independent Reviews Systematic&lt;/strong&gt;.
This is the first and most important rule &amp;mdash; organize
such technical reviews regularly. Moreover, inform your team about the schedule,
and let them be prepared for the reviews. Once a month is a good practice,
according to my experience. Depending on your source code size, a full
review should take from &lt;strong&gt;two to eight hours&lt;/strong&gt;. Don&amp;#39;t spend more than eight hours;
there is no point in going too deep into the code during independent reviews.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pay for Bugs Found&lt;/strong&gt;.
We &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;always&lt;/a&gt;
pay for bugs, not for the time spent finding them. We ask our reviewers
to look at the code and report as many bugs as we think we need. For each
bug, we pay 15 minutes for their time. In other words, we assume that
a good reviewer can find and report approximately four problems in one hour. For example,
a reviewer charges $150 per hour. We hire him and ask him to find and report the 20 most
criticial issues he can discover. Our estimate is that he should spend five hours on this
work. Thus, he will get $750 when we have 20 bugs in our tracking system
reported by him. If he finds fewer, he gets proportionally less money.
This payment schedule will help you focus your reviewer on the main
objective of the review process &amp;mdash; finding and reporting issues. There
are no other goals. The only thing you&amp;#39;re interested in is knowing what
the issues with your current technical solution are. That&amp;#39;s what you&amp;#39;re paying for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hire the Best and Pay Well&lt;/strong&gt;.
My experience tells me that the position of an independent reviewer is a very
important one. He is not just a programmer but more of
&lt;a href=&quot;/&quot;&gt;an architect&lt;/a&gt;
who is capable of looking at the solution from a very high level of abstraction,
while at the same time paying a lot of attention to details; he should be very
good at designing similar systems; he should know how to report a bug
correctly and with enough detail; he should understand your business domain; etc.
Besides all that, he should be
well motivated to help you. You&amp;#39;re not hiring him for full-time work but
rather just for a few-hour gig. My advice is to try to get
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;the best guys&lt;/a&gt;,
and pay them as much as they ask, usually over $100 per hour. Don&amp;#39;t negotiate,
just pay. It&amp;#39;s just a few hundred dollars for you, but the effect of their
contribution will be huge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask For and Expect Criticism&lt;/strong&gt;.
It is a very common mistake to ask a reviewer, &amp;quot;Do you like our code?&amp;quot;
Don&amp;#39;t expect him to tell you how great your code is. This is not what you&amp;#39;re
paying him for! You already have a full team of programmers for cheering you up; they can tell
you a lot about the code they are creating and how awesome it is. You don&amp;#39;t want
to hear this again from the reviewer. Instead, you want to know what
is wrong and needs to be fixed. So your questions should sound like,
&amp;quot;What problems do you think we should fix first?&amp;quot; Some reviewers will try
to please you with positive comments, but ignore that flattery and bring them back
to the main goal &amp;mdash; bugs. The payment schedule explained above should help.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regularly Change Reviewers&lt;/strong&gt;.
Try not to use the same reviewer more than once on the same project (I mean the
same code base). I believe the reason here is obvious, but let me re-iterate:
You don&amp;#39;t need your reviewer to be nice to you and tell you how
great your code is. You want him to be objective and focused on problems,
not on bright sides. If you hire the same person again and again,
psychologically you make him engaged to the source code. He&amp;#39;s seen it once;
now he has to see it again. He already told you about some problem, and
now he has to repeat it again. He won&amp;#39;t feel comfortable doing it. Instead,
he will start feeling like a member of the team and will feel
responsible for the source code and its mistakes. He, as any other
team member, will start hiding issues instead of revealing them. Thus,
for every independent technical review, get a new person.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be Polite and Honest With Your Team&lt;/strong&gt;.
Independent reviews can be rather offensive to your programmers. They may
think that you don&amp;#39;t trust them. They may feel that you don&amp;#39;t respect them
as technical specialists. They may even decide that you&amp;#39;re getting ready
to fire them all and are currently looking for new people. This is a very
possible and very destructive side effect of an independent review. How do you avoid it?
I can&amp;#39;t give you universal advice, but the best suggestion I can give is this:
be honest with them. Tell them that the quality of the product is critical for you
and your business. Explain to them that the business is paying them for their
work and that in order to keep paychecks coming, you have to stress quality
control &amp;mdash; regularly, objectively, independently, and honestly. In the end,
if you manage to organize reviews as this article explains, the team will
be very thankful to you. They will gain a lot of new ideas and thoughts from every
review and will ask you to repeat them regularly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Review From Day One&lt;/strong&gt;.
Don&amp;#39;t wait until the end of the project! I&amp;#39;ve seen this mistake many times.
Very often startup founders think that until the product is done and ready
for the market, they shouldn&amp;#39;t distract their team. They think they should
let the team work toward project milestones and take care of quality
later, &amp;quot;when we have a million visitors per day&amp;quot;. This day will never come
if you let your team run without control! Start conducting independent reviews
from the moment your Git repository has its first file. Until the repository
is big enough, you may only spend $300 once a month to receive an objective,
independent opinion about its quality. Will this ruin your budget?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prohibit Discussions, and Ask for Formal Reporting&lt;/strong&gt;.
Don&amp;#39;t let your reviewers talk to the team. If you do, the entire
idea of a review being independent falls apart. If a reviewer is able
to ask informal questions and discuss your system design with your programmers,
their answers will satisfy him, and he will move on. But you,
the owner of the business, will stay exactly where you were before the review.
The point of the review is not to make the reviewer happy. It is exactly the
opposite. You want to make him confused! If he is confused, your
design is wrong and he feels the need to report a bug. The source code
should speak for itself, and it should be easy enough for a stranger (the
reviewer) to understand how it works. If this is not the case, there is
something wrong that should be fixed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Treat Any Question as a Bug&lt;/strong&gt;.
Don&amp;#39;t expect a review to produce any bugs in functionality, like
&amp;quot;I click this button and the system crashes&amp;quot;. This will happen rarely, if ever.
Your team is very good at discovering these issues and fixing them. Independent
reviews are not about that kind of bugs. The main goal of an independent review is to
discover bugs in the architecture and design. Your product may work, but its
architecture may have serious design flaws that won&amp;#39;t allow you, for example,
to handle exponential growth in web traffic. An independent reviewer will help you
find those flaws and address them sooner than later. In order to get bugs
of that kind from the reviewer, you should encourage him to report
&lt;em&gt;anything&lt;/em&gt; he doesn&amp;#39;t like &amp;mdash; unmotivated use of a technology,
lack of documentation, unclear purpose of a file, absence of
a unit test, etc. Remember, the reviewer is not a member of your team and has his
own ideas about the technologies you&amp;#39;re using and software development in general.
You&amp;#39;re interested in matching his vision with your team&amp;#39;s. Then, you&amp;#39;re
interested in fixing all critical mismatches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Review Everything, Not Just Source Code&lt;/strong&gt;.
Let your reviewer look at all technical resources you have, not just
source code files (&lt;code&gt;.java&lt;/code&gt;, &lt;code&gt;.rb&lt;/code&gt;, &lt;code&gt;.php&lt;/code&gt;, etc.) Give him access to the
database schema, continuous integration panel, build environment,
issue tracking system, plans and schedules, work agendas, uptime reports,
deployment pipeline, production logs,
customer bug reports, statistics, etc. Everything that
could help him understand how your system works, and more importantly,
where and how it breaks, is very useful. Don&amp;#39;t limit the reviewer to the
source code only &amp;mdash; this is simply not enough! Let him see the big
picture, and you will get a much more detailed and professional report.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Track How Inconsistencies Are Resolved&lt;/strong&gt;.
Once you get a report from the reviewer, make sure that the most important
issues immediately get into your team&amp;#39;s backlog. Then, make sure they are
addressed and closed. That doesn&amp;#39;t mean you should fix them all and listen
to everything said by the reviewer. Definitely not! Your
&lt;a href=&quot;/&quot;&gt;architect&lt;/a&gt;
runs the show, not the reviewer. Your architect should decide what is right
and what is wrong in the technical implementation of the product. But it&amp;#39;s
important to make him resolve all concerns raised by the reviewer. Very often
you will get answers like these from him: &amp;quot;We don&amp;#39;t care about it now&amp;quot;, &amp;quot;we won&amp;#39;t
fix it until the next release&amp;quot;, or &amp;quot;he is wrong; we&amp;#39;re doing it better&amp;quot;. These
answers are perfectly valid, but they have to be given
(reviewers are people and they also make mistakes). The answers will help
you, the founder, understand what your team is doing and how well they
understand their business.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;If you can offer more suggestions, based on your experience, please post
them below in the comments, and I&amp;#39;ll add them to the list. I&amp;#39;m still
thinking that I may have forgotten something important :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/18/independent-technical-reviews.html</guid>
      <dc:date>2014-12-18T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Immutability Helps</title>
      <link>http://www.yegor256.com/2014/11/07/how-immutability-helps.html</link>
      <description>&lt;p&gt;In a few recent posts, including
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;&amp;quot;Getters/Setters. Evil. Period.&amp;quot;&lt;/a&gt;,
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;&amp;quot;Objects Should Be Immutable&amp;quot;&lt;/a&gt;, and
&lt;a href=&quot;/2014/10/03/di-containers-are-evil.html&quot;&gt;&amp;quot;Dependency Injection Containers are Code Polluters&amp;quot;&lt;/a&gt;,
I universally labelled all mutable objects with &amp;quot;setters&amp;quot; (object methods starting with &lt;code&gt;set&lt;/code&gt;) evil.
My argumentation was based mostly on metaphors and abstract examples. Apparently,
this wasn&amp;#39;t convincing enough for many of you &amp;mdash; I received a few requests
asking to provide more specific and practical examples.&lt;/p&gt;

&lt;p&gt;Thus, in order to illustrate my strongly negative attitude to &amp;quot;mutability via setters&amp;quot;, I took
an existing &lt;a href=&quot;http://commons.apache.org/proper/commons-email/&quot;&gt;commons-email&lt;/a&gt; Java library from Apache
and re-designed it my way, without setters and with &amp;quot;object thinking&amp;quot; in mind.
I released my library as part of the &lt;a href=&quot;http://www.jcabi.com&quot;&gt;jcabi&lt;/a&gt; family
&amp;mdash; &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;. Let&amp;#39;s see what benefits
we get from a &amp;quot;pure&amp;quot; object-oriented and immutable approach, without getters.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is how your code will look, if you send an email using commons-email:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHostName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smtp.googlemail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSmtpPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;465&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DefaultAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;yegor@teamed.io&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Yegor Bugayenko&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dude@jcabi.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dude, how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how you do the same with &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SMTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smtp.googlemail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;465&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Yegor Bugayenko &amp;lt;yegor@teamed.io&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StRecipient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dude@jcabi.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enclosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dude, how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think the difference is obvious.&lt;/p&gt;

&lt;p&gt;In the first example, you&amp;#39;re
dealing with a monster class that can do everything for you, including
sending your MIME message via SMTP, creating the message, configuring
its parameters, adding MIME parts to it, etc. The
&lt;a href=&quot;http://svn.apache.org/viewvc/commons/proper/email/tags/EMAIL_1_3_3/src/main/java/org/apache/commons/mail/Email.java?revision=1609295&amp;amp;view=co&quot;&gt;&lt;code&gt;Email&lt;/code&gt;&lt;/a&gt;
class from commons-email is really a huge class &amp;mdash; 33 private properties, over
a hundred methods, about two thousands lines of code. First, you configure
the class through a bunch of setters and then you ask it to &lt;code&gt;send()&lt;/code&gt;
an email for you.&lt;/p&gt;

&lt;p&gt;In the second example, we have seven objects instantiated via seven &lt;code&gt;new&lt;/code&gt; calls.
&lt;code&gt;Postman&lt;/code&gt; is responsible for packaging a MIME message; &lt;code&gt;SMTP&lt;/code&gt; is
responsible for sending it via SMTP; stamps (&lt;code&gt;StSender&lt;/code&gt;, &lt;code&gt;StRecipient&lt;/code&gt;,
and &lt;code&gt;StSubject&lt;/code&gt;) are responsible for configuring the MIME message before
delivery; enclosure &lt;code&gt;EnPlain&lt;/code&gt; is responsible for creating a MIME part
for the message we&amp;#39;re going to send. We construct these seven objects,
encapsulating one into another, and then we ask the postman to &lt;code&gt;send()&lt;/code&gt;
the envelope for us.&lt;/p&gt;

&lt;h2 id=&quot;what&amp;#39;s-wrong-with-a-mutable-email?&quot;&gt;What&amp;#39;s Wrong With a Mutable Email?&lt;/h2&gt;

&lt;p&gt;From a user perspective, there is almost nothing wrong. &lt;code&gt;Email&lt;/code&gt; is a powerful
class with multiple controls &amp;mdash; just hit the right one and the job
gets done. However, from a developer perspective &lt;code&gt;Email&lt;/code&gt; class is a nightmare. Mostly
because the class is very big and difficult to maintain.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
every time you want to extend it by introducing a new method, you&amp;#39;re facing the fact that you&amp;#39;re
making the class even worse &amp;mdash; longer, less cohesive, less readable,
less maintainable, etc. You have a feeling that you&amp;#39;re digging into something
dirty and that there is no hope to make it cleaner, ever. I&amp;#39;m sure, you&amp;#39;re
familiar with this feeling &amp;mdash; most legacy applications look that way.
They have huge multi-line &amp;quot;classes&amp;quot; (in reality, COBOL programs written in Java)
that were inherited from a few generations of programmers before you. When
you start, you&amp;#39;re full of energy, but after a few minutes of scrolling
such a &amp;quot;class&amp;quot; you say &amp;mdash; &amp;quot;screw it, it&amp;#39;s almost Saturday&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
there is no data hiding or encapsulation any more
&amp;mdash; 33 variables are accessible by over 100 methods. What is hidden?
This &lt;code&gt;Email.java&lt;/code&gt; file in reality is a big, procedural 2000-line script, called
a &amp;quot;class&amp;quot; by mistake. Nothing is hidden, once you cross the border of the
class by calling one of its methods. After that, you have full access to
all the data you may need. Why is this bad? Well, why do we need encapsulation
in the first place? In order to protect one programmer from another, aka
&lt;a href=&quot;https://en.wikipedia.org/wiki/Defensive_programming&quot;&gt;defensive programming&lt;/a&gt;.
While I&amp;#39;m busy changing the subject of the MIME message, I want to be
sure that I&amp;#39;m not interfered with by some other method&amp;#39;s activity, that is
changing a sender and touching my subject by mistake. Encapsulation helps
us narrow down the scope of the problem, while this &lt;code&gt;Email&lt;/code&gt; class
is doing exactly the opposite.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
its unit testing is even more complicated than the class itself. Why? Because
of multiple inter-dependencies between its methods and properties. In order to
test &lt;code&gt;setCharset()&lt;/code&gt; you have to prepare the entire object by calling a few other
methods, then you have to call &lt;code&gt;send()&lt;/code&gt; to make sure the message being
sent actually uses the encoding you specified. Thus, in order to test
a one-line method &lt;code&gt;setCharset()&lt;/code&gt; you run the entire integration testing
scenario of sending a full MIME message through SMTP. Obviously, if something
gets changed in one of the methods, almost every test method will be
affected. In other words, tests are very fragile, unreliable and over-complicated.&lt;/p&gt;

&lt;p&gt;I can go on and on with this &amp;quot;&lt;em&gt;because the class is so big&lt;/em&gt;&amp;quot;, but I think it is
obvious that a small, cohesive class is always better than a big one. It
is obvious to me, to you, and to any object-oriented programmer. But why is it not
so obvious to the developers of Apache Commons Email? I don&amp;#39;t think they are
stupid or un-educated. What is it then?&lt;/p&gt;

&lt;h2 id=&quot;how-and-why-did-it-happen?&quot;&gt;How and Why Did It Happen?&lt;/h2&gt;

&lt;p&gt;This is how it always happens. You start to design a class as something
cohesive, solid, and small. Your intentions are very positive.
Very soon you realize that there is something
else that this class has to do. Then, something else. Then, even more.&lt;/p&gt;

&lt;p&gt;The best way to make your class more and more powerful is by adding
setters that inject configuration parameters into the class so that it
can process them inside, isn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;This is the root cause of the problem! The root cause is our ability to &lt;strong&gt;insert&lt;/strong&gt;
data into mutable objects via configuration methods, also known as &amp;quot;setters&amp;quot;.
When an object is mutable and allows us to add setters whenever we
want, we will do it without limits.&lt;/p&gt;

&lt;p&gt;Let me put it this way &amp;mdash;
&lt;strong&gt;mutable classes tend to grow in size and lose cohesiveness&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If commons-email authors made this &lt;code&gt;Email&lt;/code&gt; class immutable
in the beginning, they wouldn&amp;#39;t have been able to add so many methods into it
and encapsulate so many properties. They wouldn&amp;#39;t be able to turn
it into a monster. Why? Because an immutable object only accepts a state
through a constructor. Can you imagine a 33-argument constructor?
Of course, not.&lt;/p&gt;

&lt;p&gt;When you make your class immutable in the first place, you are forced
to keep it cohesive, small, solid and robust. Because you can&amp;#39;t encapsulate
too much and you can&amp;#39;t modify what&amp;#39;s encapsulated. Just two or three
arguments of a constructor and you&amp;#39;re done.&lt;/p&gt;

&lt;h2 id=&quot;how-did-i-design-an-immutable-email?&quot;&gt;How Did I Design An Immutable Email?&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;When I was designing &lt;a href=&quot;https://github.com/jcabi/jcabi-email&quot;&gt;jcabi-email&lt;/a&gt;
I started with a small and simple class:
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Postman.java&quot;&gt;&lt;code&gt;Postman&lt;/code&gt;&lt;/a&gt;.
Well, it is an interface,
since I never make interface-less classes. So, &lt;code&gt;Postman&lt;/code&gt; is... a post man.
He is delivering messages to other people. First, I created a default
version of it (I omit the ctor, for the sake of brevity):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.mail.Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create SMTP session&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create transport&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.connect(this.host, this.port, etc.)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.send(msg)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.close();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Good start, it works. What now? Well, the
&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/jms/Message.html&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt;
is difficult to construct.
It is a complex class from JDK that requires some manipulations before it
can become a nice HTML email. So I created an envelope, which will build
this complex object for me (pay attention, both
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Postman.java&quot;&gt;&lt;code&gt;Postman&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Envelope.java&quot;&gt;&lt;code&gt;Envelope&lt;/code&gt;&lt;/a&gt;
are immutable and annotated with
&lt;a href=&quot;http://aspects.jcabi.com/apidocs-0.20/com/jcabi/aspects/Immutable.html&quot;&gt;@Immutable&lt;/a&gt; from
&lt;a href=&quot;http://aspects.jcabi.com/annotation-immutable.html&quot;&gt;jcabi-aspects&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also refactor the &lt;code&gt;Postman&lt;/code&gt; to accept an envelope, not a message:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, so good. Now let&amp;#39;s try to create a simple implementation of
&lt;code&gt;Envelope&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works, but it does nothing useful yet. It only creates an absolutely
empty MIME message and returns it. How about adding a subject to it
and both &lt;code&gt;To:&lt;/code&gt; and &lt;code&gt;From:&lt;/code&gt; addresses (pay attention, &lt;code&gt;MIME&lt;/code&gt; class is
also immutable):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcpts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcpts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRecipient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RecipientType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks correct and it works. But it is still too primitive. How about
&lt;code&gt;CC:&lt;/code&gt; and &lt;code&gt;BCC:&lt;/code&gt;? What about email text? How about PDF enclosures?
What if I want to specify the encoding of the message? What about &lt;code&gt;Reply-To&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Can I add all these parameters to the constructor? Remember, the
class is immutable and I can&amp;#39;t introduce the &lt;code&gt;setReplyTo()&lt;/code&gt; method. I have to
pass the &lt;code&gt;replyTo&lt;/code&gt; argument into its constructor. It&amp;#39;s impossible, because
the constructor will have too many arguments, and nobody will be able to use it.&lt;/p&gt;

&lt;p&gt;So, what do I do?&lt;/p&gt;

&lt;p&gt;Well, I started to think: how can we break the concept of an &amp;quot;envelope&amp;quot;
into smaller concepts &amp;mdash; and this what I invented. Like a real-life envelope,
my &lt;code&gt;MIME&lt;/code&gt; object will have stamps. Stamps will be responsible
for configuring an object &lt;code&gt;Message&lt;/code&gt; (again,
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Stamp.java&quot;&gt;&lt;code&gt;Stamp&lt;/code&gt;&lt;/a&gt; is immutable,
as well as all its implementors):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I can simplify my
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Envelope.java&quot;&gt;&lt;code&gt;MIME&lt;/code&gt;&lt;/a&gt; class to the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stamps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stmps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stamps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I will create stamps for the subject, for &lt;code&gt;To:&lt;/code&gt;, for &lt;code&gt;From:&lt;/code&gt;,
for &lt;code&gt;CC:&lt;/code&gt;, for &lt;code&gt;BCC:&lt;/code&gt;, etc. As many stamps as I like. The class &lt;code&gt;MIME&lt;/code&gt;
will stay the same &amp;mdash; small, cohesive, readable, solid, etc.&lt;/p&gt;

&lt;p&gt;What is important here is why I made the decision to refactor while
the class was relatively small. Indeed, I started to worry about these
stamp classes when my &lt;code&gt;MIME&lt;/code&gt; class was just 25 lines in size.&lt;/p&gt;

&lt;p&gt;That is exactly the point of this article &amp;mdash;
&lt;strong&gt;immutability forces you to design small and cohesive objects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Without immutability, I would have gone the same direction as commons-email. My
&lt;code&gt;MIME&lt;/code&gt; class would grow in size and sooner or later would become
as big as &lt;code&gt;Email&lt;/code&gt; from commons-email. The only thing that stopped me
was the necessity to refactor it, because I wasn&amp;#39;t able to pass all
arguments through a constructor.&lt;/p&gt;

&lt;p&gt;Without immutability, I wouldn&amp;#39;t have had that motivator and I would
have done what Apache developers did with commons-email &amp;mdash; bloat the
class and turn it into an unmaintainable monster.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;. I hope
this example was illustrative enough and that you will start writing
cleaner code with immutable objects.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 07 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/07/how-immutability-helps.html</guid>
      <dc:date>2014-11-07T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>