<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014</copyright>
    <lastBuildDate>Fri, 07 Nov 2014 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>How Immutability Helps</title>
      <link>http://www.yegor256.com/2014/11/07/how-immutability-helps.html</link>
      <description>&lt;p&gt;In a few recent posts, including
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;&amp;quot;Getters/Setters. Evil. Period.&amp;quot;&lt;/a&gt;,
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;&amp;quot;Objects Should Be Immutable&amp;quot;&lt;/a&gt;, and
&lt;a href=&quot;/2014/10/03/di-containers-are-evil.html&quot;&gt;&amp;quot;Dependency Injection Containers are Code Polluters&amp;quot;&lt;/a&gt;,
I universally labelled all mutable objects with &amp;quot;setters&amp;quot; (object methods starting with &lt;code&gt;set&lt;/code&gt;) evil.
My argumentation was based mostly on metaphors and abstract examples. Apparently,
this wasn&amp;#39;t convincing enough for many of you &amp;mdash; I received a few requests
asking to provide more specific and practical examples.&lt;/p&gt;

&lt;p&gt;Thus, in order to illustrate my strongly negative attitude to &amp;quot;mutability via setters&amp;quot;, I took
an existing &lt;a href=&quot;http://commons.apache.org/proper/commons-email/&quot;&gt;commons-email&lt;/a&gt; Java library from Apache
and re-designed it my way, without setters and with &amp;quot;object thinking&amp;quot; in mind.
I released my library as part of the &lt;a href=&quot;http://www.jcabi.com&quot;&gt;jcabi&lt;/a&gt; family
&amp;mdash; &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;. Let&amp;#39;s see what benefits
we get from a &amp;quot;pure&amp;quot; object-oriented and immutable approach, without getters.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is how your code will look, if you send an email using commons-email:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHostName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smtp.googlemail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSmtpPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;465&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DefaultAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;yegor@teamed.io&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Yegor Bugayenko&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dude@jcabi.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dude, how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how you do the same with &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SMTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smtp.googlemail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;465&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Yegor Bugayenko &amp;lt;yegor@teamed.io&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StRecipient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dude@jcabi.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enclosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dude, how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think the difference is obvious.&lt;/p&gt;

&lt;p&gt;In the first example, you&amp;#39;re
dealing with a monster class that can do everything for you, including
sending your MIME message via SMTP, creating the message, configuring
its parameters, adding MIME parts to it, etc. The
&lt;a href=&quot;http://svn.apache.org/viewvc/commons/proper/email/tags/EMAIL_1_3_3/src/main/java/org/apache/commons/mail/Email.java?revision=1609295&amp;amp;view=co&quot;&gt;&lt;code&gt;Email&lt;/code&gt;&lt;/a&gt;
class from commons-email is really a huge class &amp;mdash; 33 private properties, over
a hundred methods, about two thousands lines of code. First, you configure
the class through a bunch of setters and then you ask it to &lt;code&gt;send()&lt;/code&gt;
an email for you.&lt;/p&gt;

&lt;p&gt;In the second example, we have seven objects instantiated via seven &lt;code&gt;new&lt;/code&gt; calls.
&lt;code&gt;Postman&lt;/code&gt; is responsible for packaging a MIME message; &lt;code&gt;SMTP&lt;/code&gt; is
responsible for sending it via SMTP; stamps (&lt;code&gt;StSender&lt;/code&gt;, &lt;code&gt;StRecipient&lt;/code&gt;,
and &lt;code&gt;StSubject&lt;/code&gt;) are responsible for configuring the MIME message before
delivery; enclosure &lt;code&gt;EnPlain&lt;/code&gt; is responsible for creating a MIME part
for the message we&amp;#39;re going to send. We construct these seven objects,
encapsulating one into another, and then we ask the postman to &lt;code&gt;send()&lt;/code&gt;
the envelope for us.&lt;/p&gt;

&lt;h2 id=&quot;what&amp;#39;s-wrong-with-a-mutable-email?&quot;&gt;What&amp;#39;s Wrong With a Mutable Email?&lt;/h2&gt;

&lt;p&gt;From a user perspective, there is almost nothing wrong. &lt;code&gt;Email&lt;/code&gt; is a powerful
class with multiple controls &amp;mdash; just hit the right one and the job
gets done. However, from a developer perspective &lt;code&gt;Email&lt;/code&gt; class is a nightmare. Mostly
because the class is very big and difficult to maintain.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
every time you want to extend it by introducing a new method, you&amp;#39;re facing the fact that you&amp;#39;re
making the class even worse &amp;mdash; longer, less cohesive, less readable,
less maintainable, etc. You have a feeling that you&amp;#39;re digging into something
dirty and that there is no hope to make it cleaner, ever. I&amp;#39;m sure, you&amp;#39;re
familiar with this feeling &amp;mdash; most legacy applications look that way.
They have huge multi-line &amp;quot;classes&amp;quot; (in reality, COBOL programs written in Java)
that were inherited from a few generations of programmers before you. When
you start, you&amp;#39;re full of energy, but after a few minutes of scrolling
such a &amp;quot;class&amp;quot; you say &amp;mdash; &amp;quot;screw it, it&amp;#39;s almost Saturday&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
there is no data hiding or encapsulation any more
&amp;mdash; 33 variables are accessible by over 100 methods. What is hidden?
This &lt;code&gt;Email.java&lt;/code&gt; file in reality is a big, procedural 2000-line script, called
a &amp;quot;class&amp;quot; by mistake. Nothing is hidden, once you cross the border of the
class by calling one of its methods. After that, you have full access to
all the data you may need. Why is this bad? Well, why do we need encapsulation
in the first place? In order to protect one programmer from another, aka
&lt;a href=&quot;https://en.wikipedia.org/wiki/Defensive_programming&quot;&gt;defensive programming&lt;/a&gt;.
While I&amp;#39;m busy changing the subject of the MIME message, I want to be
sure that I&amp;#39;m not interferred with by some other method&amp;#39;s activity, that is
changing a sender and touching my subject by mistake. Encapsulation helps
us narrow down the scope of the problem, while this &lt;code&gt;Email&lt;/code&gt; class
is doing exactly the opposite.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
its unit testing is even more complicated than the class itself. Why? Because
of multiple inter-dependencies between its methods and properties. In order to
test &lt;code&gt;setCharset()&lt;/code&gt; you have to prepare the entire object by calling a few other
methods, then you have to call &lt;code&gt;send()&lt;/code&gt; to make sure the message being
sent actually uses the encoding you specified. Thus, in order to test
a one-line method &lt;code&gt;setCharset()&lt;/code&gt; you run the entire integration testing
scenario of sending a full MIME message through SMTP. Obviously, if something
gets changed in one of the methods, almost every test method will be
affected. In other words, tests are very fragile, unreliable and over-complicated.&lt;/p&gt;

&lt;p&gt;I can go on and on with this &amp;quot;&lt;em&gt;because the class is so big&lt;/em&gt;&amp;quot;, but I think it is
obvious that a small, cohesive class is always better than a big one. It
is obvious to me, to you, and to any object-oriented programmer. But why is it not
so obvious to the developers of Apache Commons Email? I don&amp;#39;t think they are
stupid or un-educated. What is it then?&lt;/p&gt;

&lt;h2 id=&quot;how-and-why-did-it-happen?&quot;&gt;How and Why Did It Happen?&lt;/h2&gt;

&lt;p&gt;This is how it always happens. You start to design a class as something
cohesive, solid, and small. Your intentions are very positive.
Very soon you realize that there is something
else that this class has to do. Then, something else. Then, even more.&lt;/p&gt;

&lt;p&gt;The best way to make your class more and more powerful is by adding
setters that inject configuration parameters into the class so that it
can process them inside, isn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;This is the root cause of the problem! The root cause is our ability to &lt;strong&gt;insert&lt;/strong&gt;
data into mutable objects via configuration methods, also known as &amp;quot;setters&amp;quot;.
When an object is mutable and allows us to add setters whenever we
want, we will do it without limits.&lt;/p&gt;

&lt;p&gt;Let me put it this way &amp;mdash;
&lt;strong&gt;mutable classes tend to grow in size and lose cohesiveness&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If commons-email authors made this &lt;code&gt;Email&lt;/code&gt; class immutable
in the beginning, they wouldn&amp;#39;t have been able to add so many methods into it
and encapsulate so many properties. They wouldn&amp;#39;t be able to turn
it into a monster. Why? Because an immutable object only accepts a state
through a constructor. Can you imagine a 33-argument constructor?
Of course, not.&lt;/p&gt;

&lt;p&gt;When you make your class immutable in the first place, you are forced
to keep it cohesive, small, solid and robust. Because you can&amp;#39;t encapsulate
too much and you can&amp;#39;t modify what&amp;#39;s encapsulated. Just two or three
arguments of a constructor and you&amp;#39;re done.&lt;/p&gt;

&lt;h2 id=&quot;how-did-i-design-an-immutable-email?&quot;&gt;How Did I Design An Immutable Email?&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;When I was designing &lt;a href=&quot;https://github.com/jcabi/jcabi-email&quot;&gt;jcabi-email&lt;/a&gt;
I started with a small and simple class:
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Postman.java&quot;&gt;&lt;code&gt;Postman&lt;/code&gt;&lt;/a&gt;.
Well, it is an interface,
since I never make interface-less classes. So, &lt;code&gt;Postman&lt;/code&gt; is... a post man.
He is delivering messages to other people. First, I created a default
version of it (I omit the ctor, for the sake of brevity):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.mail.Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create SMTP session&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create transport&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.connect(this.host, this.port, etc.)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.send(msg)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.close();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Good start, it works. What now? Well, the
&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/jms/Message.html&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt;
is difficult to construct.
It is a complex class from JDK that requires some manipulations before it
can become a nice HTML email. So I created an envelope, which will build
this complex object for me (pay attention, both
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Postman.java&quot;&gt;&lt;code&gt;Postman&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Envelope.java&quot;&gt;&lt;code&gt;Envelope&lt;/code&gt;&lt;/a&gt;
are immutable and annotated with
&lt;a href=&quot;http://aspects.jcabi.com/apidocs-0.20/com/jcabi/aspects/Immutable.html&quot;&gt;@Immutable&lt;/a&gt; from
&lt;a href=&quot;http://aspects.jcabi.com/annotation-immutable.html&quot;&gt;jcabi-aspects&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also refactor the &lt;code&gt;Postman&lt;/code&gt; to accept an envelope, not a message:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, so good. Now let&amp;#39;s try to create a simple implementation of
&lt;code&gt;Envelope&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works, but it does nothing useful yet. It only creates an absolutely
empty MIME message and returns it. How about adding a subject to it
and both &lt;code&gt;To:&lt;/code&gt; and &lt;code&gt;From:&lt;/code&gt; addresses (pay attention, &lt;code&gt;MIME&lt;/code&gt; class is
also immutable):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcpts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcpts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRecipient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RecipientType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks correct and it works. But it is still too primitive. How about
&lt;code&gt;CC:&lt;/code&gt; and &lt;code&gt;BCC:&lt;/code&gt;? What about email text? How about PDF enclosures?
What if I want to specify the encoding of the message? What about &lt;code&gt;Reply-To&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Can I add all these parameters to the constructor? Remember, the
class is immutable and I can&amp;#39;t introduce the &lt;code&gt;setReplyTo()&lt;/code&gt; method. I have to
pass the &lt;code&gt;replyTo&lt;/code&gt; argument into its constructor. It&amp;#39;s impossible, because
the constructor will have too many arguments, and nobody will be able to use it.&lt;/p&gt;

&lt;p&gt;So, what do I do?&lt;/p&gt;

&lt;p&gt;Well, I started to think: how can we break the concept of an &amp;quot;envelope&amp;quot;
into smaller concepts &amp;mdash; and this what I invented. Like a real-life envelope,
my &lt;code&gt;MIME&lt;/code&gt; object will have stamps. Stamps will be responsible
for configuring an object &lt;code&gt;Message&lt;/code&gt; (again,
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Stamp.java&quot;&gt;&lt;code&gt;Stamp&lt;/code&gt;&lt;/a&gt; is immutable,
as well as all its implementors):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I can simplify my
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Envelope.java&quot;&gt;&lt;code&gt;MIME&lt;/code&gt;&lt;/a&gt; class to the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stamps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stmps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stamps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I will create stamps for the subject, for &lt;code&gt;To:&lt;/code&gt;, for &lt;code&gt;From:&lt;/code&gt;,
for &lt;code&gt;CC:&lt;/code&gt;, for &lt;code&gt;BCC:&lt;/code&gt;, etc. As many stamps as I like. The class &lt;code&gt;MIME&lt;/code&gt;
will stay the same &amp;mdash; small, cohesive, readable, solid, etc.&lt;/p&gt;

&lt;p&gt;What is important here is why I made the decision to refactor while
the class was relatively small. Indeed, I started to worry about these
stamp classes when my &lt;code&gt;MIME&lt;/code&gt; class was just 25 lines in size.&lt;/p&gt;

&lt;p&gt;That is exactly the point of this article &amp;mdash;
&lt;strong&gt;immutability forces you to design small and cohesive objects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Without immutability, I would have gone the same direction as commons-email. My
&lt;code&gt;MIME&lt;/code&gt; class would grow in size and sooner or later would become
as big as &lt;code&gt;Email&lt;/code&gt; from commons-email. The only thing that stopped me
was the necessity to refactor it, because I wasn&amp;#39;t able to pass all
arguments through a constructor.&lt;/p&gt;

&lt;p&gt;Without immutability, I wouldn&amp;#39;t have had that motivator and I would
have done what Apache developers did with commons-email &amp;mdash; bloat the
class and turn it into an unmaintainable monster.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;. I hope
this example was illustrative enough and that you will start writing
cleaner code with immutable objects.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 07 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/07/how-immutability-helps.html</guid>
      <dc:date>2014-11-07T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>What Does a Software Architect Do?</title>
      <link>http://www.yegor256.com/2014/10/12/who-is-software-architect.html</link>
      <description>&lt;p&gt;Do you have a software architect in your project? Do you need one?&lt;/p&gt;

&lt;p&gt;Well, most agile teams do not define such a role explicitly and
work in a democratic mode. Every important technical decision
is discussed with the entire team, and the most voted for solution wins.
When such a team eventually decides to put a &amp;quot;software architect&amp;quot; badge
on someone&amp;#39;s t-shirt, the most reputable programmer gets it.&lt;/p&gt;

&lt;p&gt;The badge rarely changes his responsibilities, though. After all,
the team stays the same and enjoys having technical discussions together,
involving everyone. In the end, a software architect is more of
a status than a role with explicitly defined responsibilities. It is
a sign of respect, paid by other team players to the oldest and the
most authoritative one among them. Right?&lt;/p&gt;

&lt;p&gt;Absolutely wrong!&lt;/p&gt;

&lt;!--more--&gt;

&lt;iframe class=&quot;video&quot; width=&quot;640&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/9IEN9z36V98&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Obviously, an architect is usually someone who
has the most knowledge, skills, experience, and authority. Of course,
an architect usually knows more than others and is able to communicate
his knowledge with diplomacy and pedagogy when required. An architect is usually
one of the smartest guys on the team.&lt;/p&gt;

&lt;p&gt;This is not, however, what makes him/her an architect.&lt;/p&gt;

&lt;p&gt;And this is not what the team needs. My definition of a software architect
is this:&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;architect&lt;/strong&gt; is the one who takes the &lt;strong&gt;blame&lt;/strong&gt; for the &lt;strong&gt;quality&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can replace &amp;quot;blame&amp;quot; with accountability or responsibility. Although,
I prefer to use &amp;quot;blame&amp;quot;, because it much better emphasizes the fact that
every quality issue in the product under development is a personal
fault of the architect. Of course, together with the blame he also
takes all the credit from happy customers, when the quality is good.&lt;/p&gt;

&lt;p&gt;This is what the team needs &amp;mdash; someone personally responsible
for the quality of the software being developed.&lt;/p&gt;

&lt;p&gt;How this guy will delegate this responsibility to others is his job. Whether
he will use his knowledge and skills, or quality control tools, or
unit testing frameworks, or authority, or coaching, or corporal punishment
&amp;mdash; it&amp;#39;s his business.
A project manager delegates quality control to the software architect,
and it is up to the software architect how to delegate it further.&lt;/p&gt;

&lt;p&gt;The role of a software architect is crucial for every project,
even if there are just two coders working at the same desk. One of
them has to be the architect.&lt;/p&gt;

&lt;p&gt;An ideal architect has all the merits mentioned above. He listens
to everybody and takes their opinions into account. He is a good coach and a teacher,
with a lot of patience. He is an effective communicator
and negotiator. He is a diplomat. And he is an expert in the technical domain.&lt;/p&gt;

&lt;p&gt;But, even if he doesn&amp;#39;t have all these merits, &lt;strong&gt;his decision is always final&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And this is the job of the project manager, to make sure that every
technical decision the architect makes is not doubted by anyone. This is
what delegation is all about &amp;mdash; responsibility should always come with power.&lt;/p&gt;

&lt;p&gt;As a project manager, you should regularly evaluate the results
of your architect. Remember, the quality of the product your team
is working on is his personal (!) reponsibility.
Any problems you see are his problems.
Don&amp;#39;t be afraid to blame him and punish him. But, always remember that
in order to make your punishments productive you should give your
architect full power in his actions. Let me reiterate: his decisions should be final.&lt;/p&gt;

&lt;p&gt;If you, as a project manager, are not happy with the quality of the product
and the architect doesn&amp;#39;t improve the situation, replace him. Downgrade him
to a programmer and promote one of the programmers to an architect.
But always remember that there can only be one architect in the team,
and that his decisions are final.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s the only way of having a chance of building a perfect product.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/12/who-is-software-architect.html</guid>
      <dc:date>2014-10-12T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Continuous Integration is Dead</title>
      <link>http://www.yegor256.com/2014/10/08/continuous-integration-is-dead.html</link>
      <description>&lt;p&gt;A few days ago, my article
&lt;a href=&quot;http://devops.com/blogs/continuous-integration-doesnt-work/&quot;&gt;&amp;quot;Why Continuous Integration Doesn’t Work&amp;quot;&lt;/a&gt;
was published at &lt;a href=&quot;http://www.devops.com&quot;&gt;DevOps.com&lt;/a&gt;. Almost the same
day I received a few strongly negative critiques on Twitter.&lt;/p&gt;

&lt;p&gt;Here is my response to the un-asked question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why the hell shouldn&amp;#39;t continuous integration work, being such a brilliant and popular idea?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even though I have some experience in this area, I won&amp;#39;t use it as an argument.
I&amp;#39;ll try to rely only on logic instead.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;BTW, my experience includes five years of using
Apache Continuum, Hudson, CruiseControl, and Jenkins in over 50 open
source and commercial projects. Besides that,
a few years ago I created a hosted continuous integration service called
&lt;a href=&quot;http://www.fazend.com&quot;&gt;fazend.com&lt;/a&gt;,
renamed to &lt;a href=&quot;http://www.rultor.com&quot;&gt;rultor.com&lt;/a&gt; in 2013.
Currently, I&amp;#39;m also an active user of &lt;a href=&quot;http://www.travis-ci.org&quot;&gt;Travis&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-continuous-integration-should-work&quot;&gt;How Continuous Integration Should Work&lt;/h2&gt;

&lt;p&gt;The idea is simple and obvious. Every time you make a new commit
to the &lt;code&gt;master&lt;/code&gt; branch (or &lt;code&gt;/trunk&lt;/code&gt; in Subversion), a continuous integration
server (or service) attempts to build the entire product. &amp;quot;Build&amp;quot; means
compile, unit test, integration test, quality analysis, etc.&lt;/p&gt;

&lt;p&gt;The result is either &amp;quot;success&amp;quot; or &amp;quot;failure&amp;quot;. If it is a success, we
say that &amp;quot;the build is clean&amp;quot;. If it is a failure, we say that &amp;quot;the build is broken&amp;quot;.
The build usually gets broken because someone breaks it by
commiting new code that turns previously passing unit tests
into failing ones.&lt;/p&gt;

&lt;p&gt;This is the technical side of the problem. It always works. Well,
it may have its problems, like hard-coded dependencies, lack of isolation between
environments or parallel build collisions, but this article is not about those.
If the application is well written and its unit tests are stable,
continuous integration is easy. Technically.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s see the organizational side.&lt;/p&gt;

&lt;p&gt;Continuous integration is not only a server that builds, but a
management/organizational process that should &amp;quot;work&amp;quot;. Being a process
that works means exactly what Jez Humble said in
&lt;a href=&quot;http://www.amazon.com/gp/product/0321601912/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321601912&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=GKWBKGZUJGJLFMHE&quot;&gt;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/a&gt;,
on page 55:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Crucially, if the build fails, the development team
stops whatever they are doing and fixes the problem immediately&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what doesn&amp;#39;t work and can&amp;#39;t work.&lt;/p&gt;

&lt;h2 id=&quot;who-needs-this?&quot;&gt;Who Needs This?&lt;/h2&gt;

&lt;p&gt;As we see, continuous integration is about setting the entire
development team on pause and fixing the broken build. Let me
reiterate. Once the build is broken, everybody should focus
on fixing it and making a commit that returns the build to
the stable state.&lt;/p&gt;

&lt;p&gt;Now, my question is &amp;mdash; who, in an actively working team, may need this?&lt;/p&gt;

&lt;p&gt;A product owner, who is interested in launching new features to the market
as soon as possible? Or maybe a project manager, who is responsible for
the deadlines? Or maybe programmers, who hate to fix someone else&amp;#39;s bugs,
especially under pressure.&lt;/p&gt;

&lt;p&gt;Who likes this continuous integration and who needs it?&lt;/p&gt;

&lt;p&gt;Nobody.&lt;/p&gt;

&lt;h2 id=&quot;what-happens-in-reality?&quot;&gt;What Happens In Reality?&lt;/h2&gt;

&lt;p&gt;I can tell you. I&amp;#39;ve seen it multiple times. The scenario is always
the same. We just start to ignore that continuous integration
build status. Either the build is clean or it is broken, and we continue
to do what we were doing before.&lt;/p&gt;

&lt;p&gt;We don&amp;#39;t stop and fix it, as Jez Humble recommends.&lt;/p&gt;

&lt;p&gt;Instead, we ignore the information that&amp;#39;s
coming from the continuous integration server.&lt;/p&gt;

&lt;p&gt;Eventually, maybe tomorrow or on Monday, we&amp;#39;ll try to find some spare time
and will try to fix the build. Only because we don&amp;#39;t like that red button
on the dashboard and want to turn it into a green one.&lt;/p&gt;

&lt;h2 id=&quot;what-about-discipline?&quot;&gt;What About Discipline?&lt;/h2&gt;

&lt;p&gt;Yes, there is another side of this coin. We can try to enforce
discipline in the team. We can make it a strict rule, that our
build is always clean and whoever breaks it gets some sort of
a punishment.&lt;/p&gt;

&lt;p&gt;Try doing this and you will get a &lt;strong&gt;fear driven development&lt;/strong&gt;. Programmers
will be afraid of committing anything to the repository because
they will know that if they cause a build failure they will have to
&lt;a href=&quot;http://programmers.stackexchange.com/questions/79041&quot;&gt;apologize&lt;/a&gt;, at least.&lt;/p&gt;

&lt;p&gt;A strict discipline (which I&amp;#39;m a big fan of) in this case only
makes the situation worse. The entire development process slows
down and programmers keep their code to themselves for as long as
possible, to avoid possibly broken builds. When it&amp;#39;s time to commit,
their changes are so massive that merging becomes very difficult and
sometimes impossible.&lt;/p&gt;

&lt;p&gt;As a result you get a lot of throw-away code, written by someone
but never committed to &lt;code&gt;master&lt;/code&gt;, because of that fear factor.&lt;/p&gt;

&lt;h2 id=&quot;ok,-what-is-the-solution?&quot;&gt;OK, What Is The Solution?&lt;/h2&gt;

&lt;p&gt;I wrote about it before; it is called
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;&amp;quot;read-only master branch&amp;quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is simple &amp;mdash; prohibit anyone from merging anything
into &lt;code&gt;master&lt;/code&gt; and create a script that anyone can call. The script will
merge, test, and commit. The script will not make any exceptions.
If any branch breaks at even one unit test, the entire branch will be rejected.&lt;/p&gt;

&lt;p&gt;In other words: raise the red flag &lt;strong&gt;before&lt;/strong&gt; the code
gets into &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This solves all problems.&lt;/p&gt;

&lt;p&gt;First, the build is always clean. We simply can&amp;#39;t break it because
nobody can commit unless his code keeps the build clean.&lt;/p&gt;

&lt;p&gt;Second, there is no fear of breaking anything. Simply because you technically can&amp;#39;t
do it. All you can do is get a negative response from a merging script. Then
you fix your errors and tell the script to try again. Nobody sees these
attempts, and you don&amp;#39;t need to apologize. Fear factor is gone.&lt;/p&gt;

&lt;p&gt;BTW, try to use &lt;a href=&quot;http://www.rultor.com&quot;&gt;rultor.com&lt;/a&gt; to enforce this
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;&amp;quot;read-only master branch&amp;quot;&lt;/a&gt;
principle in your project.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/08/continuous-integration-is-dead.html</guid>
      <dc:date>2014-10-08T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Stop Chatting, Start Coding</title>
      <link>http://www.yegor256.com/2014/10/07/stop-chatting-start-coding.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.xdsd.org'&gt;&lt;img src='http://img.xdsd.org/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;The first principle of eXtremely Distributed Software Development
(&lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt;) states that
&amp;quot;everyone gets paid for verified deliverables&amp;quot;. This literally
means that, in order to get paid, every programmer
has to write the code, commit it to the repository,
pass a code review and make sure the code is
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;merged into the destination branch&lt;/a&gt;.
Only then, is his result appreciated and paid for.&lt;/p&gt;

&lt;p&gt;For most of my clients this already sounds extreme.
They are used to a traditional scheme of paying per hour
or per month. They immediately realize the benefits of XDSD, though,
because for them this approach means that project
funds are not wasted on activities that don&amp;#39;t produce results.&lt;/p&gt;

&lt;p&gt;But that&amp;#39;s not all.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/barton-fink.png' style='width:600px;' alt='Barton Fink (1991) by Joel Coen'/&gt;&lt;figcaption&gt;Barton Fink (1991) by Joel Coen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This principle also means that nobody is paid for anything except
tasks explicitly assigned to him/her. Thus, when a programmer has a question
about current design, specification, configuration, etc. &amp;mdash;
nobody will be interested in answering it. Why not? Because there is no payment attached to this.
Answering questions in Skype or Hipchat or by email is something that
is not appreciated in XDSD in any way. The project simply doesn&amp;#39;t pay for
this activity. That&amp;#39;s why none of our programmers do this.&lt;/p&gt;

&lt;p&gt;We don&amp;#39;t use &lt;strong&gt;any&lt;/strong&gt; (I mean it!) informal communication channels in
XDSD projects. We don&amp;#39;t do meetings or conference calls. We never discuss
any technical issues on Skype or by phone.&lt;/p&gt;

&lt;p&gt;So, how do we resolve problems and share information?&lt;/p&gt;

&lt;p&gt;We use task tracking systems for that. When a developer has a question,
he submits it as a new &amp;quot;ticket&amp;quot;. The project manager then picks it up
and assigns it to another developer, who is able to answer it. Then, the
answer goes back through the tracking system or directly into
the source code.&lt;/p&gt;

&lt;p&gt;The &amp;quot;question ticket&amp;quot; gets closed when its author is satisfied with the
answer. When the ticket is closed, those who answered it get paid.&lt;/p&gt;

&lt;p&gt;Using this model, we significantly improve project communications, by making
them clean and transparent. We also save a lot of project funds, since
every hour spent by a team member is traceable to the line of code he produced.&lt;/p&gt;

&lt;p&gt;You can see how this happens in action, for example, in this ticket
(the project is open source; that&amp;#39;s why all communications are open):
&lt;a href=&quot;https://github.com/jcabi/jcabi-github/issues/731&quot;&gt;jcabi/jcabi-github#731&lt;/a&gt;.
One Java developer is having a problem with his Git repository. Apparently
he did something wrong and couldn&amp;#39;t solve the problem by himself. He asked
for help by submitting a new bug to the project. He was paid for the
bug report. Then, another team member was assigned to help him. He did,
through a number of suggestions and instructions. In the end, the
problem was solved, and he was also paid for the solution. In total, the
project spent 45 minutes, and the problem was solved.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 07 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/07/stop-chatting-start-coding.html</guid>
      <dc:date>2014-10-07T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Project Lifecycle in Teamed.io</title>
      <link>http://www.yegor256.com/2014/10/06/software-project-lifecycle.html</link>
      <description>&lt;p&gt;In addition to being a hands-on programmer, I&amp;#39;m also co-founder and CTO of
&lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, a custom software development company.
I play the role of a technical and management leader in all projects
we work with.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.teamed.io'&gt;&lt;img src='http://img.teamed.io/logo.svg' style='width:160px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I wrote this article for those who&amp;#39;re interested in hiring me and/or
my team. This article will demonstrate what happens from day one until
the end of the project, when you choose to &lt;a href=&quot;mailto:hire@teamed.io&quot;&gt;work with us&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will see below that our methods of
software development &lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;seriously differ&lt;/a&gt;
from what many other teams are using. I personally pay a lot of attention to quality
of code and quality of the internal processes that connect our team.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;There are four phases in every project I work with in
&lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Thinking&lt;/strong&gt;.
Here we&amp;#39;re trying to understand: What is the problem that the product
is going to solve? We&amp;#39;re also investigating the product&amp;#39;s boundaries &amp;mdash;
who will work with the software (actors) and how will they work with it (user stories).
Deliverables: specification.
Duration: from 2 days up to 3 weeks.
Participants: product owner, analyst(s), architect, project manager.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Building&lt;/strong&gt;.
Here the software architect is creating a &lt;a href=&quot;https://en.wikipedia.org/wiki/Proof_of_concept&quot;&gt;proof-of-concept&lt;/a&gt;
(aka an &lt;a href=&quot;https://en.wikipedia.org/wiki/Minimum_viable_product&quot;&gt;MVP&lt;/a&gt; or prototype or a skeleton).
It is a one-man job that is done almost without any interaction
with anyone else. The architect builds the product according to the
specification in a very limited time frame. The result will have
multiple bugs and open ends, but it will implement the main user story.
The architect also configures continuous integration and delivery pipelines.
Deliverables: working software.
Duration: 2-5 days.
Participants: architect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fixing&lt;/strong&gt;.
At this phase we are adding all the meat to the skeleton. This phase
takes most of the time and budget and involves many participants.
In some projects we invite up to 50 people to work, at the same time.
Since we treat all inconsistencies as bugs, this phase is mostly about
finding, reporting and fixing bugs, in order to stabilize the product
and get it ready for market launch. We increment and
release the software multiple times a day, preferably to its user
champions.
Deliverables: bug fixes via pull requests.
Duration: from weeks to months.
Participants: programmer(s), designer(s), tester(s), code reviewer(s), architect, project manager.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Using&lt;/strong&gt;.
At this final phase we are launching the product to its end-users,
and collecting their feedback (both positive and negative). Everything
they are reporting back to us is being registered as a bug. Then,
we categorize the bugs and fix them. This phase may take years, but
it never involves active implementation of new features.
Deliverables: bug fixes via pull requests.
Duration: months.
Participants: programmer(s), code reviewer(s), project manager.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The biggest (i.e., longest and most expensive) phase is, of course, Fixing. It
usually takes the majority of time (over 70%). However, the most important
and risky phase is the first one &amp;mdash; Thinking. A mistake made during Thinking
will cost much more than a mistake made later.&lt;/p&gt;

&lt;h2 id=&quot;thinking&quot;&gt;Thinking&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-thinking.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Thinking is the first and the most important phase.&lt;/p&gt;

&lt;p&gt;First, we give a name to the project and create a &lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt; repository. We
try to keep all our projects (both open source and commercial) in Github.
Mostly because the platform is very popular, very powerful, and really cheap
(&lt;a href=&quot;https://github.com/pricing&quot;&gt;$7/mo&lt;/a&gt; for a set of 5 private projects).
We also keep all communication in the Github issue tracker.&lt;/p&gt;

&lt;p&gt;Then, we create a simple half-page SRS document (Software Requirements Specification). Usually
this is done right inside the source code, but sometimes in the Github wiki. What&amp;#39;s important
is that the document should be under version control. We will modify it
during the course of the project, very intensively. The SRS should briefly
identify main &amp;quot;actors&amp;quot; of the system and define the product scope.&lt;/p&gt;

&lt;p&gt;Even though it is only half a page, the creation of this initial SRS document
is the most important and the most expensive task in the entire project.
We pay a lot of attention to this step. Usually this document is written
by myself in a direct communication with the project sponsor. We can&amp;#39;t afford
a mistake at this step.&lt;/p&gt;

&lt;p&gt;Then, we invite a few system analysts to the project. These guys
are responsible for turning our initial SRS into a more complete and detailed
specification. They start by asking questions, submitting them one by one
as Github issues. Every question is addressed to the product owner. Using
his answers, system analysts modify the SRS document.
This article explains how &lt;a href=&quot;http://www.requs.org&quot;&gt;Requs&lt;/a&gt; helps us in this process:
&lt;a href=&quot;/2014/04/26/incremental-requirements-with-requs.html&quot;&gt;Incremental Requirements With Requs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the end of the Thinking phase we estimate the size of the project,
in lines of code. Using lines of code, we can roughly
&lt;a href=&quot;http://www.teamed.io/calculator.html&quot;&gt;estimate a budget&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I stay personally involved in the project during
the entire Thinking phase.&lt;/p&gt;

&lt;h2 id=&quot;building&quot;&gt;Building&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-building.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;This is a one-man job for an architect. Every project we work with
has an architect who is &lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;personally responsible&lt;/a&gt;
for the quality and all
technical decisions made there. I try to play this role
in most projects.&lt;/p&gt;

&lt;p&gt;The Building phase is rather straight forward. I have to implement the
solution according to the SRS, in a few working days. No matter
how big the idea and how massive the planning development, I
still have to create (build from scratch!) the product in, say, three days.&lt;/p&gt;

&lt;p&gt;Besides building the software itself, I have to configure all
basic DevOps processes, including:
1) automated testing and quality control,
2) deploying and releasing pipelines,
3) repository of artifacts,
4) &lt;a href=&quot;/2014/10/08/continuous-integration-is-dead.html&quot;&gt;continuous integration&lt;/a&gt; service, etc.&lt;/p&gt;

&lt;p&gt;The result of this phase is a working software package, deployable
to its destination and available for testers. Technical
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality requirements&lt;/a&gt;
are also defined at this phase.&lt;/p&gt;

&lt;h2 id=&quot;fixing&quot;&gt;Fixing&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-fixing.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Now it&amp;#39;s time to build a distributed team of programmers. First, we
invite those who&amp;#39;ve worked in other projects before and have already
have proven their quality. Very often we invite new people,
finding them through StackOverflow, Github, oDesk, and other sources.
An average team size of an average project is 10-20 programmers.&lt;/p&gt;

&lt;p&gt;At this phase, we understand any inconsistency as a bug. If something is not clear
in the documentation, or if something can be refactored for better
readability, or if a function can be improved for higher performance &amp;mdash;
it is a bug to us.
And &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;bugs are welcome&lt;/a&gt; in our projects.
We encourage everybody to report as many bugs as possible. This is how
we achieve high quality.&lt;/p&gt;

&lt;p&gt;That is why the phase is called Fixing, after all. We are reporting bugs and fixing
them. Hundreds of bugs. Sometimes thousands. The product
grows in front of our very eyes, because after every bug fix
we re-deploy the entire product to the production platform.&lt;/p&gt;

&lt;p&gt;Every bug is reported, classified, discussed, and fixed in its
own Github ticket and its own Git branch. We never allow anyone
to just commit to the &lt;code&gt;master&lt;/code&gt; branch &amp;mdash; all changes must pass through
our &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality controls&lt;/a&gt;
and be merged into &lt;code&gt;master&lt;/code&gt; by &lt;a href=&quot;http://www.rultor.com&quot;&gt;rultor.com&lt;/a&gt;,
our &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;merging bot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also important to mention is that all communications with the product owner
and between programmers happen only through Github issues. We
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;never use any chats&lt;/a&gt;,
Skype, emails or conferencing software. We communicate
only through tickets and comments in Github.&lt;/p&gt;

&lt;h2 id=&quot;using&quot;&gt;Using&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-using.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;This is the final phase and it can take quite a long time. By now, the product is
ready and is launched to the market. But we still receive bug reports
and feature request from the product owner, and we still fix them through
the same process flow as in the Fixing phase.&lt;/p&gt;

&lt;p&gt;We try to keep this phase as quiet as possible, in terms of
the amount of bugs reported and fixed. Thanks to our intensive and
pro-active bug finding and fixing in the previous phase, we usually
have very few problems at the Using phase.&lt;/p&gt;

&lt;p&gt;And big feature requests? At this phase, we usually try to convert
them into new projects and develop them separately, starting again
from Thinking.&lt;/p&gt;

&lt;p&gt;BTW, the illustrations you see above are made by
&lt;a href=&quot;https://www.behance.net/lopesbarbara&quot;&gt;Bárbara Lopes&lt;/a&gt;&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/06/software-project-lifecycle.html</guid>
      <dc:date>2014-10-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>10 Hosted Continuous Integration Services for a Private Repository</title>
      <link>http://www.yegor256.com/2014/10/05/ten-hosted-continuous-integration-services.html</link>
      <description>&lt;p&gt;Every project I&amp;#39;m working with starts with a setup of continuous
integration pipeline. I&amp;#39;m a big fan of cloud services,
that&amp;#39;s why I was always using travis-ci.org. A few of
my clients questioned this choice recently, mostly because
of the price. So I decided to make a brief analysis of the market.&lt;/p&gt;

&lt;p&gt;I configured &lt;a href=&quot;https://github.com/yegor256/rultor&quot;&gt;rultor&lt;/a&gt;,
an open source project, in every CI service I managed to find.
All of them are free for open source projects.
All of them are hosted and do not require any server installation
Here they are, in order of my personal preference:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;Linux&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;Windows&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;MacOS&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.travis-ci.org&quot;&gt;travis-ci.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://travis-ci.com/plans&quot;&gt;$129/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.snap-ci.com&quot;&gt;snap-ci.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://snap-ci.com/plans&quot;&gt;$30/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.semaphoreapp.com&quot;&gt;semaphoreapp.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://semaphoreapp.com/pricing&quot;&gt;$29/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.appveyor.com&quot;&gt;appveyer.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;http://www.appveyor.com/pricing&quot;&gt;$39/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.shippable.com&quot;&gt;shippable.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;http://www.shippable.com/pricing.html&quot;&gt;$1/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.wercker.com&quot;&gt;wercker.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;free!&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.codeship.io&quot;&gt;codeship.io&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://codeship.io/pricing&quot;&gt;$49/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.magnum-ci.com&quot;&gt;magnum-ci.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;?&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.drone.io&quot;&gt;drone.io&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://drone.io/pricing&quot;&gt;$25/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.circleci.com&quot;&gt;circleci.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://circleci.com/pricing&quot;&gt;$19/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://ci.solanolabs.com&quot;&gt;sonolabs.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://www.solanolabs.com/#pricing&quot;&gt;$15/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.hosted-ci.com&quot;&gt;hosted-ci.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://hosted-ci.com/#plans&quot;&gt;$49/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.ship.io&quot;&gt;ship.io&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://ship.io/pricing&quot;&gt;free!&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;!--more--&gt;

&lt;p&gt;If you know any other good continuous integration services,
&lt;a href=&quot;/about-me.html&quot;&gt;email me&lt;/a&gt;, I&amp;#39;ll review and add them to this list.
BTW, here is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software&quot;&gt;&amp;quot;full&amp;quot; list&lt;/a&gt;
of continuous integration software and services.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.travis-ci.org'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/travis.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.travis-ci.org&quot;&gt;&lt;strong&gt;travis-ci.org&lt;/strong&gt;&lt;/a&gt; is
the best platform I&amp;#39;ve seen so far. Mostly because
it is the most popular. Perfectly integrates with
Github and has proper documentation. One important
downside is the price of $129 per month. &amp;quot;With this money
you can get a dedicated EC2 instance and install Jenkins there&amp;quot; &amp;mdash;
some of my clients say. I strongly disagree, since Jenkins will
require a 24x7 administration, which costs way more than $129, but
it&amp;#39;s always difficult to explain.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.snap-ci.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/snap.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.snap-ci.com&quot;&gt;&lt;strong&gt;snap-ci.com&lt;/strong&gt;&lt;/a&gt; is a product of
ThoughtWorks, an author of &lt;a href=&quot;http://www.go.cd/&quot;&gt;Go&lt;/a&gt;,
an open source continuous integration server. It looks a bit more
complicated than others, giving you an ability to define &amp;quot;stages&amp;quot;
and combine them into pipelines. I&amp;#39;m not sure yet how these mechanisms
may help in small and medium size projects we&amp;#39;re mostly working with,
but they look &amp;quot;cool&amp;quot;. There is also a very unfortunate limitation of
2Gb RAM per build &amp;mdash; some of my Java projects fail because of that.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.semaphoreapp.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/semaphoreapp.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.semaphoreapp.com&quot;&gt;&lt;strong&gt;semaphoreapp.com&lt;/strong&gt;&lt;/a&gt; is easy to
configure and work with. It makes an impression of a light-weight
system, which I generally appreciate. As a downside, they don&amp;#39;t have
any Maven pre-installed, but this was solved easily with a short
custom script that downloads and unpacks Maven. Another downside is
that they are not configurable through a file (like &lt;code&gt;.travis.yml&lt;/code&gt;) &amp;mdash;
you should do everything through a UI.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.appveyor.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/appveyor.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.appveyor.com&quot;&gt;&lt;strong&gt;appveyor.com&lt;/strong&gt;&lt;/a&gt; is the only one
that runs Windows builds. Even though I&amp;#39;m working mostly with
Java and Ruby, which are expected to be platform independent, they
very often appear to be exactly the opposite. When your build
succeedes on Linux, there is almost no guarantee it will pass on
Windows or Mac. I&amp;#39;m planning to use appveyor in every project,
in combination with some other CI service. I&amp;#39;m still testing it though...&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.shippable.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/shippable.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.shippable.com&quot;&gt;&lt;strong&gt;shippable.com&lt;/strong&gt;&lt;/a&gt; was easy to configure
since it understands &lt;code&gt;.travis.yml&lt;/code&gt; out of the box. Besides that,
nothing fancy.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.wercker.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/wercker.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.wercker.com&quot;&gt;&lt;strong&gt;wercker.com&lt;/strong&gt;&lt;/a&gt; is a European product
from Amsterdam, which is still in beta and that&amp;#39;s why free
for all projects. The platform looks very promissing. It is still
free for private repositories and is backed up by
&lt;a href=&quot;https://gigaom.com/2014/10/01/wercker-takes-in-2-4-million-to-help-developers-test-their-code-in-the-cloud/&quot;&gt;investments&lt;/a&gt;.
I&amp;#39;m still testing it...&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.codeship.io'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/codeship.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codeship.io&quot;&gt;&lt;strong&gt;codeship.io&lt;/strong&gt;&lt;/a&gt; works fine, but their web UI
looks a bit out-dated. Anyway, I&amp;#39;m using them now, will see.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.magnum-ci.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/magnum.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.magnum-ci.com&quot;&gt;&lt;strong&gt;magnum-ci.com&lt;/strong&gt;&lt;/a&gt; is a very lightweight
and young system. It doesn&amp;#39;t connect automatically to Github,
so you should do some manual operations of adding a web hook.
Besides that, works just fine.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.drone.io'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/drone.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.drone.io&quot;&gt;&lt;strong&gt;drone.io&lt;/strong&gt;&lt;/a&gt; works fine, but their support
didn&amp;#39;t reply to me when I asked for a Maven version update. Besides
that, their badge is not updated correctly in Gitub README.md.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.circleci.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/circleci.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.circleci.com&quot;&gt;&lt;strong&gt;circleci.com&lt;/strong&gt;&lt;/a&gt; I still don&amp;#39;t know why my build
fails there. Really difficult to configure and understand
what&amp;#39;s going on. Trying to figure it out...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zeroci.com&quot;&gt;&lt;strong&gt;zeroci.com&lt;/strong&gt;&lt;/a&gt; looks like a one-man project, which
definitely needs usability testing. It was rather difficult to configure
a project via its web interface. The good thing is that it&amp;#39;s free, but its
quality is not high enough to recommend it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ship.io&quot;&gt;&lt;strong&gt;ship.io&lt;/strong&gt;&lt;/a&gt; is building only mobile applications (for iOS and Android).
Besides that, they don&amp;#39;t support Maven for Android apps, only Gradle.
I&amp;#39;ll try to build iOS Swift app with them soon....&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.solanolabs.com&quot;&gt;&lt;strong&gt;solanolabs.com&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.hosted-ci.com&quot;&gt;&lt;strong&gt;hosted-ci.com&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cloudbees.com&quot;&gt;&lt;strong&gt;cloudbees.com&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dploy.io/&quot;&gt;&lt;strong&gt;dploy.io&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;

&lt;p&gt;BTW, if you don&amp;#39;t like the idea of keeping continuous integration
in cloud, consider these on-premise software packages (in order or preference):
&lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt;,
&lt;a href=&quot;http://www.jetbrains.com/teamcity/&quot;&gt;TeamCity&lt;/a&gt;,
&lt;a href=&quot;http://www.thoughtworks.com/products/go-continuous-delivery&quot;&gt;Go&lt;/a&gt;,
&lt;a href=&quot;http://stridercd.com/&quot;&gt;Strider&lt;/a&gt;,
&lt;a href=&quot;http://buildbot.net/&quot;&gt;BuildBot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keep in mind that no matter how good and expensive your
continuous integration service is, it
&lt;a href=&quot;/2014/10/08/continuous-integration-is-dead.html&quot;&gt;won&amp;#39;t help you&lt;/a&gt;
unless you make your
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;master branch read-only&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/05/ten-hosted-continuous-integration-services.html</guid>
      <dc:date>2014-10-05T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Built-in Fake Objects</title>
      <link>http://www.yegor256.com/2014/09/23/built-in-fake-objects.html</link>
      <description>&lt;p&gt;While mock objects are perfect instruments for unit testing,
mocking through mock frameworks may turn your unit tests into
an unmaintainable mess. Thanks to them we often hear that
&amp;quot;mocking is bad&amp;quot; and &amp;quot;mocking is evil&amp;quot;.&lt;/p&gt;

&lt;p&gt;The root cause of this complexity is that our objects
are too big. They have many methods and these methods
return other objects, which also have methods. When we pass
a mock version of such an object as a parameter, we should
make sure that all of its methods return valid objects.&lt;/p&gt;

&lt;p&gt;This leads to inevitable complexity, which turns unit tests
to &lt;a href=&quot;https://news.ycombinator.com/item?id=7353767&quot;&gt;waste&lt;/a&gt;
almost impossible to maintain.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;object-hierarchy&quot;&gt;Object Hierarchy&lt;/h2&gt;

&lt;p&gt;Take the &lt;code&gt;Region&lt;/code&gt; interface from &lt;a href=&quot;http://dynamo.jcabi.com&quot;&gt;jcabi-dynamo&lt;/a&gt; as an example
(this snippet and all others in this article are simplified, for the
sake of brevity):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Its &lt;code&gt;table()&lt;/code&gt; method returns an instance of the &lt;code&gt;Table&lt;/code&gt; interface, which
has its own methods:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Frame&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Attributes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Region&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Interface &lt;code&gt;Frame&lt;/code&gt;, returned by the &lt;code&gt;frame()&lt;/code&gt; method, also has its
own methods. And so on.
In order to create a properly mocked instance of interface &lt;code&gt;Region&lt;/code&gt;,
one would normally create a dozen other mock objects. With &lt;a href=&quot;http://www.mockito.org&quot;&gt;Mockito&lt;/a&gt;
it will look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testMe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// many more lines here...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Frame&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Region&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And all of this is just a scaffolding before the actual testing.&lt;/p&gt;

&lt;h2 id=&quot;sample-use-case&quot;&gt;Sample Use Case&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s say, you&amp;#39;re developing a project that uses jcabi-dynamo for
managing data in DynamoDB. Your class may look similar to this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Region&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Region&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;employees&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can imagine how difficult it will be to unit test this class,
using Mockito, for example. First, we have
to mock the &lt;code&gt;Region&lt;/code&gt; interface. Then, we have to mock a &lt;code&gt;Table&lt;/code&gt; interface and make sure
it is returned by the &lt;code&gt;table()&lt;/code&gt; method. Then, we have to mock a &lt;code&gt;Frame&lt;/code&gt; interface, etc.&lt;/p&gt;

&lt;p&gt;The unit test will be much longer than the class itself. Besides that,
its real purpose, which is to test the retrieval of an employee&amp;#39;s salary, will not
be obvious to the reader.&lt;/p&gt;

&lt;p&gt;Moreover, when we need to test a similar method of a similar class,
we will need to restart this mocking from scratch. Again, multiple lines of code,
which will look very similar to what we have already written.&lt;/p&gt;

&lt;h2 id=&quot;fake-classes&quot;&gt;Fake Classes&lt;/h2&gt;

&lt;p&gt;The solution is to create fake classes and ship them
together with real classes. This is what &lt;a href=&quot;http://dynamo.jcabi.com&quot;&gt;jcabi-dynamo&lt;/a&gt;
is doing. Just look at its &lt;a href=&quot;http://dynamo.jcabi.com/apidocs-0.16.1/index.html&quot;&gt;JavaDoc&lt;/a&gt;.
There is a package called &lt;code&gt;com.jcabi.dynamo.mock&lt;/code&gt; that contains
only fake classes, suitable only for unit testing.&lt;/p&gt;

&lt;p&gt;Even though their sole purpose is to optimize unit testing, we ship
them together with production code, in the same JAR package.&lt;/p&gt;

&lt;p&gt;This is what a test will look like, when a fake class &lt;code&gt;MkRegion&lt;/code&gt; is used:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmployeeTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;canFetchSalaryFromDynamoDb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Region&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MkRegion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;H2Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;employees&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;employees&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AttributeValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This test looks obvious to me. First, we create a fake DynamoDB region,
which works on top of &lt;code&gt;H2Data&lt;/code&gt; storage (in-memory H2 database). The storage
will be ready for a single &lt;code&gt;employees&lt;/code&gt; table with a hash key &lt;code&gt;name&lt;/code&gt; and
a single &lt;code&gt;salary&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Then, we put a record into the table, with a hash &lt;code&gt;Jeff&lt;/code&gt; and a salary
&lt;code&gt;50000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we create an instance of class &lt;code&gt;Employee&lt;/code&gt; and check how it
fetches the salary from DynamoDB.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m currently doing the same thing in almost every open source library I&amp;#39;m working with.
I&amp;#39;m creating a collection of fake classes, that simplify testing
inside the library and for its users.&lt;/p&gt;

&lt;p&gt;BTW, a great article on the same subject:
&lt;a href=&quot;http://nedbatchelder.com/blog/201206/tldw_stop_mocking_start_testing.html&quot;&gt;tl;dw: Stop mocking, start testing&lt;/a&gt;
by Ned Batchelder.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/09/23/built-in-fake-objects.html</guid>
      <dc:date>2014-09-23T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Getters/Setters. Evil. Period.</title>
      <link>http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html</link>
      <description>&lt;p&gt;There is an old debate, started in 2003 by Allen Holub
in this &lt;a href=&quot;http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html&quot;&gt;Why getter and setter methods are evil&lt;/a&gt;
famous article, about whether getters/setters is an anti-pattern
and should be avoided or if it is something we inevitably need in object-oriented
programming. I&amp;#39;ll try to add my two cents to this discussion.&lt;/p&gt;

&lt;p&gt;The gist of the following text is this: getters and setters is
a terrible practice and those who use it can&amp;#39;t be excused.
Again, to avoid any misunderstanding, I&amp;#39;m not saying that get/set should be avoided when possible.
No. I&amp;#39;m saying that you should &lt;strong&gt;never&lt;/strong&gt; have them near your code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT'&gt;&lt;img src='http://www.yegor256.com/images/2014/09/object-thinking-by-david-west.png' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Arrogant enough to catch your attention? You&amp;#39;ve been using
that get/set pattern for 15 years and you&amp;#39;re a respected Java architect?
And you don&amp;#39;t want to hear that nonsense from a stranger? Well, I understand
your feelings. I felt almost the same when I stumbled upon
&lt;a href=&quot;http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT&quot;&gt;Object Thinking&lt;/a&gt;
by David West, the best book about object-oriented programming I&amp;#39;ve read so far.
So please. Calm down and try to understand while I try to explain.&lt;/p&gt;

&lt;h2 id=&quot;existing-arguments&quot;&gt;Existing Arguments&lt;/h2&gt;

&lt;p&gt;There are a few arguments against &amp;quot;accessors&amp;quot;
(another name for getters and setters), in an object-oriented world.
All of them, I think, are not strong enough. Let&amp;#39;s briefly go
through them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tell, Don&amp;#39;t Ask&lt;/strong&gt;
Allen Holub says, &amp;quot;Don&amp;#39;t ask for the information
you need to do the work; ask the object that has the information
to do the work for you&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Violated Encapsulation Principle&lt;/strong&gt;
An object can be teared apart by other objects, since they
are able to inject any new data into it, through setters. The object simply
can&amp;#39;t encapsulate its own state safely enough, since anyone
can alter it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exposed Implementation Details&lt;/strong&gt;
If we can get an object out
of another object, we are relying too much on the first object&amp;#39;s implementation
details. If tomorrow it will change, say, the type of that result,
we have to change our code as well.&lt;/p&gt;

&lt;p&gt;All these justifications are reasonable, but they are missing the main point.&lt;/p&gt;

&lt;h2 id=&quot;fundamental-misbelief&quot;&gt;Fundamental Misbelief&lt;/h2&gt;

&lt;p&gt;Most programmers believe that an object is a data structure with methods.
I&amp;#39;m quoting &lt;a href=&quot;http://java.dzone.com/articles/getters-and-setters-are-not&quot;&gt;Getters and Setters Are Not Evil&lt;/a&gt;,
an article by Bozhidar Bozhanov:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But the majority of objects for which people generate getters
and setters are simple data holders.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This misconception is the consequence of a huge misunderstanding!
Objects are not &amp;quot;simple data holders&amp;quot;. Objects are &lt;strong&gt;not&lt;/strong&gt; data structures
with attached methods. This &amp;quot;data holder&amp;quot; concept came to object-oriented programming
from procedural languages, especially C and COBOL.
I&amp;#39;ll say it again: an object is &lt;strong&gt;not&lt;/strong&gt; a set of data elements
and functions that manipulate them. An object is &lt;strong&gt;not&lt;/strong&gt; a data entity.&lt;/p&gt;

&lt;p&gt;What is it then?&lt;/p&gt;

&lt;h2 id=&quot;a-ball-and-a-dog&quot;&gt;A Ball and A Dog&lt;/h2&gt;

&lt;p&gt;In true object-oriented programming, objects are
living creatures, like you and me. They are living organisms,
with their own behaviour, properties and a life cycle.&lt;/p&gt;

&lt;p&gt;Can a living organism have a setter?
Can you &amp;quot;set&amp;quot; a ball to a dog? Not really.
But that is exactly what the following piece of software is doing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ball&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How does that sound?&lt;/p&gt;

&lt;p&gt;Can you get a ball from a dog? Well, you probably can,
if she ate it and you&amp;#39;re doing surgery. In that case, yes, we can &amp;quot;get&amp;quot; a ball from a dog. This is what
I&amp;#39;m talking about:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Ball&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or an even more ridiculous example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;23kg&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Can you imagine this transaction in the real world? :)&lt;/p&gt;

&lt;p&gt;Does it look similar to what you&amp;#39;re writing every day? If yes,
then you&amp;#39;re a procedural programmer. Admit it. And this is what
David West has to say about it, on page 30 of his book:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Step one in the transformation of a successful procedural developer
into a successful object developer is a lobotomy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do you need a lobotomy? Well, I definitely needed one and received it, while
reading West&amp;#39;s &lt;a href=&quot;http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT&quot;&gt;Object Thinking&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;object-thinking&quot;&gt;Object Thinking&lt;/h2&gt;

&lt;p&gt;Start thinking like an object and you will immediately rename those methods.
This is what you will probably get:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ball&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Ball&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;give&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we&amp;#39;re treating the dog as a real animal, who can take a ball from us
and can give it back, when we ask. Worth mentioning is that the
dog can&amp;#39;t give &lt;code&gt;NULL&lt;/code&gt; back. Dogs simply don&amp;#39;t know what &lt;code&gt;NULL&lt;/code&gt; is :)
Object thinking immediately eliminates
&lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;NULL references&lt;/a&gt;
from your code.&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/09/fish-called-wanda.png' style='width:600px;' alt='A Fish Called Wanda (1988) by Charles Crichton'/&gt;&lt;figcaption&gt;A Fish Called Wanda (1988) by Charles Crichton&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Besides that, object thinking will lead to object immutability, like in
the &amp;quot;weight of the dog&amp;quot; example. You would re-write that like this instead:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;23kg&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The dog is an immutable living organism, which doesn&amp;#39;t allow anyone from
the outside to change her weight, or size, or name, etc. She can tell, on
request, her weight or name. There is nothing wrong with public
methods that demonstrate requests for certain &amp;quot;insides&amp;quot; of an object. But these
methods are not &amp;quot;getters&amp;quot; and they should never have the &amp;quot;get&amp;quot; prefix. We&amp;#39;re
not &amp;quot;getting&amp;quot; anything from the dog. We&amp;#39;re not getting her name. We&amp;#39;re asking
her to tell us her name. See the difference?&lt;/p&gt;

&lt;p&gt;We&amp;#39;re not talking semantics here, either. We are differentiating the procedural
programming mindset from an object-oriented one. In procedural programming,
we&amp;#39;re working with data, manipulating them, getting, setting,
and deleting when necessary. We&amp;#39;re in charge, and the data is just a passive component.
The dog is nothing to us &amp;mdash; it&amp;#39;s just a &amp;quot;data holder&amp;quot;.
It doesn&amp;#39;t have its own life. We are free
to get whatever is necessary from it and set any data into it.
This is how C, COBOL, Pascal and many other procedural languages work(ed).&lt;/p&gt;

&lt;p&gt;On the contrary, in a true object-oriented world, we treat objects like
living organisms, with their own date of birth and a moment of death &amp;mdash;
with their own identity and habits, if you wish. We can ask a dog to
give us some piece of data (for example, her weight), and she may
return us that information. But we always remember that the dog is
an active component. She decides what will happen after our request.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why, &lt;strong&gt;it is conceptually incorrect to have any methods starting
with &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;get&lt;/code&gt; in an object&lt;/strong&gt;. And it&amp;#39;s not about breaking encapsulation, like
many people argue. It is whether you&amp;#39;re thinking like an object
or you&amp;#39;re still writing COBOL in Java syntax.&lt;/p&gt;

&lt;p&gt;PS. Yes, you may ask, &amp;mdash; what about JavaBeans, JPA, JAXB, and many other
Java APIs that rely on the get/set notation? What about Ruby&amp;#39;s built-in feature
that simplies the creation of accessors? Well, all of that is our misfortune.
It is much easier to stay in a primitive world of procedural COBOL than to
truly understand and appreciate the beautiful world of true objects.&lt;/p&gt;

&lt;p&gt;PPS. Forgot to say, yes, dependency injection via setters is also
a terrible anti-pattern. About it, in
&lt;a href=&quot;/2014/10/03/di-containers-are-evil.html&quot;&gt;one of the next posts&lt;/a&gt; :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html</guid>
      <dc:date>2014-09-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Deployment Script vs. Rultor</title>
      <link>http://www.yegor256.com/2014/09/11/deployment-script-vs-rultor.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;When I explain how &lt;a href=&quot;http://www.rultor.com&quot;&gt;Rultor&lt;/a&gt; automates deployment/release processes,
very often I hear something like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But I already have a script that deploys everything automatically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This response is very common, so I decided to summarize my three main arguments for
automated Rultor deployment/release processes in one article: 1) isolated docker containers,
2) visibility of logs and 3) security of credentials.&lt;/p&gt;

&lt;p&gt;Read about them and see what Rultor gives you on top of &lt;strong&gt;your existing&lt;/strong&gt;
deployment script(s).&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/09/charlie-and-chocolate-factory-father.png' style='width:600px;' alt='Charlie and the Chocolate Factory (2005) by Tim Burton'/&gt;&lt;figcaption&gt;Charlie and the Chocolate Factory (2005) by Tim Burton&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Before we start with the arguments, let me emphasize that Rultor
is a useful interface to your custom scripts. When you decide
to automate deployment with Rultor, you don&amp;#39;t throw away any of your
existing scripts. You just teach Rultor how to call them.&lt;/p&gt;

&lt;h2 id=&quot;isolated-docker-containers&quot;&gt;Isolated Docker Containers&lt;/h2&gt;

&lt;p&gt;The first advantage you get once you start calling your deployment
scripts from Rultor is the &lt;a href=&quot;/2014/07/29/docker-in-rultor.html&quot;&gt;usage of Docker&lt;/a&gt;.
I&amp;#39;m sure you know what &lt;a href=&quot;http://www.docker.io&quot;&gt;Docker&lt;/a&gt; is, but for those who don&amp;#39;t &amp;mdash; it is a
manager of virtual Linux &amp;quot;machines&amp;quot;. It&amp;#39;s a command line script
that you call when you need to run some script in a new virtual machine (aka &amp;quot;container&amp;quot;).
Docker starts the container almost immediately and runs your script. The beauty
of Docker is that every container is a perfectly isolated Linux environment, with its
own file system, memory, processes, etc.&lt;/p&gt;

&lt;p&gt;When you tell Rultor to run your deployment script, it starts a new Docker
container and runs your script there. But what benefit does this give me, you ask?&lt;/p&gt;

&lt;p&gt;The main benefit is that the container gets destroyed right after your script
is done. This means that you can do all pre-configuration inside the
container without any fear of conflict with your main working
platform. Let me give an example.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m developing on MacBook, where I install and remove packages which I need for development.
At the same time, I have a project that, in order to be deployed, requires PHP 5.3, MySQL 5.6, phing,
phpunit, phpcs and xdebug. Every MacOS version needs to be configured specifically
to get these applications up and running, and it&amp;#39;s a time-consuming job.&lt;/p&gt;

&lt;p&gt;I can change laptops, and I can change MacOS versions, but the project stays the same. It
still requires the same set of packages in order to run its deployment script
successfully. And the project is not in active development any more. I simply
don&amp;#39;t need these packages for my day-to-day work, since I&amp;#39;m working with Java more now.
But, when I need to make a minor fix to that PHP project and deploy it,
I have to install all the required PHP packages and configure them.
Only after that can I deploy that minor fix.&lt;/p&gt;

&lt;p&gt;It is annoying, to say the least.&lt;/p&gt;

&lt;p&gt;Docker gives me the ability to automate all of this together. My &lt;strong&gt;existing&lt;/strong&gt; deployment
script will get a preamble, which will install and configure all necessary
PHP-related packages in a clean Ubuntu container. This preamble will be executed
on every run of my deployment script, &lt;strong&gt;inside&lt;/strong&gt; a Docker container. For example,
it may look like this:&lt;/p&gt;

&lt;p&gt;My deployment script looked like this before I started to use Rultor:&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
phing &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
git ftp push --user &lt;span class=&quot;s2&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --passwd &lt;span class=&quot;s2&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --syncroot php/src ftp://ftp.example.com/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Just two lines. The first one is a full run of unit tests. The second one
is an FTP deployment to the production server. Very simple. But this script
will only work if PHP 5.3, MySQL, phing, xdebug, phpcs and phpunit are installed.
Again, it&amp;#39;s a lot of work to install and configure them every time I upgrade
my MacOS or change a laptop.&lt;/p&gt;

&lt;p&gt;Needless to say, that if/when someone joins the project and
tries to run my scripts, he/she will have to do this pre-installation
work again.&lt;/p&gt;

&lt;p&gt;So, here is a new script, which I&amp;#39;m using now.
It is being executed inside a new Docker container, every time:&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# First, we install all prerequisites&lt;/span&gt;
sudo apt-get install -y php5 php5-mysql mysql
sudo apt-get install php-pear
sudo pear channel-discover pear.phpunit.de
sudo pear install phpunit/PHPUnit
sudo pear install PHP_CodeSniffer
sudo pecl install xdebug
sudo pear channel-discover pear.phing.info
sudo pear install phing/phing
&lt;span class=&quot;c&quot;&gt;# And now the same script I had before&lt;/span&gt;
phing &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
git ftp push --user &lt;span class=&quot;s2&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --passwd &lt;span class=&quot;s2&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --syncroot php/src ftp://ftp.example.com/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Obviously, running this script on my MacBook (without virtualization) would
cause a lot of trouble. Well, I don&amp;#39;t even have &lt;code&gt;apt-get&lt;/code&gt; here :)&lt;/p&gt;

&lt;p&gt;Thus, the first benefit that Rultor gives you is an isolation
of your deployment script in its own virtual environment. We have this
mostly thanks to Docker.&lt;/p&gt;

&lt;h2 id=&quot;visibility-of-logs&quot;&gt;Visibility of Logs&lt;/h2&gt;

&lt;p&gt;Traditionally, we keep deployment scripts in some &lt;code&gt;~/deploy&lt;/code&gt; directory
and run them with a magic set of parameters. In a small project, you
do this yourself and this directory is on your own laptop. In a bigger
project, there is a &amp;quot;deployment&amp;quot; server, that has that magic directory
with a set of scripts that can be executed only by a few trusted
senior developers. I&amp;#39;ve seen this setup many times.&lt;/p&gt;

&lt;p&gt;The biggest issue here is traceability. It&amp;#39;s almost impossible to find
out who deployed what and why some particular deployment failed. The senior
deployment gurus simply SSH to the server and run those magic scripts
with magic parameters. Logs are usually lost and problem tracking
is very difficult or impossible.&lt;/p&gt;

&lt;p&gt;Rultor offers something different. With Rultor, there is no SSH access
to deployment scripts any more. All scripts stay in the &lt;code&gt;.rultor.yml&lt;/code&gt; configuration
file, and you start them by posting messages in your issue tracking system
(for example Github, JIRA or Trac). Rultor runs the script and publishes
its full log right to your ticket. The log stays with your project forever.
You can always get back to the ticket you were working with and check
why deployment failed and what instructions were actually executed.&lt;/p&gt;

&lt;p&gt;For example, check out this Github issue, where I was deploying a new
version of Rultor itself, and failed a few times:
&lt;a href=&quot;https://github.com/yegor256/rultor/issues/563&quot;&gt;yegor256/rultor#563&lt;/a&gt;. All
my failed attempts are protocolled. I can always get back to them and
investigate. For a big project this information is vital.&lt;/p&gt;

&lt;p&gt;Thus, the second benefit of Rultor versus a standalone deployment
script is visibility of every single operation.&lt;/p&gt;

&lt;h2 id=&quot;security-of-credentials&quot;&gt;Security of Credentials&lt;/h2&gt;

&lt;p&gt;When you have a custom script sitting in your laptop or in that
secret team deployment server, your production credentials stay
close to it. There is just no other way. If your software works with
a database, it has to know login credentials (user name, password, DB name,
port number, etc.). Well, in the worst case, some people just hard
code that information right into the source code.
We aren&amp;#39;t even going to discuss this case, that&amp;#39;s how bad it is.&lt;/p&gt;

&lt;p&gt;But let&amp;#39;s say you separate your DB credentials from the source code. You will
have something like a &lt;code&gt;db.properties&lt;/code&gt; or &lt;code&gt;db.ini&lt;/code&gt; file, which will be attached
to the application right before deployment. You can also keep that file
directly in the production server, which is even better, but not always
possible, especially with PaaS deployments, for example.&lt;/p&gt;

&lt;p&gt;A similar problem exists with deployments of artifacts to repositories. Say,
you&amp;#39;re regularly deploying to RubyGems.org. Your &lt;code&gt;~/.gem/credentials&lt;/code&gt; will
contain your secret API key.&lt;/p&gt;

&lt;p&gt;So, very often, your deployment scripts are accompanied by some files
with sensitive and secure information. And these files have this information
in a plain, open format. No encryption, no protection. Just user names, passwords,
codes and tokens in plain text.&lt;/p&gt;

&lt;p&gt;Why is this bad? Well, for a single developer with a single laptop this doesn&amp;#39;t
sound like a problem. Although, I don&amp;#39;t like the idea of losing a laptop somewhere
in an airport with all credentials open and ready to be used. You may
argue that there are disc protection tools, like FileVault for MacOS or
BestCrypt for Windows. Yes, maybe.&lt;/p&gt;

&lt;p&gt;But let&amp;#39;s see what happens when we have a team of developers, working together
and sharing those deployment scripts &lt;strong&gt;and&lt;/strong&gt; files with credentials. Once you
give access to your deployment scripts to a new member of the team, you have
to share all that sensitive data. There is just no way around it. In order
to use the scripts he/she has to be able to open files with credentials.&lt;/p&gt;

&lt;p&gt;This is a problem, if you care about the security of your data.&lt;/p&gt;

&lt;p&gt;Rultor solves this problem by offering an on-the-fly GPG decryption of your
sensitive data, right before they are used by your deployment scripts. In
the &lt;code&gt;.rultor.yml&lt;/code&gt; configuration file you just say:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;db.ini&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;repo/db.ini.asc&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ftp put db.ini production&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, you encrypt your &lt;code&gt;db.ini&lt;/code&gt; using a Rultor GPG key, and fearlessly
commit &lt;code&gt;db.ini.asc&lt;/code&gt; to the repository. Nobody will be able to open and read
that file, except the Rultor server itself, right before running the
deployment script.&lt;/p&gt;

&lt;p&gt;Thus, the third benefit of Rultor versus a standalone deployment script
is proper security of sensitive data.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 11 Sep 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/09/11/deployment-script-vs-rultor.html</guid>
      <dc:date>2014-09-11T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>RESTful API and a Web Site in the Same URL</title>
      <link>http://www.yegor256.com/2014/09/09/restful-web-sites.html</link>
      <description>&lt;p&gt;Look at Github RESTful API, for example. To get information
about a repository you should make a GET request to
&lt;a href=&quot;https://api.github.com/repos/yegor256/rultor&quot;&gt;api.github.com/repos/yegor256/rultor&lt;/a&gt;.
In response, you will get a JSON document with all the details of the
&lt;code&gt;yegor256/rultor&lt;/code&gt; repository. Try it, the URL doesn&amp;#39;t require any authentication.&lt;/p&gt;

&lt;p&gt;To open the same repository in a nice HTML+CSS page, you should use
a different URL: &lt;a href=&quot;https://github.com/yegor256/rultor&quot;&gt;github.com/yegor256/rultor&lt;/a&gt;.
The URL is different, the server-side is definitely different, but the
nature of the data is exactly the same. The only thing that changes is
a representation layer.&lt;/p&gt;

&lt;p&gt;In the first case, we get JSON; in the second &amp;mdash; HTML.&lt;/p&gt;

&lt;p&gt;How about combining them? How about using the same URL and the same
server-side processing mechanism for both of them? How about shifting the whole rendering task
to the client-side (the browser) and letting the server work solely with
the data?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/09/good_bad_weird.png' style='width:600px;' alt='The Good, the Bad, The Wierd (2008) by Kim Jee-woon'/&gt;&lt;figcaption&gt;The Good, the Bad, The Wierd (2008) by Kim Jee-woon&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;XSLT is the technology that can help us do this.
In &lt;a href=&quot;/2014/06/25/xml-and-xslt-in-browser.html&quot;&gt;&amp;quot;XML+XSLT in a Browser&amp;quot;&lt;/a&gt;
I explained briefly how it works in a browser. In a nutshell, the
server returns an XML with some data and a link to the XSL stylesheet. The
stylesheet, being executed in a browser, converts XML to HTML. XSL language
is as powerful as any other rendering engine, like JSP, JSF, Tiles, or what have you.
Actually, it is much more powerful.&lt;/p&gt;

&lt;p&gt;Using this approach we literally remove the entire rendering layer
(&amp;quot;View&amp;quot; in the MVC paradigm) from the server and move it to the browser.&lt;/p&gt;

&lt;p&gt;If we can make it possible, the web server will exponse just a RESTful API,
and every response page will have an XSL stylesheet attached. What do
we gain? We&amp;#39;ll discuss later, at the end of the post. Now, let&amp;#39;s see
what problems we will face:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;JSON doesn&amp;#39;t have a rendering layer. There is no such thing
as XSLT for JSON. So, we will have to forget about JSON and stay
with XML only. For me, this sounds perfectly all right. Others
don&amp;#39;t like XML and prefer to work with JSON only.
Never understood them :)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;XSLT 2.0 is not supported by all browsers. Even XSLT 1.0 is
only supported by some of them. For example, Internet Explorer 8 doesn&amp;#39;t
support XSLT at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Browsers support only &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; HTTP methods, while
traditional RESTful APIs exploit also, at least, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first problem is not really a problem. It&amp;#39;s just a matter
of taste (and level of education). The last two problems are much
more serious. Let&amp;#39;s discuss them.&lt;/p&gt;

&lt;h2 id=&quot;xsl-transformation-on-the-server&quot;&gt;XSL Transformation on the Server&lt;/h2&gt;

&lt;p&gt;XSLT is not supported by some browsers. How do we solve this?&lt;/p&gt;

&lt;p&gt;I think that the best approach is to parse the &lt;code&gt;User-Agent&lt;/code&gt; HTTP header
in every request and make a guess, whether this particular version
of the browser supports XSLT or not. It&amp;#39;s not so difficult to do,
since this compatibility information is public.&lt;/p&gt;

&lt;p&gt;If the browser doesn&amp;#39;t support XSLT, we can do the transformation
on the server side. We already have the XML with data, generated by the server,
and we already have the XSL attached to it. All we need to do is to apply
the latter to the former and obtain an HTML page. Then, we return the HTML to
the browser.&lt;/p&gt;

&lt;p&gt;Besides that, we can also pay attention to the &lt;code&gt;Accept&lt;/code&gt; header. If it is
set to &lt;code&gt;application/xml&lt;/code&gt; or &lt;code&gt;text/xml&lt;/code&gt;, we return XML, no matter what
&lt;code&gt;User-Agent&lt;/code&gt; is saying. This means, basically, that some API client
is talking to us, not a browser. And this client is not interested in HTML,
but in pure data in XML format.&lt;/p&gt;

&lt;h2 id=&quot;post-instead-of-put&quot;&gt;POST Instead of PUT&lt;/h2&gt;

&lt;p&gt;There is no workaround for this. Browsers don&amp;#39;t know anything about &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt;.
So, we should also forget them in our RESTful APIs. We should design
our API using only two methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;. Is this even possible?
Yes. Why not? It won&amp;#39;t look as fancy as with all six methods (some APIs
also use &lt;code&gt;OPTIONS&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt;), but it will work.&lt;/p&gt;

&lt;h2 id=&quot;what-do-we-gain?&quot;&gt;What Do We Gain?&lt;/h2&gt;

&lt;p&gt;OK, here is the question &amp;mdash; why do we need this? What&amp;#39;s wrong with
the way most people work now? Why can&amp;#39;t we make a web site separate from the API?
What benefits do we get if we combine them?&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been combining them in all web applications I&amp;#39;ve worked with since 2011.
And the biggest advantage I&amp;#39;m experiencing is avoiding code duplication.&lt;/p&gt;

&lt;p&gt;It is obvious that in the server we don&amp;#39;t
duplicate controllers (in the case of MVC). We have one layer of controllers,
and they control both the API and the web site (since they are one thing now).&lt;/p&gt;

&lt;p&gt;Avoiding code duplication is a very important achievement. Moreover,
I believe that it is the most important target for any software project.&lt;/p&gt;

&lt;p&gt;These small web apps work exactly as explained above:
&lt;a href=&quot;http://www.s3auth.com&quot;&gt;s3auth.com&lt;/a&gt;,
&lt;a href=&quot;http://www.stateful.co&quot;&gt;stateful.co&lt;/a&gt;,
&lt;a href=&quot;http://www.bibrarian.com&quot;&gt;bibrarian.com&lt;/a&gt;.
They are all open source, and you can see their source code in Github.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 09 Sep 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/09/09/restful-web-sites.html</guid>
      <dc:date>2014-09-09T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Simple Java SSH Client</title>
      <link>http://www.yegor256.com/2014/09/02/java-ssh-client.html</link>
      <description>&lt;p&gt;An execution of a shell command via SSH can be done in
Java, in just a few lines, using &lt;a href=&quot;http://ssh.jcabi.com&quot;&gt;jcabi-ssh&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Plain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SSH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;ssh.example.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;yegor&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;echo &amp;#39;Hello, world!&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://ssh.jcabi.com&quot;&gt;jcabi-ssh&lt;/a&gt; is
a convenient wrapper of &lt;a href=&quot;http://www.jcraft.com/jsch/&quot;&gt;JSch&lt;/a&gt;,
a well-known pure Java implementation of SSH2.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is a more complex scenario, where I upload a file via SSH
and then read back its grepped content:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Shell shell = new SSH(
  &amp;quot;ssh.example.com&amp;quot;, 22,
  &amp;quot;yegor&amp;quot;, &amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot;
);
File file = new File(&amp;quot;/tmp/data.txt&amp;quot;);
new Shell.Safe(shell).exec(
  &amp;quot;cat &amp;gt; d.txt &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; grep &amp;#39;some text&amp;#39; d.txt&amp;quot;,
  new FileInputStream(file),
  Logger.stream(Level.INFO, this),
  Logger.stream(Level.WARNING, this)
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Class &lt;code&gt;SSH&lt;/code&gt;, which implements interface &lt;code&gt;Shell&lt;/code&gt;, has only one method, &lt;code&gt;exec&lt;/code&gt;.
This method accepts four arguments:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;interface Shell {
  int exec(
    String cmd, InputStream stdin,
    OutputStream stdout, OutputStream stderr
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think it&amp;#39;s obvious what these arguments are about.&lt;/p&gt;

&lt;p&gt;There are also a few convenient decorators that make it easier to operate with
simple commands.&lt;/p&gt;

&lt;h2 id=&quot;shell.safe&quot;&gt;Shell.Safe&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Shell.Safe&lt;/code&gt; decorates an instance of &lt;code&gt;Shell&lt;/code&gt; and throws an exception
if the &lt;code&gt;exec&lt;/code&gt; exit code is not equal to zero. This may be very useful when
you want to make sure that your command executed successfully, but don&amp;#39;t
want to duplicate &lt;code&gt;if/throw&lt;/code&gt; in many places of your code.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Shell ssh = new Shell.Safe(
  new SSH(
    &amp;quot;ssh.example.com&amp;quot;, 22,
    &amp;quot;yegor&amp;quot;, &amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot;
  )
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;shell.verbose&quot;&gt;Shell.Verbose&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Shell.Verbose&lt;/code&gt; decorates an instance of &lt;code&gt;Shell&lt;/code&gt; and copies
&lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; to the slf4j logging facility (using
&lt;a href=&quot;http://log.jcabi.com&quot;&gt;jcabi-log&lt;/a&gt;). Of course, you can combine
decorators, for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Shell ssh = new Shell.Verbose(
  new Shell.Safe(
    new SSH(
      &amp;quot;ssh.example.com&amp;quot;, 22,
      &amp;quot;yegor&amp;quot;, &amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot;
    )
  )
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;shell.plain&quot;&gt;Shell.Plain&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Shell.Plain&lt;/code&gt; is a wrapper of &lt;code&gt;Shell&lt;/code&gt; that introduces a new &lt;code&gt;exec&lt;/code&gt; method
with only one argument, a command to execute. It also doesn&amp;#39;t return an
exit code, but &lt;code&gt;stdout&lt;/code&gt; instead. This should be very convenient when you want
to execute a simple command and just get its output
(I&amp;#39;m combining it with &lt;code&gt;Shell.Safe&lt;/code&gt; for safety):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;String login = new Shell.Plain(new Shell.Safe(ssh)).exec(&amp;quot;whoami&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;

&lt;p&gt;You need a single dependency
&lt;a href=&quot;http://repo1.maven.org/maven2/com/jcabi/jcabi-ssh&quot;&gt;&lt;code&gt;jcabi-ssh.jar&lt;/code&gt;&lt;/a&gt;
in your Maven project
(get its latest version in &lt;a href=&quot;http://search.maven.org/&quot;&gt;Maven Central&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.jcabi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jcabi-ssh&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The project is in &lt;a href=&quot;https://github.com/jcabi/jcabi-ssh&quot;&gt;Github&lt;/a&gt;.
If you have any problems, just submit an issue. I&amp;#39;ll try to help.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/09/02/java-ssh-client.html</guid>
      <dc:date>2014-09-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Release to Maven Central, in One Click</title>
      <link>http://www.yegor256.com/2014/08/19/how-to-release-to-maven-central.html</link>
      <description>&lt;p&gt;When I release a new version of &lt;a href=&quot;http://aspects.jcabi.com&quot;&gt;jcabi-aspects&lt;/a&gt;,
a Java open source library, to Maven Central, it takes 30 seconds of my time.
Maybe even less. Recently, I released version 0.17.2. You can see
how it all happened, in &lt;a href=&quot;https://github.com/jcabi/jcabi-aspects/issues/80&quot;&gt;Github issue #80&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/08/github-ticket-80.png' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;As you see, I gave a command to &lt;a href=&quot;http://www.rultor.com&quot;&gt;Rultor&lt;/a&gt;,
and it released a new version to Maven central. I didn&amp;#39;t do anything else.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s see how you can do the same. How you can configure your project
so that the release of its new version to Maven Central
takes just a few seconds of your time.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;By the way, I assume that you&amp;#39;re hosting your project in Github. If not,
this entire tutorial won&amp;#39;t work. If you are still not in Github, I would
strongly recommend moving there.&lt;/p&gt;

&lt;h2 id=&quot;prepare-your-pom&quot;&gt;Prepare Your POM&lt;/h2&gt;

&lt;p&gt;Make sure your &lt;code&gt;pom.xml&lt;/code&gt; contains all elements required by Sonatype,
explained in &lt;a href=&quot;http://central.sonatype.org/pages/requirements.html&quot;&gt;Central Sync Requirements&lt;/a&gt;.
We will deploy to Sonatype, and they will syncronize all JAR (and not only)
artifacts to Maven Central.&lt;/p&gt;

&lt;h2 id=&quot;register-a-project-with-sonatype&quot;&gt;Register a Project With Sonatype&lt;/h2&gt;

&lt;p&gt;Create an account in &lt;a href=&quot;https://issues.sonatype.org/&quot;&gt;Sonatype JIRA&lt;/a&gt;
and raise a ticket, asking to approve your groupId. This
&lt;a href=&quot;http://central.sonatype.org/pages/ossrh-guide.html&quot;&gt;OSSRH Guide&lt;/a&gt;
explains this step in more detail.&lt;/p&gt;

&lt;h2 id=&quot;create-and-distribute-a-gpg-key&quot;&gt;Create and Distribute a GPG Key&lt;/h2&gt;

&lt;p&gt;Create a GPG key and distribute it, as explained in this
&lt;a href=&quot;http://central.sonatype.org/pages/working-with-pgp-signatures.html&quot;&gt;Working with PGP Signatures&lt;/a&gt;
article.&lt;/p&gt;

&lt;p&gt;When this step is done, you should have two files:
&lt;code&gt;pubring.gpg&lt;/code&gt; and &lt;code&gt;secring.gpg&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;create-settings.xml&quot;&gt;Create settings.xml&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;settings.xml&lt;/code&gt;, next to the two &lt;code&gt;.gpg&lt;/code&gt; files created in the previous step:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;foo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- give it the name of your project --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;gpg.homedir&amp;gt;&lt;/span&gt;/home/r&lt;span class=&quot;nt&quot;&gt;&amp;lt;/gpg.homedir&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;gpg.keyname&amp;gt;&lt;/span&gt;9A105525&lt;span class=&quot;nt&quot;&gt;&amp;lt;/gpg.keyname&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;gpg.passphrase&amp;gt;&lt;/span&gt;my-secret&lt;span class=&quot;nt&quot;&gt;&amp;lt;/gpg.passphrase&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servers&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;server&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;sonatype&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;username&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Sonatype JIRA user name --&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/username&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;password&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Sonatype JIRA pwd --&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/password&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/servers&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, &lt;code&gt;9A105525&lt;/code&gt; is the ID of your public key, and &lt;code&gt;my-secret&lt;/code&gt;
is the pass phrase you have used while generating the keys.&lt;/p&gt;

&lt;h2 id=&quot;encrypt-security-assets&quot;&gt;Encrypt Security Assets&lt;/h2&gt;

&lt;p&gt;Now, encrypt these three files with a &lt;a href=&quot;https://github.com/yegor256/rultor-remote&quot;&gt;rultor remote&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;$ gem install rultor
$ rultor encrypt -p me/test pubring.gpg
$ rultor encrypt -p me/test secring.gpg
$ rultor encrypt -p me/test settings.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of &lt;code&gt;me/test&lt;/code&gt; you should use the name of your Github project.&lt;/p&gt;

&lt;p&gt;You will get three new files: &lt;code&gt;pubring.gpg.asc&lt;/code&gt;, &lt;code&gt;secring.gpg.asc&lt;/code&gt;
and &lt;code&gt;settings.xml.asc&lt;/code&gt;. Add them to the root directory of your project,
commit and push. The files contain your secret information,
but only the Rultor server can decrypt them.&lt;/p&gt;

&lt;h2 id=&quot;add-sonatype-repositories&quot;&gt;Add Sonatype Repositories&lt;/h2&gt;

&lt;p&gt;I would recommend using &lt;a href=&quot;http://parent.jcabi.com&quot;&gt;jcabi-parent&lt;/a&gt;, as
a parent pom for your project. This will make many further steps
unnecessary. If you&amp;#39;re using jcabi-parent, skip this step.&lt;/p&gt;

&lt;p&gt;However, if you don&amp;#39;t use jcabi-parent, you should add these two repositories
to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;distributionManagement&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;oss.sonatype.org&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;snapshotRepository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;oss.sonatype.org&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/snapshotRepository&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/distributionManagement&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-gpg-plugin&quot;&gt;Configure GPG Plugin&lt;/h2&gt;

&lt;p&gt;Again, I&amp;#39;d recommend using &lt;a href=&quot;jcabi-parent&quot;&gt;http://parent.jcabi.com&lt;/a&gt;,
which configures this plugin automatically. If you&amp;#39;re using it, skip this step.&lt;/p&gt;

&lt;p&gt;Otherwise, add this plugin to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  [..]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    [..]
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
      [..]
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-gpg-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;sign-artifacts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;verify&lt;span class=&quot;nt&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;sign&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-versions-plugin&quot;&gt;Configure Versions Plugin&lt;/h2&gt;

&lt;p&gt;Once again, I recommend using &lt;a href=&quot;jcabi-parent&quot;&gt;http://parent.jcabi.com&lt;/a&gt;. It
configures all required plugins out-of-the-box. If you&amp;#39;re using it, skip this step.&lt;/p&gt;

&lt;p&gt;Otherwise, add this plugin to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  [..]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    [..]
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
      [..]
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.codehaus.mojo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;versions-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;generateBackupPoms&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generateBackupPoms&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-sonatype-plugin&quot;&gt;Configure Sonatype Plugin&lt;/h2&gt;

&lt;p&gt;Yes, you&amp;#39;re right, &lt;a href=&quot;jcabi-parent&quot;&gt;http://parent.jcabi.com&lt;/a&gt; will help
you here as well. If you&amp;#39;re using it, skip this step too.&lt;/p&gt;

&lt;p&gt;Otherwise, add these four plugins to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  [..]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    [..]
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
      [..]
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-deploy-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;skip&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/skip&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-source-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;package-sources&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-javadoc-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;package-javadoc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;package&lt;span class=&quot;nt&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.sonatype.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;nexus-staging-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;serverId&amp;gt;&lt;/span&gt;oss.sonatype.org&lt;span class=&quot;nt&quot;&gt;&amp;lt;/serverId&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;nexusUrl&amp;gt;&lt;/span&gt;https://oss.sonatype.org/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nexusUrl&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;${project.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;deploy-to-sonatype&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;deploy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;deploy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;release&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-rultor-config&quot;&gt;Create Rultor Config&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;.rultor.yml&lt;/code&gt; file in the root directory of your project
(&lt;a href=&quot;http://doc.rultor.com/reference.html&quot;&gt;reference page&lt;/a&gt;
explains this format in details):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;settings.xml&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;repo/settings.xml.asc&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pubring.gpg&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;repo/pubring.gpg.asc&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;secring.gpg&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;repo/secring.gpg.asc&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;mvn versions:set &amp;quot;-DnewVersion=${tag}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;git commit -am &amp;quot;${tag}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;mvn clean deploy --settings /home/r/settings.xml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can compare your file with live Rultor
&lt;a href=&quot;https://github.com/jcabi/jcabi-aspects/blob/master/.rultor.yml&quot;&gt;configuration of jcabi-aspects&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;run-it!&quot;&gt;Run It!&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Now it&amp;#39;s time to see how it all works. Create a new ticket in the
Github issue tracker, and post something like that into it
(read more about &lt;a href=&quot;http://doc.rultor.com/basics.html&quot;&gt;Rultor commands&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@rultor release, tag is `0.1`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will get a response in a few seconds. The rest will be done by Rultor.&lt;/p&gt;

&lt;p&gt;Enjoy :)&lt;/p&gt;

&lt;p&gt;BTW, if something doesn&amp;#39;t work as I&amp;#39;ve explained, don&amp;#39;t hesitate to
submit a ticket to
&lt;a href=&quot;https://github.com/yegor256/rultor/issues&quot;&gt;Rultor issue tracker&lt;/a&gt;.
I will try to help you.&lt;/p&gt;

&lt;p&gt;Yeah, forgot to mention, Rultor is also doing two important things. First,
it creates a Github release with a proper description. Second, it
posts a tweet about the release, which you can retweet, to make
an announcement to your followers. Both features are very convenient
for me. For example:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;DynamoDB Local Maven Plugin, 0.7.1 released &lt;a href=&quot;https://t.co/C3KULouuKS&quot;&gt;https://t.co/C3KULouuKS&lt;/a&gt;&lt;/p&gt;&amp;mdash; rultor.com (@rultors) &lt;a href=&quot;https://twitter.com/rultors/statuses/501617747269517312&quot;&gt;August 19, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 19 Aug 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/08/19/how-to-release-to-maven-central.html</guid>
      <dc:date>2014-08-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Objects Should Be Immutable</title>
      <link>http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html</link>
      <description>&lt;p&gt;In object-oriented programming, an object is
&lt;a href=&quot;http://en.wikipedia.org/wiki/Immutable_object&quot;&gt;immutable&lt;/a&gt; if its state can&amp;#39;t be
modified after it is created.&lt;/p&gt;

&lt;p&gt;In Java, a good example of an
immutable object is &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/String.html&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.
Once created, we can&amp;#39;t modify its state. We can request that it creates
new strings, but its own state will never change.&lt;/p&gt;

&lt;p&gt;However, there are not so many immutable classes in JDK. Take,
for example, class &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Date.html&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.
It is possible to modify its state using &lt;code&gt;setTime()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t know why the JDK designers decided to make these two
very similar classes differently. However, I believe that the design
of a mutable &lt;code&gt;Date&lt;/code&gt; has a many flaws, while the immutable &lt;code&gt;String&lt;/code&gt;
is much more in the spirit of the object-oriented paradigm.&lt;/p&gt;

&lt;p&gt;Moreover, I think that &lt;strong&gt;all classes should be immutable in
a perfect object-oriented world&lt;/strong&gt;. Unfortunately, sometimes,
it is technically not possible due to limitations in JVM.
Nevertheless, we should always aim for the best.&lt;/p&gt;

&lt;p&gt;This is an incomplete list of arguments in favor of immutability:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;immutable objects are simpler to construct, test, and use&lt;/li&gt;
&lt;li&gt;truly immutable objects are always thread-safe&lt;/li&gt;
&lt;li&gt;they help to avoid temporal coupling&lt;/li&gt;
&lt;li&gt;their usage is side-effect free (no defensive copies)&lt;/li&gt;
&lt;li&gt;identity mutability problem is avoided&lt;/li&gt;
&lt;li&gt;they always have failure atomicity&lt;/li&gt;
&lt;li&gt;they are much easier to cache&lt;/li&gt;
&lt;li&gt;they prevent NULL references, &lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;which are bad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;#39;s discuss the most important arguments one by one.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;thread-safety&quot;&gt;Thread Safety&lt;/h2&gt;

&lt;p&gt;The first and the most obvious argument is that immutable objects
are thread-safe. This means that multiple threads can access the same
object at the same time, without clashing with another thread.&lt;/p&gt;

&lt;p&gt;If no object methods can modify its state, no matter how many
of them and how often are being called parallel &amp;mdash; they
will work in their own memory space in stack.&lt;/p&gt;

&lt;p&gt;Goetz et al. explained the advantages of immutable objects
in more details in their very famous book
&lt;a href=&quot;http://www.amazon.com/gp/product/0321349601/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0321349601&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=OHVW5XBUDRTKVT46&quot;&gt;Java Concurrency in Practice&lt;/a&gt;
(highly recommended).&lt;/p&gt;

&lt;h2 id=&quot;avoiding-temporal-coupling&quot;&gt;Avoiding Temporal Coupling&lt;/h2&gt;

&lt;p&gt;Here is an example of temporal coupling (the code makes
two consecutive HTTP POST requests, where the second one contains HTTP body):&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1
2
3
4
5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://example.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text=hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This code works. However, you must remember that the first
request should be configured before the second one may happen.
If we decide to remove the first request from the script, we will
remove the second and the third line, and won&amp;#39;t get any errors
from the compiler:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://example.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// request.method(&amp;quot;POST&amp;quot;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// String first = request.fetch();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text=hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, the script is broken although it compiled without errors. This is
what temporal coupling is about &amp;mdash; there is always some hidden
information in the code that a programmer has to remember. In this example,
we have to remember that the configuration for the first request
is also used for the second one.&lt;/p&gt;

&lt;p&gt;We have to remember that the second request should always stay
together and be executed after the first one.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;Request&lt;/code&gt; class were immutable, the first snippet wouldn&amp;#39;t
work in the first place, and would have been rewritten like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text=hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, these two requests are not coupled. We can safely remove
the first one, and the second one will still work correctly.
You may point out that there is a code duplication. Yes, we
should get rid of it and re-write the code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text=hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See, refactoring didn&amp;#39;t break anything and we still don&amp;#39;t have
temporal coupling. The first request can be removed safely
from the code without affecting the second one.&lt;/p&gt;

&lt;p&gt;I hope this example demonstrates that the code manipulating
immutable objects is more readable and maintainable, b
ecause it doesn&amp;#39;t have temporal coupling.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-side-effects&quot;&gt;Avoiding Side Effects&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s try to use our &lt;code&gt;Request&lt;/code&gt; class in a new method (now it is mutable):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#39;s try to make two requests &amp;mdash; the first
with GET method and the second with POST:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://example.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Method &lt;code&gt;post()&lt;/code&gt; has a &amp;quot;side effect&amp;quot; &amp;mdash; it makes changes
to the mutable object &lt;code&gt;request&lt;/code&gt;. These changes are not really
expected in this case. We expect it to make a POST request and
return its body. We don&amp;#39;t want to read its documentation just
to find out that behind the scene it also modifies
the request we&amp;#39;re passing to it as an argument.&lt;/p&gt;

&lt;p&gt;Needless to say, such side effects lead to bugs and
maintainability issues. It would be much better
to work with an immutable &lt;code&gt;Request&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, we may not have any side effects.
Nobody can modify our &lt;code&gt;request&lt;/code&gt; object, no matter where
it is used and how deep through the call stack it is passed by method calls:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://example.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code is perfectly safe and side effect free.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-identity-mutability&quot;&gt;Avoiding Identity Mutability&lt;/h2&gt;

&lt;p&gt;Very often, we want objects to be identical if their internal
states are the same. &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Date.html&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;
class is a good example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are two different objects; however, they are equal
to each other because their encapsulated states are the same.
This is made possible through their custom overloaded
implementation of &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;The consequence of this convenient approach being used
with mutable objects is that every time we modify
object&amp;#39;s state it changes its identity:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This may look natural, until you start using your
mutable objects as keys in maps:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12345L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When modifying the state of &lt;code&gt;date&lt;/code&gt; object, we&amp;#39;re not expecting
it to change its identity. We&amp;#39;re not expecting to lose an entry
in the map just because the state of its key is changed. However,
this is exactly what is happening in the example above.&lt;/p&gt;

&lt;p&gt;When we add an object to the map, its &lt;code&gt;hashCode()&lt;/code&gt; returns one value.
This value is used by &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;
to place the entry into the internal hash table.
When we call &lt;code&gt;containsKey()&lt;/code&gt; hash code of the object is
different (because it is based on its internal state) and
&lt;code&gt;HashMap&lt;/code&gt; can&amp;#39;t find it in the internal hash table.&lt;/p&gt;

&lt;p&gt;It is a very annoying and difficult to debug
side effects of mutable objects. Immutable objects avoid it completely.&lt;/p&gt;

&lt;h2 id=&quot;failure-atomicity&quot;&gt;Failure Atomicity&lt;/h2&gt;

&lt;p&gt;Here is a simple example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stack overflow&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is obvious that an object of class &lt;code&gt;Stack&lt;/code&gt; will be left
in a broken state if it throws a runtime exception on overflow.
Its &lt;code&gt;size&lt;/code&gt; property will be incremented, while &lt;code&gt;items&lt;/code&gt; won&amp;#39;t get a new element.&lt;/p&gt;

&lt;p&gt;Immutability prevents this problem. An object will never be
left in a broken state because its state is modified only in
its constructor. The constructor will either fail, rejecting
object instantiation, or succeed, making a valid solid object,
which never changes its encapsulated state.&lt;/p&gt;

&lt;p&gt;For more on this subject, read
&lt;a href=&quot;http://www.amazon.com/gp/product/0321356683/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0321356683&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=CSSI3POG6ZJ3BJ6T&quot;&gt;Effective Java, 2nd Edition&lt;/a&gt;
by Joshua Bloch.&lt;/p&gt;

&lt;h2 id=&quot;arguments-against-immutability&quot;&gt;Arguments Against Immutability&lt;/h2&gt;

&lt;p&gt;There are a number of arguments against immutability.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;Immutability is not for enterprise systems&amp;rdquo;.
Very often, I hear people say that immutability is a
fancy feature, while absolutely impractical in real
enterprise systems. As a counter-argument, I can only show
some examples of real-life applications that contain only immutable Java objects:
&lt;a href=&quot;http://http.jcabi.com&quot;&gt;jcabi-http&lt;/a&gt;,
&lt;a href=&quot;http://xml.jcabi.com&quot;&gt;jcabi-xml&lt;/a&gt;,
&lt;a href=&quot;http://github.jcabi.com&quot;&gt;jcabi-github&lt;/a&gt;,
&lt;a href=&quot;http://s3.jcabi.com&quot;&gt;jcabi-s3&lt;/a&gt;,
&lt;a href=&quot;http://dynamo.jcabi.com&quot;&gt;jcabi-dynamo&lt;/a&gt;,
&lt;a href=&quot;http://simpledb.jcabi.com&quot;&gt;jcabi-simpledb&lt;/a&gt;
The above are all Java libraries that work solely with immutable
classes/objects. &lt;a href=&quot;https://github.com/netbout/netbout&quot;&gt;netbout.com&lt;/a&gt;
and &lt;a href=&quot;https://github.com/sttc/stateful&quot;&gt;stateful.co&lt;/a&gt; are
web applications that work solely with immutable objects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;It&amp;#39;s cheaper to update an existing object than create a new one&amp;rdquo;.
Oracle &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html&quot;&gt;thinks&lt;/a&gt;
that &amp;ldquo;The impact of object creation is often overestimated and can
be offset by some of the efficiencies associated with immutable objects.
These include decreased overhead due to garbage collection, and the
elimination of code needed to protect mutable objects from corruption.&amp;rdquo; I agree.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have some other arguments, please post them below and I&amp;#39;ll try to comment.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html</guid>
      <dc:date>2014-06-09T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Java Method Logging with AOP and Annotations</title>
      <link>http://www.yegor256.com/2014/06/01/aop-aspectj-java-method-logging.html</link>
      <description>&lt;p&gt;Sometimes, I want to log (through &lt;a href=&quot;http://www.slf4j.org&quot;&gt;slf4j&lt;/a&gt;
and &lt;a href=&quot;http://logging.apache.org/log4j/2.x/&quot;&gt;log4j&lt;/a&gt;) every execution
of a method, seeing what arguments it receives, what
it returns and how much time every execution takes.
This is how I&amp;#39;m doing it, with help of &lt;a href=&quot;http://eclipse.org/aspectj/&quot;&gt;AspectJ&lt;/a&gt;,
&lt;a href=&quot;http://aspects.jcabi.com&quot;&gt;jcabi-aspects&lt;/a&gt; and Java 6 annotations:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Loggable&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is what I see in log4j output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[INFO] com.example.Foo #power(2, 10): 1024 in 12μs
[INFO] com.example.Foo #power(3, 3): 27 in 4μs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nice, isn&amp;#39;t it? Now, let&amp;#39;s see how it works.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;annotation-with-runtime-retention&quot;&gt;Annotation with Runtime Retention&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_annotation&quot;&gt;Annotations&lt;/a&gt; is
a technique introduced in Java 6. It is a meta-programming
instrument that doesn&amp;#39;t change the way code works, but gives
marks to certain elements (methods, classes or variables).
In other words, annotations are just markers attached to the code
that can be seen and read. Some annotations are designed to be
seen at compile time only &amp;mdash; they don&amp;#39;t exist in &lt;code&gt;.class&lt;/code&gt; files after
compilation. Others remain visible after compilation and can
be accessed in runtime.&lt;/p&gt;

&lt;p&gt;For example,
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Override.html&quot;&gt;&lt;code&gt;@Override&lt;/code&gt;&lt;/a&gt; is of
the first type (its retention type is &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/annotation/RetentionPolicy.html#SOURCE&quot;&gt;&lt;code&gt;SOURCE&lt;/code&gt;&lt;/a&gt;), while &lt;a href=&quot;http://junit.sourceforge.net/javadoc/org/junit/Test.html&quot;&gt;&lt;code&gt;@Test&lt;/code&gt;&lt;/a&gt; from JUnit is of the second type (retention type is &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/annotation/RetentionPolicy.html#RUNTIME&quot;&gt;&lt;code&gt;RUNTIME&lt;/code&gt;&lt;/a&gt;).
&lt;a href=&quot;http://aspects.jcabi.com/apidocs-0.15.1/com/jcabi/aspects/Loggable.html&quot;&gt;&lt;code&gt;@Loggable&lt;/code&gt;&lt;/a&gt; &amp;mdash;
the one I&amp;#39;m using in the script above &amp;mdash; is an annotation of the second type,
from &lt;a href=&quot;http://aspects.jcabi.com&quot;&gt;jcabi-aspects&lt;/a&gt;.
It stays with the bytecode in the &lt;code&gt;.class&lt;/code&gt; file after compilation.&lt;/p&gt;

&lt;p&gt;Again, it is important to understand that even though
method &lt;code&gt;power()&lt;/code&gt; is annotated and compiled, it doesn&amp;#39;t
send anything to slf4j so far. It just contains
a marker saying &amp;quot;please, log my execution&amp;quot;.&lt;/p&gt;

&lt;h2 id=&quot;aspect-oriented-programming-(aop)&quot;&gt;Aspect Oriented Programming (AOP)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Aspect-oriented_programming&quot;&gt;AOP&lt;/a&gt;
is a useful technique that enables adding executable blocks
to the source code without explicitly changing it. In our example,
we don&amp;#39;t want to log method execution inside the class. Instead,
we want some other class to intercept every call to method &lt;code&gt;power()&lt;/code&gt;,
measure its execution time and send this information to slf4j.&lt;/p&gt;

&lt;p&gt;We want that interceptor to understand our &lt;code&gt;@Loggable&lt;/code&gt; annotation
and log every call to that specific method &lt;code&gt;power()&lt;/code&gt;. And, of course,
the same interceptor should be used for other methods where
we&amp;#39;ll place the same annotation in the future.&lt;/p&gt;

&lt;p&gt;This case perfectly fits the original intent of AOP &amp;mdash;
to avoid re-implementation of some common behavior in multiple classes.&lt;/p&gt;

&lt;p&gt;Logging is a supplementary feature to our main functionality,
and we don&amp;#39;t want to pollute our code with multiple logging
instructions. Instead, we want logging to happen behind the scenes.&lt;/p&gt;

&lt;p&gt;In terms of AOP, our solution can be explained as creating
an &lt;strong&gt;aspect&lt;/strong&gt; that &lt;strong&gt;cross-cuts&lt;/strong&gt; the code at certain
&lt;strong&gt;join points&lt;/strong&gt; and applies an &lt;strong&gt;around advice&lt;/strong&gt; that
implements the desired functionality.&lt;/p&gt;

&lt;h2 id=&quot;aspectj&quot;&gt;AspectJ&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s see what these magic words mean. But, first,
let&amp;#39;s see how &lt;a href=&quot;http://aspects.jcabi.com&quot;&gt;jcabi-aspects&lt;/a&gt;
implements them using &lt;a href=&quot;http://eclipse.org/aspectj/&quot;&gt;AspectJ&lt;/a&gt;
(it&amp;#39;s a simplified example, full code you can find in
&lt;a href=&quot;https://github.com/jcabi/jcabi-aspects/blob/jcabi-0.15.2/src/main/java/com/jcabi/aspects/aj/MethodLogger.java&quot;&gt;&lt;code&gt;MethodLogger.java&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MethodLogger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;execution(* *(..)) &amp;amp;&amp;amp; @annotation(Loggable)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;#%s(%s): %s in %[msec]s&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;MethodSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an &lt;strong&gt;aspect&lt;/strong&gt; with a single &lt;strong&gt;around advice&lt;/strong&gt;
&lt;code&gt;around()&lt;/code&gt; inside. The aspect is annotated with &lt;code&gt;@Aspect&lt;/code&gt;
and advice is annotated with &lt;code&gt;@Around&lt;/code&gt;. As discussed above,
these annotations are just markers in &lt;code&gt;.class&lt;/code&gt; files. They don&amp;#39;t do
anything except provide some meta-information to those w
ho are interested in runtime.&lt;/p&gt;

&lt;p&gt;Annotation &lt;code&gt;@Around&lt;/code&gt; has one parameter, which &amp;mdash; in this case &amp;mdash;
says that the advice should be applied to a method if:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;its visibility modifier is &lt;code&gt;*&lt;/code&gt; (&lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt;);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;its name is name &lt;code&gt;*&lt;/code&gt; (any name);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;its arguments are &lt;code&gt;..&lt;/code&gt; (any arguments); and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it is annotated with &lt;code&gt;@Loggable&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When a call to an annotated method is to be intercepted,
method &lt;code&gt;around()&lt;/code&gt; executes before executing the actual method.
When a call to method &lt;code&gt;power()&lt;/code&gt; is to be intercepted, method &lt;code&gt;around()&lt;/code&gt;
receives an instance of class &lt;code&gt;ProceedingJoinPoint&lt;/code&gt; and must return an
object, which will be used as a result of method &lt;code&gt;power()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to call the original method, &lt;code&gt;power()&lt;/code&gt;, the advice has
to call &lt;code&gt;proceed()&lt;/code&gt; of the &lt;strong&gt;join point&lt;/strong&gt; object.&lt;/p&gt;

&lt;p&gt;We compile this aspect and make it available in classpath
together with our main file &lt;code&gt;Foo.class&lt;/code&gt;. So far so good,
but we need to take one last step in order to put
our aspect into action &amp;mdash; we should &lt;strong&gt;apply&lt;/strong&gt; our advice.&lt;/p&gt;

&lt;h2 id=&quot;binary-aspect-weaving&quot;&gt;Binary Aspect Weaving&lt;/h2&gt;

&lt;p&gt;Aspect weaving is the name of the advice applying process.
Aspect weaver modifies original code by injecting calls to aspects.
AspectJ does exactly that. We give it two binary Java classes &lt;code&gt;Foo.class&lt;/code&gt;
and &lt;code&gt;MethodLogger.class&lt;/code&gt;; it gives back three &amp;mdash; modified
&lt;code&gt;Foo.class&lt;/code&gt;, &lt;code&gt;Foo$AjcClosure1.class&lt;/code&gt; and unmodified &lt;code&gt;MethodLogger.class&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to understand which advices should be applied to which methods,
AspectJ weaver is using annotations from &lt;code&gt;.class&lt;/code&gt; files.
Also, it uses &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/&quot;&gt;reflection&lt;/a&gt;
to browse all classes on classpath. It analyzes which methods satisfy
the conditions from the &lt;code&gt;@Around&lt;/code&gt; annotation.
Of course, it finds our method &lt;code&gt;power()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, there are two steps. First, we compile our &lt;code&gt;.java&lt;/code&gt; files using
&lt;code&gt;javac&lt;/code&gt; and get two files. Then, AspectJ weaves/modifies them and
creates its own extra class. Our &lt;code&gt;Foo&lt;/code&gt; class looks something
like this after weaving:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodLogger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Loggable&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;power_aroundBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;AspectJ weaver moves our original functionality to a new method,
&lt;code&gt;power_aroundBody()&lt;/code&gt;, and redirects all &lt;code&gt;power()&lt;/code&gt; calls
to the aspect class &lt;code&gt;MethodLogger&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead of one method &lt;code&gt;power()&lt;/code&gt; in class &lt;code&gt;Foo&lt;/code&gt; now we have
four classes working together. From now on,
this is what happens behind the scenes on every call to &lt;code&gt;power()&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src='/uml/52d3d016f2264bbf660a23d5bbe84203.svg' alt='UML' style='width:100%;'/&gt;&lt;/p&gt;

&lt;p&gt;Original functionality of method &lt;code&gt;power()&lt;/code&gt; is indicated
by the small green lifeline on the diagram.&lt;/p&gt;

&lt;p&gt;As you see, the aspect weaving process connects together classes
and aspects, transferring calls between them through join points.
Without weaving, both classes and aspects are just
compiled Java binaries with attached annotations.&lt;/p&gt;

&lt;h1 id=&quot;jcabi-aspects&quot;&gt;jcabi-aspects&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://aspects.jcabi.com&quot;&gt;jcabi-aspects&lt;/a&gt; is a JAR library
that contains &lt;code&gt;Loggable&lt;/code&gt; annotation and &lt;code&gt;MethodLogger&lt;/code&gt;
aspect (btw, there are &lt;a href=&quot;http://aspects.jcabi.com&quot;&gt;many more&lt;/a&gt;
aspects and annotations). You don&amp;#39;t need to write your own
aspect for method logging. Just add a few dependencies to
your classpath and configure &lt;a href=&quot;http://plugin.jcabi.com&quot;&gt;jcabi-maven-plugin&lt;/a&gt;
for aspect weaving
(get their latest versions in &lt;a href=&quot;http://search.maven.org/&quot;&gt;Maven Central&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.jcabi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jcabi-aspects&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.aspectj&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;aspectjrt&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.jcabi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jcabi-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;ajc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since this weaving procedure takes a lot of configuration effort,
I created a convenient Maven plugin with an &lt;code&gt;ajc&lt;/code&gt; goal, which does
the entire aspect weaving job. You can use AspectJ directly, but
I recommend that you use &lt;a href=&quot;http://plugin.jcabi.com&quot;&gt;jcabi-maven-plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it. Now you can use &lt;a href=&quot;http://aspects.jcabi.com/apidocs-0.15.1/com/jcabi/aspects/Loggable.html&quot;&gt;&lt;code&gt;@com.jcabi.aspects.Loggable&lt;/code&gt;&lt;/a&gt;
annotation and your methods will be logged through slf4j.&lt;/p&gt;

&lt;p&gt;If something doesn&amp;#39;t work as explained, don&amp;#39;t hesitate to
submit a &lt;a href=&quot;https://github.com/jcabi/jcabi-aspects/issues&quot;&gt;Github issue&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/06/01/aop-aspectj-java-method-logging.html</guid>
      <dc:date>2014-06-01T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Why NULL is Bad?</title>
      <link>http://www.yegor256.com/2014/05/13/why-null-is-bad.html</link>
      <description>&lt;p&gt;A simple example of &lt;code&gt;NULL&lt;/code&gt; usage in Java:&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1
2
3
4
5
6
7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What is wrong with this method?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;It may return &lt;code&gt;NULL&lt;/code&gt; instead of an object &amp;mdash; that&amp;#39;s what is wrong.
&lt;code&gt;NULL&lt;/code&gt; is a terrible practice in an object-oriented paradigm and should be avoided at all costs.
There have been a number of opinions about this published already, including
&lt;a href=&quot;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&quot;&gt;Null References, The Billion Dollar Mistake&lt;/a&gt;
presentation by Tony Hoare and the entire
&lt;a href=&quot;http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT&quot;&gt;Object Thinking&lt;/a&gt;
book by David West.&lt;/p&gt;

&lt;p&gt;Here, I&amp;#39;ll try to summarize all the arguments and show examples of
how &lt;code&gt;NULL&lt;/code&gt; usage can be avoided and replaced with proper object-oriented constructs.&lt;/p&gt;

&lt;p&gt;Basically, there are two possible alternatives to &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first one is &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Null_Object_pattern&quot;&gt;Null Object&lt;/a&gt;&lt;/strong&gt;
design pattern (the best way is to make it a constant):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NOBODY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second possible alternative is to &lt;a href=&quot;http://martinfowler.com/ieeeSoftware/failFast.pdf&quot;&gt;fail fast&lt;/a&gt;
by throwing an &lt;strong&gt;Exception&lt;/strong&gt; when you can&amp;#39;t return an object:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmployeeNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let&amp;#39;s see the arguments against &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Besides Tony Hoare&amp;#39;s presentation and David West&amp;#39;s book
mentioned above, I read these publications before writing this post:
&lt;a href=&quot;http://www.amazon.com/dp/0132350882/&quot;&gt;Clean Code&lt;/a&gt; by Robert Martin,
&lt;a href=&quot;http://www.amazon.com/dp/0735619670/&quot;&gt;Code Complete&lt;/a&gt; by Steve McConnell,
&lt;a href=&quot;http://elegantcode.com/2010/05/01/say-no-to-null/&quot;&gt;Say &amp;quot;No&amp;quot; to &amp;quot;Null&amp;quot;&lt;/a&gt; by John Sonmez,
&lt;a href=&quot;http://stackoverflow.com/questions/1274792/is-returning-null-bad-design&quot;&gt;Is returning null bad design?&lt;/a&gt; discussion at StackOverflow.&lt;/p&gt;

&lt;h2 id=&quot;ad-hoc-error-handling&quot;&gt;Ad-hoc Error Handling&lt;/h2&gt;

&lt;p&gt;Every time you get an object as an input you must
check whether it is &lt;code&gt;NULL&lt;/code&gt; or a valid object reference.
If you forget to check, a &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html&quot;&gt;&lt;code&gt;NullPointerException&lt;/code&gt;&lt;/a&gt; (NPE)
may break execution in runtime. Thus, your logic becomes
polluted with multiple checks and if/then/else forks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// this is a terrible design, don&amp;#39;t reuse&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeffrey&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;can&amp;#39;t find an employee&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transferTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dept2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how exceptional situations are supposed to be handled in
&lt;a href=&quot;http://en.wikipedia.org/wiki/C_%28programming_language%29&quot;&gt;C&lt;/a&gt; and
other imperative procedural languages. OOP introduced
&lt;a href=&quot;http://en.wikipedia.org/wiki/Exception_handling&quot;&gt;exception handling&lt;/a&gt;
primarily to get rid of these ad-hoc error handling blocks.
In OOP, we let exceptions bubble up until they reach an application-wide
error handler and our code becomes much cleaner and shorter:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;dept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeffrey&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transferTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dept2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Consider &lt;code&gt;NULL&lt;/code&gt; references an inheritance of procedural programming,
and use 1) Null Objects or 2) Exceptions instead.&lt;/p&gt;

&lt;h2 id=&quot;ambiguous-semantic&quot;&gt;Ambiguous Semantic&lt;/h2&gt;

&lt;p&gt;In order to explicitly convey its meaning, the function
&lt;code&gt;getByName()&lt;/code&gt; has to be named &lt;code&gt;getByNameOrNullIfNotFound()&lt;/code&gt;.
The same should happen with every function that returns an
object or &lt;code&gt;NULL&lt;/code&gt;. Otherwise, ambiguity is inevitable for a code reader.
Thus, to keep semantic unambiguous, you should give longer names to functions.&lt;/p&gt;

&lt;p&gt;To get rid of this ambiguity, always return a real object,
a null object or throw an exception.&lt;/p&gt;

&lt;p&gt;Some may argue that we sometimes have to return &lt;code&gt;NULL&lt;/code&gt;,
for the sake of performance. For example, method &lt;code&gt;get()&lt;/code&gt; of
interface &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Map.html&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;
in Java returns &lt;code&gt;NULL&lt;/code&gt; when there is no such item in the map:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeffrey&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmployeeNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code searches the map only once due to the usage of &lt;code&gt;NULL&lt;/code&gt; in &lt;code&gt;Map&lt;/code&gt;.
If we would refactor &lt;code&gt;Map&lt;/code&gt; so that its method &lt;code&gt;get()&lt;/code&gt; will throw
an exception if nothing is found, our code will look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeffrey&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// first search&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmployeeNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeffrey&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// second search&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously, this is method is twice as slow as the first one. What to do?&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Map&lt;/code&gt; interface (no offense to its authors) has a design flaw.
Its method &lt;code&gt;get()&lt;/code&gt; should have been returning an &lt;code&gt;Iterator&lt;/code&gt;
so that our code would look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeffrey&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmployeeNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;BTW, that is exactly how C++ STL
&lt;a href=&quot;http://en.cppreference.com/w/cpp/container/map/find&quot;&gt;map::find()&lt;/a&gt; method is designed.&lt;/p&gt;

&lt;h2 id=&quot;computer-thinking-vs.-object-thinking&quot;&gt;Computer Thinking vs. Object Thinking&lt;/h2&gt;

&lt;p&gt;Statement &lt;code&gt;if (employee == null)&lt;/code&gt; is understood by someone who
knows that an object in Java is a pointer to a data structure and
that &lt;code&gt;NULL&lt;/code&gt; is a pointer to nothing (&lt;code&gt;0x00000000&lt;/code&gt;, in Intel x86 processors).&lt;/p&gt;

&lt;p&gt;However, if you start thinking as an object, this statement
makes much less sense. This is how our code looks from an object point of view:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- Hello, is it a software department?
- Yes.
- Let me talk to your employee &amp;quot;Jeffrey&amp;quot; please.
- Hold the line please...
- Hello.
- Are you NULL?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last question in this conversation sounds weird, doesn’t it?&lt;/p&gt;

&lt;p&gt;Instead, if they hang up the phone after our request to speak
to Jeffrey, that causes a problem for us (Exception).
At that point, we try to call again or inform our supervisor
that we can&amp;#39;t reach Jeffrey and complete a bigger transaction.&lt;/p&gt;

&lt;p&gt;Alternatively, they may let us speak to another person,
who is not Jeffrey, but who can help with most of our questions
or refuse to help if we need something &amp;quot;Jeffrey specific&amp;quot; (Null Object).&lt;/p&gt;

&lt;h2 id=&quot;slow-failing&quot;&gt;Slow Failing&lt;/h2&gt;

&lt;p&gt;Instead of &lt;a href=&quot;http://martinfowler.com/ieeeSoftware/failFast.pdf&quot;&gt;failing fast&lt;/a&gt;,
the code above attempts to die slowly, killing others on its way.
Instead of letting everyone know that something went wrong and that an
exception handling should start immediately, it is hiding this failure from its client.&lt;/p&gt;

&lt;p&gt;This argument is close to the &amp;quot;ad-hoc error handling&amp;quot; discussed above.&lt;/p&gt;

&lt;p&gt;It is a good practice to make your code as fragile as possible,
letting it break when necessary.&lt;/p&gt;

&lt;p&gt;Make your methods extremely demanding as to the data
they manipulate. Let them complain by throwing exceptions,
if the provided data provided is not sufficient or simply
doesn’t fit with the main usage scenario of the method.&lt;/p&gt;

&lt;p&gt;Otherwise, return a Null Object, that exposes some common
behavior and throws exceptions on all other calls:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transferTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Department&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnonymousEmployeeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;I can&amp;#39;t be transferred, I&amp;#39;m anonymous&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;mutable-and-incomplete-objects&quot;&gt;Mutable and Incomplete Objects&lt;/h2&gt;

&lt;p&gt;In general, it is &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;highly recommended&lt;/a&gt;
to design objects
with immutability in mind. This means that an object gets
all necessary knowledge during its instantiating and never
changes its state during the entire lifecycle.&lt;/p&gt;

&lt;p&gt;Very often, &lt;code&gt;NULL&lt;/code&gt; values are used in &lt;a href=&quot;http://en.wikipedia.org/wiki/Lazy_loading&quot;&gt;lazy loading&lt;/a&gt;,
to make objects incomplete and mutable. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Department&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeffrey&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This technology, although widely used, is an anti-pattern in OOP.
Mostly because it makes an object responsible for performance problems
of the computational platform, which is something an &lt;code&gt;Employee&lt;/code&gt; object should not be aware of.&lt;/p&gt;

&lt;p&gt;Instead of managing a state and exposing its business-relevant behavior,
an object has to take care of the caching of its own results
&amp;mdash; this is what lazy loading is about.&lt;/p&gt;

&lt;p&gt;Caching is not something an employee does in the office, does he?&lt;/p&gt;

&lt;p&gt;The solution? Don&amp;#39;t use lazy loading in such a primitive way,
as in the example above. Instead, move this caching problem to
another layer of your application.&lt;/p&gt;

&lt;p&gt;For example, in Java, you can use aspect-oriented programming aspects.
For example, &lt;a href=&quot;http://aspects.jcabi.com&quot;&gt;jcabi-aspects&lt;/a&gt; has
&lt;a href=&quot;http://aspects.jcabi.com/annotation-cacheable.html&quot;&gt;&lt;code&gt;@Cacheable&lt;/code&gt;&lt;/a&gt;
annotation that caches the value returned by a method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.jcabi.aspects.Cacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Department&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Cacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forever&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jacky Brown&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope this analysis was convincing enough that you will
stop &lt;code&gt;NULL&lt;/code&gt;-ing your code :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/05/13/why-null-is-bad.html</guid>
      <dc:date>2014-05-13T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>