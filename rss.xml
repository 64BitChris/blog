<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2018-10-10T15:49:17+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">You Think You Can Control Us?</title><link href="https://www.yegor256.com/2018/10/09/can-you-control-us.html" rel="alternate" type="text/html" title="You Think You Can Control Us?" /><published>2018-10-09T00:00:00+00:00</published><updated>2018-10-09T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/10/09/can-you-control-us</id><content type="html" xml:base="https://www.yegor256.com/2018/10/09/can-you-control-us.html">&lt;p&gt;I was explaining how &lt;a href=&quot;https://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt; works to one of our prospective
clients yesterday. He texted me today:
“[At Zerocracy] there is no commitment and anybody is free to leave any time,
so the risk of entrusting a highly important project to such
a platform and failing to deliver it on time is very high.
We will develop it on our own with hired developers who
will have salaries, and I’ll be architect and project manager,
that way it will be under our entire control.” I think this word “control”
he used deserves a comment.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Drop (2014) by Michaël R. Roskam&quot; src=&quot;/images/2018/10/the-drop.jpg&quot; longdesc=&quot;#c9f2bfd5&quot; /&gt;&lt;figcaption id=&quot;c9f2bfd5&quot;&gt;The Drop (2014) by Michaël R. Roskam&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, I know how much we hate the word “control” when it’s being applied to
us sensitive and fragile individuals, also known as computer geeks. We don’t
want to be under anyone’s control. We also don’t want to control others. We prefer
to think that things just move forward on their own, not because someone
stays on top of them and controls them.&lt;/p&gt;

&lt;p&gt;However, this is an illusion.&lt;/p&gt;

&lt;p&gt;We and our projects have to be under control in order for the projects to be completed.&lt;/p&gt;

&lt;p&gt;OK, replace it with managed, organized, or (I love this word) orchestrated.&lt;/p&gt;

&lt;p&gt;The bottom line is: you control it or you lose it.&lt;/p&gt;

&lt;p&gt;What does control technically mean? According to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Control_%28management%29&quot;&gt;Wikipedia&lt;/a&gt;,
it means “setting standards, measuring actual performance and taking &lt;em&gt;corrective action&lt;/em&gt;.”
What are the corrective actions in the context of people management?
There are two: rewards and punishments. In order to keep even the
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;most talented people&lt;/a&gt;
under control, we have to reward them for their successes and
punish or &lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;fire&lt;/a&gt;
them for their failures.&lt;/p&gt;

&lt;p&gt;The question is how you do that. How do you reward and how do you punish?&lt;/p&gt;

&lt;p&gt;Even if you don’t want to admit that you do it, you still do. You reward
and you punish. How does it happen in a traditional management model with the
“hired developers” my prospective client was talking about? I’ve explained it already
in a few blog posts. &lt;a href=&quot;/2016/12/06/how-to-pay-programmers-less.html&quot;&gt;&lt;em&gt;How to Pay Programmers Less&lt;/em&gt;&lt;/a&gt;
and &lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;&lt;em&gt;How Do You Punish Your Employees?&lt;/em&gt;&lt;/a&gt;
are probably the best two of them. Managers invent &lt;a href=&quot;/2018/08/29/soft-skills.html&quot;&gt;nice words&lt;/a&gt;
for these things, but in reality it’s still the same carrot-and-stick, only with no predictability and
no explicit &lt;a href=&quot;/2015/10/13/competition-without-rules.html&quot;&gt;rules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, if you think that you can control &lt;em&gt;professional&lt;/em&gt; programmers
using the methods explained in my blog posts above, you are mistaken.
We are way smarter than you. We know how to pretend to be working, while
doing something else. We know how to create an illusion that we are loyal
to the project, while searching the market for a new job. We know how to
organize our time such that you only get ten percent of it, if you are lucky. We know
&lt;a href=&quot;/2017/08/01/how-to-manage-a-manager.html&quot;&gt;how to manage&lt;/a&gt; you,
our &lt;del&gt;stupid&lt;/del&gt; managers.&lt;/p&gt;

&lt;p&gt;As our manager, expecting us to be under control and loyal just because you hired us with
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;monthly salaries&lt;/a&gt;,
you are demonstrating only one thing to us:
you have no idea how to manage senior developers. Instead, we will manage you.
You will be under our control, not the other way around.
If you are lucky, the project will &lt;em&gt;maybe&lt;/em&gt; see its end.
But in most cases this doesn’t happen.&lt;/p&gt;

&lt;p&gt;Do you want to know what real control is? Read this &lt;a href=&quot;https://www.zerocracy.com/policy.html&quot;&gt;Policy&lt;/a&gt;,
which is how we &lt;em&gt;control&lt;/em&gt; programming in Zerocracy. That is the level of
control true professionals enjoy. That document, fully supported by our
&lt;a href=&quot;/2018/03/21/zerocracy-announcement.html&quot;&gt;automated chatbot&lt;/a&gt;,
guides every small piece of reward and punishment a programmer may have on a project.&lt;/p&gt;

&lt;p&gt;This is what true commitment means for our guys: personal and
&lt;a href=&quot;/2014/04/13/no-obligations-principle.html&quot;&gt;explicit responsibility&lt;/a&gt; for
every single step they make. This level of commitment is incomparably better than what
you will likely find when hiring full-time 9-to-5
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office&lt;/a&gt; &lt;del&gt;slaves&lt;/del&gt; employees.&lt;/p&gt;

&lt;p&gt;What are they really committed to? To giving you a month’s notice when they
finally find a better place to scroll through Facebook eight hours a day?&lt;/p&gt;

&lt;p&gt;Seriously?&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Who really is in charge, you or your boss? &lt;a href=&quot;https://twitter.com/hashtag/codeahead?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#codeahead&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1048824708068777984?ref_src=twsrc%5Etfw&quot;&gt;October 7, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><category term="zerocracy" /><summary type="html">I was explaining how Zerocracy works to one of our prospective clients yesterday. He texted me today: “[At Zerocracy] there is no commitment and anybody is free to leave any time, so the risk of entrusting a highly important project to such a platform and failing to deliver it on time is very high. We will develop it on our own with hired developers who will have salaries, and I’ll be architect and project manager, that way it will be under our entire control.” I think this word “control” he used deserves a comment.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/10/the-drop.jpg" /></entry><entry><title type="html">Software Quality Award, 2019</title><link href="https://www.yegor256.com/2018/09/30/award-2019.html" rel="alternate" type="text/html" title="Software Quality Award, 2019" /><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/09/30/award-2019</id><content type="html" xml:base="https://www.yegor256.com/2018/09/30/award-2019.html">&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;https://www.yegor256.com/images/andreea/quality-award.svg&quot; style=&quot;width:300px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;This is the fifth year of the
&lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. The prize
is still the same—&lt;strong&gt;$4,096&lt;/strong&gt;.
The rules are still the same. Read on.
Previous years are here:
&lt;a href=&quot;/2015/04/16/award.html&quot;&gt;2015&lt;/a&gt;,
&lt;a href=&quot;/2015/10/17/award-2016.html&quot;&gt;2016&lt;/a&gt;,
&lt;a href=&quot;/2016/10/23/award-2017.html&quot;&gt;2017&lt;/a&gt;,
&lt;a href=&quot;/2017/10/24/award-2018.html&quot;&gt;2018&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Fill out &lt;a href=&quot;https://docs.google.com/forms/d/1UhXRhVP9ofmWv460LYF1e3vz_hwUmvosmYPDsQSJkBg&quot;&gt;&lt;strong&gt;THIS FORM&lt;/strong&gt;&lt;/a&gt;
to submit your project.&lt;/p&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;One person can submit only one project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Submissions are accepted until September 1, 2019.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I will check the commit history to make sure you’re the main contributor to the project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Results will be announced October 15, 2019 on this page and by email.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The best project will receive $4,096
(I may split this amount among a few projects and may give away a smaller amount!).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Winners that received any cash prizes in previous years can’t submit again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=Z70PMGaxGhY&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/Z70PMGaxGhY/mqdefault.jpg&quot; alt=&quot;YouTube video #Z70PMGaxGhY&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;How to win $4096 in the next year Quality Award? (webinar #29);
        1 November 2017.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open source (in GitHub).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least 4,096 lines of code (&lt;a href=&quot;https://www.npmjs.com/package/cloc&quot;&gt;&lt;code&gt;cloc&lt;/code&gt;&lt;/a&gt; without any arguments)
&lt;em&gt;and&lt;/em&gt; at least 16,384 &lt;a href=&quot;/2014/11/14/hits-of-code.html&quot;&gt;hits-of-code&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one year old.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Object-oriented (that’s the only thing I understand).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best project is selected using this &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;criteria&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What doesn’t matter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don’t care about
popularity; quality is the key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it’s still eligible for the award. I don’t care about
your marketing position; quality is all.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="award" /><summary type="html">This is the fifth year of the Software Quality Award. The prize is still the same—$4,096. The rules are still the same. Read on. Previous years are here: 2015, 2016, 2017, 2018.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/andreea/quality-award.png" /></entry><entry><title type="html">Fear of Decoupling</title><link href="https://www.yegor256.com/2018/09/18/fear-of-coupling.html" rel="alternate" type="text/html" title="Fear of Decoupling" /><published>2018-09-18T00:00:00+00:00</published><updated>2018-09-18T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/09/18/fear-of-coupling</id><content type="html" xml:base="https://www.yegor256.com/2018/09/18/fear-of-coupling.html">&lt;p&gt;Objects talk to each other via their methods. In mainstream programming
languages, like Java or C#, an object may have a unique set of methods
together with some methods it is forced to have because it &lt;em&gt;implements&lt;/em&gt; certain types,
also known as &lt;em&gt;interfaces&lt;/em&gt;. My experience of speaking with many programmers
tells me that most of us are pretty scared of objects that implement too
many interface methods. We don’t want to deal with them since they
are &lt;em&gt;polymorphic&lt;/em&gt; and, because of that, unreliable.
It’s a fair fear. Let’s try to analyze where it comes from.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Funny Games (2007) by Michael Haneke&quot; src=&quot;/images/2018/09/funny-games.jpg&quot; longdesc=&quot;#9f6d574f&quot; /&gt;&lt;figcaption id=&quot;9f6d574f&quot;&gt;Funny Games (2007) by Michael Haneke&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;As usual, let’s start with a simple Java example. Here is an amount of money
I’m going to send to a user via, say, the PayPal API:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now here I am, the method that sends the money:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Send them over via the API...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two pieces of code are, as we call it, loosely coupled. The method
&lt;code&gt;send()&lt;/code&gt; has no idea which class is provided and how exactly the method
&lt;code&gt;cents()&lt;/code&gt; is implemented. Maybe it’s a simple constant object of one dollar:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OneDollar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or maybe it’s a way more complex entity that makes a network connection first,
in order to fetch the current USD-to-EUR exchange rate, update the database,
and then return the result of some calculation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmployeeHourlyRate&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Fetch the exchange rate;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Update the database;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Calculate the hourly rate;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Return the value.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The method &lt;code&gt;send()&lt;/code&gt; doesn’t have the knowledge of what exactly is provided
as its first argument. All it can do is hope that the method &lt;code&gt;cents()&lt;/code&gt; will
do the work right. What if it doesn’t?&lt;/p&gt;

&lt;p&gt;If I’m a developer of the method &lt;code&gt;send()&lt;/code&gt; and I’m fully prepared to take the
blame for the mistakes my method causes, I do want to know what my collaborators are.
And I want to be absolutely sure they work. Not just work, but work exactly how I expect
them to. Preferably I would like to write them myself. Ideally
I would like to ensure that nobody touches them after I implement them. You get
the sarcasm, right?&lt;/p&gt;

&lt;p&gt;This may sound like a joke, but I have heard this argument many times. They say
that “it’s better to be completely sure two pieces work together, instead of
relying on the damn polymorphism and then spending hours debugging something
I didn’t write.” And they are right, you know. Polymorphism—when
a seemingly primitive object of type &lt;code&gt;Money&lt;/code&gt; does whatever it wants, including
HTTP requests and SQL &lt;code&gt;UPDATE&lt;/code&gt; queries—doesn’t add reliability to the entire
application, does it?&lt;/p&gt;

&lt;p&gt;No, it doesn’t.&lt;/p&gt;

&lt;p&gt;Obviously, polymorphism makes the life of the developers of this type &lt;code&gt;Money&lt;/code&gt; and its
“ancestors” way simpler, since they don’t have to think about their users much.
All they worry about is how to return the &lt;code&gt;double&lt;/code&gt; when &lt;code&gt;cents()&lt;/code&gt; is called.
They don’t need to care about speed, potential exceptions, memory usage,
and many other things, since the interface doesn’t require that. It only
tells them to return the &lt;code&gt;double&lt;/code&gt; and call it a day. Let somebody else
worry about everything else. Easy, huh? But that’s a childish and egoistic way
of thinking, you may say!&lt;/p&gt;

&lt;p&gt;Yes, it is.&lt;/p&gt;

&lt;p&gt;However…&lt;/p&gt;

&lt;p&gt;You’ve most definitely heard of the &lt;a href=&quot;/2015/08/25/fail-fast.html&quot;&gt;Fail Fast&lt;/a&gt; idea,
which, in a nutshell, claims that in order to make an application robust
and stable we have to make sure its components are as fragile as possible and
as vulnerable as they can be in response to any potential exceptional situation.
They have to break whenever they can and let their users deal with the failures.
With such a philosophy no object will assume anything good about its counterparts
and will always try to escalate problems to higher levels, which eventually will
hit the end user who will report them back to the team. The team will fix them
all and the entire product will stabilize.&lt;/p&gt;

&lt;p&gt;If the philosophy is the opposite and every object is trying to deal with
problems on its individual micro level, the majority of exceptional situations
will never be visible to users, testers, architects and programmers, who are
supposed to be dealing with them and finding solutions for them. Thanks to this
“careful” mindset of individual objects, the stability and robustness of the
entire application will suffer.&lt;/p&gt;

&lt;p&gt;We can apply the same logic to the “fear of loose coupling.”&lt;/p&gt;

&lt;p&gt;When we worry about how &lt;code&gt;Money.cents()&lt;/code&gt; works and want to control its behavior,
we are doing ourselves and the entire project a big disservice. In the long run
we destabilize the product, instead of making it more stable. Some even
want to prohibit polymorphism by declaring method &lt;code&gt;send()&lt;/code&gt; this way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmployeeHourlyRate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Now I know that it&amp;#39;s not some abstract Money,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// but a very specific class EmployeeHourlyRate, which&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// was implemented by Bobby, a good friend of mine.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we limit the amount of mistakes our code may have, since we know Bobby,
we’ve seen his code, we know how it works and which exceptions to expect.
We are safe. Yes, we are. For now. But strategically speaking, by not
allowing our software to make all possible mistakes and throw all possible
exceptions in all unusual situations, we are seriously limiting its ability
to be properly tested and that’s why it’s destabilized.&lt;/p&gt;

&lt;p&gt;As I &lt;a href=&quot;/2017/05/23/unlimited-number-of-bugs.html&quot;&gt;mentioned earlier&lt;/a&gt;,
the only way to increase the quality of software is to find and fix its bugs.
The more bugs we fix, the fewer are the bugs that remain hidden and not-fixed-yet. A fear
of bugs and our intention to prevent them is only shooting us in the foot.&lt;/p&gt;

&lt;p&gt;Instead, we should let everybody, not only Bobby, implement &lt;code&gt;Money&lt;/code&gt; and pass
those implementations to &lt;code&gt;send()&lt;/code&gt;. Yes, some of them will cause troubles
and may even lead to UI-visible failures. But if our management understands
the concept of &lt;a href=&quot;/2017/12/26/software-quality-formula.html&quot;&gt;software quality&lt;/a&gt;
right, they will &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;not blame&lt;/a&gt; us for mistakes.
Instead, they will encourage us to find as many of them as possible,
reproduce them with automated tests, fix, and re-deploy.&lt;/p&gt;

&lt;p&gt;Thus, the fear of decoupling is nothing else but Fail Safe.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How often do you create interfaces for your classes? &lt;a href=&quot;https://twitter.com/hashtag/elegantobjects?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#elegantobjects&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/oop?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#oop&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1046377815799738368?ref_src=twsrc%5Etfw&quot;&gt;September 30, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Objects talk to each other via their methods. In mainstream programming languages, like Java or C#, an object may have a unique set of methods together with some methods it is forced to have because it implements certain types, also known as interfaces. My experience of speaking with many programmers tells me that most of us are pretty scared of objects that implement too many interface methods. We don’t want to deal with them since they are polymorphic and, because of that, unreliable. It’s a fair fear. Let’s try to analyze where it comes from.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/09/funny-games.jpg" /></entry><entry><title type="html">Code Must Be Clean. And Clear.</title><link href="https://www.yegor256.com/2018/09/12/clear-code.html" rel="alternate" type="text/html" title="Code Must Be Clean. And Clear." /><published>2018-09-12T00:00:00+00:00</published><updated>2018-09-12T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/09/12/clear-code</id><content type="html" xml:base="https://www.yegor256.com/2018/09/12/clear-code.html">&lt;p&gt;There is a famous book by Robert Martin called &lt;a href=&quot;http://amzn.to/2m7LmaA&quot;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;.
The title is an obvious call to all of us: the code must be &lt;em&gt;clean&lt;/em&gt;. Clean, like a kitchen,
I suppose—there are no dirty dishes, no garbage on the floor, no smelly
towels. Dirt to be cleaned in a code base, according to Martin, includes
large methods, non-descriptive variable names, tight coupling, lack of
&lt;a href=&quot;/2017/03/28/solid.html&quot;&gt;SOLID&lt;/a&gt;
and &lt;a href=&quot;/2017/12/19/srp-is-hoax.html&quot;&gt;SRP&lt;/a&gt; compliance,
and many other things. Read the book, it’s worth it. However,
there is yet another aspect of source code. How &lt;em&gt;clear&lt;/em&gt; is it?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Rum Diary (2011) by Bruce Robinson&quot; src=&quot;/images/2018/09/rum-diary.jpg&quot; longdesc=&quot;#b241032c&quot; /&gt;&lt;figcaption id=&quot;b241032c&quot;&gt;The Rum Diary (2011) by Bruce Robinson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The kitchen is clean when there is no dirt in the oven. But if its electric panel
speaks French, I can’t use the kitchen. Even if it’s perfectly clean.
It’s not &lt;em&gt;clear&lt;/em&gt; how to use it—that’s why it’s useless.&lt;/p&gt;

&lt;p&gt;The metaphor applies to the source code. Making it clean is the first
and very important step, which will remove all those coding anti-patterns
so many books speak about, including my favorite
&lt;a href=&quot;http://amzn.to/2cs4cXW&quot;&gt;&lt;em&gt;Code Complete&lt;/em&gt;&lt;/a&gt; by Steve McConnell,
&lt;a href=&quot;http://amzn.to/1SdcZ8M&quot;&gt;&lt;em&gt;Working Effectively With Legacy Code&lt;/em&gt;&lt;/a&gt;
by Michael Feathers, and
&lt;a href=&quot;http://amzn.to/2m7LmaA&quot;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;.
A very important step, but not the most important one.
A dirty kitchen that is useful is better than a clean one that I can’t use, isn’t it?&lt;/p&gt;

&lt;p&gt;Making code clean but leaving it difficult to understand by others is the
pitfall most of us fall for. By &lt;em&gt;others&lt;/em&gt; I mean everybody, from
our fellow in-project co-developers sitting next to us at the same desk, to
imaginative junior contributors who will join the project in five years after
we’re all hired by Google. All of them, across this very large time frame, must
be able to use the &lt;del&gt;kitchen&lt;/del&gt; source code without any additional help.
The oven has to speak their language. Not the language of its designer.&lt;/p&gt;

&lt;p&gt;How do you do that? How do you make sure the code is clear, not just clean?&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;If a stranger can modify your code and fix a bug in less than an hour, it is maintainable.&lt;/aside&gt;

&lt;p&gt;Well, test it. Ask someone who is outside of the project to take a look
at your code and tell you how clear it is. Not how beautiful your classes
and code constructs are—that’s what makes it clean. Instead, ask someone to
fix a bug in just 30 minutes and see how they react. You will realize
how clear the code is and whether it speaks the language a &lt;em&gt;stranger&lt;/em&gt;
can understand.&lt;/p&gt;

&lt;p&gt;This is the definition of maintainability. If a stranger can &lt;em&gt;modify&lt;/em&gt; your
code and fix a bug in less than an hour, it is maintainable. Obviously,
cleanliness will help. But it’s not enough. There has to be something
else, which I don’t really know how to describe. The only way to achieve
it is to let strangers regularly see your code, attempt to make a
contribution, and report bugs when something is not &lt;em&gt;clear&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Making your code open and encouraging programmers to report bugs when
something is not only broken but unclear—are the best two ways to achieve
high maintainability.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="maintainability" /><summary type="html">There is a famous book by Robert Martin called Clean Code. The title is an obvious call to all of us: the code must be clean. Clean, like a kitchen, I suppose—there are no dirty dishes, no garbage on the floor, no smelly towels. Dirt to be cleaned in a code base, according to Martin, includes large methods, non-descriptive variable names, tight coupling, lack of SOLID and SRP compliance, and many other things. Read the book, it’s worth it. However, there is yet another aspect of source code. How clear is it?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/09/rum-diary.jpg" /></entry><entry><title type="html">Monolithic Repos Are Evil</title><link href="https://www.yegor256.com/2018/09/05/monolithic-repositories.html" rel="alternate" type="text/html" title="Monolithic Repos Are Evil" /><published>2018-09-05T00:00:00+00:00</published><updated>2018-09-05T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/09/05/monolithic-repositories</id><content type="html" xml:base="https://www.yegor256.com/2018/09/05/monolithic-repositories.html">&lt;p&gt;We all keep our code in &lt;del&gt;Git&lt;/del&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control&quot;&gt;version control&lt;/a&gt; repositories.
The question is whether we should create a new repository for each
new module or try to keep as much as possible in a single so called “monolithic” repo.
Market leaders, like &lt;a href=&quot;https://code.fb.com/core-data/scaling-mercurial-at-facebook/&quot;&gt;Facebook&lt;/a&gt;
and &lt;a href=&quot;https://www.infoq.com/presentations/Development-at-Google&quot;&gt;Google&lt;/a&gt;,
advocate the second approach. I believe they are wrong.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Funny Games (2007) by Michael Haneke&quot; src=&quot;/images/2018/09/funny-games.jpg&quot; longdesc=&quot;#9f6d574f&quot; /&gt;&lt;figcaption id=&quot;9f6d574f&quot;&gt;Funny Games (2007) by Michael Haneke&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let’s use the following JavaScript function as an example.
It downloads a JSON document from a &lt;a href=&quot;http://www.zold.io&quot;&gt;Zold&lt;/a&gt;
node (using &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt;)
and places part of its content on the HTML page.
Then it colors the data according to its value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// main.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://b1.zold.io/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nscore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nscore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pretty obvious, isn’t it? Just a single &lt;code&gt;main.js&lt;/code&gt; file which does everything we need.
We simply add it to the HTML and it works:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://code.jquery.com/jquery-3.3.1.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;main.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;main();&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;loading...&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, let me refactor it. Let me break it into two pieces. The first
piece will load the data and the second one will be a jQuery plugin to colorize
HTML content according to the data it contains. This is how the
plugin will look:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// colorize.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;colorize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;main.js&lt;/code&gt; will look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// main.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://b1.zold.io/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nscore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;colorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, instead of a single monolithic piece of code, we have two smaller pieces
which have to be loaded together into the target HTML:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://code.jquery.com/jquery-3.3.1.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;colorize.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;main.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;main();&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;loading...&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Two pieces are better than one? It seems that
&lt;a href=&quot;https://ai.google/research/pubs/pub45424&quot;&gt;Google&lt;/a&gt;,
&lt;a href=&quot;https://blog.digitalocean.com/taming-your-go-dependencies/&quot;&gt;Digital Ocean&lt;/a&gt;
and &lt;a href=&quot;https://gregoryszorc.com/blog/2014/09/09/on-monolithic-repositories/&quot;&gt;Mozilla&lt;/a&gt;
don’t think so.&lt;/p&gt;

&lt;p&gt;I disagree.&lt;/p&gt;

&lt;p&gt;To illustrate my point I extracted the JavaScript function into a
new standalone &lt;a href=&quot;https://github.com/yegor256/colorizejs&quot;&gt;jQuery plugin&lt;/a&gt;.
Here is what I did:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Created a new GitHub repo &lt;a href=&quot;https://github.com/yegor256/colorizejs&quot;&gt;yegor256/colorizejs&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Read the &lt;a href=&quot;https://learn.jquery.com/plugins/basic-plugin-creation/&quot;&gt;instructions&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Did some research of jQuery plugins, studied a few examples;&lt;/li&gt;
  &lt;li&gt;Found out that most of them used &lt;a href=&quot;https://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;, which I’ve never heard of;&lt;/li&gt;
  &lt;li&gt;Decided to use &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; for JavaScript packaging (what else, right?);&lt;/li&gt;
  &lt;li&gt;Created &lt;a href=&quot;https://github.com/yegor256/colorizejs/blob/master/package.json&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; for npm;&lt;/li&gt;
  &lt;li&gt;Renamed GitHub repo to &lt;code&gt;colorizejs&lt;/code&gt; when I found out that npm package
&lt;a href=&quot;https://www.npmjs.com/package/colorize&quot;&gt;&lt;code&gt;colorize&lt;/code&gt;&lt;/a&gt; already exists;&lt;/li&gt;
  &lt;li&gt;Configured &lt;a href=&quot;https://github.com/yegor256/colorizejs/blob/master/.travis.yml&quot;&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Created a &lt;a href=&quot;https://github.com/yegor256/colorizejs/blob/master/README.md&quot;&gt;README.md&lt;/a&gt; and explained how to use it and install it;&lt;/li&gt;
  &lt;li&gt;Decided to use the MIT license and created &lt;a href=&quot;https://github.com/yegor256/colorizejs/blob/master/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Configured &lt;a href=&quot;https://github.com/yegor256/colorizejs/blob/master/.pdd&quot;&gt;PDD&lt;/a&gt; for
&lt;a href=&quot;/2017/04/05/pdd-in-action.html&quot;&gt;puzzles&lt;/a&gt; automated collection;&lt;/li&gt;
  &lt;li&gt;Configured &lt;a href=&quot;https://github.com/yegor256/colorizejs/blob/master/.rultor.yml&quot;&gt;&lt;code&gt;.rultor.yml&lt;/code&gt;&lt;/a&gt; for
&lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;Rultor&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Tried to create a unit test and failed miserably (after a full hour of research),
since I’ve had almost no experience in JS unit testing;&lt;/li&gt;
  &lt;li&gt;Posted a &lt;a href=&quot;https://stackoverflow.com/questions/51809750/&quot;&gt;question&lt;/a&gt; to StackOverflow;&lt;/li&gt;
  &lt;li&gt;The question was answered by a few people only after the bounty I offered;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/brian-lives-outdoors&quot;&gt;@brian-lives-outdoors&lt;/a&gt;’s answer
was the best and he even submitted a &lt;a href=&quot;https://github.com/yegor256/colorizejs/pull/2&quot;&gt;pull request&lt;/a&gt;
with a unit test, which I merged;&lt;/li&gt;
  &lt;li&gt;Released the first version &lt;a href=&quot;https://github.com/yegor256/colorizejs/tree/0.0.1&quot;&gt;0.0.1&lt;/a&gt;
to &lt;a href=&quot;https://www.npmjs.com/package/colorizejs&quot;&gt;npmjs.com&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Modified the code to make it work both with classes and colors;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yegor256/colorizejs/issues/3&quot;&gt;Implemented&lt;/a&gt; and released
the next version &lt;a href=&quot;https://github.com/yegor256/colorizejs/tree/0.1.0&quot;&gt;0.1.0&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zold-io/zold.github.io/issues/81&quot;&gt;Added it&lt;/a&gt; to Zold front-end,
tested it, and released it—check it out &lt;a href=&quot;http://www.zold.io/health.html&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It took almost three weeks of waiting and four hours of work, just
to move a small piece of JavaScript code to a new repository and release
it separately. Was it worth it? Well, I think it was. But &lt;del&gt;many&lt;/del&gt; most
other blog post authors, who I managed to find, think that it would be better to keep
everything in a single monolithic repo, mostly because it’s better for &lt;em&gt;productivity&lt;/em&gt;.
For example,
&lt;a href=&quot;https://danluu.com/monorepo/&quot;&gt;Advantages of monorepos&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/danluu&quot;&gt;Dan Luu&lt;/a&gt;,
&lt;a href=&quot;https://people.engr.ncsu.edu/ermurph3/papers/seip18.pdf&quot;&gt;Advantages and Disadvantages of a Monolithic Repository&lt;/a&gt;
(a case study at Google) by Ciera Jaspan et al.,
and
&lt;a href=&quot;https://www.tomasvotruba.cz/blog/2017/01/31/how-monolithic-repository-in-open-source-saved-my-laziness/&quot;&gt;How Monolithic Repository in Open Source saved my Laziness&lt;/a&gt;
by Tomas Votruba.&lt;/p&gt;

&lt;p&gt;There are also a few good analyses of both approaches, for example
&lt;a href=&quot;https://www.dotconferences.com/2016/05/fabien-potencier-monolithic-repositories-vs-many-repositories&quot;&gt;Monolithic repositories vs. Many repositories&lt;/a&gt;
speech by Fabien Potencier at dotScale 2016
and
&lt;a href=&quot;http://www.gigamonkeys.com/mono-vs-multi/&quot;&gt;Repo Style Wars: Mono vs Multi&lt;/a&gt;
by Peter Seibel.&lt;/p&gt;

&lt;p&gt;In a nutshell, they all claim that productivity is higher with a monolithic repo because
the amount of operations one has to do in order to make a change is smaller.
Indeed, in a monorepo there will be a single branch, a single set of commits, a single pull request,
a single merge, deploy and release. Also it will be easier to test, both
manually and via unit testing. Continuous integration is easier to configure,
and so on and so forth.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;A set of smaller components is better than a larger solid piece.&lt;/aside&gt;

&lt;p&gt;All these “reasonable” arguments remind me of what I hear when preaching
object decomposition and suggesting that multiple objects are better than
a single large one. Imagine a large class of 3,000 lines of code, which
does many things and they are all very tightly coupled. It’s “easy” to test it,
to make changes, to deploy, to review, etc. Because everything stays in one
file, right? We don’t need to jump from class to class in order to understand
the design. We just look at one screen, scroll it up and down, and that’s it.
Right? Totally wrong!&lt;/p&gt;

&lt;p&gt;I guess I don’t need to explain why it’s wrong. We don’t design our software
that way anymore. We know that tight coupling is a bad idea. We know that
a set of smaller components is better than a larger solid piece.&lt;/p&gt;

&lt;p&gt;Why can’t we apply the same logic to repositories? I believe we can.
Of course, just like in object-oriented programming, a fine-grained design
requires more skills and time. Look at what I had to do with this small
jQuery plugin. I’ve spent hours of coding and thinking. I even had to learn
&lt;a href=&quot;https://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; and &lt;a href=&quot;https://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt;,
which I most probably will not use anymore. But the benefits we are getting
from it are enormous. This is my short list of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Encapsulation&lt;/strong&gt;.
Each repo encapsulates a single problem, hiding its details from everybody
else. Thanks to that, the scope each repo has to deal with gets smaller.
The smaller the scope, just like in OOP, the easier it is to maintain and
modify. The easier to maintain, the cheaper the development. I guess Google
guys don’t really worry about costs. On the contrary, they want their salaries
to grow. A large unmaintainable monolithic repo is a perfect tool to make
it happen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Fast Builds&lt;/strong&gt;.
When a repo is small, the time its automated build takes is small. Look at the
time Travis &lt;a href=&quot;https://travis-ci.org/yegor256/colorizejs/builds/420726284&quot;&gt;spends&lt;/a&gt;
for my jQuery plugin. It’s 51 seconds. It’s fast.
We &lt;a href=&quot;https://mortoray.com/2015/05/06/fast-build-turnaround-time-is-essential/&quot;&gt;all know&lt;/a&gt;
that the faster the build, the better it is for productivity, since it’s easier to use
the build as a tool for development.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Accurate Metrics&lt;/strong&gt;.
I don’t know whether you rely on metrics in your projects, but we at
&lt;a href=&quot;https://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt; do pay attention to numbers, like
lines of code, &lt;a href=&quot;/2014/11/14/hits-of-code.html&quot;&gt;hits of code&lt;/a&gt;,
number of commits, classes, methods, cohesion,
coupling, etc. It’s always a question whether the metrics are accurate.
Calculating lines of code for a large repository doesn’t make any sense, since
the number will include a lot of files from completely different parts of
the application. Moreover there will be different languages and file formats.
Say a repo has 200K lines of Java, 150K lines of XML, 50K lines of JavaScript,
and 40K lines of Ruby. Can you say something specific about this repo? Is it
large? Is it a Java repo? And, more importantly, can it be compared with other
repositories? Not really. It’s just a big messy storage of files.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;aside class=&quot;quote&quot;&gt;The preferred situation is one language or technology per repository.&lt;/aside&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Homogeneous Tasks&lt;/strong&gt;.
Smaller repositories tend to have smaller tech stacks, meaning that each of
them uses just a few languages and frameworks, or (and this is the preferred
situation)—one language or technology per repository. Thanks to this,
the management of programmers becomes easier, since any ticket/problem can
be assigned to anybody. It’s easier to make tasks similar in size and complexity.
This obviously means better manageability of the project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Single Coding Standard&lt;/strong&gt;.
It’s easier to standardize the coding style if the repo is small. When it’s
large, various parts of the code base will have different styles and
it will be almost impossible to put everybody on the same page. In other
words, smaller repositories look more beautiful than larger ones.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Short Names&lt;/strong&gt;.
Each repository, inevitably, will have its own namespace. For example, in the
JS repository I just created, I only have two files: &lt;code&gt;colorizejs.js&lt;/code&gt; and &lt;code&gt;test-colorizejs.js&lt;/code&gt;.
I don’t really care about the naming inside them, since the namespace
is very small. &lt;del&gt;I can even use global variables.&lt;/del&gt;
Shorter names and smaller namespaces mean better maintainability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Simple Tests&lt;/strong&gt;.
The larger the code base, the more dependencies it has, which are difficult
to mock and test. Very large code bases become fundamentally untestable since
they require a lot of integration tests which are difficult to maintain.
Smaller libraries, frameworks and modules are easier to keep at the level
of simple and fast unit testing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, I believe that the smaller the repositories and modules, the better.
Ideally, I would say, the largest acceptable size for a code base is 50,000 lines of code.
Everything that goes above this line is a perfect candidate for decomposition.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="devops" /><summary type="html">We all keep our code in Git version control repositories. The question is whether we should create a new repository for each new module or try to keep as much as possible in a single so called “monolithic” repo. Market leaders, like Facebook and Google, advocate the second approach. I believe they are wrong.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/09/funny-games.jpg" /></entry><entry><title type="html">Soft Skills Demystified</title><link href="https://www.yegor256.com/2018/08/29/soft-skills.html" rel="alternate" type="text/html" title="Soft Skills Demystified" /><published>2018-08-29T00:00:00+00:00</published><updated>2018-08-29T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/08/29/soft-skills</id><content type="html" xml:base="https://www.yegor256.com/2018/08/29/soft-skills.html">&lt;p&gt;There are tech skills and there are soft skills. Every programmer knows that.
Tech skills are about algorithms, operators, classes, objects, and everything
else they teach us in tech schools. Soft skills are about something else.
What exactly? Difficult to say. Let’s try to clear the air.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Glengarry Glen Ross (1992) by James Foley&quot; src=&quot;/images/2018/08/glengarry-glen-ross.jpg&quot; longdesc=&quot;#03b7bd6c&quot; /&gt;&lt;figcaption id=&quot;03b7bd6c&quot;&gt;Glengarry Glen Ross (1992) by James Foley&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is a non-exhaustive list of soft skills I managed to find
on the Net&lt;sup&gt;&lt;a href=&quot;https://hackernoon.com/10-soft-skills-every-developer-needs-66f0cdcfd3f7&quot;&gt;1&lt;/a&gt;,
&lt;a href=&quot;https://jaxenter.com/6-most-useful-soft-skills-for-software-developers-125286.html&quot;&gt;2&lt;/a&gt;,
&lt;a href=&quot;https://blog.scottlogic.com/2018/01/13/soft-skills-for-software-developers.html&quot;&gt;3&lt;/a&gt;,
&lt;a href=&quot;https://amzn.to/2wbSuZa&quot;&gt;4&lt;/a&gt;,
&lt;a href=&quot;https://medium.freecodecamp.org/what-soft-skills-do-successful-developer-have-in-their-backpacks-e4b71e90329a&quot;&gt;5&lt;/a&gt;,
&lt;a href=&quot;https://www.netguru.co/blog/9-soft-skills-every-web-developer-should-master&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;:
empathy, open-mindedness, a willingness to learn, effective communication,
teamwork, approachability, helpfulness, listening, patience, responsibility,
critical thinking, problem solving, mentoring, attunement, clarity, curiosity,
strategizing, lifelong learning, business mindedness, work ethic, judgment,
ego management, commitment,
accountability, creativity, adaptability, big-picture thinking. Phew!&lt;/p&gt;

&lt;p&gt;Do you really understand exactly what these words mean? I don’t.&lt;/p&gt;

&lt;p&gt;I would actually suggest we replace them all with the “do the right thing”
mantra and call it a day.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Smiling in the office and not cursing at a stupid boss helps, but this is not what soft skills are about.&lt;/aside&gt;

&lt;p&gt;I have my own list of soft skills though. I also
&lt;a href=&quot;/2018/01/23/sociotech-skills.html&quot;&gt;strongly believe&lt;/a&gt; that tech skills
are just a small part of what makes a good programmer,
but being empathical and ready to learn is not what the other part consists of.
Of course, smiling in the office and not cursing at a stupid boss—helps.
But this is not what soft skills are about.&lt;/p&gt;

&lt;p&gt;They are about our ability to &lt;em&gt;exchange&lt;/em&gt; deliverables. Tech skills produce
deliverables, soft skills turn them into a final product, which is working
software. Here is a short list, in no particular order:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawing&lt;/strong&gt;.
Talking works great when you’re discussing your next vacation with your partner.
In a software team your ability to explain your thoughts with a diagram
seriously increases your usefulness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Writing&lt;/strong&gt;.
Again, talking is great, when your chaotic team is being managed by
an hysterical boss who just read a book about unconditional love. In a more
disciplined environment your ability to put your thoughts in writing
do make a difference for mutual success.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reporting&lt;/strong&gt;.
A good programmer knows not only how to fix a bug but, more importantly, how
to report it &lt;a href=&quot;/2018/04/24/right-way-to-report-bugs.html&quot;&gt;the right way&lt;/a&gt;,
so that the project benefits. An ability
to describe a technical problem in simple words is a crucial soft skill.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Volunteering&lt;/strong&gt;.
Open source is an important part of any software project. You have to know
how to work with an open source community, by giving them something back
for the software they provide. Sometimes you will have to report problems
to them, sometimes even submit pull requests, and maybe even create
your own open source products. You will need a lot of non-tech skills to do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Charging&lt;/strong&gt;.
Programmers make money by writing code. Very often projects fail because
important people quit due to a money conflict. They don’t know how to resolve that,
how to manage their financial objectives, how to ask for a raise, or how to change
the paying schedule. I blame programmers for that. We, technical people,
have to know how to manage our financial relationship with our projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relaxing&lt;/strong&gt;.
Many projects fail because its programmers burn out. This happens, very often,
because they don’t know how to manage their time right: when to work and
when to relax. Again, I blame programmers. We have to know how to manage our
own peace of mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asking&lt;/strong&gt;.
Not your friends, but StackOverflow and other public sources. The software
development world is getting global and the knowledge your project team
possess is just a tiny fraction of what the world knows about the problem
you are solving. You have to know how to ask the world. This is the soft skill
you need to have to be a good developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tweeting&lt;/strong&gt;.
Here comes your ability to share your thoughts and achievements in social
networks. If you stay mute and net-social-phobic, you are not really helping your
project. This is the skill you won’t learn in a few days. I would suggest
you take a look at my &lt;a href=&quot;/256-bloghacks.html&quot;&gt;256 Bloghacks&lt;/a&gt; book.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;.
Here I mean not only writing automated tests, which is a tech skill, but
an ability to communicate with testers, to make sure their feedback
improves the quality of the software under development. There is a
&lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S0378720613000967&quot;&gt;well known&lt;/a&gt;
developer-tester conflict, which good programmers know how to deal with.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Still working in a single master branch? Still an amateur.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Branching&lt;/strong&gt;.
Still working in a single &lt;code&gt;master&lt;/code&gt; branch? Still an amateur. You have to
learn how to use multiple branches, how to resolve conflicts between them,
and what is the difference between merge and rebase. This is a soft skill,
since it doesn’t have anything to do with the quality of your code but it
seriously affects your professionalism as a software developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Failing&lt;/strong&gt;.
Most projects fail, one way or another. Technical failures are not
the primary source of our troubles. We fail due to management incompetence
most frequently. Good programmers know how to deal with failures,
by provoking (aka Fail Fast), predicting (aka Risk Management), and
embracing them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delivering&lt;/strong&gt;.
Continuous integration, delivery pipeline, build automation, staging,
green/blue deployments, etc.—if you think that all these things concern
the DevOps department only, you are wrong. You have to understand how your lines
of code reach your users. The bigger the product, the longer the pipeline,
the more people it involves, and the more soft skills it requires to be
smooth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intriguing&lt;/strong&gt;.
Any project is a part of a bigger political game, one way or the other.
If you isolate yourself from intrigue, claiming that your job is to
write code—you are not a good programmer. A good programmer understands
where the money is coming from, who the primary shareholders are,
and which ass to kiss and when.&lt;/p&gt;

&lt;p&gt;Did I forget anything important?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">There are tech skills and there are soft skills. Every programmer knows that. Tech skills are about algorithms, operators, classes, objects, and everything else they teach us in tech schools. Soft skills are about something else. What exactly? Difficult to say. Let’s try to clear the air.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/08/glengarry-glen-ross.jpg" /></entry><entry><title type="html">Builders and Manipulators</title><link href="https://www.yegor256.com/2018/08/22/builders-and-manipulators.html" rel="alternate" type="text/html" title="Builders and Manipulators" /><published>2018-08-22T00:00:00+00:00</published><updated>2018-08-22T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/08/22/builders-and-manipulators</id><content type="html" xml:base="https://www.yegor256.com/2018/08/22/builders-and-manipulators.html">&lt;p&gt;Here is a simple principle for naming methods in OOP,
which I’m trying to follow in my code:
it’s a &lt;em&gt;verb&lt;/em&gt; if it &lt;em&gt;manipulates&lt;/em&gt;, it’s a &lt;em&gt;noun&lt;/em&gt; if it &lt;em&gt;builds&lt;/em&gt;.
That’s it. Nothing in between. Methods like
&lt;code&gt;saveFile()&lt;/code&gt; or &lt;code&gt;getTitle()&lt;/code&gt; don’t fit and must be renamed and refactored.
Moreover, methods that “manipulate” must always return &lt;code&gt;void&lt;/code&gt;,
for example &lt;code&gt;print()&lt;/code&gt; or &lt;code&gt;save()&lt;/code&gt;. Let me explain.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Night Of (2016) by Richard Price et al.&quot; src=&quot;/images/2018/08/the-night-of.jpg&quot; longdesc=&quot;#e86c0384&quot; /&gt;&lt;figcaption id=&quot;e86c0384&quot;&gt;The Night Of (2016) by Richard Price et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, I have to say that this idea is very similar to the one
suggested by &lt;a href=&quot;https://en.wikipedia.org/wiki/Bertrand_Meyer&quot;&gt;Bertrand Meyer&lt;/a&gt; in his book
&lt;a href=&quot;https://amzn.to/2MWEuJP&quot;&gt;Object Oriented Software Construction&lt;/a&gt;,
where he proposes we divide an object’s methods into two sharply
separated categories: queries and commands.&lt;/p&gt;

&lt;p&gt;The idea behind this principle is rather philosophical. Let’s start
with builders, which are supposed to create or find an object and then return
it. Suppose I have a store of books and I ask it to give me a book
by name:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bookshelf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s obviously a “builder” (or a “query” in Meyer’s terms). I ask for
a book and it’s given to me. The problem, though, is with the name of the method.
It’s called “find,” which implies that I know how the book will be dealt with. It will
be found.&lt;/p&gt;

&lt;p&gt;However, this is not how we should treat our objects. We must not tell them
how to do the job we want them to do. Instead, we must let &lt;em&gt;them&lt;/em&gt; decide
whether the book will be found, constructed, or maybe taken from a memory cache.
When we query, we have to say what result we are looking for and let
the object make the decision about the way this result is going to be built.
A much more appropriate name for this method would be &lt;code&gt;book()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bookshelf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rule of thumb is: a builder is always a noun. If the method returns
something, it has to be a noun. Preferably its name should explain what
the method returns. If it’s a book, name it &lt;code&gt;book()&lt;/code&gt;. If it’s a file, call
the method &lt;code&gt;file()&lt;/code&gt;, etc. Here are a few good builder examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Actor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deadline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, on the contrary, are a few examples of badly named builders:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculateSpeed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Actor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSalary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;openDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readDeadline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is no place for a verb in a builder’s name!&lt;/p&gt;

&lt;p&gt;It’s not only about the name, by the way. A builder, since its name doesn’t
contain a verb, should not do any modifications to the encapsulated entities.
It may only create or find something and return it. Just like a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure function&lt;/a&gt;, it must not have any
side-effects.&lt;/p&gt;

&lt;p&gt;Next, there are “manipulators” (or “commands” in Meyer’s terms). They do some
work for us, modifying the entities, which the object encapsulates. They are
the opposite to builders, because they actually make changes to the world
abstracted by the object.
For example, we ask the &lt;code&gt;Bookshelf&lt;/code&gt; to add a new book to itself:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bookshelf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The method adds the book to the storage. How exactly the storage will be
modified, we don’t know. But we know that since the name of the method
is a verb, there will be modifications.&lt;/p&gt;

&lt;p&gt;Also, manipulators must not return anything. It’s always &lt;code&gt;void&lt;/code&gt; that we see
as the type of their response. This is needed mostly in order to separate the imperative
part of the code from the declarative part. We either receive objects
or tell them what to do. We must not mix those activities in one method.&lt;/p&gt;

&lt;p&gt;The purpose of these rules is to make the code simpler. If you follow
them, and all your builders only return objects and your manipulators
only modify the world, the entire design will become easier to
understand. Methods will be smaller and their names shorter.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=oXj9UWm1134&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/oXj9UWm1134/mqdefault.jpg&quot; alt=&quot;YouTube video #oXj9UWm1134&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;Names of objects, methods and variables in OOP (Webinar #37);
        12 September 2018.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Of course, very often you will have a hard time finding those names. From time to time
you will want to return something from a manipulator or make your builder
make some changes, say to the cache. Try to resist this temptation and stay
with the principle: a method is either a builder or a manipulator, nothing in
the middle. The examples above are rather primitive, the code in real life
is much more complicated. But that’s what the principle is going to help
us with—making the code simpler.&lt;/p&gt;

&lt;p&gt;I’m also aware of the &lt;a href=&quot;http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html&quot;&gt;noun/verb&lt;/a&gt;
principle, which suggests always naming classes as nouns and their methods
as verbs. I believe it’s a wrong idea, since it doesn’t differentiate
builders from manipulators and encourages us to always think in terms
of imperative instructions. I believe that OOP must be much more about declarative
composition of objects, even if we have to sometimes get them from other objects
instead of instantiating them via constructors. That’s why we do need builders
in most situations and we also have to see an obvious difference between them and the other
methods, manipulators.&lt;/p&gt;

&lt;p&gt;You can find a more detailed discussion of this problem
in &lt;a href=&quot;http://goo.gl/W2WVMk&quot;&gt;Elegant Objects&lt;/a&gt;, Volume 1, Section 2.4.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How would you name a method of a class Document that reads and returns its content? &lt;a href=&quot;https://twitter.com/hashtag/elegantobjects?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#elegantobjects&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1033605343274840064?ref_src=twsrc%5Etfw&quot;&gt;August 26, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">Here is a simple principle for naming methods in OOP, which I’m trying to follow in my code: it’s a verb if it manipulates, it’s a noun if it builds. That’s it. Nothing in between. Methods like saveFile() or getTitle() don’t fit and must be renamed and refactored. Moreover, methods that “manipulate” must always return void, for example print() or save(). Let me explain.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/08/the-night-of.jpg" /></entry><entry><title type="html">70/70</title><link href="https://www.yegor256.com/2018/08/14/seventy-percent.html" rel="alternate" type="text/html" title="70/70" /><published>2018-08-14T00:00:00+00:00</published><updated>2018-08-14T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/08/14/seventy-percent</id><content type="html" xml:base="https://www.yegor256.com/2018/08/14/seventy-percent.html">&lt;p&gt;A few days ago, a friend of mine asked me to join him in a new startup.
He said that he needed a partner, to help him partially finance the project, promote
it, bring in new ideas, and push the business forward. I liked the business
idea and wanted to participate. I started to ask questions about our
future partnership and attempted to draw a simple partnership agreement.
He quickly got offended. He said that he was looking for a &lt;em&gt;real&lt;/em&gt; partner,
who would share his goals and would never require any papers or lawyers.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Lola rennt (1998) by Tom Tykwer&quot; src=&quot;/images/2018/08/run-lola-run.jpg&quot; longdesc=&quot;#8ad64182&quot; /&gt;&lt;figcaption id=&quot;8ad64182&quot;&gt;Lola rennt (1998) by Tom Tykwer&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is a list of the questions I asked him:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What happens with my shares if I stop working?&lt;/li&gt;
  &lt;li&gt;Can I start a similar business with another partner later?&lt;/li&gt;
  &lt;li&gt;Who will have a checkbook and bank account access?&lt;/li&gt;
  &lt;li&gt;Who has final say if we disagree?&lt;/li&gt;
  &lt;li&gt;Do I need your permission to sell my shares to a friend?&lt;/li&gt;
  &lt;li&gt;Will there be any vesting schedule?&lt;/li&gt;
  &lt;li&gt;Who approves expenses?&lt;/li&gt;
  &lt;li&gt;Who controls the domain name registrar account?&lt;/li&gt;
  &lt;li&gt;Who pays if the project needs more money?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the majority of people I attempt to do business with, these questions are
indeed offensive. They feel like I’m trying to draw
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Prenuptial_agreement&quot;&gt;prenup&lt;/a&gt; between
us, while they would prefer our “marriage” to be based solely on love.
They would have us promise to never betray each other’s mutual interests but then
the business suffers and eventually collapses.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;They just want to have 70%... each!!! And they have it.&lt;/aside&gt;

&lt;p&gt;Why so? Because it’s impossible to be equal in business (just like it’s impossible
to be equal in marriage, but that’s a topic for another blog post).
Eventually a conflict of interests shows up and the inability to resolve it
affects and damages the business.
“Co-founder disputes have historically been one of the top reasons
startups fail at the earliest possible stage,”
&lt;a href=&quot;https://techcrunch.com/2017/02/18/co-founder-conflict/&quot;&gt;says&lt;/a&gt;
&lt;a href=&quot;https://twitter.com/garrytan&quot;&gt;Garry Tan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would call that type of partnership, which many young startup founders
enter into, “70/70.” For them the initial agreement is not a formula of future
growth, but a symbol of &lt;em&gt;respect&lt;/em&gt;. Each of them wants to be respected and that’s
why they demand 70% of the business for themselves. They don’t care and
don’t understand how exactly the distribution of assets and profit
will work in the future. They don’t foresee forthcoming conflicts and fights,
mostly because they are too young or naive (or both).
According to the &lt;a href=&quot;https://hbr.org/2008/02/the-founders-dilemma&quot;&gt;The Founder’s Dilemma&lt;/a&gt;
by &lt;a href=&quot;https://en.wikipedia.org/wiki/Noam_T._Wasserman&quot;&gt;Noam Wasserman&lt;/a&gt;,
“Founders’ attachment, overconfidence, and naïveté may be necessary
to get new ventures up and running, but these emotions later create problems.”&lt;/p&gt;

&lt;p&gt;They just want to have 70%… each!!!&lt;/p&gt;

&lt;p&gt;It’s not even 50/50 in most cases, but 70/70. This is what makes it funny.
Very often each partner thinks that he or she is the major contributor
to the project and that’s why it’s 70%.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;You can't trust me to stand by my words, if there were no words.&lt;/aside&gt;

&lt;p&gt;And they have it.&lt;/p&gt;

&lt;p&gt;When I was younger, I had no problem with entering into
such an agreement. I was saying to myself: he wants 70% but he doesn’t
understand that in reality he won’t even get a single percent, since, for example, we
didn’t put the ownership of the domain name into the contract. It is obvious
right from the start that the partner is ready to trust me blindly,
without even thinking about possible consequences. In the end, all of us, and our
startups, were losing.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, trust between partners is a crucial and mandatory element
of any deal. But you can’t trust me to stand by my words, if there were &lt;em&gt;no words&lt;/em&gt;.
If we never discussed, for example, how much I get when I quit because
I’m fed up with you, I will try to get as much as possible and where exactly
that line of 70% goes will be a subject for an ugly debate. And this will
happen in very different circumstances, where there will be, most probably,
no love between us or maybe even friendship. In that future fight the one
who is the most aggressive and cunning will win. Do you really want that
to be me? Or do you expect it to be you?&lt;/p&gt;

&lt;p&gt;Now I’m a bit older and more experienced. I’ve seen those ugly debates and don’t want them anymore.
I don’t want the investment of my time and my money to go down the drain. I want
to know upfront what exactly will happen with them in a month, a year,
and a few decades, when I retire and my grandchildren inherit them.&lt;/p&gt;

&lt;p&gt;That’s why I ask all those “offensive” questions upfront. If the other side does
indeed get offended, I attempt to explain to them what I just said in this article.
If they don’t understand and still want to marry me out of love,
I walk away. As &lt;a href=&quot;http://www.paulgraham.com/startupmistakes.html&quot;&gt;Paul Graham&lt;/a&gt;, a co-founder of Y Combinator,
&lt;a href=&quot;http://www.paulgraham.com/startupmistakes.html&quot;&gt;said&lt;/a&gt;,
“Most of the disputes I’ve seen between founders could have been avoided if they’d been more careful about
who they started a company with.” I don’t want to start a business with
those who are scared of a prenup. I know that in that case
the divorce will be ugly.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html">A few days ago, a friend of mine asked me to join him in a new startup. He said that he needed a partner, to help him partially finance the project, promote it, bring in new ideas, and push the business forward. I liked the business idea and wanted to participate. I started to ask questions about our future partnership and attempted to draw a simple partnership agreement. He quickly got offended. He said that he was looking for a real partner, who would share his goals and would never require any papers or lawyers.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/08/run-lola-run.jpg" /></entry><entry><title type="html">Either Bugs or Pull Requests … or You Are Out</title><link href="https://www.yegor256.com/2018/07/24/bugs-or-pull-requests.html" rel="alternate" type="text/html" title="Either Bugs or Pull Requests ... or You Are Out" /><published>2018-07-24T00:00:00+00:00</published><updated>2018-07-24T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/07/24/bugs-or-pull-requests</id><content type="html" xml:base="https://www.yegor256.com/2018/07/24/bugs-or-pull-requests.html">&lt;p&gt;Here is how it goes, over and over again. I find a new developer for one of
my projects managed by Zerocracy. He claims to be an expert with 10 years
of hands-on coding experience, $60 hourly rate (we &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;don’t hire&lt;/a&gt; US guys),
and fluent English. Then he joins the project and attempts
to close a few tickets. But he hardly can. For many reasons. Then he comes back
and explains why &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;our microtasking methodology&lt;/a&gt;
doesn’t work, trying to convince me
that I have to pay him &lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;per hour&lt;/a&gt;,
instead of per result. Here is my answer.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Jamón, Jamón (1992) by Bigas Luna&quot; src=&quot;/images/2018/07/jamon-jamon.jpg&quot; longdesc=&quot;#97156df6&quot; /&gt;&lt;figcaption id=&quot;97156df6&quot;&gt;Jamón, Jamón (1992) by Bigas Luna&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;No matter how bad the methodology is, you do know that &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;we pay&lt;/a&gt;
for each bug that is found and properly reported, right?
Check &lt;a href=&quot;https://www.zerocracy.com/policy.html#29&quot;&gt;§29&lt;/a&gt; of our Policy.&lt;/p&gt;

&lt;p&gt;If the Code Base Is Bad, Why Don’t You Report Bugs?&lt;/p&gt;

&lt;p&gt;If the Code Base Is Good, Where Are Your Pull Requests?&lt;/p&gt;

&lt;p&gt;There is only one metric on our projects, which separates good programmers
from bad ones: the amount of money they are making.
You can make money contributing to the project either by
1) reporting bugs (when you see problems)
or 2) submitting pull requests (when you don’t see problems).&lt;/p&gt;

&lt;p&gt;If none of that works for you, you are a bad programmer.&lt;/p&gt;

&lt;p&gt;Good bye.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="zerocracy" /><category term="management" /><summary type="html">Here is how it goes, over and over again. I find a new developer for one of my projects managed by Zerocracy. He claims to be an expert with 10 years of hands-on coding experience, $60 hourly rate (we don’t hire US guys), and fluent English. Then he joins the project and attempts to close a few tickets. But he hardly can. For many reasons. Then he comes back and explains why our microtasking methodology doesn’t work, trying to convince me that I have to pay him per hour, instead of per result. Here is my answer.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/07/jamon-jamon.jpg" /></entry><entry><title type="html">What’s Wrong With Global Variables?</title><link href="https://www.yegor256.com/2018/07/03/global-variables.html" rel="alternate" type="text/html" title="What's Wrong With Global Variables?" /><published>2018-07-03T00:00:00+00:00</published><updated>2018-07-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/07/03/global-variables</id><content type="html" xml:base="https://www.yegor256.com/2018/07/03/global-variables.html">&lt;p&gt;Only lazy people haven’t written already about how &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global variables&lt;/a&gt;
are evil. It started in 1973 when W. Wulf et al. &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=953355&quot;&gt;claimed&lt;/a&gt; that
“the non-local variable is a major contributing factor in programs
which are difficult to understand.” Since then, &lt;a href=&quot;http://wiki.c2.com/?GlobalVariablesAreBad&quot;&gt;many other reasons&lt;/a&gt;
where suggested to convince programmers to stop using global variables.
I think &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil&quot;&gt;I read them all&lt;/a&gt;,
but didn’t find the one that bothers me most of all: composability.
In a nutshell, global variables make code difficult or impossible to compose
in ways which are different from what its original author expected.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;El Chapo, Season 1 (2017) by Silvana Aguirre et al.&quot; src=&quot;/images/2018/07/el-chapo.jpg&quot; longdesc=&quot;#9e10a0df&quot; /&gt;&lt;figcaption id=&quot;9e10a0df&quot;&gt;El Chapo, Season 1 (2017) by Silvana Aguirre et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I was recently writing a web front for &lt;a href=&quot;https://www.zold.io&quot;&gt;Zold&lt;/a&gt; in Ruby,
on top of &lt;a href=&quot;http://sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt;.
This is how a web server starts according to &lt;a href=&quot;http://sinatrarb.com/intro.html&quot;&gt;their documentation&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here &lt;code&gt;start!&lt;/code&gt; is a static method of the &lt;code&gt;App&lt;/code&gt; class, which you have to declare
as a child of their default parent
&lt;a href=&quot;https://github.com/sinatra/sinatra/blob/v2.0.3/lib/sinatra/base.rb#L893-L1896&quot;&gt;&lt;code&gt;Sinatra::Base&lt;/code&gt;&lt;/a&gt;.
To tell the app which TCP port to listen to you have to preconfigure it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra/base&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What do you do if you want to start two web servers?
For the purpose of testing this may be a pretty logical requirement.
For example, since Zold is a distributed network,
it is necessary to test how a number of servers communicate to each other.
I can’t do that! There is absolutely no way.
Because Sinatra is designed with the assumption that only one server may exist in the entire application scope.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=FNWyN_Q10TI&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/FNWyN_Q10TI/mqdefault.jpg&quot; alt=&quot;YouTube video #FNWyN_Q10TI&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;What's wrong with global variables? (Webinar #36);
        8 August 2018.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Can this really be fixed? Let’s take a look at &lt;a href=&quot;https://github.com/sinatra/sinatra/&quot;&gt;their code&lt;/a&gt;.
Class &lt;code&gt;Sinatra::Base&lt;/code&gt; is essentially a &lt;a href=&quot;/2016/06/27/singletons-must-die.html&quot;&gt;Singleton&lt;/a&gt;,
which is not supposed to have more than one instance.
When we call &lt;code&gt;App.set(:port, 8080)&lt;/code&gt;, the value &lt;code&gt;8080&lt;/code&gt; is saved into an attribute of a single instance.
The number &lt;code&gt;8080&lt;/code&gt; becomes available for all methods of &lt;code&gt;Sinatra::Base&lt;/code&gt;, no matter what instance
they are called from.&lt;/p&gt;

&lt;p&gt;They are not using &lt;a href=&quot;https://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/globalvars.html&quot;&gt;true&lt;/a&gt;
Ruby global variables, I believe, because they know that they are bad.
Why exactly they are bad and what the
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;alternatives&lt;/a&gt; are—slipped through their fingers.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;While the application is small and its test coverage is low, global variables may not hurt.&lt;/aside&gt;

&lt;p&gt;Technically speaking, their design is “globally scoped.”
&lt;code&gt;Sinatra::Base&lt;/code&gt; treats the entire application as its scope of visibility.
No matter who calls it, everything is visible, including what was created
in previous calls and in previously instantiated objects.
This “class” is a giant bag of global variables.&lt;/p&gt;

&lt;p&gt;Every global variable is a troublemaker of that kind.
While the application is small and its test coverage is low, global variables may not hurt.
But the bigger the app and the more sophisticated its automated testing scenarios,
the more difficult it will be to compose objects which depend on global variables,
singletons, or class variables.&lt;/p&gt;

&lt;p&gt;My recommendation? Under no circumstances even think about any global variables.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What do you think about global variables? &lt;a href=&quot;https://twitter.com/hashtag/elegantobjects?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#elegantobjects&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/oop?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#oop&lt;/a&gt;&lt;/p&gt;--- Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1018400337324118016?ref_src=twsrc%5Etfw&quot;&gt;July 15, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Only lazy people haven’t written already about how global variables are evil. It started in 1973 when W. Wulf et al. claimed that “the non-local variable is a major contributing factor in programs which are difficult to understand.” Since then, many other reasons where suggested to convince programmers to stop using global variables. I think I read them all, but didn’t find the one that bothers me most of all: composability. In a nutshell, global variables make code difficult or impossible to compose in ways which are different from what its original author expected.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/07/el-chapo.jpg" /></entry></feed>