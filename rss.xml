<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014</copyright>
    <lastBuildDate>Fri, 14 Nov 2014 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>Hits-of-Code Instead of SLoC</title>
      <link>http://www.yegor256.com/2014/11/14/hits-of-code.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Source_lines_of_code&quot;&gt;Lines-of-Code&lt;/a&gt;
(aka SLoC) is a metric with a terrible reputation.
Try &lt;a href=&quot;https://www.google.com/search?q=line+of+code+metric&quot;&gt;to google&lt;/a&gt;
it yourself and you&amp;#39;ll find tons of articles bad-mouthing about its
counter-effectiveness and destructiveness for a software development process.
The main argument is that we can&amp;#39;t measure the progress of programming
by the number of lines of code written. Probably the most famous quote is
attributed to &lt;a href=&quot;https://en.wikipedia.org/wiki/Bill_Gates&quot;&gt;Bill Gates&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Measuring programming progress by lines of code is like measuring aircraft building progress by weight&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically, this means that certain parts of the aircraft will take
much more effort at the same time being much lighter than others
(like a central computer, for example). Instead
of measuring the weight of the aircraft we should measure the effort put into it... somehow.
So, here is the idea. How about we measure the amount of times programmers
&lt;strong&gt;touch&lt;/strong&gt; the lines. Instead of counting the number of lines we&amp;#39;ll count
how many times they were actually modified &amp;mdash; we can get this information
from Git (or any other SCM). The more you touch that part
of the aircraft &amp;mdash; the more effort you spent on it, right?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I called it Hits-of-Code (HoC) and created a small tool to help us
calculate this number in just one line. It&amp;#39;s a
&lt;a href=&quot;https://rubygems.org/gems/hoc&quot;&gt;Ruby gem&lt;/a&gt;, install it and run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install hoc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hoc
54687&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The number 54687 is a total number of Hits-of-Code in your code base. The
principle behind this number is primitive &amp;mdash; every time a line of code
is modified, created or deleted in a Git commit, the counter increments.&lt;/p&gt;

&lt;p&gt;The main reason why this metric is better than LoC is that
it is much better aligned with the actual effort invested into the code
base. Here is why.&lt;/p&gt;

&lt;h2 id=&quot;it-always-increments&quot;&gt;It Always Increments&lt;/h2&gt;

&lt;p&gt;The HoC metric always goes up. Today it can not be lower than it
was yesterday &amp;mdash; just like the effort, it always increments.
Lines-of-Code is not acting like this. You may have a huge code
base today, but after refactoring it will become much smaller. The number
of lines of code is decreased. Does it mean you are less effective?
Definitely not, but the LoC metric says so, to a non-programmer.
A project manager, for example, may decide that since the size
of the code base stayed the same over the last month, the team is not working.&lt;/p&gt;

&lt;p&gt;HoC doesn&amp;#39;t have this counter-intuitive effect. Instead, HoC grows together with your
every commit. The more you work on the code base, the bigger the HoC. It doesn&amp;#39;t
matter how big or small the absolute size of the your product. What matters is
how much effort you put into it. That&amp;#39;s why HoC is very intuitive and may be
used as a measurement of software development progress.&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/gnuplot/2014/11/hoc-vs-loc.svg' style='width:700px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;Look at this 18-month graph; it shows both metrics together. I used the
same Java code base of &lt;a href=&quot;https://github.com/yegor256/rultor&quot;&gt;rultor&lt;/a&gt;,
a &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;DevOps assistant&lt;/a&gt;.
The code base experienced a major refactoring a few months ago, as you
see on the graph. I think it is obvious which metric on this graph tells us more about
the efforts being invested into the product.&lt;/p&gt;

&lt;h2 id=&quot;it-is-objective&quot;&gt;It Is Objective&lt;/h2&gt;

&lt;p&gt;For HoC it doesn&amp;#39;t matter how big the absolute size of the code base,
but only how big your relative contribution to it.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say, you have 300K lines of code and 95% of them were copy-pasted from some
third-party libraries (by the way, it is a very common and terrible practice &amp;mdash;
to keep third-party code inside your own repository). The amount of lines
of code will be big, but the actual custom code part will be relatively small. Thus,
the LoC metric will be misleading &amp;mdash; it will always show 300K with
small increments or decrements around it. Everybody will have a feeling that the
team is working with 300K lines code base.&lt;/p&gt;

&lt;p&gt;On the other hand, HoC will always take into account the part of code that
is actually being modified. The value of HoC will be objectively
correlated with the actual effort of programmers working with the code base.&lt;/p&gt;

&lt;h2 id=&quot;it-exposes-complexity-of-lines&quot;&gt;It Exposes Complexity of Lines&lt;/h2&gt;

&lt;p&gt;LoC is usually critized for its neutrality towards code complexity.
An auto-generated ORM class or a complex sorting algorithm may have the same
size in terms of lines of code, but the first takes seconds to write, while
the second may take weeks or months. That&amp;#39;s why lines of code is usually
considered a false metric.&lt;/p&gt;

&lt;p&gt;Hits-of-Code takes complexity into account, because the longer you work
with that sorting algorithm the more modifications you make to its
lines. Well, this statement is true if you use Git regularly and commit
your changes frequently &amp;mdash; that is how you tell Git about your work progress.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Finally, look at &lt;a href=&quot;http://www.teamed.io/portfolio.html&quot;&gt;this list of open projects&lt;/a&gt;
completed by our team over the
last few years. Every project has two metrics: Lines-of-Code and Hits-of-Code.
It is interesting to see how relatively small projects have very big
(over a million) HoC numbers. This immediately reminds me how much
time we invested into it and how old they are.&lt;/p&gt;

&lt;p&gt;I used the HoC metric in this analysis: &lt;a href=&quot;/2014/04/11/cost-of-loc.html&quot;&gt;How much do you pay per line of code?&lt;/a&gt;.
That post compares a traditional project that paid $3.98 per HoC and
an open source one, managed by Teamed.io, that paid &amp;cent;13.&lt;/p&gt;

&lt;p&gt;My conclusion is that this Hits-of-Code metric can be used as a tool of
progress tracking in a software development project. Moreover, it
can be used for estimations of team size, project budget, development
schedule and so forth. Obviously, LoC can&amp;#39;t be the only metric, but in
combination with others it may greatly help in estimating, planning
and tracking.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 14 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/14/hits-of-code.html</guid>
      <dc:date>2014-11-14T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Immutability Helps</title>
      <link>http://www.yegor256.com/2014/11/07/how-immutability-helps.html</link>
      <description>&lt;p&gt;In a few recent posts, including
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;&amp;quot;Getters/Setters. Evil. Period.&amp;quot;&lt;/a&gt;,
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;&amp;quot;Objects Should Be Immutable&amp;quot;&lt;/a&gt;, and
&lt;a href=&quot;/2014/10/03/di-containers-are-evil.html&quot;&gt;&amp;quot;Dependency Injection Containers are Code Polluters&amp;quot;&lt;/a&gt;,
I universally labelled all mutable objects with &amp;quot;setters&amp;quot; (object methods starting with &lt;code&gt;set&lt;/code&gt;) evil.
My argumentation was based mostly on metaphors and abstract examples. Apparently,
this wasn&amp;#39;t convincing enough for many of you &amp;mdash; I received a few requests
asking to provide more specific and practical examples.&lt;/p&gt;

&lt;p&gt;Thus, in order to illustrate my strongly negative attitude to &amp;quot;mutability via setters&amp;quot;, I took
an existing &lt;a href=&quot;http://commons.apache.org/proper/commons-email/&quot;&gt;commons-email&lt;/a&gt; Java library from Apache
and re-designed it my way, without setters and with &amp;quot;object thinking&amp;quot; in mind.
I released my library as part of the &lt;a href=&quot;http://www.jcabi.com&quot;&gt;jcabi&lt;/a&gt; family
&amp;mdash; &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;. Let&amp;#39;s see what benefits
we get from a &amp;quot;pure&amp;quot; object-oriented and immutable approach, without getters.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is how your code will look, if you send an email using commons-email:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHostName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smtp.googlemail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSmtpPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;465&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DefaultAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;yegor@teamed.io&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Yegor Bugayenko&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dude@jcabi.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dude, how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how you do the same with &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SMTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smtp.googlemail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;465&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Yegor Bugayenko &amp;lt;yegor@teamed.io&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StRecipient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dude@jcabi.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enclosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dude, how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think the difference is obvious.&lt;/p&gt;

&lt;p&gt;In the first example, you&amp;#39;re
dealing with a monster class that can do everything for you, including
sending your MIME message via SMTP, creating the message, configuring
its parameters, adding MIME parts to it, etc. The
&lt;a href=&quot;http://svn.apache.org/viewvc/commons/proper/email/tags/EMAIL_1_3_3/src/main/java/org/apache/commons/mail/Email.java?revision=1609295&amp;amp;view=co&quot;&gt;&lt;code&gt;Email&lt;/code&gt;&lt;/a&gt;
class from commons-email is really a huge class &amp;mdash; 33 private properties, over
a hundred methods, about two thousands lines of code. First, you configure
the class through a bunch of setters and then you ask it to &lt;code&gt;send()&lt;/code&gt;
an email for you.&lt;/p&gt;

&lt;p&gt;In the second example, we have seven objects instantiated via seven &lt;code&gt;new&lt;/code&gt; calls.
&lt;code&gt;Postman&lt;/code&gt; is responsible for packaging a MIME message; &lt;code&gt;SMTP&lt;/code&gt; is
responsible for sending it via SMTP; stamps (&lt;code&gt;StSender&lt;/code&gt;, &lt;code&gt;StRecipient&lt;/code&gt;,
and &lt;code&gt;StSubject&lt;/code&gt;) are responsible for configuring the MIME message before
delivery; enclosure &lt;code&gt;EnPlain&lt;/code&gt; is responsible for creating a MIME part
for the message we&amp;#39;re going to send. We construct these seven objects,
encapsulating one into another, and then we ask the postman to &lt;code&gt;send()&lt;/code&gt;
the envelope for us.&lt;/p&gt;

&lt;h2 id=&quot;what&amp;#39;s-wrong-with-a-mutable-email?&quot;&gt;What&amp;#39;s Wrong With a Mutable Email?&lt;/h2&gt;

&lt;p&gt;From a user perspective, there is almost nothing wrong. &lt;code&gt;Email&lt;/code&gt; is a powerful
class with multiple controls &amp;mdash; just hit the right one and the job
gets done. However, from a developer perspective &lt;code&gt;Email&lt;/code&gt; class is a nightmare. Mostly
because the class is very big and difficult to maintain.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
every time you want to extend it by introducing a new method, you&amp;#39;re facing the fact that you&amp;#39;re
making the class even worse &amp;mdash; longer, less cohesive, less readable,
less maintainable, etc. You have a feeling that you&amp;#39;re digging into something
dirty and that there is no hope to make it cleaner, ever. I&amp;#39;m sure, you&amp;#39;re
familiar with this feeling &amp;mdash; most legacy applications look that way.
They have huge multi-line &amp;quot;classes&amp;quot; (in reality, COBOL programs written in Java)
that were inherited from a few generations of programmers before you. When
you start, you&amp;#39;re full of energy, but after a few minutes of scrolling
such a &amp;quot;class&amp;quot; you say &amp;mdash; &amp;quot;screw it, it&amp;#39;s almost Saturday&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
there is no data hiding or encapsulation any more
&amp;mdash; 33 variables are accessible by over 100 methods. What is hidden?
This &lt;code&gt;Email.java&lt;/code&gt; file in reality is a big, procedural 2000-line script, called
a &amp;quot;class&amp;quot; by mistake. Nothing is hidden, once you cross the border of the
class by calling one of its methods. After that, you have full access to
all the data you may need. Why is this bad? Well, why do we need encapsulation
in the first place? In order to protect one programmer from another, aka
&lt;a href=&quot;https://en.wikipedia.org/wiki/Defensive_programming&quot;&gt;defensive programming&lt;/a&gt;.
While I&amp;#39;m busy changing the subject of the MIME message, I want to be
sure that I&amp;#39;m not interfered with by some other method&amp;#39;s activity, that is
changing a sender and touching my subject by mistake. Encapsulation helps
us narrow down the scope of the problem, while this &lt;code&gt;Email&lt;/code&gt; class
is doing exactly the opposite.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
its unit testing is even more complicated than the class itself. Why? Because
of multiple inter-dependencies between its methods and properties. In order to
test &lt;code&gt;setCharset()&lt;/code&gt; you have to prepare the entire object by calling a few other
methods, then you have to call &lt;code&gt;send()&lt;/code&gt; to make sure the message being
sent actually uses the encoding you specified. Thus, in order to test
a one-line method &lt;code&gt;setCharset()&lt;/code&gt; you run the entire integration testing
scenario of sending a full MIME message through SMTP. Obviously, if something
gets changed in one of the methods, almost every test method will be
affected. In other words, tests are very fragile, unreliable and over-complicated.&lt;/p&gt;

&lt;p&gt;I can go on and on with this &amp;quot;&lt;em&gt;because the class is so big&lt;/em&gt;&amp;quot;, but I think it is
obvious that a small, cohesive class is always better than a big one. It
is obvious to me, to you, and to any object-oriented programmer. But why is it not
so obvious to the developers of Apache Commons Email? I don&amp;#39;t think they are
stupid or un-educated. What is it then?&lt;/p&gt;

&lt;h2 id=&quot;how-and-why-did-it-happen?&quot;&gt;How and Why Did It Happen?&lt;/h2&gt;

&lt;p&gt;This is how it always happens. You start to design a class as something
cohesive, solid, and small. Your intentions are very positive.
Very soon you realize that there is something
else that this class has to do. Then, something else. Then, even more.&lt;/p&gt;

&lt;p&gt;The best way to make your class more and more powerful is by adding
setters that inject configuration parameters into the class so that it
can process them inside, isn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;This is the root cause of the problem! The root cause is our ability to &lt;strong&gt;insert&lt;/strong&gt;
data into mutable objects via configuration methods, also known as &amp;quot;setters&amp;quot;.
When an object is mutable and allows us to add setters whenever we
want, we will do it without limits.&lt;/p&gt;

&lt;p&gt;Let me put it this way &amp;mdash;
&lt;strong&gt;mutable classes tend to grow in size and lose cohesiveness&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If commons-email authors made this &lt;code&gt;Email&lt;/code&gt; class immutable
in the beginning, they wouldn&amp;#39;t have been able to add so many methods into it
and encapsulate so many properties. They wouldn&amp;#39;t be able to turn
it into a monster. Why? Because an immutable object only accepts a state
through a constructor. Can you imagine a 33-argument constructor?
Of course, not.&lt;/p&gt;

&lt;p&gt;When you make your class immutable in the first place, you are forced
to keep it cohesive, small, solid and robust. Because you can&amp;#39;t encapsulate
too much and you can&amp;#39;t modify what&amp;#39;s encapsulated. Just two or three
arguments of a constructor and you&amp;#39;re done.&lt;/p&gt;

&lt;h2 id=&quot;how-did-i-design-an-immutable-email?&quot;&gt;How Did I Design An Immutable Email?&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;When I was designing &lt;a href=&quot;https://github.com/jcabi/jcabi-email&quot;&gt;jcabi-email&lt;/a&gt;
I started with a small and simple class:
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Postman.java&quot;&gt;&lt;code&gt;Postman&lt;/code&gt;&lt;/a&gt;.
Well, it is an interface,
since I never make interface-less classes. So, &lt;code&gt;Postman&lt;/code&gt; is... a post man.
He is delivering messages to other people. First, I created a default
version of it (I omit the ctor, for the sake of brevity):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.mail.Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create SMTP session&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create transport&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.connect(this.host, this.port, etc.)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.send(msg)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.close();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Good start, it works. What now? Well, the
&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/jms/Message.html&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt;
is difficult to construct.
It is a complex class from JDK that requires some manipulations before it
can become a nice HTML email. So I created an envelope, which will build
this complex object for me (pay attention, both
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Postman.java&quot;&gt;&lt;code&gt;Postman&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Envelope.java&quot;&gt;&lt;code&gt;Envelope&lt;/code&gt;&lt;/a&gt;
are immutable and annotated with
&lt;a href=&quot;http://aspects.jcabi.com/apidocs-0.20/com/jcabi/aspects/Immutable.html&quot;&gt;@Immutable&lt;/a&gt; from
&lt;a href=&quot;http://aspects.jcabi.com/annotation-immutable.html&quot;&gt;jcabi-aspects&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also refactor the &lt;code&gt;Postman&lt;/code&gt; to accept an envelope, not a message:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, so good. Now let&amp;#39;s try to create a simple implementation of
&lt;code&gt;Envelope&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works, but it does nothing useful yet. It only creates an absolutely
empty MIME message and returns it. How about adding a subject to it
and both &lt;code&gt;To:&lt;/code&gt; and &lt;code&gt;From:&lt;/code&gt; addresses (pay attention, &lt;code&gt;MIME&lt;/code&gt; class is
also immutable):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcpts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcpts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRecipient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RecipientType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks correct and it works. But it is still too primitive. How about
&lt;code&gt;CC:&lt;/code&gt; and &lt;code&gt;BCC:&lt;/code&gt;? What about email text? How about PDF enclosures?
What if I want to specify the encoding of the message? What about &lt;code&gt;Reply-To&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Can I add all these parameters to the constructor? Remember, the
class is immutable and I can&amp;#39;t introduce the &lt;code&gt;setReplyTo()&lt;/code&gt; method. I have to
pass the &lt;code&gt;replyTo&lt;/code&gt; argument into its constructor. It&amp;#39;s impossible, because
the constructor will have too many arguments, and nobody will be able to use it.&lt;/p&gt;

&lt;p&gt;So, what do I do?&lt;/p&gt;

&lt;p&gt;Well, I started to think: how can we break the concept of an &amp;quot;envelope&amp;quot;
into smaller concepts &amp;mdash; and this what I invented. Like a real-life envelope,
my &lt;code&gt;MIME&lt;/code&gt; object will have stamps. Stamps will be responsible
for configuring an object &lt;code&gt;Message&lt;/code&gt; (again,
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Stamp.java&quot;&gt;&lt;code&gt;Stamp&lt;/code&gt;&lt;/a&gt; is immutable,
as well as all its implementors):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I can simplify my
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Envelope.java&quot;&gt;&lt;code&gt;MIME&lt;/code&gt;&lt;/a&gt; class to the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stamps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stmps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stamps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I will create stamps for the subject, for &lt;code&gt;To:&lt;/code&gt;, for &lt;code&gt;From:&lt;/code&gt;,
for &lt;code&gt;CC:&lt;/code&gt;, for &lt;code&gt;BCC:&lt;/code&gt;, etc. As many stamps as I like. The class &lt;code&gt;MIME&lt;/code&gt;
will stay the same &amp;mdash; small, cohesive, readable, solid, etc.&lt;/p&gt;

&lt;p&gt;What is important here is why I made the decision to refactor while
the class was relatively small. Indeed, I started to worry about these
stamp classes when my &lt;code&gt;MIME&lt;/code&gt; class was just 25 lines in size.&lt;/p&gt;

&lt;p&gt;That is exactly the point of this article &amp;mdash;
&lt;strong&gt;immutability forces you to design small and cohesive objects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Without immutability, I would have gone the same direction as commons-email. My
&lt;code&gt;MIME&lt;/code&gt; class would grow in size and sooner or later would become
as big as &lt;code&gt;Email&lt;/code&gt; from commons-email. The only thing that stopped me
was the necessity to refactor it, because I wasn&amp;#39;t able to pass all
arguments through a constructor.&lt;/p&gt;

&lt;p&gt;Without immutability, I wouldn&amp;#39;t have had that motivator and I would
have done what Apache developers did with commons-email &amp;mdash; bloat the
class and turn it into an unmaintainable monster.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;. I hope
this example was illustrative enough and that you will start writing
cleaner code with immutable objects.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 07 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/07/how-immutability-helps.html</guid>
      <dc:date>2014-11-07T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>An Empty Line is a Code Smell</title>
      <link>http://www.yegor256.com/2014/11/03/empty-line-code-smell.html</link>
      <description>&lt;p&gt;The subject may sound like a joke, but it is not. An empty line,
used as a separator of instructions in an object method, is a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt;.
Why? In short, because a method should &lt;strong&gt;not&lt;/strong&gt; contain &amp;quot;parts&amp;quot;. A method
should always &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;do one thing&lt;/a&gt;
and its functional decomposition should be done by language constructs
(for example, new methods), and &lt;strong&gt;never&lt;/strong&gt; by empty lines.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Look at this Java class (it does smell, doesn&amp;#39;t it?):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TextFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method first loads the content of the file. Second, it
counts how many lines match the regular expression provided. So why does
method &lt;code&gt;grep&lt;/code&gt; smell? Because it does two things instead of one &amp;mdash;
it loads and it greps.&lt;/p&gt;

&lt;p&gt;If we make a rule, to avoid empty lines in method bodies, the method
will have to be refactored in order to preserve the &amp;quot;separation of concerns&amp;quot;
introduced by that empty line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TextFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I believe it is obvious that this new class has methods that are
much more cohesive and readable. Now every method is doing exactly
one thing, and it&amp;#39;s easy to understand which thing it is.&lt;/p&gt;

&lt;p&gt;This idea about avoiding empty lines is also applicable to other languages,
not just Java/C++/Ruby, etc. For example, this CSS code is
definitely begging for refactoring:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The empty line here is telling us (screaming at us, actually) that this &lt;code&gt;.container&lt;/code&gt;
class is too complex and has to be decomposed into two classes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.wide&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.important&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, using empty lines to separate blocks of code is a very common habit.
Moreover, very often I see empty blocks of two or even three lines, which are all
playing this evil role of a separator of concerns.&lt;/p&gt;

&lt;p&gt;Needless to say, a properly designed class must have just a few public
methods and a properly designed method must have up to ten instructions
(according to Bob Martin).
Empty lines inside methods encourage us to break this awesome rule and
turn them into multi-page poems.&lt;/p&gt;

&lt;p&gt;Of course, it&amp;#39;s easier to just click &lt;code&gt;enter&lt;/code&gt; a few times and continue to
code right in the same method, instead of thinking and refactoring first.
This laziness will eventually lead to code that is hardly maintainable
at all.&lt;/p&gt;

&lt;p&gt;To prevent this from happening in your projects, stop using empty
lines inside methods, completely. Ideally, prohibit them in your automated build.
In &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;qulice.com&lt;/a&gt;,
a static analysis tool we&amp;#39;re using in all Java projects,
we created a custom Checkstyle check that prohibits empty lines in every
method.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 03 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/03/empty-line-code-smell.html</guid>
      <dc:date>2014-11-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Much Do You Cost?</title>
      <link>http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.teamed.io'&gt;&lt;img src='http://img.teamed.io/logo.svg' style='width:160px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m getting a few emails every day from programmers
interested in working with &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt; remotely.
The first question I usually ask is &amp;quot;what is your rate?&amp;quot;
(we pay &lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;by the hour&lt;/a&gt;)
What surprises me is how
often people incorrectly estimate themselves, in both directions.&lt;/p&gt;

&lt;p&gt;I hear very different numbers, from $5 to $500 per hour. I never
say no, but usually come up with my own hourly rate estimate. This article
explains what factors I do and don&amp;#39;t take into account. These are
my personal criteria; don&amp;#39;t take them as an industry standard.
I do find them objective and logical, though &amp;mdash; so let me explain.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;open-source-contribution&quot;&gt;Open Source Contribution&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/rate-open-source-contribution.png' style='width:350px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;This is the first and the most important characteristic of a
software developer. Do you contribute to open source projects?
Do you have your own open source libraries that are used by
some community? Do you write code that is publicly available and used?&lt;/p&gt;

&lt;p&gt;If you have nothing to show here, I see three posible causes.&lt;/p&gt;

&lt;p&gt;First, you&amp;#39;re &lt;strong&gt;too shy to share&lt;/strong&gt; your code because &lt;strong&gt;it&amp;#39;s crap&lt;/strong&gt;. Obviously,
this is not a good sign. Not because your code could be bad, but because
you&amp;#39;re not brave enough to face this fact and improve. In our teams we
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;pay a lot of attention&lt;/a&gt;
to the quality of code and most of our
new team members get surprised by just how high our quality bar is. You will also
be surprised. The question is whether you will be able to adapt and improve
or if you will give up and quit. If you didn&amp;#39;t share your code before
and have never dealt with negative feedback, you won&amp;#39;t feel comfortable
in our projects, where quality requirements are very high.&lt;/p&gt;

&lt;p&gt;The second possible cause is that
you work from nine till five, for food, &lt;strong&gt;without passion&lt;/strong&gt;. Actually,
nobody manifests it that way. Instead, I often hear something like
&amp;quot;my company doesn&amp;#39;t pay me for open source contribution and
at home I want to spend time with my family&amp;quot;. In modern software
development, most of the code we&amp;#39;re working with is open source &amp;mdash;
libraries, frameworks, tools, instruments, etc. Almost everything you&amp;#39;re using
in your commercial projects is open source. By paying your salary your
employer does already invest in open source products,
because you&amp;#39;re an active user of them. The problem is that &lt;em&gt;you&lt;/em&gt; are not
interested in becoming more active in that contribution.
I see this as a lack of passion and self-motivation.
Will you be an effective developer in our projects? Not at all, because our
entire management model relies on &lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;self-motivation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The last possible cause is that
you don&amp;#39;t know what to write and where to contribute, which means
&lt;strong&gt;lack of creativity&lt;/strong&gt;. As I mentioned above, almost everything we&amp;#39;re using
now is open source, and these tools are full of bugs and not-yet-implemented features.
At the same time, you don&amp;#39;t see any areas for improvement? You don&amp;#39;t
know what can be done better? You&amp;#39;re not able to at least find, report and fix
one bug in some open source product you&amp;#39;re using every day? This means
that you won&amp;#39;t be able to find areas of improvement in our projects either,
while we rely on your ability to
&lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;discover problems creatively&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thus, if your Github account is empty and your CV doesn&amp;#39;t position you
as &amp;quot;an active contributor to Linux kernel&amp;quot; (yeah, why not?), I immediately
lose interest. On the other hand, when I see a 100+ stars project in your
Github account, I get excited and ready to offer a higher rate.&lt;/p&gt;

&lt;h2 id=&quot;georgraphic-location&quot;&gt;Georgraphic Location&lt;/h2&gt;

&lt;p&gt;It is a common practice to pay higher rates to those who live in more
expensive countries. When I&amp;#39;m getting resumes from San Francisco programmers,
their rates are $70+ per hour. The same skills and experience cost
$15-20 in Karachi. The reason here is the cost of living &amp;mdash;
it is much higher in the US than in Pakistan.&lt;/p&gt;

&lt;p&gt;However, this reason doesn&amp;#39;t sound logical to me. If you&amp;#39;re driving a more
expensive car, we have to pay you a higher salary? The same with the
place to stay. You&amp;#39;ve chosen the country that
you live in. You&amp;#39;re using all the benefits of a well-developed country
and you&amp;#39;re paying for them. It&amp;#39;s your choice. You decided to spend more money
for the quality of your life &amp;mdash; what does it have to do with me?&lt;/p&gt;

&lt;p&gt;Want to pay $30 for a lunch? Become a better engineer. Until then,
buy a hot dog for a few bucks. Just saying that
&amp;quot;I&amp;#39;m already here and my lunch costs $30&amp;quot; is not an argument.&lt;/p&gt;

&lt;p&gt;Thus, the more expensive the place you live, the less money
stays in your pocket. For us this means that $100 will motivate a programmer
from Karachi much stronger than the same $100 will motivate the same person,
if she lives in San Francisco. Thus, we prefer to work with people
whose expenses are lower. Our money will simply work better.&lt;/p&gt;

&lt;h2 id=&quot;stackoverflow.com-reputation&quot;&gt;StackOverflow.com Reputation&lt;/h2&gt;

&lt;p&gt;We all know what StackOverflow has but very few people (suprisingly few!)
actively contributing to it. If your profile there is empty (or you don&amp;#39;t have
one) I realize that you 1) don&amp;#39;t have any questions to ask
and 2) you have nothing to answer.&lt;/p&gt;

&lt;p&gt;First, if you&amp;#39;re not asking anything there, you are not growing. Your education
process stopped some time ago, probably right after you got an office job.
Or maybe you&amp;#39;re too shy to ask? Or you can&amp;#39;t describe your questions
in an accurate and precise format? Or maybe all your questions already
have answers? In any case, it&amp;#39;s sad.&lt;/p&gt;

&lt;p&gt;Second, if you&amp;#39;re not answering, you simply have nothing to say. In most cases,
this means that you&amp;#39;re not solving complex and unique problems.
You&amp;#39;re simply wiring together well-known components and
collecting your paychecks.&lt;/p&gt;

&lt;p&gt;Very often I hear people saying that they solve most of their problems
by asking their colleagues sitting next to them in the office. They say
they simply don&amp;#39;t need StackOverflow (or similar resources, if they exist)
because their team is so great that any questions can be answered internally.
That&amp;#39;s good for the team and bad for you. Why? You don&amp;#39;t have a very important skill &amp;mdash;
finding an answer in a public Internet. In our projects we
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;discourage&lt;/a&gt;
any horizontal communications between programmers, and you won&amp;#39;t be
able to get any help from anyone. You will be on your own and you will fail,
because you are used to patronizing someone senior, in your office.&lt;/p&gt;

&lt;p&gt;StackOverflow is not just an indicator of how smart you are and how many
upvotes you got for the &lt;a href=&quot;http://stackoverflow.com/questions/234075/what-is-your-best-programmer-joke&quot;&gt;&amp;quot;best programming joke&amp;quot;&lt;/a&gt;.
It is proof that you can find answers
to your questions by communicating with people you don&amp;#39;t know.
It is a very important skill.&lt;/p&gt;

&lt;h2 id=&quot;years-of-experience&quot;&gt;Years of Experience&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/rate-years-of-experience.png' style='width:350px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;&amp;quot;I&amp;#39;ve written Java for 10 years!&amp;quot; &amp;mdash; so what? This number means only
one thing to me &amp;mdash; you managed to survive in some office for ten years.
Or maybe in a few offices. You managed to convince someone that he
has to pay you for ten years of sitting in his building. Does it mean
that you were writing something useful?
Does it mean that your code was perfect? It doesn&amp;#39;t mean any of that.&lt;/p&gt;

&lt;p&gt;Years of experience is a false indicator. It actually may play against you,
in combination with other indicators mentioned above. If your CV says that
you just started to program two years ago and your Github
and StackOverflow accounts are empty &amp;mdash; there is still a chance
you will improve. You&amp;#39;re just in the beginning of your career. However,
if your CV says that you&amp;#39;re a &amp;quot;10-year seasoned architect&amp;quot; with zero
open source contribution &amp;mdash; this means that you&amp;#39;re either lying about
that ten years or you&amp;#39;re absolutely useless as an architect.&lt;/p&gt;

&lt;p&gt;My point is that the &amp;quot;years of experience&amp;quot; argument should be used very carefully.
Play this card only if you have other merits. Otherwise, keep it to yourself.&lt;/p&gt;

&lt;h2 id=&quot;certifications&quot;&gt;Certifications&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/rate-certifications.png' style='width:350px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Oracle, Zend, Amazon, IBM, MySQL, etc. &amp;mdash;
I&amp;#39;m talking about these certifications. In order to get them you should
pass an exam. Not an easy one and not online. It is a real exam taken in
a certification center, where you&amp;#39;re sitting in front of a computer for a few
hours, without any books or Internet access, answering questions. Rather
humiliating activity for a respected software developer? Indeed. And there
is a high probability of failure, which is also rather embarassing.&lt;/p&gt;

&lt;p&gt;It is a very good sign, if you managed to go through this. If you&amp;#39;ve done
it a few times, even better. However, if you&amp;#39;ve earned no certifications
in your entire career, it is for one of the following reasons:&lt;/p&gt;

&lt;p&gt;First, you&amp;#39;re &lt;strong&gt;afraid to lose&lt;/strong&gt;. A serious certification may cost a few hundred
dollars (I paid over $700 for &lt;a href=&quot;https://en.wikipedia.org/wiki/Oracle_Certification_Program&quot;&gt;SCEA&lt;/a&gt;)
and you will not get a refund if you
fail. If you&amp;#39;re afraid to lose, you&amp;#39;re afraid to fight. This means
you&amp;#39;ll chicken out in a real-life situation, where a complex problem
will need to be solved.&lt;/p&gt;

&lt;p&gt;Second, you &lt;strong&gt;don&amp;#39;t invest&lt;/strong&gt; in your profile. This most probably means that you don&amp;#39;t
want to change companies and prefer to find a peaceful office, where you
can stay forever. I remember I once said to a friend of mine &amp;mdash;
&amp;quot;you will greatly improve your CV if you pass this certification&amp;quot;. He
answered with a smile &amp;mdash; &amp;quot;I hope I won&amp;#39;t need a CV any more, I like
this company&amp;quot;. This attitude is very beneficial for the company you&amp;#39;re
working for, but it definitely works against you.&lt;/p&gt;

&lt;p&gt;In my experience, the best team players are those who work for themselves.
Healthy individualism is a key success factor. If your primary objective
is to earn for yourself (money, reputation, skills, or knowledge) &amp;mdash;
you will be very effective in our projects. Certifications in your
profile is an indicator of that healthy individualism we&amp;#39;re looking for.&lt;/p&gt;

&lt;h2 id=&quot;skills-variety&quot;&gt;Skills Variety&lt;/h2&gt;

&lt;p&gt;The more technologies or programming languages you know, the less you cost.
I&amp;#39;m not saying that it&amp;#39;s not possible to be an expert in many things at the same time
&amp;mdash; that&amp;#39;s entirely possible. But let me give you a pragmatic reason why you shouldn&amp;#39;t &amp;mdash;
competition. There are thousands of &amp;quot;Java7 programmers&amp;quot; on the market &amp;mdash;
we can easily choose whoever we need. But there are not so many
&amp;quot;Hadoop programmers&amp;quot; or &amp;quot;XSLT designers&amp;quot;.&lt;/p&gt;

&lt;p&gt;If you focus on some specific area and become an expert there,
your chances of finding a job are lower, but the payout will be bigger.
We usually end up paying more to narrow-skilled specialists, mostly because
we have no choice. If a project we&amp;#39;re working on needs a Lucene expert,
we&amp;#39;ll find the right person and do our best to get him/her on
board. Doing our best means increasing the price, in most cases.&lt;/p&gt;

&lt;p&gt;Thus, when I hear that you&amp;#39;re &amp;quot;experienced in MySQL, PostgreSQL, Oracle and Sqlite&amp;quot;
I realize that you know very little about databases.&lt;/p&gt;

&lt;h2 id=&quot;talks-and-publications&quot;&gt;Talks and Publications&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/rate-talks-and-publications.png' style='width:350px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;I think it is obvious that having a blog (about programming, not about
your favorite cat) is a positive factor. Even better is to be an
occasional speaker at conferences or meetups. When it is a blog, I
pay attention to the amount of comments people leave for your articles.
If it is a conference, the most important criteria is how difficult it
was to get to the list of speakers.&lt;/p&gt;

&lt;p&gt;Both blog articles and conference presentations make you much more
valuable as a specialist. Mostly because these things demonstrate that some
people already reviewed your work and your talent. And it was not just
a single employer, but a group of other programmers and engineers.
This means that we also can rely on your opinions.&lt;/p&gt;

&lt;p&gt;Besides that, if you write and present regularly, you have a very important
skill/talent &amp;mdash; you can present your ideas in a &amp;quot;digestable&amp;quot; way.
In our projects we
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;discourage informal communications&lt;/a&gt;
and use ticketing systems instead. In those tickets you will have
to explain your ideas, questions or concerns so that everybody can
understand you. Without enough presentation skills, you won&amp;#39;t survive
in your projects.&lt;/p&gt;

&lt;p&gt;BTW, some software developers even file patents in their names &amp;mdash; why
can&amp;#39;t you do this?&lt;/p&gt;

&lt;h2 id=&quot;previous-employment&quot;&gt;Previous Employment&lt;/h2&gt;

&lt;p&gt;I usually don&amp;#39;t pay much attention to this section of your CV. Our management
model is &lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;so different&lt;/a&gt;
from anything you can see anywhere else that it doesn&amp;#39;t really matter
how many times you were fired before and how senior of a
position you have/had with your full-time employer. Even if your title
is &amp;quot;CTO of Twitter&amp;quot; &amp;mdash; it doesn&amp;#39;t mean anything to me.&lt;/p&gt;

&lt;p&gt;My experience tells me that the bigger the company and the higher the position
in it &amp;mdash; the further away you stay from the source code and from
real technical decisions. VPs and CTOs spend most of their time on
management meetings and internal politics.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m much more interested in &lt;strong&gt;what&lt;/strong&gt; you&amp;#39;ve done over the last few years than
in &lt;strong&gt;where&lt;/strong&gt; you&amp;#39;ve done it and what they called you while you were
doing it.&lt;/p&gt;

&lt;h2 id=&quot;education&quot;&gt;Education&lt;/h2&gt;

&lt;p&gt;BSc, MSc, PhD... do we care? Not really. Education is very similar to
the &amp;quot;previous employment&amp;quot; mentioned above. It doesn&amp;#39;t really matter
where exactly you&amp;#39;ve spent those five years after school. What matters
is what have you done during that time. If you have nothing to say
about your activity in the university than what will the name of it
tell me?&lt;/p&gt;

&lt;p&gt;Well, of course, if it is Stanford or MIT, this will make a difference. In this
case I can see that you managed to pass their graduation standards and managed to
find money to study there. This is a good sign and will definitely increase
your hourly rate. But if it is some mambo-jambo university from nowhere (like
the one I graduated from), keep this information to yourself.&lt;/p&gt;

&lt;h2 id=&quot;rates&quot;&gt;Rates&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;$100+&lt;/strong&gt; per hour we gladly pay to an expert who owns a few popular open source
products; has a StackOverflow score above 20K; has certifications,
articles, presentations, and maybe even patents.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$50+&lt;/strong&gt; per hour we pay to a professional programmer who has open
source projects on his own or is an active contributor; has a StackOverflow
score over 5K; is writing about software development;
possesses a few certifications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$30+&lt;/strong&gt; per hour we pay to a programmer who regularly contributes to
open source code; is present in StackOverflow; has some
certifications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$15&lt;/strong&gt; per hour we pay to everybody else.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t get me wrong and don&amp;#39;t take these numbers personally. The rate
you&amp;#39;re getting is a measurable metric of your professional level, not of you as a person.
Besides, the level is not static, it is changing every day, and it&amp;#39;s entirely in your hands.&lt;/p&gt;

&lt;p&gt;I wrote this article mostly in order to motivate you to grow.&lt;/p&gt;

&lt;p&gt;All these criteria are applicable to new members of our teams. Once you
start writing some code, we measure your performance and you may get
completely different numbers, see
&lt;a href=&quot;/2014/04/20/how-hourly-rate-is-calculated.html&quot;&gt;How Hourly Rate Is Calculated&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BTW, illustrations you see above are created by Andreea Mironiuc.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html</guid>
      <dc:date>2014-10-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Are You a Hacker or a Designer?</title>
      <link>http://www.yegor256.com/2014/10/26/hacker-vs-programmer-mentality.html</link>
      <description>&lt;p&gt;Twenty years ago, the best programmer was the one
capable of fitting an entire application into a 64Kb
&lt;code&gt;.COM&lt;/code&gt; file. Those who were able to get the most out of
that poor Intel 80386 were the icons of programming.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s because twenty years ago computers were expensive and programmers
were cheap. That was the time of the &amp;quot;hacker mentality&amp;quot;.
That time is over. That mentality is not appreciated any more,
because the market situation is completely opposite.&lt;/p&gt;

&lt;p&gt;Today, computers are cheap and programmers are expensive.
This is the era of the &amp;quot;designer mentality&amp;quot;, when the readability
of our code is much more important than its performance.&lt;/p&gt;

&lt;!--more--&gt;

&lt;iframe class=&quot;video&quot; width=&quot;640&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/qdqcayTLlLk&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;prices-vs-salaries&quot;&gt;Prices vs Salaries&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/trends.png' style='width:300px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Look at this graph. It is a comparison of two trends over the
last twenty years (1994-2014).
The first trend falls down and shows how much cheaper
&lt;a href=&quot;http://www.jcmit.com/memoryprice.htm&quot;&gt;computer memory&lt;/a&gt;
and &lt;a href=&quot;http://ns1758.ca/winch/winchest.html&quot;&gt;HDD storage&lt;/a&gt;
have become over the last twenty years.&lt;/p&gt;

&lt;p&gt;The second trend demonstrates how much software developers&amp;#39; salaries
escalated over the same period. More accurately, they tripled. I didn&amp;#39;t find
an official report about that, but I&amp;#39;m sure it&amp;#39;s no secret to anyone
that the salaries of programmers keep growing &amp;mdash; $200,000 per year for
a senior developer is not a dream any more... while twenty years
ago $60K was the best offer around. I found
&lt;a href=&quot;http://markcunningham91.blogspot.com/2013/05/a-history-of-offers-to-software.html&quot;&gt;this article&lt;/a&gt;
very interesting about this very subject.&lt;/p&gt;

&lt;p&gt;Basically, this means that in order to create a PHP website
in 1994 we had to spend 1000 times more on hardware and three times
less on programmers than we do now, in 2014. And we&amp;#39;re talking about the
same stack of technologies here. The same Linux box with an Apache HTTP Server
inside.&lt;/p&gt;

&lt;p&gt;The difference is that in 1994, if our application had performance problems because of
hardware limitations, we paid $35,000 per each additional gigabyte of RAM, while
in 2014 we pay $10.&lt;/p&gt;

&lt;p&gt;In 1994 it was much more efficient to hire more programmers and ask
them to &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_optimization&quot;&gt;optimize&lt;/a&gt;
the code or even rewrite it, instead of buying new hardware. In 2014 the
situation is exactly the opposite. It is now much cheaper to double the
size of the server (especially if the server is a virtual cloud one)
instead of paying salaries for optimizing the software.&lt;/p&gt;

&lt;p&gt;In 1994 the best engineers had that &amp;quot;hacker mentality&amp;quot;, while in 2014 the
&amp;quot;designer mentality&amp;quot; is much more appreciated.&lt;/p&gt;

&lt;h2 id=&quot;hacker-mentality&quot;&gt;Hacker Mentality&lt;/h2&gt;

&lt;p&gt;Someone with a hacker mentality would call this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot;&gt;Fibonacci&lt;/a&gt;
Java method an &amp;quot;elegant code&amp;quot; (would you?):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I would highlight these qualities of a good
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hacker_%28computer_security%29&quot;&gt;hacker&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uses all known (and unknown) features of a programming language&lt;/li&gt;
&lt;li&gt;discriminates others as hackers and newbies and writes for hackers&lt;/li&gt;
&lt;li&gt;gets bored and frustrated by rules and standards&lt;/li&gt;
&lt;li&gt;doesn&amp;#39;t write unit tests &amp;mdash; juniors will write them later&lt;/li&gt;
&lt;li&gt;enjoys fire-fighting &amp;mdash; that&amp;#39;s how his talent manifests&lt;/li&gt;
&lt;li&gt;prefers talks over docs, since they are much more fun&lt;/li&gt;
&lt;li&gt;hates to see his code being modified by someone else&lt;/li&gt;
&lt;li&gt;likes to dedicate himself to one project at a time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A hacker is a talented individual. He wants to express his
talent in the software he writes. He enjoys coding and does
it mostly for fun. I would say, he is married to his code and can&amp;#39;t imagine
its happy life after an eventual divorce. Code ownership is
what a hacker is about &amp;mdash; he understands himself as an &amp;quot;owner&amp;quot;
of the code.&lt;/p&gt;

&lt;p&gt;When I ask one of my hacker friends &amp;mdash; &amp;quot;How will someone understand
what this code does?&amp;quot; I almost always hear the same answer &amp;mdash;
&amp;quot;They will ask me!&amp;quot; (usually said very proudly, with a sincere smile).&lt;/p&gt;

&lt;h2 id=&quot;designer-mentality&quot;&gt;Designer Mentality&lt;/h2&gt;

&lt;p&gt;Someone with a designer mentality would refactor the code above
to make it easier to read. He would call this Java function an &amp;quot;elegant code&amp;quot;
(how about you?):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think these qualities can be attributed to a good designer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tends to use traditional programming techniques&lt;/li&gt;
&lt;li&gt;assumes everybody is a newbie and writes accordingly&lt;/li&gt;
&lt;li&gt;enjoys setting rules and following them&lt;/li&gt;
&lt;li&gt;prefers docs over talks and automation over docs&lt;/li&gt;
&lt;li&gt;spends most of his coding time on unit tests&lt;/li&gt;
&lt;li&gt;hates fire-fighting and working over time&lt;/li&gt;
&lt;li&gt;loves to see his code being modified and refactored&lt;/li&gt;
&lt;li&gt;works with a few projects at the same time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A designer is a talented team player. He contributes to the team
processes, standards, rules, education, and discipline as much as he
contributes to the source code. He always makes sure that once
he leaves the project his code and his ideas stay and work.&lt;/p&gt;

&lt;p&gt;The highest satisfaction for a good designer
is to see his code living its own life &amp;mdash; being modified, improved,
refactored and eventually retired. A designer sees himself as a parent
of the code &amp;mdash; once it is old enough to walk and talk, it has
to live its own life.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;If you consider yourself a hacker, I believe it&amp;#39;s time to change. The time of
hackers is fading out.&lt;/p&gt;

&lt;p&gt;In the near future we will probably even stop thinking in terms of &amp;quot;hardware&amp;quot; and will
run our applications in elastic computational platforms with unlimited
amounts of memory, CPU power and storage space. We will simply pay
for resource utilization and almost any performance issue will just add a few extra
dollars to our monthly bills. We won&amp;#39;t care about optimization any more.&lt;/p&gt;

&lt;p&gt;At the same time, good software engineers will become more and more expensive
and will charge $500+ per hour just to check out software and give
a diagnosis. Just like good lawyers or dentists.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why, while developing a new software product, those who pay for it will
care mostly about its maintainability. Project sponsors will
understand that the best solution they can get for their money is
the one that is the most readable, maintainable, and automated.&lt;/p&gt;

&lt;p&gt;Not the fastest.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/26/hacker-vs-programmer-mentality.html</guid>
      <dc:date>2014-10-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Paired Brackets</title>
      <link>http://www.yegor256.com/2014/10/23/paired-brackets-notation.html</link>
      <description>&lt;p&gt;Here is a notation rule I&amp;#39;m using in Java code:
&lt;strong&gt;a bracket should either start/end
a line or be paired on the same line&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The notation applies universally to any programming language (incl.
Java, Ruby, Python, C++, PHP, etc.) where brackets are used
for method/function calls.&lt;/p&gt;

&lt;p&gt;Here is how your code will look, if you follow
this &amp;quot;Paired Brackets&amp;quot; notation:&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ends the line&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// open/close at the same line&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;hello, %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;Lebowski&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// starts the line&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;!--more--&gt;

&lt;p&gt;Obviously, the line with a closing bracket should start at the same
indentation level as the line with its opening pair.&lt;/p&gt;

&lt;p&gt;This is how your IDE will render the code if you
follow this notation (IntelliJ IDEA):&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/intellij-idea-indentation.png' style='width:529px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;Sublime Text will also appreciate it:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/sublime-text-indentation.png' style='width:584px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;As you see, those light vertical lines at the left side
of the code help you to navigate, if you follow the notation.&lt;/p&gt;

&lt;p&gt;Those multiple closing brackets may look strange to you
at the beginning &amp;mdash; but give yourself some time and you will
get used to them :)&lt;/p&gt;

&lt;h2 id=&quot;fluent&quot;&gt;Fluent&lt;/h2&gt;

&lt;p&gt;This is how I would recommend formatting fluent method calls
(this is Java in &lt;a href=&quot;https://netbeans.org/&quot;&gt;NetBeans&lt;/a&gt;):&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/netbeans-fluent-indentation.png' style='width:637px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;h2 id=&quot;arrays&quot;&gt;Arrays&lt;/h2&gt;

&lt;p&gt;Here is how you format an array in &amp;quot;Paired Brackets&amp;quot; notation
(this is Ruby in &lt;a href=&quot;https://www.jetbrains.com/ruby/&quot;&gt;RubyMine&lt;/a&gt;):&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/rubymine-array-indentation.png' style='width:568px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;As you see, the same principle applies to square and curled brackets.&lt;/p&gt;

&lt;h2 id=&quot;json&quot;&gt;JSON&lt;/h2&gt;

&lt;p&gt;The same principle is applicable to JSON formatting. This is
a small JSON document in &lt;a href=&quot;http://panic.com/coda/&quot;&gt;Coda 2&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/coda-json-indentation.png' style='width:406px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;

&lt;p&gt;JavaScript should also follow the same principle. This is
how your &lt;code&gt;.js&lt;/code&gt; code would look in &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/atom-javascript-indentation.png' style='width:520px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;p&gt;Finally, here is Python in &lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot;&gt;PyCharm&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/pycharm-python-indentation.png' style='width:852px;' alt='figure'/&gt;&lt;/figure&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/23/paired-brackets-notation.html</guid>
      <dc:date>2014-10-23T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Incremental Billing</title>
      <link>http://www.yegor256.com/2014/10/21/incremental-billing.html</link>
      <description>&lt;p&gt;When you hire a software developer (individual or a team), there are
basically two types of contracts:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fixed-price_contract&quot;&gt;fixed price&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Time_and_materials&quot;&gt;time-and-material&lt;/a&gt;.
They are fundamentally different but the truth is that in either case &amp;mdash;
&lt;strong&gt;you lose&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.xdsd.org'&gt;&lt;img src='http://img.xdsd.org/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;In the eXtremely Distributed Software Development
(&lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt;) methodology everything is different, including
the way we invoice our clients. Let&amp;#39;s see what happens in traditional
contracts and what changes in XDSD, which we practice
in &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The difference between fixed-cost and T&amp;amp;M is in who takes the risk of spending
money and getting nothing in return. This risk is huge in the software
development industry, especially in outsourcing.
&lt;a href=&quot;http://www.projectsmart.co.uk/docs/chaos-report.pdf&quot;&gt;Over 80%&lt;/a&gt; of all
software projects fail to achieve their objectives and
&lt;a href=&quot;http://thenextweb.com/insider/2014/09/25/top-20-reasons-startups-fail-report/&quot;&gt;about 30%&lt;/a&gt;
of startups fail by running out of cash.
However, very few programmers (if any)
fail to get their monthly salaries on time.&lt;/p&gt;

&lt;p&gt;What does this tell us?&lt;/p&gt;

&lt;p&gt;I guess it means that in all failures you &amp;mdash; the client &amp;mdash; will be the loser.&lt;/p&gt;

&lt;h2 id=&quot;time-and-material&quot;&gt;Time and Material&lt;/h2&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/time-and-material-contract.svg' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;In T&amp;amp;M you will simply pay and pray. If your programmers
appear to be honest workaholics you may get lucky and get something done.
As you can see from the numbers above, however, this is rarely the case. Don&amp;#39;t fool yourself;
there won&amp;#39;t be any workaholics in your project. Even if you adopt micro-management
and corporal punishment, your overall costs will be much higher than expected
and the quality will suffer.&lt;/p&gt;

&lt;p&gt;This is what a monthly T&amp;amp;M invoice will look like. You will pay for
the time spent by programmers pretending to be working on your project.
Well, as I said above, some of them will ocassionally do something useful,
but overall statistics tell us that most of that time will be wasted.&lt;/p&gt;

&lt;p&gt;No matter how good or bad the code written during that month &amp;mdash; you still have
to pay the bill. How many more invoices you will get until the
product is done? Nobody knows.&lt;/p&gt;

&lt;p&gt;In the end &amp;mdash; you lose.&lt;/p&gt;

&lt;h2 id=&quot;fixed-price&quot;&gt;Fixed Price&lt;/h2&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/fixed-price-contract.svg' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;In Fixed Price you will feel secure at the beginning &amp;mdash; &amp;quot;the statement
of work specifies everything and the price is fixed, how can I lose?&amp;quot;
According to the statistics above, however, programmers are much smarter than their
clients. You will lose in quality. Yes, you will get something for that
fixed price, but it will be a throw-away software. And when you decide to
modify it, new costs will bubble up. In the end, the whole project will be ruined
and your money will simply be turned into programmers&amp;#39; salaries. This model is even more
risky than T&amp;amp;M, where you at least have a chance.&lt;/p&gt;

&lt;p&gt;Once in a while you will receive an invoice with a list of milestones reached.
Every milestone will contain a certain set of features implemented in
the product. Keep in mind that the primary motivation of your programmers will
be to do less and charge more. Every time you ask for improvements
or corrections, there will be a fight about budget. You will either give
up and lose a lot of money or your team will significantly jeopardize
quality, in order to stay profitable.&lt;/p&gt;

&lt;p&gt;In either case &amp;mdash; you lose.&lt;/p&gt;

&lt;h2 id=&quot;incremental-billing&quot;&gt;Incremental Billing&lt;/h2&gt;

&lt;p&gt;So, what is the solution? Is it possible to have win-win
contracts with programmers?&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/xdsd-invoice-example.svg' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;Yes, it is. We call it &amp;quot;Incremental Billing&amp;quot;.&lt;/p&gt;

&lt;p&gt;Remember, in &lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt; we work with a stream of micro-tasks, usually completed
in less than an hour. Each completed task produces a new increment (aka a &amp;quot;release&amp;quot; or &amp;quot;version&amp;quot;) of software.
An increment could be a bug fix, a bug report, a new feature or
a micro-step towards any of these.&lt;/p&gt;

&lt;p&gt;By the end of a week you get a bill that lists every single increment
delivered during the week, the amount of time spent on its development
and its total cost. Every increment costs you 30-60 minutes of a programmer&amp;#39;s
time (plus our fees).&lt;/p&gt;

&lt;p&gt;Besides that, by the end of the week, you get an updated version
of a project plan, with a re-estimated budget. Thus, you see what was
done so far and how much needs to be done, according to our estimate.&lt;/p&gt;

&lt;p&gt;How does this help you not lose/waste money? Here&amp;#39;s how:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you fully control your budget&lt;/li&gt;
&lt;li&gt;you pay only for the work completed&lt;/li&gt;
&lt;li&gt;you track the progress with few-minutes-granularity&lt;/li&gt;
&lt;li&gt;you don&amp;#39;t pay for meetings, chats, lunches or coffee breaks&lt;/li&gt;
&lt;li&gt;programmers stay very motivated, since they are paid by result&lt;/li&gt;
&lt;li&gt;there is no long-term commitment, and you can stop at any time&lt;/li&gt;
&lt;li&gt;every increment passes all quality checks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, &lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD methodology&lt;/a&gt; not only
improves the way we develop software but also fixes the flaws in
the way you pay for it. Since it is a win-win model, it is beneficial
for both programmers and for you &amp;mdash; the paying project sponsor.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/21/incremental-billing.html</guid>
      <dc:date>2014-10-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How We Write a Product Vision</title>
      <link>http://www.yegor256.com/2014/10/20/how-we-write-product-vision.html</link>
      <description>&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-thinking.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Every software project we work with is started from a Product Vision document. We
create it during our
&lt;a href=&quot;/2014/10/06/software-project-lifecycle.html&quot;&gt;Thinking&lt;/a&gt;
phase. Even though the document is as short as two pages of English text,
its development is the most painstaking task in the whole project.&lt;/p&gt;

&lt;p&gt;There are a few tricks and recommendations which I&amp;#39;d like to share.&lt;/p&gt;

&lt;p&gt;We usually design a Product Vision in four sections: product statement,
stakeholders and needs, features, and quality requirements.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;product-statement&quot;&gt;Product Statement&lt;/h2&gt;

&lt;p&gt;Product Statement is a one-paragraph declaration of intent, explaining
to an absolute stranger what this product is about and what it is for.
It is very similar to an &lt;a href=&quot;https://en.wikipedia.org/wiki/Elevator_pitch&quot;&gt;elevator pitch&lt;/a&gt;.
The Statement must answer these questions, preferrably in this specific order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Who is the customer?&lt;/li&gt;
&lt;li&gt;What does she want?&lt;/li&gt;
&lt;li&gt;What is the market offering now?&lt;/li&gt;
&lt;li&gt;What is wrong with existing offers?&lt;/li&gt;
&lt;li&gt;How will our product fix this?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should answer all these questions in less than 60 words altogether. If
you need more words, something is wrong with your understanding of the
product under development. If you can answer them in 20 words, your
product will conquer the world.&lt;/p&gt;

&lt;p&gt;By the way, don&amp;#39;t confuse a Product Statement with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Mission_statement&quot;&gt;Mission&lt;/a&gt;,
which is a much broader declaration of an overall goal of your business. You
may have a hundred products but only a single mission. For example,
Disney &lt;a href=&quot;http://www.lifehack.org/articles/work/20-sample-vision-statement-for-the-new-startup.html&quot;&gt;says&lt;/a&gt;
that its mission is: &amp;quot;to make people happy&amp;quot;. They&amp;#39;ve got
hundreds of products that help them accomplish this mission. And each product
has its own Product Statement.&lt;/p&gt;

&lt;p&gt;I find these articles helpful:
&lt;a href=&quot;https://www.scrumalliance.org/community/articles/2009/january/the-product-vision&quot;&gt;The Product Vision&lt;/a&gt;,
&lt;a href=&quot;https://platinumedge.com/blog/agile-artifacts-product-vision-statement&quot;&gt;Agile Artifacts: The Product Vision Statement&lt;/a&gt;,
&lt;a href=&quot;http://www.jamesshore.com/Agile-Book/vision.html&quot;&gt;The Art of Agile Development: Vision&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;stakeholders-and-needs&quot;&gt;Stakeholders and Needs&lt;/h2&gt;

&lt;p&gt;This section must list everybody whose life
will be affected by the product (positively or negatively). Your list of stakeholders
may include: sponsors, developers, users, competitors, government,
banks, web hosting providers, Apple Store, hackers, etc.&lt;/p&gt;

&lt;p&gt;It is very important to list both positive and negative stakeholders. If your
product is going to automate some routine manual operations,
don&amp;#39;t forget that someone will be made redundant because of it. No matter
how &amp;quot;good&amp;quot; your product is, there is always an &amp;quot;evil&amp;quot; side. The
invention of the iPhone made millions of people happy, but also caused a lot
of trouble for Nokia and Blackberry. An eventual invention of a cancer
vaccine will make millions of people healthier, but will also make thousands
of oncologists jobless. My point is that any project has both positive and negative
stakeholders.&lt;/p&gt;

&lt;p&gt;Each stakeholder must have a list of needs. They have to be simple
and straight forward, like &amp;quot;earn money&amp;quot;, &amp;quot;increase profit&amp;quot;, &amp;quot;share photos&amp;quot;,
or &amp;quot;host a website&amp;quot;.&lt;/p&gt;

&lt;p&gt;I would recommend defining one or two needs for each stakeholder. If there
are more than three, think again &amp;mdash; do you really understand what your
stakeholders need?&lt;/p&gt;

&lt;p&gt;Your project will be considered successful if you satisfy all the needs
of all your positive stakeholders and neutralize negative ones.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;http://www.sebokwiki.org/wiki/Stakeholder_Needs_and_Requirements&quot;&gt;Stakeholder Needs and Requirements&lt;/a&gt;
article from SEBOK will be helpful.&lt;/p&gt;

&lt;h2 id=&quot;actors-and-features&quot;&gt;Actors and Features&lt;/h2&gt;

&lt;p&gt;In this section we list &lt;a href=&quot;https://en.wikipedia.org/wiki/Actor_%28UML%29&quot;&gt;actors&lt;/a&gt;
(entities communicating with the product) and the key functionalities
they use. This is the most abstract definition of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_requirement&quot;&gt;functional requirements&lt;/a&gt;
of the product. It doesn&amp;#39;t need to be detailed. Instead, it has to
be very high-level and abstract. For example, this is how our
interaction with a well-known product may be described in two lines:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;User can post tweets, read tweets of his friends,
  follow new friends and re-tweet their tweets.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Is it clear for a stranger what we&amp;#39;re talking about here? Absolutely not
&amp;mdash; what is a &amp;quot;tweet&amp;quot;, what does it mean to &amp;quot;follow&amp;quot; and what is a &amp;quot;re-tweet&amp;quot;?
These questions have no answers in the Product Vision document,
but it&amp;#39;s clear that a user will have four main features available. All other
features will be similar to those.&lt;/p&gt;

&lt;p&gt;Twitter is a multi-billion dollar business with a multi-million dollar
product. However, we managed to explain its key features in just two
lines of text. You should do the same with your product. If you can&amp;#39;t fit
all its features into just two-three lines, reconsider your understanding
of the product you&amp;#39;re going to develop. Also, read about
&lt;a href=&quot;http://hbswk.hbs.edu/archive/5325.html&quot;&gt;&amp;quot;feature bloat dilemma&amp;quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each actor must have at least three and at most six features. If
there are more, you should group them somehow. If there are less, break
them into smaller and more detailed features.&lt;/p&gt;

&lt;h2 id=&quot;quality-requirements&quot;&gt;Quality Requirements&lt;/h2&gt;

&lt;p&gt;This section lists all important non-functional
requirements. Any product may have hundreds of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Non-functional_requirement&quot;&gt;quality requirements&lt;/a&gt;,
as well as hundreds of features. However, a Product Vision document
must be focused on the most important ones. Consider some examples:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Any web page must open in less than 300ms.
Total cost of ownership must be less than $5000/mo.
Mobile app must be tailored for 10+ popular screen sizes.
Mean time to recover must be less than 2 hours.
DB must be scalable up to 5Tb without cost increases.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is also very important to keep requirements measurable (like each of these examples).
Every line in this section
is a message to product developers. They will read this document in
order to understand what is most important to the sponsor of the
project. For example, these quality requirements are useless: &amp;quot;user interface
must be attractive&amp;quot;, &amp;quot;web site must be fast&amp;quot; or &amp;quot;the system must be stable&amp;quot;.
They are not measurable or
testable. All they do is distract developers. If you can&amp;#39;t make
a strict and measurable statement about your quality objectives, don&amp;#39;t write
anything. It&amp;#39;s better to say nothing than set false or ambiguous goals here.&lt;/p&gt;

&lt;p&gt;Try to keep this section short. There should be six quality requirements, at most.&lt;/p&gt;

&lt;h2 id=&quot;remove-noise&quot;&gt;Remove Noise&lt;/h2&gt;

&lt;p&gt;Every section must be no more than twenty lines in length. Even if you&amp;#39;re
developing a Google killer with a $50 million dollar budget, your Vision
document must be as short as two pages.&lt;/p&gt;

&lt;p&gt;For most of my clients this is a very complex and brain damaging task. They
usually come to us with a 50-page document explaining their business
ideas with all the important details. From this document, we should only extract
information that really makes a difference.&lt;/p&gt;

&lt;p&gt;The Product Vision document must keep its reader on the highest level
of abstraction. The document must take less than a minute to read,
from start to finish.&lt;/p&gt;

&lt;p&gt;If you can&amp;#39;t keep it short &amp;mdash; you don&amp;#39;t understand your product well enough.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Here is an example of a very simple Product Vision
for a Facebook killer:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Statement
  Facebook doesn&amp;#39;t allow users to purchase &amp;quot;likes&amp;quot;,
  our social network will have this.

Stakeholders and Needs
  Sponsor: to raise investments.
  Developer: to earn money by programming.
  Users: to share photos and purchase popularity.
  Bank: to make commission on every purchase.
  Government: to protect society against abusive content.
  Competitors: to wipe us off the market.

Actors and Features
  User can create account, upload photos, share photos,
    send personal messages, like other photos, purchase likes.
  Admin can ban user accounts, view summary reports, authorize
    credit card transactions, configure system parameters,
    monitor server resource usage.
  Bank can process credit card transactions.

Quality Requirements
  Any page must open in less than 300ms.
  User interface must be attractive and simple.
  Availability must be over 99.999%.
  Test coverage must be over 80%.
  Development pipeline must be fully automated.
  Interfaces must include web site and iOS/Android app.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;diplomacy&quot;&gt;Diplomacy&lt;/h2&gt;

&lt;p&gt;We follow all these recommendations in our projects,
in &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;. You can use
them in your projects as well, but keep in mind that the process
of defining a Product Vision could be very painful. You may sometimes
offend a client by over-simplifying their &amp;quot;great&amp;quot; business idea. &amp;#39;Really?
I&amp;#39;m ready to pay $250,000 for something awesome and you&amp;#39;re telling
me that you&amp;#39;ve only got ten lines for it? Huh?&amp;#39;&lt;/p&gt;

&lt;p&gt;To work around this situation, split the client&amp;#39;s documentation into two parts.
The first part will fit into the Product Vision document; the second one
will be called &amp;quot;supplementary documentation&amp;quot; and will contain all that
valuable information you&amp;#39;ve got from the client. You may use
that documentation later, during the course of product development.&lt;/p&gt;

&lt;p&gt;But don&amp;#39;t cut corners. Don&amp;#39;t allow your client (or anyone else) to force
you to bloat the Product Vision. The document has to be very short and explicit.&lt;/p&gt;

&lt;p&gt;No lyrics, only statements.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/20/how-we-write-product-vision.html</guid>
      <dc:date>2014-10-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>What Does a Software Architect Do?</title>
      <link>http://www.yegor256.com/2014/10/12/who-is-software-architect.html</link>
      <description>&lt;p&gt;Do you have a software architect in your project? Do you need one?&lt;/p&gt;

&lt;p&gt;Well, most agile teams do not define such a role explicitly and
work in a democratic mode. Every important technical decision
is discussed with the entire team, and the most voted for solution wins.
When such a team eventually decides to put a &amp;quot;software architect&amp;quot; badge
on someone&amp;#39;s t-shirt, the most reputable programmer gets it.&lt;/p&gt;

&lt;p&gt;The badge rarely changes his responsibilities, though. After all,
the team stays the same and enjoys having technical discussions together,
involving everyone. In the end, a software architect is more of
a status than a role with explicitly defined responsibilities. It is
a sign of respect, paid by other team players to the oldest and the
most authoritative one among them. Right?&lt;/p&gt;

&lt;p&gt;Absolutely wrong!&lt;/p&gt;

&lt;!--more--&gt;

&lt;iframe class=&quot;video&quot; width=&quot;640&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/9IEN9z36V98&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Obviously, an architect is usually someone who
has the most knowledge, skills, experience, and authority. Of course,
an architect usually knows more than others and is able to communicate
his knowledge with diplomacy and pedagogy when required. An architect is usually
one of the smartest guys on the team.&lt;/p&gt;

&lt;p&gt;This is not, however, what makes him/her an architect.&lt;/p&gt;

&lt;p&gt;And this is not what the team needs. My definition of a software architect
is this:&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;architect&lt;/strong&gt; is the one who takes the &lt;strong&gt;blame&lt;/strong&gt; for the &lt;strong&gt;quality&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can replace &amp;quot;blame&amp;quot; with accountability or responsibility. Although,
I prefer to use &amp;quot;blame&amp;quot;, because it much better emphasizes the fact that
every quality issue in the product under development is a personal
fault of the architect. Of course, together with the blame he also
takes all the credit from happy customers, when the quality is good.&lt;/p&gt;

&lt;p&gt;This is what the team needs &amp;mdash; someone personally responsible
for the quality of the software being developed.&lt;/p&gt;

&lt;p&gt;How this guy will delegate this responsibility to others is his job. Whether
he will use his knowledge and skills, or quality control tools, or
unit testing frameworks, or authority, or coaching, or corporal punishment
&amp;mdash; it&amp;#39;s his business.
A project manager delegates quality control to the software architect,
and it is up to the software architect how to delegate it further.&lt;/p&gt;

&lt;p&gt;The role of a software architect is crucial for every project,
even if there are just two coders working at the same desk. One of
them has to be the architect.&lt;/p&gt;

&lt;p&gt;An ideal architect has all the merits mentioned above. He listens
to everybody and takes their opinions into account. He is a good coach and a teacher,
with a lot of patience. He is an effective communicator
and negotiator. He is a diplomat. And he is an expert in the technical domain.&lt;/p&gt;

&lt;p&gt;But, even if he doesn&amp;#39;t have all these merits, &lt;strong&gt;his decision is always final&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And this is the job of the project manager, to make sure that every
technical decision the architect makes is not doubted by anyone. This is
what delegation is all about &amp;mdash; responsibility should always come with power.&lt;/p&gt;

&lt;p&gt;As a project manager, you should regularly evaluate the results
of your architect. Remember, the quality of the product your team
is working on is his personal (!) reponsibility.
Any problems you see are his problems.
Don&amp;#39;t be afraid to blame him and punish him. But, always remember that
in order to make your punishments productive you should give your
architect full power in his actions. Let me reiterate: his decisions should be final.&lt;/p&gt;

&lt;p&gt;If you, as a project manager, are not happy with the quality of the product
and the architect doesn&amp;#39;t improve the situation, replace him. Downgrade him
to a programmer and promote one of the programmers to an architect.
But always remember that there can only be one architect in the team,
and that his decisions are final.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s the only way of having a chance of building a perfect product.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/12/who-is-software-architect.html</guid>
      <dc:date>2014-10-12T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Continuous Integration is Dead</title>
      <link>http://www.yegor256.com/2014/10/08/continuous-integration-is-dead.html</link>
      <description>&lt;p&gt;A few days ago, my article
&lt;a href=&quot;http://devops.com/blogs/continuous-integration-doesnt-work/&quot;&gt;&amp;quot;Why Continuous Integration Doesn’t Work&amp;quot;&lt;/a&gt;
was published at &lt;a href=&quot;http://www.devops.com&quot;&gt;DevOps.com&lt;/a&gt;. Almost the same
day I received a few strongly negative critiques on Twitter.&lt;/p&gt;

&lt;p&gt;Here is my response to the un-asked question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why the hell shouldn&amp;#39;t continuous integration work, being such a brilliant and popular idea?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even though I have some experience in this area, I won&amp;#39;t use it as an argument.
I&amp;#39;ll try to rely only on logic instead.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;BTW, my experience includes five years of using
Apache Continuum, Hudson, CruiseControl, and Jenkins in over 50 open
source and commercial projects. Besides that,
a few years ago I created a hosted continuous integration service called
&lt;a href=&quot;http://www.fazend.com&quot;&gt;fazend.com&lt;/a&gt;,
renamed to &lt;a href=&quot;http://www.rultor.com&quot;&gt;rultor.com&lt;/a&gt; in 2013.
Currently, I&amp;#39;m also an active user of &lt;a href=&quot;http://www.travis-ci.org&quot;&gt;Travis&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-continuous-integration-should-work&quot;&gt;How Continuous Integration Should Work&lt;/h2&gt;

&lt;p&gt;The idea is simple and obvious. Every time you make a new commit
to the &lt;code&gt;master&lt;/code&gt; branch (or &lt;code&gt;/trunk&lt;/code&gt; in Subversion), a continuous integration
server (or service) attempts to build the entire product. &amp;quot;Build&amp;quot; means
compile, unit test, integration test, quality analysis, etc.&lt;/p&gt;

&lt;p&gt;The result is either &amp;quot;success&amp;quot; or &amp;quot;failure&amp;quot;. If it is a success, we
say that &amp;quot;the build is clean&amp;quot;. If it is a failure, we say that &amp;quot;the build is broken&amp;quot;.
The build usually gets broken because someone breaks it by
commiting new code that turns previously passing unit tests
into failing ones.&lt;/p&gt;

&lt;p&gt;This is the technical side of the problem. It always works. Well,
it may have its problems, like hard-coded dependencies, lack of isolation between
environments or parallel build collisions, but this article is not about those.
If the application is well written and its unit tests are stable,
continuous integration is easy. Technically.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s see the organizational side.&lt;/p&gt;

&lt;p&gt;Continuous integration is not only a server that builds, but a
management/organizational process that should &amp;quot;work&amp;quot;. Being a process
that works means exactly what Jez Humble said in
&lt;a href=&quot;http://www.amazon.com/gp/product/0321601912/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321601912&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=GKWBKGZUJGJLFMHE&quot;&gt;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/a&gt;,
on page 55:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Crucially, if the build fails, the development team
stops whatever they are doing and fixes the problem immediately&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what doesn&amp;#39;t work and can&amp;#39;t work.&lt;/p&gt;

&lt;h2 id=&quot;who-needs-this?&quot;&gt;Who Needs This?&lt;/h2&gt;

&lt;p&gt;As we see, continuous integration is about setting the entire
development team on pause and fixing the broken build. Let me
reiterate. Once the build is broken, everybody should focus
on fixing it and making a commit that returns the build to
the stable state.&lt;/p&gt;

&lt;p&gt;Now, my question is &amp;mdash; who, in an actively working team, may need this?&lt;/p&gt;

&lt;p&gt;A product owner, who is interested in launching new features to the market
as soon as possible? Or maybe a project manager, who is responsible for
the deadlines? Or maybe programmers, who hate to fix someone else&amp;#39;s bugs,
especially under pressure.&lt;/p&gt;

&lt;p&gt;Who likes this continuous integration and who needs it?&lt;/p&gt;

&lt;p&gt;Nobody.&lt;/p&gt;

&lt;h2 id=&quot;what-happens-in-reality?&quot;&gt;What Happens In Reality?&lt;/h2&gt;

&lt;p&gt;I can tell you. I&amp;#39;ve seen it multiple times. The scenario is always
the same. We just start to ignore that continuous integration
build status. Either the build is clean or it is broken, and we continue
to do what we were doing before.&lt;/p&gt;

&lt;p&gt;We don&amp;#39;t stop and fix it, as Jez Humble recommends.&lt;/p&gt;

&lt;p&gt;Instead, we ignore the information that&amp;#39;s
coming from the continuous integration server.&lt;/p&gt;

&lt;p&gt;Eventually, maybe tomorrow or on Monday, we&amp;#39;ll try to find some spare time
and will try to fix the build. Only because we don&amp;#39;t like that red button
on the dashboard and want to turn it into a green one.&lt;/p&gt;

&lt;h2 id=&quot;what-about-discipline?&quot;&gt;What About Discipline?&lt;/h2&gt;

&lt;p&gt;Yes, there is another side of this coin. We can try to enforce
discipline in the team. We can make it a strict rule, that our
build is always clean and whoever breaks it gets some sort of
a punishment.&lt;/p&gt;

&lt;p&gt;Try doing this and you will get a &lt;strong&gt;fear driven development&lt;/strong&gt;. Programmers
will be afraid of committing anything to the repository because
they will know that if they cause a build failure they will have to
&lt;a href=&quot;http://programmers.stackexchange.com/questions/79041&quot;&gt;apologize&lt;/a&gt;, at least.&lt;/p&gt;

&lt;p&gt;A strict discipline (which I&amp;#39;m a big fan of) in this case only
makes the situation worse. The entire development process slows
down and programmers keep their code to themselves for as long as
possible, to avoid possibly broken builds. When it&amp;#39;s time to commit,
their changes are so massive that merging becomes very difficult and
sometimes impossible.&lt;/p&gt;

&lt;p&gt;As a result you get a lot of throw-away code, written by someone
but never committed to &lt;code&gt;master&lt;/code&gt;, because of that fear factor.&lt;/p&gt;

&lt;h2 id=&quot;ok,-what-is-the-solution?&quot;&gt;OK, What Is The Solution?&lt;/h2&gt;

&lt;p&gt;I wrote about it before; it is called
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;&amp;quot;read-only master branch&amp;quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is simple &amp;mdash; prohibit anyone from merging anything
into &lt;code&gt;master&lt;/code&gt; and create a script that anyone can call. The script will
merge, test, and commit. The script will not make any exceptions.
If any branch breaks at even one unit test, the entire branch will be rejected.&lt;/p&gt;

&lt;p&gt;In other words: raise the red flag &lt;strong&gt;before&lt;/strong&gt; the code
gets into &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This solves all problems.&lt;/p&gt;

&lt;p&gt;First, the build is always clean. We simply can&amp;#39;t break it because
nobody can commit unless his code keeps the build clean.&lt;/p&gt;

&lt;p&gt;Second, there is no fear of breaking anything. Simply because you technically can&amp;#39;t
do it. All you can do is get a negative response from a merging script. Then
you fix your errors and tell the script to try again. Nobody sees these
attempts, and you don&amp;#39;t need to apologize. Fear factor is gone.&lt;/p&gt;

&lt;p&gt;BTW, try to use &lt;a href=&quot;http://www.rultor.com&quot;&gt;rultor.com&lt;/a&gt; to enforce this
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;&amp;quot;read-only master branch&amp;quot;&lt;/a&gt;
principle in your project.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/08/continuous-integration-is-dead.html</guid>
      <dc:date>2014-10-08T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Stop Chatting, Start Coding</title>
      <link>http://www.yegor256.com/2014/10/07/stop-chatting-start-coding.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.xdsd.org'&gt;&lt;img src='http://img.xdsd.org/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;The first principle of eXtremely Distributed Software Development
(&lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt;) states that
&amp;quot;everyone gets paid for verified deliverables&amp;quot;. This literally
means that, in order to get paid, every programmer
has to write the code, commit it to the repository,
pass a code review and make sure the code is
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;merged into the destination branch&lt;/a&gt;.
Only then, is his result appreciated and paid for.&lt;/p&gt;

&lt;p&gt;For most of my clients this already sounds extreme.
They are used to a traditional scheme of paying per hour
or per month. They immediately realize the benefits of XDSD, though,
because for them this approach means that project
funds are not wasted on activities that don&amp;#39;t produce results.&lt;/p&gt;

&lt;p&gt;But that&amp;#39;s not all.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/barton-fink.png' style='width:600px;' alt='Barton Fink (1991) by Joel Coen'/&gt;&lt;figcaption&gt;Barton Fink (1991) by Joel Coen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This principle also means that nobody is paid for anything except
tasks explicitly assigned to him/her. Thus, when a programmer has a question
about current design, specification, configuration, etc. &amp;mdash;
nobody will be interested in answering it. Why not? Because there is no payment attached to this.
Answering questions in Skype or Hipchat or by email is something that
is not appreciated in XDSD in any way. The project simply doesn&amp;#39;t pay for
this activity. That&amp;#39;s why none of our programmers do this.&lt;/p&gt;

&lt;p&gt;We don&amp;#39;t use &lt;strong&gt;any&lt;/strong&gt; (I mean it!) informal communication channels in
XDSD projects. We don&amp;#39;t do meetings or conference calls. We never discuss
any technical issues on Skype or by phone.&lt;/p&gt;

&lt;p&gt;So, how do we resolve problems and share information?&lt;/p&gt;

&lt;p&gt;We use task tracking systems for that. When a developer has a question,
he submits it as a new &amp;quot;ticket&amp;quot;. The project manager then picks it up
and assigns it to another developer, who is able to answer it. Then, the
answer goes back through the tracking system or directly into
the source code.&lt;/p&gt;

&lt;p&gt;The &amp;quot;question ticket&amp;quot; gets closed when its author is satisfied with the
answer. When the ticket is closed, those who answered it get paid.&lt;/p&gt;

&lt;p&gt;Using this model, we significantly improve project communications, by making
them clean and transparent. We also save a lot of project funds, since
every hour spent by a team member is traceable to the line of code he produced.&lt;/p&gt;

&lt;p&gt;You can see how this happens in action, for example, in this ticket
(the project is open source; that&amp;#39;s why all communications are open):
&lt;a href=&quot;https://github.com/jcabi/jcabi-github/issues/731&quot;&gt;jcabi/jcabi-github#731&lt;/a&gt;.
One Java developer is having a problem with his Git repository. Apparently
he did something wrong and couldn&amp;#39;t solve the problem by himself. He asked
for help by submitting a new bug to the project. He was paid for the
bug report. Then, another team member was assigned to help him. He did,
through a number of suggestions and instructions. In the end, the
problem was solved, and he was also paid for the solution. In total, the
project spent 45 minutes, and the problem was solved.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 07 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/07/stop-chatting-start-coding.html</guid>
      <dc:date>2014-10-07T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Project Lifecycle in Teamed.io</title>
      <link>http://www.yegor256.com/2014/10/06/software-project-lifecycle.html</link>
      <description>&lt;p&gt;In addition to being a hands-on programmer, I&amp;#39;m also co-founder and CTO of
&lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, a custom software development company.
I play the role of a technical and management leader in all projects
we work with.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.teamed.io'&gt;&lt;img src='http://img.teamed.io/logo.svg' style='width:160px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I wrote this article for those who&amp;#39;re interested in hiring me and/or
my team. This article will demonstrate what happens from day one until
the end of the project, when you choose to &lt;a href=&quot;mailto:hire@teamed.io&quot;&gt;work with us&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will see below that our methods of
software development &lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;seriously differ&lt;/a&gt;
from what many other teams are using. I personally pay a lot of attention to quality
of code and quality of the internal processes that connect our team.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;There are four phases in every project I work with in
&lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Thinking&lt;/strong&gt;.
Here we&amp;#39;re trying to understand: What is the problem that the product
is going to solve? We&amp;#39;re also investigating the product&amp;#39;s boundaries &amp;mdash;
who will work with the software (actors) and how will they work with it (user stories).
Deliverables: specification.
Duration: from 2 days up to 3 weeks.
Participants: product owner, analyst(s), architect, project manager.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Building&lt;/strong&gt;.
Here the software architect is creating a &lt;a href=&quot;https://en.wikipedia.org/wiki/Proof_of_concept&quot;&gt;proof-of-concept&lt;/a&gt;
(aka an &lt;a href=&quot;https://en.wikipedia.org/wiki/Minimum_viable_product&quot;&gt;MVP&lt;/a&gt; or prototype or a skeleton).
It is a one-man job that is done almost without any interaction
with anyone else. The architect builds the product according to the
specification in a very limited time frame. The result will have
multiple bugs and open ends, but it will implement the main user story.
The architect also configures continuous integration and delivery pipelines.
Deliverables: working software.
Duration: 2-5 days.
Participants: architect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fixing&lt;/strong&gt;.
At this phase we are adding all the meat to the skeleton. This phase
takes most of the time and budget and involves many participants.
In some projects we invite up to 50 people to work, at the same time.
Since we treat all inconsistencies as bugs, this phase is mostly about
finding, reporting and fixing bugs, in order to stabilize the product
and get it ready for market launch. We increment and
release the software multiple times a day, preferably to its user
champions.
Deliverables: bug fixes via pull requests.
Duration: from weeks to months.
Participants: programmer(s), designer(s), tester(s), code reviewer(s), architect, project manager.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Using&lt;/strong&gt;.
At this final phase we are launching the product to its end-users,
and collecting their feedback (both positive and negative). Everything
they are reporting back to us is being registered as a bug. Then,
we categorize the bugs and fix them. This phase may take years, but
it never involves active implementation of new features.
Deliverables: bug fixes via pull requests.
Duration: months.
Participants: programmer(s), code reviewer(s), project manager.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The biggest (i.e., longest and most expensive) phase is, of course, Fixing. It
usually takes the majority of time (over 70%). However, the most important
and risky phase is the first one &amp;mdash; Thinking. A mistake made during Thinking
will cost much more than a mistake made later.&lt;/p&gt;

&lt;h2 id=&quot;thinking&quot;&gt;Thinking&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-thinking.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Thinking is the first and the most important phase.&lt;/p&gt;

&lt;p&gt;First, we give a name to the project and create a &lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt; repository. We
try to keep all our projects (both open source and commercial) in Github.
Mostly because the platform is very popular, very powerful, and really cheap
(&lt;a href=&quot;https://github.com/pricing&quot;&gt;$7/mo&lt;/a&gt; for a set of 5 private projects).
We also keep all communication in the Github issue tracker.&lt;/p&gt;

&lt;p&gt;Then, we create a simple half-page SRS document (Software Requirements Specification). Usually
this is done right inside the source code, but sometimes in the Github wiki. What&amp;#39;s important
is that the document should be under version control. We will modify it
during the course of the project, very intensively. The SRS should briefly
identify main &amp;quot;actors&amp;quot; of the system and define the product scope.&lt;/p&gt;

&lt;p&gt;Even though it is only half a page, the creation of this initial SRS document
is the most important and the most expensive task in the entire project.
We pay a lot of attention to this step. Usually this document is written
by myself in a direct communication with the project sponsor. We can&amp;#39;t afford
a mistake at this step.&lt;/p&gt;

&lt;p&gt;Then, we invite a few system analysts to the project. These guys
are responsible for turning our initial SRS into a more complete and detailed
specification. They start by asking questions, submitting them one by one
as Github issues. Every question is addressed to the product owner. Using
his answers, system analysts modify the SRS document.
This article explains how &lt;a href=&quot;http://www.requs.org&quot;&gt;Requs&lt;/a&gt; helps us in this process:
&lt;a href=&quot;/2014/04/26/incremental-requirements-with-requs.html&quot;&gt;Incremental Requirements With Requs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the end of the Thinking phase we estimate the size of the project,
in lines of code. Using lines of code, we can roughly
&lt;a href=&quot;http://www.teamed.io/calculator.html&quot;&gt;estimate a budget&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I stay personally involved in the project during
the entire Thinking phase.&lt;/p&gt;

&lt;h2 id=&quot;building&quot;&gt;Building&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-building.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;This is a one-man job for an architect. Every project we work with
has an architect who is &lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;personally responsible&lt;/a&gt;
for the quality and all
technical decisions made there. I try to play this role
in most projects.&lt;/p&gt;

&lt;p&gt;The Building phase is rather straight forward. I have to implement the
solution according to the SRS, in a few working days. No matter
how big the idea and how massive the planning development, I
still have to create (build from scratch!) the product in, say, three days.&lt;/p&gt;

&lt;p&gt;Besides building the software itself, I have to configure all
basic DevOps processes, including:
1) automated testing and quality control,
2) deploying and releasing pipelines,
3) repository of artifacts,
4) &lt;a href=&quot;/2014/10/08/continuous-integration-is-dead.html&quot;&gt;continuous integration&lt;/a&gt; service, etc.&lt;/p&gt;

&lt;p&gt;The result of this phase is a working software package, deployable
to its destination and available for testers. Technical
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality requirements&lt;/a&gt;
are also defined at this phase.&lt;/p&gt;

&lt;h2 id=&quot;fixing&quot;&gt;Fixing&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-fixing.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Now it&amp;#39;s time to build a distributed team of programmers. First, we
invite those who&amp;#39;ve worked in other projects before and have already
have proven their quality. Very often we invite new people,
finding them through StackOverflow, Github, oDesk, and other sources.
An average team size of an average project is 10-20 programmers.&lt;/p&gt;

&lt;p&gt;At this phase, we understand any inconsistency as a bug. If something is not clear
in the documentation, or if something can be refactored for better
readability, or if a function can be improved for higher performance &amp;mdash;
it is a bug to us.
And &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;bugs are welcome&lt;/a&gt; in our projects.
We encourage everybody to report as many bugs as possible. This is how
we achieve high quality.&lt;/p&gt;

&lt;p&gt;That is why the phase is called Fixing, after all. We are reporting bugs and fixing
them. Hundreds of bugs. Sometimes thousands. The product
grows in front of our very eyes, because after every bug fix
we re-deploy the entire product to the production platform.&lt;/p&gt;

&lt;p&gt;Every bug is reported, classified, discussed, and fixed in its
own Github ticket and its own Git branch. We never allow anyone
to just commit to the &lt;code&gt;master&lt;/code&gt; branch &amp;mdash; all changes must pass through
our &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality controls&lt;/a&gt;
and be merged into &lt;code&gt;master&lt;/code&gt; by &lt;a href=&quot;http://www.rultor.com&quot;&gt;rultor.com&lt;/a&gt;,
our &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;merging bot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also important to mention is that all communications with the product owner
and between programmers happen only through Github issues. We
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;never use any chats&lt;/a&gt;,
Skype, emails or conferencing software. We communicate
only through tickets and comments in Github.&lt;/p&gt;

&lt;h2 id=&quot;using&quot;&gt;Using&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-using.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;This is the final phase and it can take quite a long time. By now, the product is
ready and is launched to the market. But we still receive bug reports
and feature request from the product owner, and we still fix them through
the same process flow as in the Fixing phase.&lt;/p&gt;

&lt;p&gt;We try to keep this phase as quiet as possible, in terms of
the amount of bugs reported and fixed. Thanks to our intensive and
pro-active bug finding and fixing in the previous phase, we usually
have very few problems at the Using phase.&lt;/p&gt;

&lt;p&gt;And big feature requests? At this phase, we usually try to convert
them into new projects and develop them separately, starting again
from Thinking.&lt;/p&gt;

&lt;p&gt;BTW, the illustrations you see above are made by
&lt;a href=&quot;https://www.behance.net/lopesbarbara&quot;&gt;Bárbara Lopes&lt;/a&gt;&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/06/software-project-lifecycle.html</guid>
      <dc:date>2014-10-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>10 Hosted Continuous Integration Services for a Private Repository</title>
      <link>http://www.yegor256.com/2014/10/05/ten-hosted-continuous-integration-services.html</link>
      <description>&lt;p&gt;Every project I&amp;#39;m working with starts with a setup of continuous
integration pipeline. I&amp;#39;m a big fan of cloud services,
that&amp;#39;s why I was always using travis-ci.org. A few of
my clients questioned this choice recently, mostly because
of the price. So I decided to make a brief analysis of the market.&lt;/p&gt;

&lt;p&gt;I configured &lt;a href=&quot;https://github.com/yegor256/rultor&quot;&gt;rultor&lt;/a&gt;,
an open source project, in every CI service I managed to find.
All of them are free for open source projects.
All of them are hosted and do not require any server installation
Here they are, in order of my personal preference:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;Linux&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;Windows&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;MacOS&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.travis-ci.org&quot;&gt;travis-ci.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://travis-ci.com/plans&quot;&gt;$129/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.snap-ci.com&quot;&gt;snap-ci.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://snap-ci.com/plans&quot;&gt;$30/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.semaphoreapp.com&quot;&gt;semaphoreapp.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://semaphoreapp.com/pricing&quot;&gt;$29/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.appveyor.com&quot;&gt;appveyer.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;http://www.appveyor.com/pricing&quot;&gt;$39/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.shippable.com&quot;&gt;shippable.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;http://www.shippable.com/pricing.html&quot;&gt;$1/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.wercker.com&quot;&gt;wercker.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;free!&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.codeship.io&quot;&gt;codeship.io&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://codeship.io/pricing&quot;&gt;$49/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.magnum-ci.com&quot;&gt;magnum-ci.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;?&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.drone.io&quot;&gt;drone.io&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://drone.io/pricing&quot;&gt;$25/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.circleci.com&quot;&gt;circleci.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://circleci.com/pricing&quot;&gt;$19/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://ci.solanolabs.com&quot;&gt;sonolabs.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://www.solanolabs.com/#pricing&quot;&gt;$15/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.hosted-ci.com&quot;&gt;hosted-ci.com&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://hosted-ci.com/#plans&quot;&gt;$49/mo&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.ship.io&quot;&gt;ship.io&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;rht&quot;&gt;&lt;a href=&quot;https://ship.io/pricing&quot;&gt;free!&lt;/a&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
  &lt;td class=&quot;cnt&quot;&gt;&lt;i class=&quot;icon-yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;!--more--&gt;

&lt;p&gt;If you know any other good continuous integration services,
&lt;a href=&quot;/about-me.html&quot;&gt;email me&lt;/a&gt;, I&amp;#39;ll review and add them to this list.
BTW, here is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software&quot;&gt;&amp;quot;full&amp;quot; list&lt;/a&gt;
of continuous integration software and services.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.travis-ci.org'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/travis.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.travis-ci.org&quot;&gt;&lt;strong&gt;travis-ci.org&lt;/strong&gt;&lt;/a&gt; is
the best platform I&amp;#39;ve seen so far. Mostly because
it is the most popular. Perfectly integrates with
Github and has proper documentation. One important
downside is the price of $129 per month. &amp;quot;With this money
you can get a dedicated EC2 instance and install Jenkins there&amp;quot; &amp;mdash;
some of my clients say. I strongly disagree, since Jenkins will
require a 24x7 administration, which costs way more than $129, but
it&amp;#39;s always difficult to explain.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.snap-ci.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/snap.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.snap-ci.com&quot;&gt;&lt;strong&gt;snap-ci.com&lt;/strong&gt;&lt;/a&gt; is a product of
ThoughtWorks, an author of &lt;a href=&quot;http://www.go.cd/&quot;&gt;Go&lt;/a&gt;,
an open source continuous integration server. It looks a bit more
complicated than others, giving you an ability to define &amp;quot;stages&amp;quot;
and combine them into pipelines. I&amp;#39;m not sure yet how these mechanisms
may help in small and medium size projects we&amp;#39;re mostly working with,
but they look &amp;quot;cool&amp;quot;. There is also a very unfortunate limitation of
2Gb RAM per build &amp;mdash; some of my Java projects fail because of that.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.semaphoreapp.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/semaphoreapp.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.semaphoreapp.com&quot;&gt;&lt;strong&gt;semaphoreapp.com&lt;/strong&gt;&lt;/a&gt; is easy to
configure and work with. It makes an impression of a light-weight
system, which I generally appreciate. As a downside, they don&amp;#39;t have
any Maven pre-installed, but this was solved easily with a short
custom script that downloads and unpacks Maven. Another downside is
that they are not configurable through a file (like &lt;code&gt;.travis.yml&lt;/code&gt;) &amp;mdash;
you should do everything through a UI.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.appveyor.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/appveyor.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.appveyor.com&quot;&gt;&lt;strong&gt;appveyor.com&lt;/strong&gt;&lt;/a&gt; is the only one
that runs Windows builds. Even though I&amp;#39;m working mostly with
Java and Ruby, which are expected to be platform independent, they
very often appear to be exactly the opposite. When your build
succeedes on Linux, there is almost no guarantee it will pass on
Windows or Mac. I&amp;#39;m planning to use appveyor in every project,
in combination with some other CI service. I&amp;#39;m still testing it though...&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.shippable.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/shippable.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.shippable.com&quot;&gt;&lt;strong&gt;shippable.com&lt;/strong&gt;&lt;/a&gt; was easy to configure
since it understands &lt;code&gt;.travis.yml&lt;/code&gt; out of the box. Besides that,
nothing fancy.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.wercker.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/wercker.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.wercker.com&quot;&gt;&lt;strong&gt;wercker.com&lt;/strong&gt;&lt;/a&gt; is a European product
from Amsterdam, which is still in beta and that&amp;#39;s why free
for all projects. The platform looks very promissing. It is still
free for private repositories and is backed up by
&lt;a href=&quot;https://gigaom.com/2014/10/01/wercker-takes-in-2-4-million-to-help-developers-test-their-code-in-the-cloud/&quot;&gt;investments&lt;/a&gt;.
I&amp;#39;m still testing it...&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.codeship.io'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/codeship.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codeship.io&quot;&gt;&lt;strong&gt;codeship.io&lt;/strong&gt;&lt;/a&gt; works fine, but their web UI
looks a bit out-dated. Anyway, I&amp;#39;m using them now, will see.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.magnum-ci.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/magnum.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.magnum-ci.com&quot;&gt;&lt;strong&gt;magnum-ci.com&lt;/strong&gt;&lt;/a&gt; is a very lightweight
and young system. It doesn&amp;#39;t connect automatically to Github,
so you should do some manual operations of adding a web hook.
Besides that, works just fine.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.drone.io'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/drone.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.drone.io&quot;&gt;&lt;strong&gt;drone.io&lt;/strong&gt;&lt;/a&gt; works fine, but their support
didn&amp;#39;t reply to me when I asked for a Maven version update. Besides
that, their badge is not updated correctly in Gitub README.md.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.circleci.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/circleci.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.circleci.com&quot;&gt;&lt;strong&gt;circleci.com&lt;/strong&gt;&lt;/a&gt; I still don&amp;#39;t know why my build
fails there. Really difficult to configure and understand
what&amp;#39;s going on. Trying to figure it out...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zeroci.com&quot;&gt;&lt;strong&gt;zeroci.com&lt;/strong&gt;&lt;/a&gt; looks like a one-man project, which
definitely needs usability testing. It was rather difficult to configure
a project via its web interface. The good thing is that it&amp;#39;s free, but its
quality is not high enough to recommend it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ship.io&quot;&gt;&lt;strong&gt;ship.io&lt;/strong&gt;&lt;/a&gt; is building only mobile applications (for iOS and Android).
Besides that, they don&amp;#39;t support Maven for Android apps, only Gradle.
I&amp;#39;ll try to build iOS Swift app with them soon....&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.solanolabs.com&quot;&gt;&lt;strong&gt;solanolabs.com&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.hosted-ci.com&quot;&gt;&lt;strong&gt;hosted-ci.com&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cloudbees.com&quot;&gt;&lt;strong&gt;cloudbees.com&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dploy.io/&quot;&gt;&lt;strong&gt;dploy.io&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;

&lt;p&gt;BTW, if you don&amp;#39;t like the idea of keeping continuous integration
in cloud, consider these on-premise software packages (in order or preference):
&lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt;,
&lt;a href=&quot;http://www.jetbrains.com/teamcity/&quot;&gt;TeamCity&lt;/a&gt;,
&lt;a href=&quot;http://www.thoughtworks.com/products/go-continuous-delivery&quot;&gt;Go&lt;/a&gt;,
&lt;a href=&quot;http://stridercd.com/&quot;&gt;Strider&lt;/a&gt;,
&lt;a href=&quot;http://buildbot.net/&quot;&gt;BuildBot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keep in mind that no matter how good and expensive your
continuous integration service is, it
&lt;a href=&quot;/2014/10/08/continuous-integration-is-dead.html&quot;&gt;won&amp;#39;t help you&lt;/a&gt;
unless you make your
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;master branch read-only&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/05/ten-hosted-continuous-integration-services.html</guid>
      <dc:date>2014-10-05T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>DI Containers are Code Polluters</title>
      <link>http://www.yegor256.com/2014/10/03/di-containers-are-evil.html</link>
      <description>&lt;p&gt;While &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;dependency injection&lt;/a&gt; (aka, &amp;quot;DI&amp;quot;)
is a natural technique of composing objects in OOP
(known long before the term was &lt;a href=&quot;http://www.martinfowler.com/articles/injection.html&quot;&gt;introduced by Martin Fowler&lt;/a&gt;),
&lt;a href=&quot;http://www.spring.io&quot;&gt;Spring IoC&lt;/a&gt;,
&lt;a href=&quot;https://code.google.com/p/google-guice/&quot;&gt;Google Guice&lt;/a&gt;,
&lt;a href=&quot;http://docs.oracle.com/javaee/6/tutorial/doc/giwhl.html&quot;&gt;Java EE6 CDI&lt;/a&gt;,
&lt;a href=&quot;http://square.github.io/dagger/&quot;&gt;Dagger&lt;/a&gt; and other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;DI frameworks&lt;/a&gt;
turn it into an anti-pattern.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I&amp;#39;m not going to discuss obvious arguments against
&amp;quot;setter injections&amp;quot;
(like in &lt;a href=&quot;http://www.springbyexample.org/examples/intro-to-ioc-basic-setter-injection.html&quot;&gt;Spring IoC&lt;/a&gt;)
and
&amp;quot;field injections&amp;quot;
(like in &lt;a href=&quot;http://picocontainer.codehaus.org/annotated-field-injection.html&quot;&gt;PicoContainer&lt;/a&gt;).
These mechanisms simply violate basic principles
of object-oriented programming and encourage us to create
incomplete, mutable objects, that get stuffed with data during the course
of application execution. Remember: ideal objects
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;must be immutable&lt;/a&gt;
and &lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;may not contain setters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead, let&amp;#39;s talk about &amp;quot;constructor injection&amp;quot;
(like in &lt;a href=&quot;https://github.com/google/guice/wiki/Injections#constructor-injection&quot;&gt;Google Guice&lt;/a&gt;)
and its use with &lt;strong&gt;dependency injection containers&lt;/strong&gt;.
I&amp;#39;ll try to show why I consider these containers a redundancy, at least.&lt;/p&gt;

&lt;h2 id=&quot;what-is-dependency-injection?&quot;&gt;What is Dependency Injection?&lt;/h2&gt;

&lt;p&gt;This is what dependency injection is (not really different
from a plain old object composition):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Budget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Budget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT SUM(cost) FROM ledger&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The object &lt;code&gt;data&lt;/code&gt; is called a &amp;quot;dependency&amp;quot;.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Budget&lt;/code&gt; doesn&amp;#39;t know what kind of database it is working with. All it
needs from the database is its ability to fetch a cell, using an
arbitrary SQL query, via method &lt;code&gt;cell()&lt;/code&gt;. We can instantiate a &lt;code&gt;Budget&lt;/code&gt; with a PostgreSQL
implementation of the &lt;code&gt;DB&lt;/code&gt; interface, for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Budget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Budget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jdbc:postgresql:5740/main&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Total is: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In other words, we&amp;#39;re &amp;quot;injecting&amp;quot; a dependency into a new object &lt;code&gt;budget&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An alternative to this &amp;quot;dependency injection&amp;quot; approach would be
to let &lt;code&gt;Budget&lt;/code&gt; decide what database it wants to work with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Budget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jdbc:postgresql:5740/main&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// class methods&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is very dirty and leads to 1) code duplication, 2) inability
to reuse, and 3) inability to test, etc. No need to discuss why. It&amp;#39;s obvious.&lt;/p&gt;

&lt;p&gt;Thus, dependency injection via a constructor is an amazing technique.
Well, not even a technique, really. More like a feature of Java and all other object-oriented
languages. It&amp;#39;s expected that almost any object will want to encapsulate
some knowledge (aka, a &amp;quot;state&amp;quot;). That&amp;#39;s what constructors are for.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-di-container?&quot;&gt;What is a DI Container?&lt;/h2&gt;

&lt;p&gt;So far so good, but here comes the dark side &amp;mdash; a dependency
injection container. Here is how it works (let&amp;#39;s use Google Guice as
an example):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.inject.Inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Budget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Budget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// same methods as above&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pay attention: the constructor is annotated with
&lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/inject/Inject.html&quot;&gt;&lt;code&gt;@Inject&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, we&amp;#39;re supposed to configure a container
somewhere, when the application starts:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Injector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;injector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Guice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createInjector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AbstractModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jdbc:postgresql:5740/main&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some frameworks even allow us to configure the injector in an XML file.&lt;/p&gt;

&lt;p&gt;From now on, we are not allowed to instantiate &lt;code&gt;Budget&lt;/code&gt; through the &lt;code&gt;new&lt;/code&gt; operator,
like we did before. Instead, we should use the injector we just created:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Injection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;injector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// as we just did in the previous snippet&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Budget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;injector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Budget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Total is: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The injection automatically finds out that in order to instantiate
a &lt;code&gt;Budget&lt;/code&gt; it has to provide an argument for its constructor. It will
use an instance of class &lt;code&gt;Postgres&lt;/code&gt;, which we instantiated in the injector.&lt;/p&gt;

&lt;p&gt;This is the right and recommended way to use Guice. There are
a few even darker patterns, though, which are possible but not recommended. For example,
you can make your injector a singleton and use it right inside the &lt;code&gt;Budget&lt;/code&gt; class.
These mechanisms are considered wrong even by DI container makers, however, so let&amp;#39;s ignore
them and focus on the recommended scenario.&lt;/p&gt;

&lt;h2 id=&quot;what-is-this-for?&quot;&gt;What Is This For?&lt;/h2&gt;

&lt;p&gt;Let me reiterate and summarize the scenarios of &lt;strong&gt;incorrect usage&lt;/strong&gt; of dependency
injection containers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Field injection&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setter injection&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Passing injector as a dependency&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Making injector a global singleton&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we put all of them aside, all we have left is the constructor
injection explained above. And how does that help us? Why do we need it?
Why can&amp;#39;t we use plain old &lt;code&gt;new&lt;/code&gt; in the main class of the application?&lt;/p&gt;

&lt;p&gt;The container we created simply adds more lines to the code base,
or even more files, if we use XML. And it doesn&amp;#39;t add anything, except
an additional complexity. We should always remember this
if we have the question: &amp;quot;What database is used as an argument of a Budget?&amp;quot;&lt;/p&gt;

&lt;h2 id=&quot;the-right-way&quot;&gt;The Right Way&lt;/h2&gt;

&lt;p&gt;Now, let me show you a real life example of using &lt;code&gt;new&lt;/code&gt; to construct
an application. This is how we create a &amp;quot;thinking engine&amp;quot; in
&lt;a href=&quot;http://www.rultor.com&quot;&gt;rultor.com&lt;/a&gt; (full class is in
&lt;a href=&quot;https://github.com/yegor256/rultor/blob/1.34/src/main/java/com/rultor/agents/Agents.java&quot;&gt;&lt;code&gt;Agents.java&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/c76c06baee1f74e3100e.js?file=Agents.java&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Impressive? This is a true object composition.
I believe this is how a proper object-oriented application
should be instantiated.&lt;/p&gt;

&lt;p&gt;And DI containers? In my opinion, they just add unnecessary noise.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 03 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/03/di-containers-are-evil.html</guid>
      <dc:date>2014-10-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Why Monetary Awards Don't Work?</title>
      <link>http://www.yegor256.com/2014/09/24/why-monetary-awards-dont-work.html</link>
      <description>&lt;p&gt;Monetary rewards for employees. Do they work? Should we use them?
Can money motivate creative minds? Will a programmer work
better if he gets paid only when he reaches his goals and objectives?&lt;/p&gt;

&lt;p&gt;Much research has already been done on this subject,
and most of it proves that connecting results with money
is a very demotivating approach. For example, Ian Larkin
&lt;a href=&quot;http://hbswk.hbs.edu/item/7215.html&quot;&gt;says&lt;/a&gt; that the most productive workers
&amp;quot;suffered a 6-8% decrease in productivity after the award was instituted&amp;quot;.&lt;/p&gt;

&lt;p&gt;I believe this is completely true. Money may become a terrible de-motivator
for all modern employees (not just programmers).&lt;/p&gt;

&lt;p&gt;My question is &amp;mdash; why is this so?&lt;/p&gt;

&lt;!--more--&gt;

&lt;iframe class=&quot;video&quot; width=&quot;640&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/XJRHkbrZuO8?rel=0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Why doesn&amp;#39;t money work, even when it was invented to be
a universal instrument to measure our labor? Why can&amp;#39;t an American dollar,
which has been used for centuries as a trading tool between working
people, be used anymore?&lt;/p&gt;

&lt;p&gt;Why, in a modern office, do we try to hide
monetary motivation and replace it with
&lt;a href=&quot;http://www.hrworld.com/features/25-employee-rewards/&quot;&gt;everything else&lt;/a&gt;,
like free lunches, team building events,
paid vacations, etc. Why don&amp;#39;t we just say
 &amp;mdash; &amp;quot;Jeff completed his task faster than
everybody else. This is his $500 check. Whoever completes the
next task gets $300,&amp;quot; out loud in the office?... Sounds uncomfortable, doesn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;Why does money as a motivator scare us?&lt;/p&gt;

&lt;p&gt;I have an answer.&lt;/p&gt;

&lt;p&gt;Money doesn&amp;#39;t work when there are no ground rules.&lt;/p&gt;

&lt;p&gt;When we say that Jeff will get a $500 bonus if he finishes his task on time, but
don&amp;#39;t say what he should do when someone distracts him &amp;mdash; Jeff
gets frustrated. He also doesn&amp;#39;t understand who his boss is anymore. Does
he just work for the bonus, or should he also satisfy a CTO who comes to his
desk asking him to do something else urgently? Is Jeff allowed to tell the CTO &amp;quot;to get lost&amp;quot;
because he&amp;#39;s working towards his own personal objective (the bonus)?&lt;/p&gt;

&lt;p&gt;In all cases I&amp;#39;ve seen myself and in all research cases I&amp;#39;ve read about,
people keep repeating the same mistake. They create a rewards program
(monetary or not) without setting ground rules for the team. By doing so,
they encourage people to play wild-wild west, where the fastest gets the
cash bag. Obviously, the Bad and the Ugly get to the prize faster, while
the Good gets demotivated and depressed.&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/09/rules-with-and-without-rewards.png' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p class=&quot;note&quot;&gt;
In a clockwise direction from the top left corner:
The Good, the Bad and the Ugly (1966) by Sergio Leone;
Roger Federer;
A Serious Man (2009) by Ethan Coen and Joel Coen;
Two and a Half Men (TV Series).
&lt;/p&gt;

&lt;p&gt;What do I mean by ground rules?&lt;/p&gt;

&lt;p&gt;It should be a simple document
(&lt;a href=&quot;http://www.pmi.org/PMBOK-Guide-and-Standards.aspx&quot;&gt;PMBOK&lt;/a&gt;
calls it a Staffing Management Plan) that helps me, as a team member,
answer at least these basic questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How my personal results are measured?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Who gives me tasks and who do I report to?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How should I resolve conflicts between tasks?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are my personal deadlines for every task?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do I have measurable quality expectations for my deliverables?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do my mistakes affect my performance grade?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ground rules document should be superior to your boss. If the document
says that your results get an A+ grade, the boss should have no say. If she
doesn&amp;#39;t like you personally, it doesn&amp;#39;t matter. You get an A+ grade, and you
are the best. That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;Does your team have such a document? Can you answer all of these questions?
If not, you&amp;#39;re not ready for a rewards program. It will only
make your management situation worse, just like all the
scientific research says. Rewards will motivate
the most cunning to take advantage of the most hard
working and good-natured. Team spirit will suffer, big time.&lt;/p&gt;

&lt;p&gt;On the other hand, if you have that &amp;quot;ground rules&amp;quot; document and you
strictly follow it, giving monetary rewards to your workers will
significantly increase their performance and motivation. They will
know exactly what needs to be done to get the rewards, and they won&amp;#39;t have
any distraction. Your team won&amp;#39;t be a group of wild west gunslingers anymore, but more like players in a
sports arena. The best players will go further, and the worst will
know exactly what needs to be done to improve. Fair competition
will lead to a better cumulative result.&lt;/p&gt;

&lt;p&gt;Moreover, if your ground rules are strict and explicit, you can
use not only rewards, but also punishments. And your team will gladly accept
them, because they will help emphasize
what (and who) works best and help get rid of the waste.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m speaking from experience here. In &lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt;
we&amp;#39;re not only rewarding programmers with money, but we also never pay
for anything except delivered results. We manage to do this mostly because
our groud rules are very strict and non-ambiguous. And we never
break them.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/09/24/why-monetary-awards-dont-work.html</guid>
      <dc:date>2014-09-24T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>