<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014</copyright>
    <lastBuildDate>Mon, 02 Mar 2015 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>Team Morale: Myths and Reality</title>
      <link>http://www.yegor256.com/2015/03/02/team-morale-myths-and-reality.html</link>
      <description>&lt;p&gt;There are plenty of books, articles, and blog posts about &lt;em&gt;team morale&lt;/em&gt;. They
will all suggest you do things like regular celebrations, team events,
free lunches, pet-friendly offices, coffee machines, birthday presents, etc.
All of these are instruments of &lt;strong&gt;concealed enslaving&lt;/strong&gt;.
These traditional techniques turn employees into
speechless monkeys, programming under the influence of Prozac. Their existence
and popularity is our big misfortune. Let me present my own
vision of how team morale can be boosted on a software team &amp;mdash; a team that
has a strong leader and a good project manager.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/03/apocalypto.jpg' style='width:600px;' alt='Apocalypto (2006) by Mel Gibson'/&gt;&lt;figcaption&gt;Apocalypto (2006) by Mel Gibson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Fire Fast&lt;/strong&gt;.
The first and most important quality of a good leader is his or her
ability to separate bad apples from good ones as soon as possible.
Nothing will earn you more disrespect from your team than tolerance of
underperforming team members. Your job as a leader is to help the best players
play better, and they can&amp;#39;t play better if they see that management
doesn&amp;#39;t understand the difference between excellence and mediocrity. It&amp;#39;s
a severe demotivating factor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be Honest About Problems and Risks&lt;/strong&gt;.
Your team is following you and expecting you to be a smart leader. While they
are writing Java, you&amp;#39;re talking to investors and customers. They want to
be sure you know what you&amp;#39;re doing. The best way to show them
you have no idea where the team is going is to tell them that the future
is bright and cloudless. Everybody understands that&amp;#39;s either a lie and you
are trying to hide risks or you&amp;#39;re stupid enough to not see them. In either
case, the best people would attempt to quit before it&amp;#39;s too late. Thus, to keep
morale up, regularly inform your people about problems you&amp;#39;re facing and
risks you&amp;#39;re trying to prevent. They will appreciate it and respect you.
A strong, professional manager deals with risks instead of ignoring them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Failures Are Yours; Success Is Theirs&lt;/strong&gt;.
Always remember that when someone on your team makes a mistake,
it is first of all &lt;em&gt;your&lt;/em&gt; personal mistake. You hired that person,
you trained him or her, you delegated the responsibility, and you
controlled and monitored the job. Then he made a mistake, and the project
lost money, disappointed a customer, or damaged the firm&amp;#39;s reputation. Of course you need to
take necessary disciplinary actions and maybe fire the troublemaker. But first of all,
you have to admit in front of everyone that it was your personal mistake.
You didn&amp;#39;t control enough, you didn&amp;#39;t plan well, or you didn&amp;#39;t take preventive actions.
This is what the team expects from you. Also, your people expect
you to explain to them how you&amp;#39;re going to learn from this mistake in order to prevent
a similar one from happening in the future. A strong leader isn&amp;#39;t afraid to look
stupid in front of the team. A weak leader does look stupid when he or she
tries to hide mistakes that have been made.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsibility Is Always Personal&lt;/strong&gt;.
The most demotivating word used in task descriptions is &amp;quot;together&amp;quot;. Don&amp;#39;t use it.
Each task has to be personally and individually assigned (no matter what the Agile Manifesto says).
Everybody is responsible for his or her own success or failure. How their results
join together and lead to a mutual success or failure &amp;mdash; that&amp;#39;s &lt;em&gt;your&lt;/em&gt; business.
Whether you succeed or fail, we all will see. Once you say we all have to succeed together,
the team understands that you&amp;#39;re trying to shift responsibility from your own
shoulders to theirs. It&amp;#39;s a sign of weakness, and you lose respect. Make
tasks and goals strictly personal, and be prepared to be responsible for
the group&amp;#39;s success. You, as a manager, break down an entire project into
parts and delegate them to your people. If you do this job properly,
we all will succeed. But don&amp;#39;t try to blame us if the parts fall apart.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Mention Steve Jobs&lt;/strong&gt;.
Try to avoid global slogans and world domination speeches in the office and
in front of the team. They demotivate. If we&amp;#39;re doing so good, why are
our salaries not reflecting this success yet? If your vision is so global,
why is it not yet implemented in reality? Don&amp;#39;t promise to become the next Steve Jobs.
Instead, become the next good manager of a highly paid team that is solving
interesting problems for real people. Your practical achievements, no matter
how small and down-to-earth they are, will give you much more respect than
many-hour-long speeches about our fantastic future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Say a Word About Agile&lt;/strong&gt;.
Even though Agile is a great attitude-changing and mind-shifting concept,
it is absolutely inapplicable in practice, mostly because it is too
abstract. When you&amp;#39;re proclaiming in the office that we should value
&amp;quot;working software over comprehensive documentation&amp;quot;, it sounds like
you don&amp;#39;t know what you&amp;#39;re doing. The team doesn&amp;#39;t need such abstract
slogans from you. It needs specific instructions and rules in order
to follow them and produce results, money, and satisfaction. Agile is a set
of abstract principles that you should understand and digest. But then,
after you chew them properly, convert them to specific and
very unambitious rules of work. Don&amp;#39;t talk about Agile; be agile.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Close the Door&lt;/strong&gt;.
Responsibility is personal, money is personal, and results are personal. But
their discussions should be open to everybody. Don&amp;#39;t close the door to that
meeting room when you&amp;#39;re talking about problems or appraising someone&amp;#39;s
results. You want your team to work together? Give everybody an assurance
that none of them will be terminated behind a closed door. These pompous
speeches about &amp;quot;us working together&amp;quot; usually turn into mush once the team
sees that someone gets fired after a private conversation with a manager.
Are we together, or is it you against us? To keep team morale up, you, as a leader,
have to establish ground rules of work that will define who gets what
when we succeed and who goes home first when we fail. These rules should
be open to everybody. These rules should rule the team, not your personal
decisions made behind a closed door.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Celebrate Achievements Instead of Birthdays&lt;/strong&gt;.
Team-building events are a great tool to boost team morale, but only when
they are built around personal or team achievements instead of calendar events.
A project team is not a group of friends or family members, even though
some teams may feel like that. No matter how it feels, a team is here
for one reason &amp;mdash; to create the product and make money for its sponsor.
This is the direction we&amp;#39;re going. Our goal is not to build a community and
live together til the end of our days. Our goal is to achieve the business
success of the product we&amp;#39;re developing, or in other words, complete the project.
When the only events we&amp;#39;re celebrating are our birthdays, that&amp;#39;s a sign to
us that our leaders are trying to lie to us. They are pretending that we&amp;#39;re
here to make a community of friends while in reality they are using us to
build their business. It&amp;#39;s unhealthy and ruins team morale. Instead, celebrate
achievements on your real path &amp;mdash; to the success of the product under
development. This will show everybody that you, as a leader, are honest with
your people and ready to show them that their true role on the team is
to develop a product and earn money for its investors. Honesty is the best
team morale booster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Rule; Make Rules and Plans&lt;/strong&gt;.
Nothing demotivates more than an upredictable manager. For the team, you are
an abstraction of the entire world around the team. They see
the reality through the prism of your personality. What you tell them about
the reality is what they perceive. If you are unpredictable, the reality
is unpredictable and scary for them. To avoid that, stop making decisions that
are based on your personal and momentary judgement.
Instead, make decisions that are based on the rules you&amp;#39;ve defined upfront
and plans you&amp;#39;ve drawn beforehand. First, create a plan for team
growth and announce it to everybody. The plan should include risks and
their mitigations. The plan should say who will be fired
first when or if the project goes down. The plan should give a predictable
and measurable picture of the reality around your office. It should be a map
of terrain you&amp;#39;re going to cross with your team. When it&amp;#39;s time to make
a decision, everybody will understand why it&amp;#39;s made and will respect you
as a leader who predicted the situation and managed it professionally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Put Money on the Table&lt;/strong&gt;.
Discuss money openly and freely, right in the office, right in front
of everybody. This advice is for true professionals. If you can&amp;#39;t do what
is said above, don&amp;#39;t try this one. But if you consider yourself a real
pro in management and leadership, you should put money on the table and
let everybody know who is getting what, when, why, and why not. Everybody
should know everybody&amp;#39;s salaries, bonuses, benefits, and the rationale behind them.
Each programmer should know what he or she should do in order to get
a $5,000 raise to their annual salary. Also, he or she should know why a
colleague is called &amp;quot;senior developer&amp;quot; while his or her title is still &amp;quot;junior&amp;quot;.
This information should be public and printed on the wall right behind
your chair. Why don&amp;#39;t most managers do this? Because they don&amp;#39;t have any
rationale behind their monetary decisions. Instead of managing the money,
they let money manage them. That&amp;#39;s a subject for another post :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/03/02/team-morale-myths-and-reality.html</guid>
      <dc:date>2015-03-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Composable Decorators vs. Imperative Utility Methods</title>
      <link>http://www.yegor256.com/2015/02/26/composable-decorators.html</link>
      <description>&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt;
is my favorite among all other patterns I&amp;#39;m aware of. It is a very simple
and yet very powerful mechanism to make your code
&lt;a href=&quot;http://en.wikipedia.org/wiki/Cohesion_%28computer_science%29&quot;&gt;highly cohesive&lt;/a&gt; and
&lt;a href=&quot;http://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;loosely coupled&lt;/a&gt;.
However, I believe decorators are not used often enough. They should
be everywhere, but they are not. The biggest advantage we get from decorators
is that they make our code &lt;em&gt;composable&lt;/em&gt;. That&amp;#39;s why the title of this
post is composable decorators. Unfortunately, instead of decorators, we often use imperative
utility methods, which make our code procedural rather than object-oriented.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/02/russina-matroshka.jpg' style='width:600px;' alt='Матрёшка'/&gt;&lt;figcaption&gt;Матрёшка&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, a practical example. Here is an interface for an object that is
supposed to read a text somewhere and return it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is an implementation that reads the text from a file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextInFile&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TextInFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAllBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now the decorator, which is another implementation of &lt;code&gt;Text&lt;/code&gt; that
removes all unprintable characters from the text:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PrintableText&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrintableText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[^\p{Print}]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how I&amp;#39;m using it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrintableText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TextInFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/a.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the &lt;code&gt;PrintableText&lt;/code&gt; doesn&amp;#39;t read the text from the file. It doesn&amp;#39;t
really care where the text is coming from. It &lt;em&gt;delegates&lt;/em&gt; text reading to
the encapsulated instance of &lt;code&gt;Text&lt;/code&gt;. How this encapsulated object will
deal with the text and where it will get it doesn&amp;#39;t concern &lt;code&gt;PrintableText&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s continue and try to create an implemetation of &lt;code&gt;Text&lt;/code&gt;
that will capitalize all letters in the text:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AllCapsText&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AllCapsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ENGLISH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How about a &lt;code&gt;Text&lt;/code&gt; that trims the input:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrimmedText&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TrimmedText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I can go on and on with these decorators. I can create many of them,
suitable for their own individual use cases. But let&amp;#39;s see how they all
can play together. Let&amp;#39;s say I want to read the text from the file,
capitalize it, trim it, and remove all unprintable characters. And I want
to be &lt;em&gt;declarative&lt;/em&gt;. Here is what I do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AllCapsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TrimmedText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrintableText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TextInFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/a.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, I create an instance of &lt;code&gt;Text&lt;/code&gt;, &lt;em&gt;composing&lt;/em&gt; multiple decorators into
a single object. I declaratively define the behavior of &lt;code&gt;text&lt;/code&gt; without
actually executing anything. Until method &lt;code&gt;read()&lt;/code&gt; is called, the file is not touched
and the processing of the text is not started. The object &lt;code&gt;text&lt;/code&gt; is just
a composition of decorators, not an executable &lt;em&gt;procedure&lt;/em&gt;. Check out this
article about declarative and imperative styles of programming:
&lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;Utility Classes Have Nothing to Do With Functional Programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This design is much more flexible and reusable than a more traditional one,
where the &lt;code&gt;Text&lt;/code&gt; object is smart enough to perform all said operations. For
example, class &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/String.html&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;
from Java is a good example of a bad design. It has
more than 20 &lt;em&gt;utility methods&lt;/em&gt; that should have been provided as decorators instead: &lt;code&gt;trim()&lt;/code&gt;, &lt;code&gt;toUpperCase()&lt;/code&gt;, &lt;code&gt;substring()&lt;/code&gt;, &lt;code&gt;split()&lt;/code&gt;, and many others, for example.
When I want to trim my string, uppercase it, and then split it into pieces,
here is what my code will look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is imperative and procedural programming. Composable decorators,
on the other hand, would make this code object-oriented and declarative. Something
like this would be great to have in Java instead (pseudo-code):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UpperCased&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Trimmed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To conclude, I recommend you think twice every time you add
a new utility method to the interface/class. Try to avoid utility methods as much
as possible, and use decorators instead. An ideal interface should contain
only methods that you absolutely cannot remove. Everything else should be
done through composable decorators.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/26/composable-decorators.html</guid>
      <dc:date>2015-02-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>A Haircut</title>
      <link>http://www.yegor256.com/2015/02/23/haircut.html</link>
      <description>&lt;p&gt;I received a haircut today, and the niceness of my hairdresser led him to fill the
appointment with courteous questions about how I wanted my hair cut, what size of clipper
he should use, how long the sides should be, and how much should be removed
from the front. He also offered me many types of shampoo and a cup of tea.
All this reminded me of the work we do as programmers, and I
decided to write a short post about it. I&amp;#39;ve already
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;mentioned before&lt;/a&gt;
that trying to make a customer happy is a false objective. This hairdresser
was a perfect illustrative example of this very mistake. By the way, in the end,
I wasn&amp;#39;t happy, and he got no tip. How could this happen if he was so
friendly and nice?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/02/the-man-who-wasnt-there.jpg' style='width:600px;' alt='The Man Who Wasn&amp;amp;apos;t There (2001) by Coen Brothers'/&gt;&lt;figcaption&gt;The Man Who Wasn't There (2001) by Coen Brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m not a hairdresser, and I have very little understanding of how to deal
with hair. I came to him because I assumed he knew more about this
business than I did. I chose him through the assistance of Yelp. I wanted &lt;em&gt;him&lt;/em&gt; to tell me
how long the hair on the sides should be and how much should be removed on the
top. I expected &lt;em&gt;him&lt;/em&gt; to give me his professional judgement and stand by it.&lt;/p&gt;

&lt;p&gt;Instead of asking me how much I wanted removed on the sides, he should have
told me there should be less on the sides. This is what
a true professional would do. A true professional would give me &lt;em&gt;his&lt;/em&gt; vision
of the haircut that best suits me and would try to convince me that
it was the best choice.&lt;/p&gt;

&lt;p&gt;A true professional would not ask me but would &lt;em&gt;tell&lt;/em&gt; me instead, because
he would understand that my goal was not to boss him around and make him do my
hair the way I wanted it. My goal was to get the best out
of his professional skill.&lt;/p&gt;

&lt;p&gt;Unfortunately, the guy was either weak or immature. He didn&amp;#39;t argue with me
and didn&amp;#39;t try to convince me. He tried to &lt;em&gt;please&lt;/em&gt; me. In the end, he
lost.&lt;/p&gt;

&lt;p&gt;Exactly the same thing happens when we ask our customers about
the technologies they want us to use. I hear this question very often:
&lt;em&gt;What language do you want us to use&lt;/em&gt; (meaning Java or Ruby or something else)?
Or &lt;em&gt;what database should we use?&lt;/em&gt; Or &lt;em&gt;how do you want us to design this?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t do that. Don&amp;#39;t lose like that hairdresser. Don&amp;#39;t ask your clients
what they want. Instead, &lt;em&gt;learn&lt;/em&gt; their business requirements and then
&lt;em&gt;suggest&lt;/em&gt; the solution you think is the best for them. Then, insist and argue
if they don&amp;#39;t agree. Convince them. Even if they fire you in the end for
your stubbornness, it&amp;#39;s better than being that hairdresser who is doomed
to please every single client without getting anywhere further.&lt;/p&gt;

&lt;p&gt;Remember, the client is not the king; his hairs are.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/23/haircut.html</guid>
      <dc:date>2015-02-23T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Utility Classes Have Nothing to Do With Functional Programming</title>
      <link>http://www.yegor256.com/2015/02/20/utility-classes-vs-functional-programming.html</link>
      <description>&lt;p&gt;I was recently &lt;a href=&quot;https://twitter.com/lukaseder/status/564866432790708224&quot;&gt;accused&lt;/a&gt; of being against
&lt;a href=&quot;http://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional programming&lt;/a&gt;
because &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;I call utility classes an anti-pattern&lt;/a&gt;.
That&amp;#39;s absolutely wrong! Well, I do consider them a terrible anti-pattern,
but they have nothing to do with functional programming. I believe there are
two basic reasons why. First, functional programming is declarative, while
utility class methods are imperative. Second,
functional programming is based on lambda calculus, where
a function can be assigned to a variable. Utility class methods
are not functions in this sense. I&amp;#39;ll decode these statements in a minute.&lt;/p&gt;

&lt;p&gt;In Java, there are basically two valid alternatives to these ugly utility
classes aggressively promoted by &lt;a href=&quot;https://code.google.com/p/guava-libraries/&quot;&gt;Guava&lt;/a&gt;,
&lt;a href=&quot;http://commons.apache.org/&quot;&gt;Apache Commons&lt;/a&gt;, and others. The first one
is the use of traditional classes, and the second one is &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;Java 8 lambda&lt;/a&gt;.
Now let&amp;#39;s see why utility classes are not even close to functional programming
and where this misconception is coming from.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/02/color-me-kubrick.png' style='width:600px;' alt='Color Me Kubrick (2005) by Brian W. Cook'/&gt;&lt;figcaption&gt;Color Me Kubrick (2005) by Brian W. Cook&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is a typical example of a utility class
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; from Java 1.0:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// a few dozens of other methods of the same style&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how you would use it when you want to calculate an absolute
value of a floating point number:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.1415926d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What&amp;#39;s wrong with it? We need a function, and we get it from class &lt;code&gt;Math&lt;/code&gt;.
The class has many useful functions inside it that can be used for many typical
mathematical operations, like calculating maximum, minimum, sine, cosine, etc.
It is a very popular concept; just look at any commercial or open source product.
These utility classes are used everywhere since Java was invented (this
&lt;code&gt;Math&lt;/code&gt; class was introduced in Java&amp;#39;s first version). Well, technically
there is nothing wrong. The code will work. But it is not object-oriented
programming. Instead, it is imperative and procedural. Do we care? Well,
it&amp;#39;s up to you to decide. Let&amp;#39;s see what the difference is.&lt;/p&gt;

&lt;p&gt;There are basically two different approaches: declarative and imperative.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Imperative_programming&quot;&gt;Imperative programming&lt;/a&gt;
is focused on describing &lt;strong&gt;how&lt;/strong&gt; a program operates
in terms of statements that change a program state. We just saw an example
of imperative programming above. Here is another (this is pure imperative/procedural
programming that has nothing to do with OOP):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;Declarative programming&lt;/a&gt;
focuses on &lt;strong&gt;what&lt;/strong&gt; the program should accomplish without prescribing
how to do it in terms of sequences of actions to be taken. This is how
the same code would look in Lisp, a functional programming language:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What&amp;#39;s the catch? Just a difference in syntax? Not really.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;http://en.wikipedia.org/wiki/Comparison_of_programming_paradigms&quot;&gt;many definitions&lt;/a&gt;
of the difference between imperative and declarative styles, but I will try to
give my own. There are basically three roles interacting in the scenario
with this &lt;code&gt;f&lt;/code&gt; function/method: a &lt;em&gt;buyer&lt;/em&gt;, a &lt;em&gt;packager&lt;/em&gt; of the result,
and a &lt;em&gt;consumer&lt;/em&gt; of the result. Let&amp;#39;s say I call this function like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;max+abs equals to &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, method &lt;code&gt;calc()&lt;/code&gt; is a buyer, method &lt;code&gt;Math.f()&lt;/code&gt; is a packager of the result,
and method &lt;code&gt;foo()&lt;/code&gt; is a consumer. No matter which programming style is used,
there are always these three guys participating in the process:
the buyer, the packager, and the consumer.&lt;/p&gt;

&lt;p&gt;Imagine you&amp;#39;re a buyer and want to purchase a gift for your (girl|boy)friend. The first
option is to visit a shop, pay $50, let them package that perfume for you,
and then deliver it to the friend (and get a kiss in return). This is an &lt;strong&gt;imperative&lt;/strong&gt; style.&lt;/p&gt;

&lt;p&gt;The second option is to visit a shop, pay $50, and get a gift card. You then
present this card to the friend (and get a kiss in return). When he or she decides to convert it
to perfume, he or she will visit the shop and get it. This
is a &lt;strong&gt;declarative&lt;/strong&gt; style.&lt;/p&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;In the first case, which is imperative, you force the packager (a beauty shop)
to find that perfume in stock, package it, and present it to you as
a ready-to-be-used product. In the second scenario, which is declarative,
you&amp;#39;re just getting a promise from the shop that eventually, when it&amp;#39;s
necessary, the staff will find the perfume in stock, package it, and provide it to
those who need it. If your friend never visits the shop with that gift card,
the perfume will remain in stock.&lt;/p&gt;

&lt;p&gt;Moreover, your friend can use that gift card as a product itself, never
visiting the shop. He or she may instead present it to somebody else as a gift
or just exchange it for another card or product. The gift card itself
becomes a product!&lt;/p&gt;

&lt;p&gt;So the difference is what the consumer is getting &amp;mdash; either a
product ready to be used (imperative) or a voucher for the product, which
can later be converted into a real product (declarative).&lt;/p&gt;

&lt;p&gt;Utility classes, like &lt;code&gt;Math&lt;/code&gt; from JDK or &lt;code&gt;StringUtils&lt;/code&gt; from Apache Commons,
return products ready to be used immediately, while functions in Lisp
and other functional languages return &amp;quot;vouchers&amp;quot;. For example, if you
call the &lt;code&gt;max&lt;/code&gt; function in Lisp, the actual maximum between two numbers
will only be calculated when you actually start using it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;X equals to &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Until this &lt;code&gt;print&lt;/code&gt; actually starts to output characters to the
screen, the function &lt;code&gt;max&lt;/code&gt; won&amp;#39;t be called. This &lt;code&gt;x&lt;/code&gt; is a &amp;quot;voucher&amp;quot; returned
to you when you attempted to &amp;quot;buy&amp;quot; a maximum between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note, however, that nesting Java static functions one into another doesn&amp;#39;t
make them declarative. The code is still imperative, because its execution
delivers the result here and now:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;quot;Okay,&amp;quot; you may say, &amp;quot;I got it, but why is declarative style better than imperative?
What&amp;#39;s the big deal?&amp;quot; I&amp;#39;m getting to it. Let me first show the difference
between functions in functional programming and static methods in OOP.
As mentioned above, this is the second big difference between utility
classes and functional programming.&lt;/p&gt;

&lt;p&gt;In any functional programming language, you can do this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, later, you can call that &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;defining&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;passing&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Static methods in Java are not &lt;em&gt;functions&lt;/em&gt; in terms of functional programming.
You can&amp;#39;t do anything like this with a static method. You can pass a static
method as an argument to another method. Basically, static
methods are procedures or, simply put, Java statements grouped under a unique
name. The only way to access them is to call a procedure and pass all
necessary arguments to it. The procedure will calculate something and return
a result that is immediately ready for usage.&lt;/p&gt;

&lt;p&gt;And now we&amp;#39;re getting to the final question I can hear you asking:
&amp;quot;Okay, utility classes are not functional programming, but they look like
functional programming, they work very fast, and they are very easy to
use. Why not use them? Why aim for perfection when 20 years of Java history
proves that utility classes are the main instrument of each Java developer?&amp;quot;&lt;/p&gt;

&lt;p&gt;Besides OOP fundamentalism, which I&amp;#39;m very often accused of, there are
a few very practical reasons (BTW, I am an OOP fundamentalist):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testability&lt;/strong&gt;.
Calls to static methods in utility classes are hard-coded dependencies that
can never be broken for testing purposes. If your class is calling
&lt;code&gt;FileUtils.readFile()&lt;/code&gt;, I will never be able to test it without using
a real file on disk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Efficiency&lt;/strong&gt;.
Utility classes, due to their imperative nature, are much less efficient
than their &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;declarative alternatives&lt;/a&gt;.
They simply do all calculations right here and now, taking processor
resources even when it&amp;#39;s not yet necessary. Instead of returning a promise
to break down a string into chunks, &lt;code&gt;StringUtils.split()&lt;/code&gt; breaks it down
right now. And it breaks it down into all possible chunks, even if only
the first one is required by the &amp;quot;buyer&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Readability&lt;/strong&gt;.
Utility classes tend to be huge (try to read the source code of &lt;code&gt;StringUtils&lt;/code&gt;
or &lt;code&gt;FileUtils&lt;/code&gt; from Apache Commons). The entire idea of separation of concerns,
which makes OOP so beautiful, is absent in utility classes. They just
put all possible procedures into one huge &lt;code&gt;.java&lt;/code&gt; file, which becomes
absolutely unmaintainable when it surpasses a dozen static methods.&lt;/p&gt;

&lt;p&gt;To conclude, let me reiterate: Utility classes have nothing to do
with functional programming. They are simply bags of static methods, which
are imperative procedures. Try to stay as far as possible away from them and
use solid, cohesive objects no matter how many of them you have to declare
and how small they are.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/20/utility-classes-vs-functional-programming.html</guid>
      <dc:date>2015-02-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>It's Not a School!</title>
      <link>http://www.yegor256.com/2015/02/16/it-is-not-a-school.html</link>
      <description>&lt;p&gt;At &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;, we work in distributed teams and
keep all our communications &lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;in tickets&lt;/a&gt;.
Besides that, we &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;encourage&lt;/a&gt;
every developer on every project to
report bugs whenever he or she finds them. We even
&lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;pay&lt;/a&gt; for each bug found.
Once in a while, I see bugs reported along these lines: &amp;quot;&lt;em&gt;Can someone explain
to me how to design this module?&lt;/em&gt;&amp;quot; or even &amp;quot;&lt;em&gt;I haven&amp;#39;t used this library before;
please help me get started&lt;/em&gt;.&amp;quot; My usual answer is, &amp;quot;&lt;em&gt;This is not a school; nobody
is going to teach you here!&lt;/em&gt;&amp;quot; I realize this sounds
rather harsh to most developers who are just starting to work with us, so
here I&amp;#39;ll try to illustrate why such an attitude makes sense and is beneficial to both
the programmers and the project.&lt;/p&gt;

&lt;p&gt;Disclaimer: I&amp;#39;m talking about software &lt;strong&gt;projects&lt;/strong&gt; here, which PMBOK defines
as &amp;quot;&lt;em&gt;temporary&lt;/em&gt; endeavors undertaken to create unique
products, services, or results&amp;quot;. If your team is engaged in continuous
development or maintenance of software, this concept may not be relevant.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/02/gi-jane.png' style='width:600px;' alt='G.I. Jane (1997) by Ridley Scott'/&gt;&lt;figcaption&gt;G.I. Jane (1997) by Ridley Scott&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;No matter how unpleasant this could be, let&amp;#39;s face the reality:
each software project is a business, and we, the developers, are
its &lt;strong&gt;resources&lt;/strong&gt;. Just like concrete, wood, and glass are the resources required
to build a house, which is also a business activity. No matter how much we think
about ourselves as a family having fun together and writing code because
we enjoy it, each business looks at it completely differently.&lt;/p&gt;

&lt;p&gt;The project needs us to produce classes, lines of code, methods, functions,
files, and features. Then, the project can convert them into happy customers,
which will give us something back &amp;mdash; usually cash. Finally, the project will
share that cash among us, investors, and the government.&lt;/p&gt;

&lt;p&gt;A properly planned and managed project acquires the best resources its
budget can afford and then relies on their quality. A programmer who doesn&amp;#39;t
have adequate skills or knowledge is an unreliable resource. Obviously,
no project would acquire such a resource from the start. However,
this weakness may be revealed in the middle of the project.&lt;/p&gt;

&lt;p&gt;Say you&amp;#39;re building a house and you contracted a plumber to install a
drainage system. When it&amp;#39;s time to mount the equipment, he tells you
that he&amp;#39;s never worked with it and doesn&amp;#39;t know how to install it.
It was a risk, and it occurred. A good project manager always has a fallback plan
or even a few of them. Obviously, the best option would be to contract another
plumber. The worst option would be to train the original one on the spot.&lt;/p&gt;

&lt;p&gt;Wait, why is that so obvious? The plumber is a great guy. Yes, he doesn&amp;#39;t know
how to work with this equipment, but that doesn&amp;#39;t mean we should
fire him immediately. Let&amp;#39;s pay for his training, send him to some
courses, buy him some books, let him experiment with the equipment for some
time, and then he will be able to install it in our house. Great plan, isn&amp;#39;t it?
The plumber will be happy.&lt;/p&gt;

&lt;p&gt;But the project won&amp;#39;t.&lt;/p&gt;

&lt;p&gt;The goal of the project is to build a house, not to train a plumber. The
project doesn&amp;#39;t even have funds to train the bloody plumber! If we train
and teach all our workers, we won&amp;#39;t ever build a house. We&amp;#39;re not running
a school here. We&amp;#39;re building a house!&lt;/p&gt;

&lt;p&gt;While working on a software project, a good project manager has a staffing management
plan that describes how skills will be recruited, tested, applied, and
discharged when necessary. Such a plan may include training, but it would be
as small an amount as possible &amp;mdash; mostly because a plumber trained by us costs much
more than one trained by someone else but does exactly the same, or worse, work.
Thus, a smart project manager acquires project members who are already
capable of performing their duties and falls back on trainings only
in exceptional situations.&lt;/p&gt;

&lt;p&gt;Now, a logical question: What should we, as programmers, do? We want to
learn, and we don&amp;#39;t want to spend our own money on it. We don&amp;#39;t want to
sit home for a few years learning all possible technologies before entering
the job market as experts, ready to be hired. We want to learn on the job.
We basically want to use project budgets for our own personal educational needs.
Moreover, a smart programmer exits every project with some new knowledge,
new skills, and new technologies in his or her portfolio.&lt;/p&gt;

&lt;p&gt;However, if you make your projects spend their money
on your education, that&amp;#39;s theft. And a good project manager
should stop you, saying &amp;quot;This is not a school!&amp;quot;&lt;/p&gt;

&lt;p&gt;What Is the Solution?&lt;/p&gt;

&lt;p&gt;I believe that in the software business, there is only one workaround &amp;mdash; blame the
project for your own deficiencies in education, skills, or information.
I&amp;#39;m being absolutely serious.
Let&amp;#39;s discuss a few practical situations.&lt;/p&gt;

&lt;p&gt;Say you have a module to work with, and it has to be written in Python. You have
no experience in Python; you&amp;#39;re a Java developer. Who is at fault here? You
could think of it as your problem and ask your project manager to teach you, but he should tell
you he&amp;#39;s not running a school and get rid of you. That&amp;#39;s a bad scenario for both of you. Instead, blame the
project manager. He hired you. He put you into this situation. He planned
all project activities, so he probably knows what he is doing. This means
that the project documentation should be detailed enough for a Java
developer to create that Python module. However, it is not detailed enough. So report
this issue and wait for its resolution. Explain in your bug report that you
honestly started to work with the module and realized that its documentation
is not complete enough for a Java developer to understand. Ask the project manager
to fix this. If the project decides to invest its money into the documentation, you
have the chance to read it and learn. Thus, the project&amp;#39;s money spent on your education will
also contribute to the project. It&amp;#39;s a win-win.&lt;/p&gt;

&lt;p&gt;Here is another example: Say you have to fix a Java module and you&amp;#39;re a Java
developer. You understand Java, but you don&amp;#39;t understand how this algorithm works.
You could blame yourself for not reading
&lt;a href=&quot;http://www.amazon.com/gp/product/0321751043/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321751043&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=FVM7INLX6KAHZV66&quot;&gt;Knuth&lt;/a&gt;
in school and ask the project to train you on it. A good and strong project manager should tell you that it&amp;#39;s not a school
and get rid of you. Again, a bad scenario for both of you. Instead,
blame the project. The code is not self-descriptive and is difficult to
understand. The algorithm implementation is not obvious and is poorly documented.
Ask for better documentation. If the project invests its money into
the documentation, you will learn the algorithm from it. The source
code will be improved, and you will have improved your skills. Win-win.&lt;/p&gt;

&lt;p&gt;One more example: Say you are tasked to implement a WebSockets back-end in
an existing web app. You know how WebSockets work but can&amp;#39;t understand how
to connect this new back-end to the existing persistence layer. You are rather
new to the project and don&amp;#39;t understand what would be the right design. You
could ask for the project to provide training to explain how the code works
and how it can be extended with features like this one. A project manager
should tell you that you&amp;#39;re not in school and are supposed to understand the
software if the project is paying you a software developer salary. And he will
be right. But it&amp;#39;s a bad scenario for both of you. Instead, blame the project
for incomplete design documentation. Good software should properly document
its architecture and design. Ask for the project to provide such documentation.
If it invests its time and money into better documentation, you
will learn from it and find all the necessary answers. Another win-win.&lt;/p&gt;

&lt;p&gt;There are a few other examples in my
&lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;How to Cut Corners and Stay Cool&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;In conclusion, I would recommend you remember that software projects are,
first and foremost, business activities where we, the developers, are resources.
In order to obtain something for ourselves in terms of education and training,
we should align our goals with project objectives. Instead of asking for
help and information, we should blame the project for its lack of
documentation. By fixing this flaw, the project will improve its artifacts
and, at the same time, provide valuable knowledge to us, its participants.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 16 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/16/it-is-not-a-school.html</guid>
      <dc:date>2015-02-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Code For the User, Not for Yourself</title>
      <link>http://www.yegor256.com/2015/02/12/top-down-design.html</link>
      <description>&lt;p&gt;First, no matter what the methodology is, we all write software for our
users (a.k.a. customers, project sponsors, end users, or clients). Second,
no matter what the methodology is, we write incrementally, releasing
features and bug fixes one by one. Maybe I&amp;#39;m saying something absolutely obvious here,
but it&amp;#39;s important to remember that each new version should first of all satisfy
the needs of the user, not of us programmers. In other words, the way
we decompose a big task into smaller pieces should be user-targeted, and that&amp;#39;s
why you always work &lt;strong&gt;top down&lt;/strong&gt;. Let&amp;#39;s see what I mean through a practical example.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/02/delicatessen.png' style='width:600px;' alt='Delicatessen (1991) by Jean-Pierre Jeunet'/&gt;&lt;figcaption&gt;Delicatessen (1991) by Jean-Pierre Jeunet&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Say I&amp;#39;m contracted by a friend of mine to create a word-counting command line
tool very similar to &lt;a href=&quot;http://en.wikipedia.org/wiki/Wc_%28Unix%29&quot;&gt;wc&lt;/a&gt;. He
promised to pay me $200 for this work, and I promised him I&amp;#39;d deliver the
product in two increments &amp;mdash; an alpha and beta version. I promised him
I&amp;#39;d release the alpha version on Saturday and the beta version on Sunday. He is
going to pay me $100 after the first release and the rest after the second release.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll write in C, and he will pay in cash.&lt;/p&gt;

&lt;p&gt;The tool is very primitive, and it only took me a few minutes to write. Take a look at it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STDIN_FILENO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But let&amp;#39;s be professional and not forget about build automation and unit
testing. Here is a simple &lt;code&gt;Makefile&lt;/code&gt; that does them both:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-makefile&quot; data-lang=&quot;makefile&quot;&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wc&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  gcc -o wc wc.c
&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wc&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ./wc &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, world! How are you?&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ./wc &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I run &lt;code&gt;make&lt;/code&gt; from a command line and get this output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ make
echo &amp;#39;&amp;#39; | ./wc | grep &amp;#39;0&amp;#39;
0
echo &amp;#39;Hello, world! How are you?&amp;#39; | ./wc | grep &amp;#39;5&amp;#39;
5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All clean!&lt;/p&gt;

&lt;p&gt;I&amp;#39;m ready to get my $200. Wait, the deal was to deliver two
versions and get cash in two installments. Let&amp;#39;s back up a little and
think &amp;mdash; how can we break this small tool into two parts?&lt;/p&gt;

&lt;p&gt;On first thought, let&amp;#39;s release the tool itself first and
build automation and testing next. Is that a good idea? Can we
deliver any software without running it first with a test? How can I be
sure that it works if I don&amp;#39;t ship tests together with it? What will my friend
think about me releasing anything without tests? This would be
a total embarassment.&lt;/p&gt;

&lt;p&gt;Okay, let&amp;#39;s release &lt;code&gt;Makefile&lt;/code&gt; first and &lt;code&gt;wc.c&lt;/code&gt; next. But what will my
friend do with a couple of tests and no product in hand? This first
release will be absolutely pointless, and I won&amp;#39;t get my $100.&lt;/p&gt;

&lt;p&gt;Now we&amp;#39;re getting to the point of this article. What I&amp;#39;m trying to say
is that every new increment must add some value to the product as it
is perceived by the customer, not by us programmers. The &lt;code&gt;Makefile&lt;/code&gt; is
definitely a valuable artifact, but it provides no value to my friend.
He doesn&amp;#39;t need it, but I need it.&lt;/p&gt;

&lt;p&gt;Here is what I&amp;#39;m going to do. I&amp;#39;ll release a skeleton of the tool, backed
by the tests but with an absolutely dummy implementation. Look at it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;5&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And I will modify the &lt;code&gt;Makefile&lt;/code&gt; accordingly. I will disable the first test
to make sure the build passes.&lt;/p&gt;

&lt;p&gt;Does my tool work? Yes, it does. Does it count words? Yes, it does for
some inputs. Does it have value to my friend. Obviously! He
can run it from the command line, and he can pass a file as an input. He will
always get number &amp;quot;5&amp;quot; as a result of counting, though. That&amp;#39;s a bummer, but it&amp;#39;s
an alpha version. He doesn&amp;#39;t expect it to work perfectly.&lt;/p&gt;

&lt;p&gt;However, it works, it is backed by tests, and it is properly packaged.&lt;/p&gt;

&lt;p&gt;What I just did is a top-down approach to design. First of all, I created
something that provides value to my customer. I made sure it also satisfies
my technical objectives, like proper unit test coverage and build automation.
But the most important goal for me was to make sure my friend received
something ... and paid me.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/12/top-down-design.html</guid>
      <dc:date>2015-02-12T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Four NOs of a Serious Code Reviewer</title>
      <link>http://www.yegor256.com/2015/02/09/serious-code-reviewer.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Code_review&quot;&gt;Code reviews&lt;/a&gt;
(a.k.a. peer reviews) must be a mandatory practice for every
serious software development team. I hope there is no debate about this. Some
do pre-merge code reviews, protecting their master/development branch from
accidental mistakes. Others do post-merge
&lt;a href=&quot;/2014/12/18/independent-technical-reviews.html&quot;&gt;regular reviews&lt;/a&gt;
to discover bugs and inconsistencies after they are introduced by their
authors. Some even do both, reviewing before merges and regularly after. Code reviews
are very similar to a &lt;a href=&quot;http://en.wikipedia.org/wiki/White-box_testing&quot;&gt;white-box testing&lt;/a&gt;
technique where a tester looks for defects with full access to the sources of the software.
In either case, a code review is a great instrument to increase quality and
boost team motivation.&lt;/p&gt;

&lt;p&gt;However, it&amp;#39;s not so simple to do them right. I would even say it&amp;#39;s
very easy and comfortable to do them wrong. Most code reviews
and reviewers I&amp;#39;ve seen make similar mistakes. That&amp;#39;s why I decided
to summarize the four basic principles of a good reviewer as I see them.
Hopefully you find them helpful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/02/kim-jong-un-doing-code-review.png' style='width:600px;' alt='Kim Jong-un with colleagues (2014)'/&gt;&lt;figcaption&gt;Kim Jong-un with colleagues (2014)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;no-fear&quot;&gt;No Fear&lt;/h2&gt;

&lt;p&gt;There are a few different fears a serious code reviewer should renounce.
The first and most popular is the fear of offending an author of the code.
&amp;quot;&lt;em&gt;I&amp;#39;d better close my eyes and pretend I didn&amp;#39;t see her bugs today so tomorrow she will ignore my mistakes&lt;/em&gt;&amp;quot; &amp;mdash;
This is the kind of attitude this fear produces. Needless to say, it&amp;#39;s
counterproductive and degrades code quality and team morale. Here is my advice:
be direct, honest, and straight-forward. If you don&amp;#39;t like the code, you don&amp;#39;t like it.
You shouldn&amp;#39;t care how your opinion will be taken by the author of the code.&lt;/p&gt;

&lt;p&gt;If you do have such feelings toward your colleagues, there is something
wrong with the management model. You&amp;#39;re afraid of being rejected by the
team for &amp;quot;not being a team player&amp;quot;, which is a label attached to you by
the weakest members of the team, not by the project sponsor. The sponsor
pays you to produce high-quality software. The sponsor doesn&amp;#39;t care how much your
intention to increase quality offends others, who care less. The sponsor
wants his money to produce deliverables that can be sold to customers and
returned back in profit. The sponsor is not paying you to make friends in
the office.&lt;/p&gt;

&lt;p&gt;The next type of fear sounds like this: &amp;quot;&lt;em&gt;If I reject this code, I will delay the release&lt;/em&gt;&amp;quot;
Again, it goes without saying that such an attitude does a significant disservice to the entire project.
You will accept the code and close your eyes to what you don&amp;#39;t like
in it. The code will go into the next release, and we&amp;#39;ll ship it sooner.
You won&amp;#39;t be a bottleneck, and nobody will say that because of that
dogmatic code reviewer, we delayed the release and lost some cash. You will
be a good team player, right? Wrong!&lt;/p&gt;

&lt;p&gt;As I&amp;#39;ve &lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;mentioned before&lt;/a&gt;, a professional
team player understands his or her personal role in a project and doesn&amp;#39;t cover
anyone&amp;#39;s ass. If the rejection of bad code delays the release, that&amp;#39;s
the fault of its author. Your professional responsibility is to make this fault visible.
That&amp;#39;s how you help the team learn and improve.&lt;/p&gt;

&lt;p&gt;I think it&amp;#39;s obvious that the education and improvement of a team first requires
getting rid of bad programmers and promoting good ones. Honest and fearless
code reviewers help the team learn and improve.&lt;/p&gt;

&lt;p&gt;Yet another fear is expressed like this: &amp;quot;&lt;em&gt;I may be wrong and they will laugh me out&lt;/em&gt;&amp;quot;
Even worse, they may spot my lack of knowledge. They may
see that I don&amp;#39;t know what I&amp;#39;m doing. It would be better to stay quiet and pretend
there are no bugs in the code. At least then I wouldn&amp;#39;t embarass myself
with stupid comments. You know that it&amp;#39;s much easier to look smart if you keep
your mouth shut, right? Wrong!&lt;/p&gt;

&lt;p&gt;The project is not paying you to look good. You&amp;#39;re getting your paychecks
not because the team loves you but because you produce deliverables on
a daily basis. Your professional responsibility is to do what&amp;#39;s best
for the project and ignore everyone&amp;#39;s opinions, including the opinion of your
boss. Similar to &lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;&amp;quot;A Happy Boss Is a False Objective&amp;quot;&lt;/a&gt;,
I would say that the respect of the team is a false goal. Don&amp;#39;t try to earn respect.
Instead, create clean code and respect will come automatically.&lt;/p&gt;

&lt;p&gt;Let me reiterate: Don&amp;#39;t be afraid to embarass yourself by making incorrect and stupid comments
about someone&amp;#39;s code. Be loyal to the project, not to the expectations of
people around you. They expect you to be smart and bright, but the project
expects you to say what you think about the code. So screw their opinions;
do the right thing and say what you really think.&lt;/p&gt;

&lt;h2 id=&quot;no-compromise&quot;&gt;No Compromise&lt;/h2&gt;

&lt;p&gt;Okay, you&amp;#39;ve fearlessly said what you thought about the code and simply rejected it.
The branch you were reviewing is not good, and you explained why. You asked
its author to refactor here and re-write there. What&amp;#39;s next?&lt;/p&gt;

&lt;p&gt;He or she will try to make a deal with you. It&amp;#39;s natural and it&amp;#39;s
happening in almost every branch I&amp;#39;m seeing in our teams. The author of the
code is also a professional developer, and he also has no fear. So he insists
that his implementation approach is right and your ideas are wrong. What
should a professional code reviewer do in this case?&lt;/p&gt;

&lt;p&gt;The worst thing (as in any conflict resolution) is a compromise. This is what
ruins quality faster than bad code. A compromise
is a conflict resolution technique for which both parties agree not to get
what they wanted just for the sake of ceasing the conflict. In other words,
&amp;quot;&lt;em&gt;Let&amp;#39;s make peace just to stop fighting&lt;/em&gt;&amp;quot; It&amp;#39;s the worst approach ever.&lt;/p&gt;

&lt;p&gt;Instead of a lousy compromise, there are three professional exits from a fight
over a piece of code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;&lt;em&gt;You&amp;#39;re right; I take my comments back!&lt;/em&gt;&amp;quot; This may happen, and it should
happen very often. You should be ready to admit your mistakes. You didn&amp;#39;t like
the code, but its author explained to you its benefits, and you accepted
the logic &amp;mdash; not because you want to stop fighting with him but because
you really understood the logic and accepted it. Willingness to say, &amp;quot;I&amp;#39;m wrong&amp;quot;,
is the first sign of a mature and serious developer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;&lt;em&gt;I will never accept this, period!&lt;/em&gt;&amp;quot; Some code deserves that, and there
is nothing wrong with resolving a conflict this way. The opponent may accept
the situation and re-write everything. And learn something too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;&lt;em&gt;Let&amp;#39;s do what the architect says!&lt;/em&gt;&amp;quot; In every project, there is
a &lt;a href=&quot;/&quot;&gt;software architect&lt;/a&gt;
who makes final decisions. Appeal to his opinion and get his final decision.
Invite him into the discussion, and ask him to take one side in the conflict. Once
he tells you that you&amp;#39;re wrong, accept the decision and try to learn from it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, either stand strong on your position and fight for it or admit that you&amp;#39;re
wrong. One way or the other. But don&amp;#39;t make a compromise!&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t get me wrong; it&amp;#39;s not about being stubborn and holding your cards
no matter how bad they are. Be flexible and learn on the spot. Your position
may and should change during the negotiation, but don&amp;#39;t accept anything that
you don&amp;#39;t like. You can exit the conflict either by being fully convinced that the
opponent is right or when the architect says so. Nothing in between.&lt;/p&gt;

&lt;h2 id=&quot;no-bullshit&quot;&gt;No Bullshit&lt;/h2&gt;

&lt;p&gt;Again, you fearlessly said that a method should be designed differently.
Your opponent, the author of the code, replies that he doesn&amp;#39;t think so.
You take a look again and decide to stand behind your position. You still think
you&amp;#39;re right, and you&amp;#39;re not going to make a compromise. Now what?
It&amp;#39;s too early to call an architect, so try to convince your opponent.&lt;/p&gt;

&lt;p&gt;In most cases, convincing is teaching. You know something that he doesn&amp;#39;t know.
That&amp;#39;s why he created that method the way you don&amp;#39;t like. One of you needs
some additional education. Here is an opportunity for you to be a teacher
of your colleague. To be an effective teacher, you need to show proof. You
need to ground your logic and make sure he understands and accepts it.&lt;/p&gt;

&lt;p&gt;Be ready to show links, articles, books, reports, examples, etc. Just
&amp;quot;&lt;em&gt;I know this because I&amp;#39;ve been writing Java for 15 years&lt;/em&gt;&amp;quot; is not enough. Moreover,
this type of argument only makes you less convincing.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t have enough convincing proof, think again &amp;mdash; maybe you are wrong.&lt;/p&gt;

&lt;p&gt;Also, remember that it&amp;#39;s your job to prove that the code you&amp;#39;re reviewing
is bad. The author of the code should not prove anything. His code is great
by default. The job of the reviewer is to show why and how that&amp;#39;s actually not the case.
In other words, you&amp;#39;re the plaintiff and he is the defender. Not the other way around.&lt;/p&gt;

&lt;h2 id=&quot;no-offense&quot;&gt;No Offense&lt;/h2&gt;

&lt;p&gt;This is the last and most difficult principle to follow. No matter how bad the
code is and how stubborn your opponent is, you must remain professional. To be honest,
I find this very difficult sometimes. At &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;,
we&amp;#39;re working in distributed teams and hire a few new people every week. Some
of them, despite our &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;screening criteria&lt;/a&gt;,
appear to be rather &lt;span class=&quot;strike&quot;&gt;stupid&lt;/span&gt; difficult to deal with.&lt;/p&gt;

&lt;p&gt;I encountered a funny situation about a year ago when a new guy was supposed to
create a small (20 to 30 lines of code) new feature in an existing Java library. He sent me a pull
request (I was a code reviewer) after he put in a few hundred lines of code.
That code was absolute garbage and obviously not written by him. I immediately
understood that he found it somewhere and copied it. But what could I do?
How could I reject it without saying his attitude was unacceptable
for a professional developer? I had to spend some time objectively blaming
his code for its style, its design, etc. I had to make many serious
comments in order to show him that to fix it all, he should
delete the garbage and re-write it from scratch. I never saw him again
after that task.&lt;/p&gt;

&lt;p&gt;My point is that it&amp;#39;s easy to be professional when you&amp;#39;re dealing with
professionals. Unfortunately, that&amp;#39;s not always the case. But no matter how
bad the code in front of you is, be patient and convincing.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/09/serious-code-reviewer.html</guid>
      <dc:date>2015-02-09T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Don't Repeat Yourself in Maven POMs; Use Jcabi-Parent</title>
      <link>http://www.yegor256.com/2015/02/05/jcabi-parent-maven-pom.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Maven is a build automation tool mostly for Java projects. It&amp;#39;s a great
tool, but it has one important drawback that has motivated the creation
of similar tools, like Gradle and SBT. That weakness is its verbosity of configuration.
Maven gets all project build parameters from &lt;code&gt;pom.xml&lt;/code&gt;, an XML
file that can get very long. I&amp;#39;ve seen POM files of 3,000-plus lines.
Taking into account 1) recent DSL buzz and 2) fear of XML, it&amp;#39;s
only logical that many people don&amp;#39;t like Maven because of its &lt;code&gt;pom.xml&lt;/code&gt; verbosity.&lt;/p&gt;

&lt;p&gt;But even if you&amp;#39;re an XML fan who enjoys its strictness and elegance
(like myself), you won&amp;#39;t like the necessity to repeat yourself in &lt;code&gt;pom.xml&lt;/code&gt;
for every project. If you&amp;#39;re working on multiple projects, code duplication
will be enormous. An average Java web app uses a few dozen standard Maven plugins
and almost the same number of pretty common dependencies, like
JUnit, Apache Commons, Log4J, Mockito, etc. All of them have their versions
and configurations, which have to be specified if you want to keep
the project stable and avoid Maven warnings. Thus, once a new version
of a plugin is released, you have to go through all &lt;code&gt;pom.xml&lt;/code&gt; files in
the projects you&amp;#39;re working on and update it there. You obviously understand
what code duplication means. It&amp;#39;s a disaster. However, there is a solution.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;http://parent.jcabi.com&quot;&gt;jcabi-parent&lt;/a&gt; is a very simple Maven dependency
with nothing inside it except a large &lt;code&gt;pom.xml&lt;/code&gt; with multiple pre-configured
dependencies, profiles, and plugins. All you need to do in order to reuse them
all in your project is define &lt;code&gt;com.jcabi:parent&lt;/code&gt; as your parent POM:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.jcabi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- check the latest version at http://parent.jcabi.com --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.32.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#39;s all you need. Now you can remove most of your custom configurations
from &lt;code&gt;pom.xml&lt;/code&gt; and rely on defaults provided by jcabi-parent. Its
&lt;a href=&quot;https://github.com/jcabi/jcabi-parent/blob/master/pom.xml&quot;&gt;&lt;code&gt;pom.xml&lt;/code&gt;&lt;/a&gt;
is rather large and properly configured. Multiple projects depend on it, so you
can be confident that you&amp;#39;re using the best possible configuration of
all standard plugins.&lt;/p&gt;

&lt;p&gt;Here are a few examples of &lt;code&gt;pom.xml&lt;/code&gt; from projects that are using
jcabi-parent (you can see how compact they are):
&lt;a href=&quot;https://github.com/yegor256/xembly/blob/master/pom.xml&quot;&gt;Xembly&lt;/a&gt;
&lt;a href=&quot;https://github.com/yegor256/rexsl/blob/master/pom.xml&quot;&gt;ReXSL&lt;/a&gt;
&lt;a href=&quot;https://github.com/jcabi/jcabi-http/blob/master/pom.xml&quot;&gt;jcabi-http&lt;/a&gt;
&lt;a href=&quot;https://github.com/teamed/qulice/blob/master/pom.xml&quot;&gt;Qulice&lt;/a&gt;&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/05/jcabi-parent-maven-pom.html</guid>
      <dc:date>2015-02-05T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>XSL Transformation in Java: An Easy Way</title>
      <link>http://www.yegor256.com/2015/02/02/xsl-transformations-in-java.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/xslt20/&quot;&gt;XSL transformation&lt;/a&gt;
(XSLT) is a powerful mechanism for converting one
XML document into another. However, in Java, XML manipulations
are rather verbose and complex. Even for a simple XSL transformation,
you have to write a few dozen lines of code &amp;mdash; and maybe even more
than that if proper exception handling and logging is needed.
&lt;a href=&quot;http://xml.jcabi.com&quot;&gt;jcabi-xml&lt;/a&gt; is
a small open source library that makes life much easier by enabling
XML parsing and XPath traversing with
&lt;a href=&quot;/2014/04/24/java-xml-parsing-and-traversing.html&quot;&gt;a few simple methods&lt;/a&gt;. Let&amp;#39;s
see how this library helps in XSL transformations.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, take a look at a practical example &amp;mdash; &lt;a href=&quot;http://www.rultor.com&quot;&gt;rultor.com&lt;/a&gt; &amp;mdash;
a hosted DevOps assistant that
&lt;a href=&quot;/&quot;&gt;automates&lt;/a&gt;
release, merge, and deploy operations. Rultor keeps each conversation session with an end user (a.k.a. &amp;quot;talk&amp;quot;)
in a DynamoDB record. There are multiple situations to handle
in each talk; that&amp;#39;s why using multiple columns of a record is not
really feasible. Instead, we&amp;#39;re keeping only a few parameters of each talk
in record columns (like ID and name) and putting all the rest in a single
XML column.&lt;/p&gt;

&lt;p&gt;This is approximately how our DynamoDB table looks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;+----+---------------+--------------------------------------+
| id | name          | xml                                  |
+----+---------------+--------------------------------------+
| 12 | jcabi-xml#54  | &amp;lt;?xml version=&amp;#39;1.0&amp;#39;?&amp;gt;                |
|    |               | &amp;lt;talk public=&amp;quot;true&amp;quot;&amp;gt;                 |
|    |               |   &amp;lt;request id=&amp;quot;e5f4b3&amp;quot;&amp;gt;...&amp;lt;/request&amp;gt; |
|    |               | &amp;lt;/talk&amp;gt;                              |
+----+---------------+--------------------------------------+
| 13 | jcabi-email#2 | &amp;lt;?xml version=&amp;#39;1.0&amp;#39;?&amp;gt;                |
|    |               | &amp;lt;talk public=&amp;quot;true&amp;quot;&amp;gt;                 |
|    |               |   &amp;lt;daemon id=&amp;quot;f787fe&amp;quot;&amp;gt;...&amp;lt;/daemon&amp;gt;   |
|    |               | &amp;lt;/talk&amp;gt;                              |
+----+---------------+--------------------------------------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once a user posts &lt;code&gt;@rultor status&lt;/code&gt; into a Github ticket, Rultor
has to answer with a full status report about the current talk. In order
to create such a text answer (a regular user would not appreciate an XML response),
we have to fetch that &lt;code&gt;xml&lt;/code&gt; column from the necessary DynamoDB record and convert
it to plain English text.&lt;/p&gt;

&lt;p&gt;Here is how we&amp;#39;re doing that with the help of &lt;a href=&quot;http://xml.jcabi.com&quot;&gt;jcabi-xml&lt;/a&gt; and its
class, &lt;a href=&quot;http://xml.jcabi.com/apidocs-0.15/com/jcabi/xml/XSLDocument.html&quot;&gt;&lt;code&gt;XSLDocument&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// comes from DynamoDB&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XSL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xsl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XSLDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;status.xsl&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#39;s it. Now let&amp;#39;s see what&amp;#39;s there in that &lt;code&gt;status.xsl&lt;/code&gt; file
(this is just a skeleton of it; the full version is &lt;a href=&quot;https://github.com/yegor256/rultor/blob/1.48/src/main/resources/com/rultor/agents/github/qtn/status.xsl&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/talk&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;Hi, here is your status report:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;node()|@*&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:copy&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;node()|@*&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:copy&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is good practice to create XSL documents only once per application
run. We have a static utility method &lt;a href=&quot;http://xml.jcabi.com/apidocs-0.15/com/jcabi/xml/XSLDocument.html#make%28java.io.InputStream%29&quot;&gt;&lt;code&gt;XSLDocument.make()&lt;/code&gt;&lt;/a&gt; for this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XSL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STYLESHEET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XSLDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet.xsl&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XML&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XML&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STYLESHEET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pay attention to the fact we&amp;#39;re using XSLT 2.0. Built-in Java implementation of XSLT
doesn&amp;#39;t support version 2.0, and in order to make it work, we&amp;#39;re using
these two Maven Saxon dependencies:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.sourceforge.saxon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;saxon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;9.1.0.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.sourceforge.saxon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;saxon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;9.1.0.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;classifier&amp;gt;&lt;/span&gt;xpath&lt;span class=&quot;nt&quot;&gt;&amp;lt;/classifier&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All you need to do to start using &lt;code&gt;jcabi-xml&lt;/code&gt; for XSL transformations is
add this dependency to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.jcabi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jcabi-xml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you have any problems or suggestions, don&amp;#39;t hesitate to submit an issue
to the Github &lt;a href=&quot;https://github.com/jcabi/jcabi-xml/issues&quot;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/02/02/xsl-transformations-in-java.html</guid>
      <dc:date>2015-02-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Making Your Boss Happy Is a False Objective</title>
      <link>http://www.yegor256.com/2015/01/26/happy-boss-false-objective.html</link>
      <description>&lt;p&gt;We all have bosses. We also have customers who pay us for running
their software projects. They are my bosses for the time of the contract. I&amp;#39;m also
acting as a boss for developers who are working for &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;.
It is obvious that a good employee/contractor is one who makes his
boss/customer happy. But only a bad employee works toward
this goal. Trying to make your boss happy is a false target that,
if pursued, ruins the project. A professional employee works
for the project, not for the boss.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/the-million-dollar-hotel.png' style='width:600px;' alt='The Million Dollar Hotel (2000) by Wim Wenders'/&gt;&lt;figcaption&gt;The Million Dollar Hotel (2000) by Wim Wenders&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;We all work on &lt;strong&gt;projects&lt;/strong&gt; as developers, designers, programmers, managers,
testers, you name it. The boss is also a member of the project. More
formally, he or she is a &lt;strong&gt;stakeholder&lt;/strong&gt;, same as every one of us. Each stakeholder
has his own &lt;strong&gt;needs&lt;/strong&gt; for the project: 1) Jeff, the developer, wants to learn Scala
and collect his paychecks every two weeks; 2) Sally, the product owner,
wants to attend an expo in Paris and also collect her paychecks;
3) Bob, the CTO, wants to raise round A funding and collect a big paycheck; etc.&lt;/p&gt;

&lt;p&gt;The project has its own &lt;strong&gt;objectives&lt;/strong&gt;, to achieve 1 million downloads
in less than six months and under $300,000, for example.
This is what the project works for. This is what all of us are here for.&lt;/p&gt;

&lt;p&gt;Our personal needs may be fully satisfied
while we&amp;#39;re all working toward this goal, or some of them may
be sacrificed. I mean all of us, including the boss, whoever he or she is,
either a CTO, a co-founder, a project manager, or a team lead.&lt;/p&gt;

&lt;p&gt;The project is the source of our checks. Not the CFO.&lt;/p&gt;

&lt;p&gt;The CFO is a stakeholder, like everyone else. The project gives him more
power than others because it&amp;#39;s necessary for the whole mechanism to
work properly. Every project member has his or her own &lt;strong&gt;roles and responsibilities&lt;/strong&gt;.
I write code; the CFO writes checks. I eat at McDonalds; he drives
a Jaguar. We have different needs, and we both agreed that the project
would satisfy them. Otherwise we wouldn&amp;#39;t be here, right?&lt;/p&gt;

&lt;p&gt;We&amp;#39;re all parts of a mechanism called a &amp;quot;project&amp;quot;, which works according
to the rules and principles of &lt;strong&gt;project management&lt;/strong&gt; whether we are aware of
them or not. Whether we have a project manager or not. Even if we violate
all of them and manage ourselves in total chaos, we still have a scope,
cost, schedule, and all other attributes of project management.&lt;/p&gt;

&lt;p&gt;A professional and savvy boss understands that his role in the mechanism
is to clearly define project objectives and make sure everybody&amp;#39;s needs are
aligned with those objectives. In a properly managed and organized project,
everybody sees and feels how his or her personal needs are satisfied
when the project achieves its objectives: Jeff learns Scala, Sally
sees Paris, and Bob buys a new house.&lt;/p&gt;

&lt;p&gt;However, if Jeff wants to learn Scala and we&amp;#39;re
developing an iOS application, that is a problem for the boss to resolve.
Either convince Jeff to fall in love with Swift (I doubt that&amp;#39;s possible)
or replace him with someone who is already in love with it. It&amp;#39;s clear that
a professional boss will resort to such a tragic act as firing Jeff
not because of his personal feelings towards Jeff but because
they are both working toward the project objectives. Jeff and the boss
will both understand that Jeff&amp;#39;s need to learn Scala is not aligned
with the objective of the project.&lt;/p&gt;

&lt;p&gt;It is the CTO&amp;#39;s responsibility to do something about Jeff when his personal
needs become misaligned with the objectives of the project that is paying
his salary. A professional CEO understands that and
always acts in the best interest of the project, not of himself or
anyone else personally.&lt;/p&gt;

&lt;p&gt;I believe a professional team player does two things:
&lt;strong&gt;obeys and resists&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, you have to understand that the boss is here in order
to help you organize your time, your tasks, your communications,
your plans, etc. He knows more about the project and uses that
information to help you do your job. Your real boss is the project;
the boss you interact with is just a hired manager who translates
project objectives into plans, instructions, schedules, etc.&lt;/p&gt;

&lt;p&gt;This boss is your colleague who does management while you&amp;#39;re
writing code. You&amp;#39;re both equal. You and he are in the same boat. Your
functions are different than his; that&amp;#39;s all. You&amp;#39;re not working
&lt;em&gt;for&lt;/em&gt; him but &lt;em&gt;with&lt;/em&gt; him on a project. A true professional team player
feels himself equal to all other members of the project, no matter
how high they are in the hierarchy.&lt;/p&gt;

&lt;p&gt;At the same time, he strictly follows the process and
obeys all project rules and instructions, not because he is afraid of
being fired but because he wants the project to succeed.&lt;/p&gt;

&lt;p&gt;Second, being a professional team player requires a constant readiness
to resist each and every instruction if you feel it contradicts
the project objectives. A true professional doesn&amp;#39;t work for a boss.
He doesn&amp;#39;t want to make the boss happy. He actually doesn&amp;#39;t care whether the
boss is happy or not. He knows that the real boss is the project and tries
to make the project successful and ... happy.&lt;/p&gt;

&lt;p&gt;A true professional always works for himself. Jeff wants to learn Scala
and earn a certain amount of cash. He joined the project in order to satisfy these
needs. If the project fails, Jeff won&amp;#39;t get the money and won&amp;#39;t fully learn Scala.
So if the boss tells Jeff to do something that may jeopardize the
project&amp;#39;s success, will Jeff do it? Does he care about disappointing the boss?
Absolutely not. All he cares about is the project&amp;#39;s success, which translates to his
personal success.&lt;/p&gt;

&lt;p&gt;Thus, making your boss happy is a goal for the immature, fearsome, lazy, and weak.
Making your project successful is an objective for professional,
strong, mature, and brave team players.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/26/happy-boss-false-objective.html</guid>
      <dc:date>2015-01-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>If. Then. Throw. Else. WTF?</title>
      <link>http://www.yegor256.com/2015/01/21/if-then-throw-else.html</link>
      <description>&lt;p&gt;This is the code I could never understand:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X can&amp;#39;t be negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is positive or zero&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have been trying to find a proper metaphor to explain its incorrectness.
Today I finally found it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;If-then-else is a forking mechanism of procedural programming. The CPU
either goes to the left and &lt;strong&gt;then&lt;/strong&gt; does something or goes to the right and
does something &lt;strong&gt;else&lt;/strong&gt;. Imagine yourself driving a car and seeing this sign:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/if-then-throw-1.png' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;It looks logical, doesn&amp;#39;t it? You can go in the left lane if you&amp;#39;re not driving a truck.
Otherwise you should go in the right lane. Both lanes meet up
in a while. No matter which one you choose, you will end up on the same road.
This is what this code block does:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is positive or zero&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, try to imagine this sign:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/if-then-throw-2.png' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;It looks very strange to me, and you will never see this sign anywhere
simply because a dead end means an &lt;em&gt;end&lt;/em&gt;, a full stop, a finish.
What is the point of drawing a lane
after the dead end sign? There is no point.&lt;/p&gt;

&lt;p&gt;This is how a proper sign would look:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/if-then-throw-3.png' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;This is how a proper code block would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X can&amp;#39;t be negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is positive or zero&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The same is true for loops. This is wrong:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;found positive number&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this is right:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;found positive number&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is no road after the dead end! If you draw it, your code looks
like this very funny snippet I found a few years ago reviewing
sources written by some very well-paid developer in one very serious
company:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don&amp;#39;t do this.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/21/if-then-throw-else.html</guid>
      <dc:date>2015-01-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Cut Corners and Stay Cool</title>
      <link>http://www.yegor256.com/2015/01/15/how-to-cut-corners.html</link>
      <description>&lt;p&gt;You have a task assigned to you, and you don&amp;#39;t like it. You are simply
not in the mood. You don&amp;#39;t know how to fix that damn bug. You have no idea
how that bloody module was designed, and you don&amp;#39;t know how it works. But
you have to fix the issue, which was reported by someone who has no clue how
this software works. You get frustrated and blame that stupid project manager and
programmers who were fired two years ago. You spend hours just to find out
how the code works. Then even more hours trying to fix it. In the end,
you miss the deadline and &lt;strong&gt;everybody blames you&lt;/strong&gt;. Been there, done that?&lt;/p&gt;

&lt;p&gt;There is, however, an alternative approach that provides a professional exit
from this situation. Here are some tips I recommend to my peers who code with me
in &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt; projects.
In a nutshell, I&amp;#39;m going to explain how you can &lt;strong&gt;cut corners&lt;/strong&gt; and remain
professional, 1) protecting your nerves, 2) optimizing your project&amp;#39;s expenses,
and 3) increasing the quality of the source code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is a list of options you have, in order of preference. I would
recommend you start with the first one on the list and proceed down when you
have to.&lt;/p&gt;

&lt;h2 id=&quot;create-dependencies,-blame-them,-and-wait&quot;&gt;Create Dependencies, Blame Them, and Wait&lt;/h2&gt;

&lt;p&gt;This is the first and most preferable option. If you can&amp;#39;t figure out
how to fix an issue or how to implement a new feature, it&amp;#39;s a fault
of the project, not you. Even if you can&amp;#39;t figure it out because you
don&amp;#39;t know anything about Ruby and they hired you to fix bugs
in a Ruby on Rails code base &amp;mdash; it&amp;#39;s their fault. Why did they hire
you when you know nothing about Ruby?&lt;/p&gt;

&lt;p&gt;So be positive; don&amp;#39;t blame yourself. If you don&amp;#39;t know how this
damn code works, it&amp;#39;s a fault of the code, not you. Good code is
easy to understand and maintain.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-1.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Don&amp;#39;t try to eat spaghetti code; complain to the chef and ask
him or her to cook something better (BTW, I love spaghetti).&lt;/p&gt;

&lt;p&gt;How can you do that? Create dependencies &amp;mdash; new bugs complaining
about unclear design, lack of unit tests, absence of necessary classes, or
whatever. Be creative and offensive &amp;mdash; in a constructive and professional way,
of course. Don&amp;#39;t get personal. No matter who cooked that spaghetti, you have
nothing against him or her personally. You just want another dish, that&amp;#39;s all.&lt;/p&gt;

&lt;p&gt;Once you have those dependencies reported, explain in the main ticket
that you can&amp;#39;t continue until all of them are resolved. You will
legally stop working, and someone else will improve the code you need. Later,
when all dependencies are resolved and the code looks better, try to
get back to it again. If you still see issues, create new dependencies.
Keep doing this until the code in front of you is clean and easy to fix.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t be a hero &amp;mdash; don&amp;#39;t rush into fixing the bad code you inherited. Think
&lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;like a developer, not a hacker&lt;/a&gt;.
Remember that your first and most important responsibility as
a disciplined engineer is to help the project &lt;strong&gt;reveal&lt;/strong&gt; maintainability issues.
Who will fix them and how is the responsibility of a project manager.
Your job is to reveal, not to hide. By being a hero and trying to fix everything
in the scope of a single task, you&amp;#39;re not doing the project a favor
&amp;mdash; you&amp;#39;re concealing the problem(s).&lt;/p&gt;

&lt;p&gt;Edit: Another good example of a dependency may be a question raised
at, for example, StackOverflow.com or a user list of a third-party library.
If you can&amp;#39;t find a solution yourself and the problem is outside of the scope
of your project &amp;mdash; submit a question to SO and put its link to the
source code (in JavaDoc block, for example).&lt;/p&gt;

&lt;h2 id=&quot;demand-better-documentation-and-wait&quot;&gt;Demand Better Documentation and Wait&lt;/h2&gt;

&lt;p&gt;All dependencies are resolved and the code looks clean, but you still
don&amp;#39;t understand how to fix the problem or implement a new feature. It&amp;#39;s
too complex. Or maybe you just don&amp;#39;t know how this library works. Or you&amp;#39;ve
never done anything like that before. Anyhow, you can&amp;#39;t continue because
you don&amp;#39;t understand. And in order to understand, you will need a lot of time &amp;mdash;
much more than you have from your project manager or your Scrum board. What
do you do?&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-2.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Again, think positively and don&amp;#39;t blame yourself. If the software is not
clear enough for a total stranger, it&amp;#39;s &amp;quot;their&amp;quot; fault, not yours. They created
the software in a way that&amp;#39;s difficult to digest and modify. But the code is
clean; it&amp;#39;s not spaghetti anymore. It&amp;#39;s a perfectly cooked lobster, but
you don&amp;#39;t know how to eat lobster! You&amp;#39;ve never ate it before.&lt;/p&gt;

&lt;p&gt;The chef did a good job; he cooked it well, but the restaraunt didn&amp;#39;t give
you any instructions on how to eat such a sophisticated dish. What do you do?&lt;/p&gt;

&lt;p&gt;You ask for a manual. You ask for documentation. Properly designed
and written source code must be properly documented. Once you see that
something is not clear for you, create new dependencies that ask for better
documentation of certain aspects of the code.&lt;/p&gt;

&lt;p&gt;Again, don&amp;#39;t be a hero and try to understand everything yourself. Of course
you&amp;#39;re a smart guy, but the project doesn&amp;#39;t need a single smart guy. The
project needs maintainable code that is easy to modify, even by someone
who is not as smart as yourself. So do your project a favor: reveal the
documentation issue, and ask someone to fix it for you. Not just for you,
for everybody. The entire team will benefit from such a request.
Once the documentation is fixed, you will continue with your
task, and everybody will get source code that is a bit better than it
was before. Win-win, isn&amp;#39;t it?&lt;/p&gt;

&lt;h2 id=&quot;reproduce-the-bug-and-call-it-a-day&quot;&gt;Reproduce the Bug and Call It a Day&lt;/h2&gt;

&lt;p&gt;Now the code is clean, the documentation is good enough,
but you&amp;#39;re stuck anyway. What to do?
Well, I&amp;#39;m a big fan of test-driven development, so my next suggestion would be
to create a test that reproduces the bug. Basically, this is what you should start
every ticket with, be it a bug or a feature. Catch the bug with a unit test!
Prove that the bug exists by failing the build with a new test.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=7SI6P3M636MLCO5E'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/working-effectively-with-legacy-code.png' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;This may be rather difficult to achieve, especially when the software you&amp;#39;re
trying to fix or modify was written by &lt;span class=&quot;strike&quot;&gt;idiots&lt;/span&gt;
someone who had no idea about unit testing. There are plenty of techniques
that may help you find a way to make such software more testable. I would
highly recommend you read
&lt;a href=&quot;http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=7SI6P3M636MLCO5E&quot;&gt;Working Effectively with Legacy Code&lt;/a&gt;
by Michael Feathers. There are many different patterns, and most of them work.&lt;/p&gt;

&lt;p&gt;Once you manage to reproduce the bug and the build fails, stop right there.
That&amp;#39;s more than enough for a single piece of work. Skip the test
(for example, using &lt;code&gt;@Ignore&lt;/code&gt; annotation in JUnit 4) and commit your changes.
Then add documentation to the unit test you just created, preferably in the
form of a &lt;code&gt;@todo&lt;/code&gt;. Explain there that you managed to reproduce the problem
but didn&amp;#39;t have enough time to fix it. Or maybe you just don&amp;#39;t know how to
fix it. Be honest and give all possible details.&lt;/p&gt;

&lt;p&gt;I believe that catching a bug with a unit test is, in most cases, more than 80% of success.
The rest is way more simple: just fix the code and make the test pass. Leave
this job to someone else.&lt;/p&gt;

&lt;h2 id=&quot;prove-a-bug&amp;#39;s-absence&quot;&gt;Prove a Bug&amp;#39;s Absence&lt;/h2&gt;

&lt;p&gt;Very often you simply can&amp;#39;t reproduce a bug. That&amp;#39;s not because the code is not
testable and can&amp;#39;t be used in a unit test but because you can&amp;#39;t reproduce
an error situation. You know that the code crashes in production, but you can&amp;#39;t
crash it in a test. The error stack trace reported by the end user or your
production logging system is not reproducable. It&amp;#39;s a very common situation.
What do you do?&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-3.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;I think the best option here is to create a test that will prove that
the code works as intended. The test won&amp;#39;t fail, and the build will remain clean.
You will commit it to the repository and ... report that the problem is solved.
You will say that the reported bug doesn&amp;#39;t really exist in real life. You
will state that there is no bug &amp;mdash; &amp;quot;our software works correctly; here
is the proof: see my new unit test.&amp;quot;&lt;/p&gt;

&lt;p&gt;Will they believe you? I don&amp;#39;t think so, but they don&amp;#39;t have a choice. They
can&amp;#39;t push you any further. You&amp;#39;ve already done something &amp;mdash; created
a new test that proves everything is fine. The ticket will be closed
and the project will move on.&lt;/p&gt;

&lt;p&gt;If, later on, the same problem occurs in
production, a new bug will be reported. It will be linked to your ticket. Your
experience will help someone investigate the bug further. Maybe that
guy will also fail to catch the bug with a test and will also create
a new, successful and &amp;quot;useless&amp;quot; test. And this may happen again and again.
Eventually, this cumulative group experience will help the last guy
catch the bug and fix it.&lt;/p&gt;

&lt;p&gt;Thus, a new passing test is a good response to a bug that you can&amp;#39;t catch
with a unit test.&lt;/p&gt;

&lt;h2 id=&quot;disable-the-feature&quot;&gt;Disable the Feature&lt;/h2&gt;

&lt;p&gt;Sometimes the unit test technique won&amp;#39;t work, mostly because a bug will be
too important to be ignored. They won&amp;#39;t agree with you when you show them
a unit test that proves the bug doesn&amp;#39;t exist. They will tell you
that &amp;quot;when our users are trying to download a PDF, they get a blank page.&amp;quot;
And they will also say they don&amp;#39;t really care about your bloody
unit tests. All they care about is that PDF document that should be
downloadable. So the trick with a unit test won&amp;#39;t work. What do you do?&lt;/p&gt;

&lt;p&gt;It depends on many factors, and most of these factors are not technical.
They are political, organizational, managerial, social, you name it. However,
in most cases, I would recommend you disable that toxic feature,
release a new version, and close the ticket.&lt;/p&gt;

&lt;p&gt;You will take the problem off your shoulders and everybody will be pleased.
Well, except that poor end user. But this is not your problem. This is the
fault of management, which didn&amp;#39;t organize pre-production testing properly.
Again, don&amp;#39;t take this blame on yourself. Your job is to keep the code
clean and finish your tickets in a reasonable amount of time. Their
job is to make sure that developers, testers, DevOps, marketers, product
managers, and designers work together to deliver the product with an
acceptable number of errors.&lt;/p&gt;

&lt;p&gt;Production errors are not programmers&amp;#39; mistakes, though delayed
tickets are. If you keep a ticket in your hands for too long, you become
an unmanageable unit of work. They simply can&amp;#39;t manage you anymore. You&amp;#39;re doing
something, trying to fix the bug, saying &amp;quot;I&amp;#39;m trying, I&amp;#39;m trying ...&amp;quot;
How can they manage such a guy? Instead, you should deliver quickly, even if
it comes at the cost of a temporarily disabled feature.&lt;/p&gt;

&lt;h2 id=&quot;say-no&quot;&gt;Say No&lt;/h2&gt;

&lt;p&gt;OK, let&amp;#39;s say none of the above works. The code is clean, the documentation
is acceptable, but you can&amp;#39;t catch the bug, and they don&amp;#39;t accept a unit
test from you as proof of the bug&amp;#39;s absence. They also don&amp;#39;t allow you to
disable a feature, because it is critical to the user experience. What choices
do you have? Just one.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-4.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Be professional and say &amp;quot;No, I can&amp;#39;t do this; find someone else.&amp;quot;
Being a professional developer doesn&amp;#39;t mean being able to fix any problem. Instead,
it means honesty. If you see that you can&amp;#39;t
fix the problem, say so as soon as possible. Let them decide what to do.
If they eventually decide to fire you because of that, you will remain a
professional. They will remember you as a guy who was honest and took his
reputation seriously. In the end, you will win.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t hold the task in your hands. The minute you realize you&amp;#39;re
not the best guy for it or you simply can&amp;#39;t fix it &amp;mdash; notify
your manager. Make it his problem. Actually, it is his problem in the
first place. He hired you. He interviewed you. He decided to give you this
task. He estimated your abilities and your skills.
So it&amp;#39;s payback time.&lt;/p&gt;

&lt;p&gt;Your &amp;quot;No!&amp;quot; will be very valuable feedback for him. It will help him
make his next important management decisions.&lt;/p&gt;

&lt;p&gt;On the other hand, if you lie just to give the impression you&amp;#39;re a guy who
can fix anything and yet fail in the end, you will damage not only your
reputation but also the project&amp;#39;s performance and objectives.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/15/how-to-cut-corners.html</guid>
      <dc:date>2015-01-15T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>A Compound Name Is a Code Smell</title>
      <link>http://www.yegor256.com/2015/01/12/compound-name-is-code-smell.html</link>
      <description>&lt;p&gt;Do you name variables like &lt;code&gt;textLength&lt;/code&gt;, &lt;code&gt;table_name&lt;/code&gt;, or &lt;code&gt;current-user-email&lt;/code&gt;?
All three are compound names that consist of more than one word. Even though
they look more descriptive than &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, or &lt;code&gt;email&lt;/code&gt;, I would strongly
recommend avoiding them. I believe a variable name that is more complex than a noun
is a code smell. Why? Because we usually give a variable a compound name when its scope
is so big and complex that a simple noun would sound ambiguous.
And a big, complex scope is an obvious code smell.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/meaning-of-life-every-sperm.png' style='width:600px;' alt='The Meaning of Life (1983) by Terry Jones and Terry Gilliam'/&gt;&lt;figcaption&gt;The Meaning of Life (1983) by Terry Jones and Terry Gilliam&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The scope of a variable is the place where it is visible, like a method, for example. Look
at this Ruby class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CSV&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvFileName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;csvLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The visible scope of variable &lt;code&gt;csvFileName&lt;/code&gt; is method &lt;code&gt;initialize()&lt;/code&gt;, which
is a constructor of the class &lt;code&gt;CSV&lt;/code&gt;. Why does it need a compound name
that consists of three words? Isn&amp;#39;t it already clear that a single-argument
constructor of class &lt;code&gt;CSV&lt;/code&gt; expects the name of a file with
comma-separated values? I would rename it to &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, the scope of &lt;code&gt;@fileName&lt;/code&gt; is the entire &lt;code&gt;CSV&lt;/code&gt; class. Renaming a single
variable in the class to just &lt;code&gt;@file&lt;/code&gt; won&amp;#39;t introduce
any confusion. It&amp;#39;s still clear what file we&amp;#39;re dealing with.
The same situation exists with the &lt;code&gt;csvLine&lt;/code&gt; variable. It is clear that we&amp;#39;re
dealing with CSV lines here. The &lt;code&gt;csv&lt;/code&gt; prefix is just a redundancy.
Here is how I would refactor the class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CSV&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now it looks clear and concise.&lt;/p&gt;

&lt;p&gt;If you can&amp;#39;t perform such a refactoring, it means your scope is too
big and/or too complex. An ideal method should deal with up to five variables,
and an ideal class should encapsulate up to five properties.&lt;/p&gt;

&lt;p&gt;If we have five variables, can&amp;#39;t we find five nouns to name them?&lt;/p&gt;

&lt;p&gt;Adam and Eve didn&amp;#39;t have second names. They were unique in Eden,
as were many other characters in the Old Testament. Second and middle
names were invented later in order to resolve ambiguity. To keep
your methods and classes clean and solid, and to prevent ambiguity, try to give your variables
and methods unique single-word names, just like Adam and Eve were named
by you know who :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/12/compound-name-is-code-smell.html</guid>
      <dc:date>2015-01-12T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Continuous Integration on Windows, with Appveyor and Maven</title>
      <link>http://www.yegor256.com/2015/01/10/windows-appveyor-maven.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.appveyor.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/appveyor.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;The purpose of Continuous Integration is to tell us, the developers,
when the product we&amp;#39;re working on is not &amp;quot;packagable&amp;quot; any more. The
sooner we get the signal, the better. Why? Because the damage will
be younger if we find it sooner. The younger the damage, the easier it is
to fix. There are many modern and high-quality
&lt;a href=&quot;/2014/10/05/ten-hosted-continuous-integration-services.html&quot;&gt;hosted continuous integration services&lt;/a&gt;,
but only one of them (to my knowledge) supports Windows as a build
platform &amp;mdash; &lt;a href=&quot;http://www.appveyor.com&quot;&gt;appveyor.com&lt;/a&gt;. My experience
tells me that it&amp;#39;s a good practice to continuously integrate on
different platforms at the same time, especially when developing an
open source library. That&amp;#39;s why, in &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;
we&amp;#39;re using AppVeyor in combination with &lt;a href=&quot;http://www.travis-ci.org&quot;&gt;Travis&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This is how I managed to configure AppVeyor to build my Java Maven projects
(this is &lt;code&gt;appveyor.yml&lt;/code&gt; configuration file you&amp;#39;re supposed to place
in the root directory of your Github repository):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;{build}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Windows Server 2012&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Add-Type -AssemblyName System.IO.Compression.FileSystem&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;if (!(Test-Path -Path &amp;quot;C:\maven&amp;quot; )) {&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;(new-object System.Net.WebClient).DownloadFile(&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;&amp;#39;http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.zip&amp;#39;,&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;&amp;#39;C:\maven-bin.zip&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;[System.IO.Compression.ZipFile]::ExtractToDirectory(&amp;quot;C:\maven-bin.zip&amp;quot;, &amp;quot;C:\maven&amp;quot;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SET PATH=C:\maven\apache-maven-3.2.5\bin;%JAVA_HOME%\bin;%PATH%&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SET MAVEN_OPTS=-XX:MaxPermSize=2g -Xmx4g&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SET JAVA_OPTS=-XX:MaxPermSize=2g -Xmx4g&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;build_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mvn clean package --batch-mode -DskipTest&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;test_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mvn clean install --batch-mode&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;C:\maven\&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;C:\Users\appveyor\.m2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It was not that easy at all, so I decided to share. You can see
how this configuration works in these projects:
&lt;a href=&quot;https://github.com/jcabi/jcabi-aspects&quot;&gt;jcabi-aspects&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jcabi/jcabi-email&quot;&gt;jcabi-email&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jcabi/jcabi-dynamo&quot;&gt;jcabi-dynamo&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/yegor256/rultor&quot;&gt;rultor&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sat, 10 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/10/windows-appveyor-maven.html</guid>
      <dc:date>2015-01-10T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily Stand-Up Meetings Are a Good Tool for a Bad Manager</title>
      <link>http://www.yegor256.com/2015/01/08/morning-standup-meetings.html</link>
      <description>&lt;p&gt;A stand-up meeting (or simply &amp;quot;stand-up&amp;quot;) is
&amp;quot;a daily team-meeting held to provide a status update
to the team members&amp;quot;, according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Stand-up_meeting&quot;&gt;Wikipedia&lt;/a&gt;.
In the next few paragraphs, I attempt to explain why these meetings,
despite being so popular in software development teams, are &lt;strong&gt;pure evil&lt;/strong&gt;
and should never be used by good managers.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not saying they can be done right or wrong;
there are plenty of articles about that. I&amp;#39;m not
trying to give advice about how to do them properly so they
work, either. I&amp;#39;m saying that a good manager should &lt;strong&gt;never&lt;/strong&gt; have daily stand-ups.
Because they not only &amp;quot;don&amp;#39;t work&amp;quot; but also do very bad, sometimes catastrophic,
things to your management process, whether it&amp;#39;s agile or not. On the other hand,
a bad manager will always use daily stand-ups as his or her
key management instrument.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cool-hand-luke.png' style='width:600px;' alt='Cool Hand Luke (1967) by Stuart Rosenberg'/&gt;&lt;figcaption&gt;Cool Hand Luke (1967) by Stuart Rosenberg&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;To explain what I mean, let&amp;#39;s look at management from a few different
angles and compare how good and bad managers would organize their
work.&lt;/p&gt;

&lt;h2 id=&quot;information&quot;&gt;Information&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A Bad Manager Asks How Things Are Going&lt;/strong&gt;.
Strolling around the office asking how things are going is a great habit
of a terrible manager. He doesn&amp;#39;t know what his team is doing because
he is not smart enough to organize the process and information flow correctly.
However, he needs to know what&amp;#39;s going on because his boss is also asking him from time to time.
So the only way to collect the required information
is to ask the team, &amp;quot;What are you working on right now?&amp;quot;
Morning stand-up is a perfect place to ask this annoying question officially
without being marked as a manager who doesn&amp;#39;t know what he is doing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Good Manager Is Being Told When Necessary&lt;/strong&gt;.
Managing a project involves management of communications. When information
flows are organized correctly, every team member knows when and how
he or she has to report to the manager. When something goes wrong, everybody
knows how such a situation has to be reported: immediately and directly.
When a backlog task is completed, everybody understands how to inform
a project manager if he needs this information. A perfect project manager
never asks his people. Instead, they tell him when necessary. And when
someone does stop to tell him something, a good project manager fixes such a broken communication channel.
But he never uses daily meetings to collect information.&lt;/p&gt;

&lt;p&gt;As a good manager, inform your team what your goals are and what&amp;#39;s important
to you as a project manager (or Scrum master). They should know what&amp;#39;s
important for you to know about their progress, risks, impediments,
and failures. They should understand what trouble you will get into
if they let you down. It is your job, as a good manager, to inform
them about the most important issues the project and the team are working through.
It&amp;#39;s their job, as a good team, to inform you immediately when they
have some important information. This is what perfect management is about.&lt;/p&gt;

&lt;p&gt;If you manage to organize teamwork like that, you won&amp;#39;t need to wait
until the next morning to ask your developers what they were doing yesterday
and what problems they experienced. You would have seen this information earlier, exactly
when you needed it. You would stay informed about your project affairs
even outside of the office. Actually, you would not need an office at all,
but that&amp;#39;s a subject for another discussion :)&lt;/p&gt;

&lt;p&gt;Someone may say that daily stand-ups are a perfect place and time to
exchange information among programmers, not just to inform the Scrum master and
get his feedback. Again, we have the same argument here &amp;mdash; why can&amp;#39;t they
exchange information when it&amp;#39;s required, during the day? Why do we need to
put 10 people together every morning to discuss something that concerns
only five of them? I can answer. Bad managers, who don&amp;#39;t know how else to
organize the exchange of information between team members, use morning stand-ups
as a replacement for a correct communication model. These morning meetings
give the impression that the manager is working hard and well deserves his
overblown salary. To the contrary, a good manager would never have any
regular status update meetings, becuase he knows how to use effective
communication instruments, like issue tracking tools, emails, code reviews,
decision-making meetings, pair programming, etc.&lt;/p&gt;

&lt;h2 id=&quot;responsibility&quot;&gt;Responsibility&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A Bad Manager Micro-Manages&lt;/strong&gt;.
This guy knows very little about project management, and that&amp;#39;s why
he feels very insecure. He is afraid of losing control of the team; he
doesn&amp;#39;t trust his own people; and he always feels under-informed and shakes
when his own boss asks him, &amp;quot;What&amp;#39;s going on?&amp;quot; Because of all this, he
uses his people as anti-depressant pills &amp;mdash; when they are doing what
he says, he feels more secure and stable. A daily stand-up meeting is a great
place where he can ask each of us what we&amp;#39;re doing and then tell us
what we should do instead. This manager forces us to disclose our personal goals and plans
in order to correct them when he feels necessary. How many times have you heard
something like this: &amp;quot;&lt;em&gt;I&amp;#39;m planning to test X. ... No, next week; today you work with Y&lt;/em&gt;&amp;quot;
This is micro-management. Daily stand-ups are the perfect tool for a micro-manager.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Good Manager Delegates Responsibility&lt;/strong&gt;.
Ideal management involves four steps:
1) Breaking a complex task into smaller sub-tasks;
2) Delegating them to subordinates;
3) Declaring awards, penalties, and rules; and
4) Making sure that awards are generous, penalties are inevitable, and rules are strictly followed.
A perfect manager never tells his people what to do every day and how to
organize their work time. He trusts and controls. He never
humiliates his people by telling them how to do their work.
A great manager would say: &amp;quot;&lt;em&gt;You&amp;#39;re planning to test X today?
It&amp;#39;s your decision, and I fully respect it. Just remember that if Y
isn&amp;#39;t ready by the end of the week, you lose the project, as we agreed.&lt;/em&gt;&amp;quot;
Why would such a manager need daily stand-ups? Why would he need to
ask his people what they are doing? He is not meddling in their plans.
Instead, he trusts them and controls their results only.&lt;/p&gt;

&lt;p&gt;Let me reiterate: I strongly believe that responsibility must be
delegated, and this delegation consists of three components:
&lt;strong&gt;awards, penalties, and rules&lt;/strong&gt;. In a modern Western culture, it may
be rather difficult to define them &amp;mdash; we have long-term contracts and
monthly salaries. But a good manager has to find a way. Each task has to
be delegated and isolated. This means that the programmer working on the
task has to be personally responsible for its success or failure. And
he or she has to know the consequences.&lt;/p&gt;

&lt;p&gt;A good manager understands that any team member inevitably tries to
avoid personal responsibility. Everybody is trying to put a
&lt;a href=&quot;http://hbr.org/1999/11/management-time-whos-got-the-monkey/ar/1&quot;&gt;responsibility monkey&lt;/a&gt;
back on the shoulders of the manager. It is natural and inevitable. And
daily stand-up meetings only help everybody do this trick.&lt;/p&gt;

&lt;p&gt;When you ask me in the morning how things are going, I&amp;#39;ll say that there are
some problems and I&amp;#39;m not sure that I will be able to finish the
task by the end of the week. That&amp;#39;s it! I&amp;#39;m not responsible for the task
anymore. It&amp;#39;s not my fault if I fail. I told you that I may fail, remember?
From now, the responsibility is yours.&lt;/p&gt;

&lt;p&gt;A good manager knows about this trick and prevents it by explicitly
defining awards, penalties, and rules. When I tell you that I may fail,
you remind me that I&amp;#39;m going to lose my awards and will get penalties instead:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- I&amp;#39;m not sure I can meet the deadline ...
- Sorry to hear that you&amp;#39;re going to lose your
  $200 weekend bonus because of that :(&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Have you seen many project managers or Scrum masters saying such a thing?
Not so many, I believe. Yes, a good manager is a rare creature. But only
a good manager is capable of defining awards, penalties, and rules
so explicitly and strictly.&lt;/p&gt;

&lt;p&gt;When this triangle is defined, nobody needs status update meetings every morning.
Everything is clear as it is. We all know our goals and our objectives. We know
what will happen if we fail, and we also understand how much we&amp;#39;re going to
get if we succeed. We don&amp;#39;t need a manager to remind us about that every morning.
And we don&amp;#39;t need a manager to check our progress. He already gave us
a very clear definition of our objectives. Why would we talk about them again
every morning?&lt;/p&gt;

&lt;p&gt;A bad manager isn&amp;#39;t capable of defining objectives; that&amp;#39;s why he
wants to micro-manage us every morning. Actually, a bad manager is doing
it during the day too. He is afraid that without well-known goals and rules,
the team will do something wrong or won&amp;#39;t do anything at all. That&amp;#39;s why
he has &amp;quot;to keep his hand on the pulse&amp;quot;. In reality, he keeps his hand
on the neck of the team.&lt;/p&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A Bad Manager De-Motivates by Public Embarassment&lt;/strong&gt;.
He doesn&amp;#39;t know how to organize a proper motivational system within the team;
that&amp;#39;s why he relies on a natural fear of public embarassment. It&amp;#39;s only
logical that no one would feel comfortable saying, &amp;quot;&lt;em&gt;I forgot it&lt;/em&gt;&amp;quot;
in front of everybody. So the daily stand-up meeting is where he puts
everybody in a line and asks, &amp;quot;&lt;em&gt;What did you do yesterday?&lt;/em&gt;&amp;quot; This
fearful moment is a great motivator for the team, isn&amp;#39;t it? I don&amp;#39;t think so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Good Manager Motivates by Objectives&lt;/strong&gt;.
Ideal management defines objectives and lets people achieve
them using their skills, resources, knowledge, and passion. A properly
defined objective always has three components: awards, penalties, and rules.
A great manager knows how to translate corporate objectives into personal
ones: &amp;quot;&lt;em&gt;If we deliver this feature before the weekend, the company will
generate extra profit. You, Sally, will personally get $500. If you fail, you will be moved to
another, less interesting project.&lt;/em&gt;&amp;quot; This is a perfectly defined objective.
Do we need to ask Sally every morning, in front of everybody, if she forgot
to implement the feature? If she is working hard? Will this questioning help
her? Absolutely not! She already knows what she is working for, and she is motivated enough.
When she finishes on time, organize a meeting and
give her a $500 check in front of everybody. This is what a good manager
uses meetings for.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s more to this, too, as daily status updates in front of everybody motivate
the best team players to backslide and become the same as the worst ones. Well, this is mostly
because they don&amp;#39;t want to offend anyone by their super performance.
It is in our nature to try to look similar to everybody else while being
in a group. When everybody reports, &amp;quot;&lt;em&gt;I still have nothing to show&lt;/em&gt;&amp;quot;, it would
be strange to expect a good programmer to say, &amp;quot;&lt;em&gt;I finished all my tasks and
want to get more&lt;/em&gt;&amp;quot;. Well, this may happen once, but after a few times, this
A player will either stop working hard or will change the team. He will
see that his performance is standing out and that this can&amp;#39;t be appreciated by the group,
no matter what the manager says.&lt;/p&gt;

&lt;p&gt;A good manager understands that each programmer has his or her own speed,
quality, and salary. A good manager gives different tasks to different
people and expects different results from them. Obviously, lining everybody
up in the morning and expecting similar reports from them is a huge mistake.
The mistake will have a catastrophic effect on A players, who are interested
in achieving super results and expect to be super-appreciated and compensated.&lt;/p&gt;

&lt;p&gt;A bad manager can&amp;#39;t manage different people differently, just because
he doesn&amp;#39;t know how. That&amp;#39;s why he needs daily stand-ups, where everybody
reports almost the same, and it&amp;#39;s easy to compare their results to each other.
Also, it&amp;#39;s easier to blame or to cheer up those who don&amp;#39;t report similar to
others. In other words, a bad manager uses daily stand-ups as an instrument
of equality, which in this case only ruins the entire team&amp;#39;s motivation.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;Daily stand-ups, as well as any status update meetings,
are a great instrument to hide and protect a lazy and stupid manager. To hide
his inability to manage people. To hide his lack of competence. To hide
his fear of problems, challenges, and risks. If you&amp;#39;re a good manager,
don&amp;#39;t embarrass yourself with daily stand-ups.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/08/morning-standup-meetings.html</guid>
      <dc:date>2015-01-08T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>