<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://www.yegor256.com/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2017-01-31T09:28:35+00:00</updated><id>http://www.yegor256.com/</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Decorating Envelopes</title><link href="http://www.yegor256.com/2017/01/31/decorating-envelopes.html" rel="alternate" type="text/html" title="Decorating Envelopes" /><published>2017-01-31T00:00:00+00:00</published><updated>2017-01-31T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/01/31/decorating-envelopes</id><content type="html" xml:base="http://www.yegor256.com/2017/01/31/decorating-envelopes.html">&lt;p&gt;&lt;del&gt;Sometimes&lt;/del&gt; Very often I need a
&lt;a href=&quot;/2016/09/20/oop-without-classes.html&quot;&gt;class&lt;/a&gt; that implements an
interface by making an instance of another class. Sound weird? Let me show
you an example. There are many classes of that kind in the
&lt;a href=&quot;http://www.takes.org&quot;&gt;Takes Framework&lt;/a&gt;,
and they all are named like &lt;code&gt;*Wrap&lt;/code&gt;. It&amp;#39;s a convenient design concept that,
unfortunately, looks rather verbose in Java. It would be great to have something
shorter, like in &lt;a href=&quot;http://www.eolang.org&quot;&gt;EO&lt;/a&gt; for example.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2017/01/north-by-northwest.jpg&#39; longdesc=&#39;#1633d9e6&#39;/&gt;&lt;figcaption id=&#39;1633d9e6&#39;&gt;North by Northwest (1959) by Alfred Hitchcock&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Take a look at
&lt;a href=&quot;https://github.com/yegor256/takes/blob/1.1/src/main/java/org/takes/rs/RsHtml.java&quot;&gt;&lt;code&gt;RsHtml&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes Framework&lt;/a&gt;. Its design looks
like this (a simplified version with only one primary constructor):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RsHtml&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RsWrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;RsHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, let&amp;#39;s take a look at that
&lt;a href=&quot;https://github.com/yegor256/takes/blob/1.1/src/main/java/org/takes/rs/RsWrap.java&quot;&gt;&lt;code&gt;RsWrap&lt;/code&gt;&lt;/a&gt;
it extends:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RsWrap&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you see, this &amp;quot;decorator&amp;quot; doesn&amp;#39;t do anything except &amp;quot;just decorating.&amp;quot;
It encapsulates another &lt;code&gt;Response&lt;/code&gt; and passes through all method calls.&lt;/p&gt;

&lt;p&gt;If it&amp;#39;s not clear yet, I&amp;#39;ll explain the purpose of &lt;code&gt;RsHtml&lt;/code&gt;. Let&amp;#39;s
say you have text and you want to create a &lt;code&gt;Response&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// you have it already&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HTTP_OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of doing this
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;composition of decorators&lt;/a&gt;
over and over again in many places, you use &lt;code&gt;RsHtml&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// you have it already&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is very convenient, but that &lt;code&gt;RsWrap&lt;/code&gt; is very verbose. There are too many
lines that don&amp;#39;t do anything special; they just forward all method
calls to the encapsulated &lt;code&gt;Response&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How about we introduce a new concept, &amp;quot;decorators&amp;quot;, with a new
keyword, &lt;code&gt;decorates&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RsHtml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorates&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;RsHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, in order to create an object, we just call:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We don&amp;#39;t have any new methods in the decorators, just constructors.
The only purpose for these guys is to create other objects and encapsulate
them. They are not really full-purpose objects. They only help us
create other objects.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why I would call them &amp;quot;decorating envelopes.&amp;quot;&lt;/p&gt;

&lt;p&gt;This idea may look very similar to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29&quot;&gt;Factory&lt;/a&gt; design pattern,
but it doesn&amp;#39;t have
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;static methods&lt;/a&gt;,
which we are trying to avoid in
&lt;a href=&quot;/2016/08/15/what-is-wrong-object-oriented-programming.html&quot;&gt;object-oriented programming&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><category term="oop" /><summary type="html">Sometimes Very often I need a
class that implements an
interface by making an instance of another class. Sound weird? Let me show
you an example. There are many classes of that kind in the
Takes Framework,
and they all are named like *Wrap. It&amp;#39;s a convenient design concept that,
unfortunately, looks rather verbose in Java. It would be great to have something
shorter, like in EO for example.</summary></entry><entry><title type="html">16 Don’ts of Career Growth</title><link href="http://www.yegor256.com/2017/01/24/career-advice.html" rel="alternate" type="text/html" title="16 Don&#39;ts of Career Growth" /><published>2017-01-24T00:00:00+00:00</published><updated>2017-01-24T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/01/24/career-advice</id><content type="html" xml:base="http://www.yegor256.com/2017/01/24/career-advice.html">&lt;p&gt;I get questions like this all the time: How does one become a senior
software developer or an architect? How does one grow from a junior just
starting to write Java code to the leader of a software team that is
driving a BMW and making $150K+ per year? What are the exact steps that
won&amp;#39;t waste time and will get you there faster? Let me share what I think might
be helpful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2017/01/the-grand-budapest-hotel.jpg&#39; longdesc=&#39;#3c7b6134&#39;/&gt;&lt;figcaption id=&#39;3c7b6134&#39;&gt;The Grand Budapest Hotel (2014) by Wes Anderson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Before writing this, I &lt;a href=&quot;https://www.google.com/webhp?q=career%20advice%20software%20developer&quot;&gt;Googled&lt;/a&gt;
a bit and found a lot of interesting suggestions, like to
be helpful, make friends, be language agnostic, code a lot,
try to prove your bosses wrong, avoid conflicts, exercise, etc.
Some of them are good, while others are very wrong, but most of them are just too far
away from the main point.&lt;/p&gt;

&lt;p&gt;I want to share what I believe will look more or less like explicit instructions
of what to do tomorrow to become a $100-per-hour software architect
in a few years. Well, they worked and keep working for me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Loyal&lt;/strong&gt;.
The company you are working for at the moment is just a training
ground, nothing else. Don&amp;#39;t invest an &lt;del&gt;extra&lt;/del&gt; minute of your time into it.
Be selfish; think only about yourself and your personal skills,
knowledge, and experience. They pay you to be dedicated and loyal?
Well, that&amp;#39;s their fault. Use them to learn new technologies, experiment
with new ideas, train and educate yourself, get new certificates,
meet new people, etc. They must work &lt;em&gt;for you&lt;/em&gt;, not the other way around.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;They pay you to be dedicated and loyal? Well, that&amp;#39;s their fault.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Work&lt;/strong&gt;.
Make sure programming is your &lt;em&gt;hobby&lt;/em&gt;, not your job. Everything else
must be secondary, including your family, friends, and WoW.
Software engineering is your family, your passion, your friend, and your life.
Without that attitude, you will always be a slave to those who think like
that. You must not work; you must have fun in front of the laptop. More
fun than you&amp;#39;re having anywhere else. Never do anything that is not fun.
If you notice you&amp;#39;re writing some code because you &amp;quot;have to&amp;quot; instead of
because &amp;quot;you want to,&amp;quot; stop immediately. Something is going wrong and
you&amp;#39;re shooting yourself in the foot; your career is in trouble.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Make Friends&lt;/strong&gt;.
I&amp;#39;m talking about professional relationships in the office, within your projects,
at the company you&amp;#39;re working for. Remember that 99 percent of people will not
become experts. They will remain who they are&amp;mdash;regular
programmers with no passion or ambition. What&amp;#39;s really bad for you is that they will
want you to stay &lt;em&gt;with them&lt;/em&gt;. Nobody will enjoy seeing your growth, and your
closest friends will become your enemies. Not explicitly, but subconsciously they
will do everything they can to prevent you from getting better and leaving
them. And you will have to leave them if you grow up. To avoid all that,
stay professional and don&amp;#39;t make friends at work.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Nobody will enjoy seeing your growth, and your closest friends will become your enemies.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Helpful&lt;/strong&gt;.
There are more than 10 million programmers in the world. They all need help. Why
do you need to help that dude sitting next to you in the office? You won&amp;#39;t
save the world by helping people around you&amp;mdash;forget that religious
nonsense. If you really want to do good for the software industry, focus
on bigger things: make an open source product, write a book, or improve
the documentation of the project you are working on. By
&lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;helping&lt;/a&gt;
people around you and solving &lt;em&gt;their&lt;/em&gt; problems, you just cripple them,
nothing else.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Ask for Help&lt;/strong&gt;.
Expect the same attitude from programmers around you. Again, the same argument applies:
There are &lt;a href=&quot;https://sostats.github.io/&quot;&gt;more than 6 million accounts&lt;/a&gt;
registered on the StackExchange platform; if you need help, ask them. Don&amp;#39;t ask
your friends or colleagues. Train yourself to get help from public sources
or from your project documentation. By asking people around you, you&amp;#39;re making
your life easier in the short term only. In the long run, you will lack that
important skill of knowing how to find information. You will become
a hostage to those friends who help you. Also, don&amp;#39;t learn from people around you;
learn from books, StackOverflow, and open source software.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;You must be prepared to say &amp;quot;No&amp;quot; to your friends, your family, your habits, your wishes, your projects, colleagues, classes, methods, and lines of code.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Waste Time&lt;/strong&gt;.
This is probably the most important advice, which I have to give myself
first of all&amp;mdash;unfortunately, I waste a lot of time. Any growth is always
about saying &amp;quot;No.&amp;quot; You must be prepared to say it to your friends, your
family, your habits, your wishes, your projects, colleagues, classes,
methods, and lines of code. Stop the projects that are taking time and giving
nothing back. Don&amp;#39;t call back those whom you don&amp;#39;t need. Yes, they need you,
but you don&amp;#39;t need them. This may sound harsh and selfish, but that&amp;#39;s the
only way to get where you want to be. Time is your main resource; be
very greedy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Skimp on Growth&lt;/strong&gt;.
You must invest into yourself. Fist of all, you have to buy books. Don&amp;#39;t steal
them, even though
&lt;a href=&quot;/2016/11/09/why-no-ebooks.html&quot;&gt;you can&lt;/a&gt;.
Buy them, spending your &lt;em&gt;own&lt;/em&gt; money. You will take
them way more serious. You will respect yourself for owning the library.
You will feel that software engineering is forever with you; it&amp;#39;s not temporary,
it&amp;#39;s not just a job, it&amp;#39;s your life. Two books per month is your
absolute minimum. Second, pay for certificates for the
same reasons. Third, purchase software; don&amp;#39;t steal it. Finally, don&amp;#39;t be
cheap on your laptop. It is much more important than your car or a birthday
gift for your spouse. Your laptop is your instrument; it must be
&lt;del&gt;good and expensive&lt;/del&gt; made by Apple. You must go &amp;quot;all in&amp;quot; if you want
to win.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Work Full-Time&lt;/strong&gt;.
As much as possible, try to stay away from full-time, 9-to-5 jobs&amp;mdash;they
pause your professional growth. Permanent or long-term employment gives you
a stable income, a comfortable office environment, a predictable set of
technical problems to solve, and the ability to become an expert over a small
territory. At the same time, it takes away &lt;em&gt;fear&lt;/em&gt;. That&amp;#39;s right, fear. You
are not afraid anymore, and that&amp;#39;s why you stop growing. To grow and grow fast,
you must always be challenged by new tasks, new teams, new projects, and new job
interviews. You must always prove that you are worth something. Ideally,
you must work on two to three projects part-time and change them every 6 to 12 months.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Cheap&lt;/strong&gt;.
Forget the stories that teach &amp;quot;money is not everything, and an interesting project
is much more important&amp;quot;&amp;mdash;they are for losers. Money is everything. An
interesting project will be &lt;em&gt;properly&lt;/em&gt; funded. If it&amp;#39;s not funded, the market
doesn&amp;#39;t need it. What are you doing there then? The only answer is that you&amp;#39;re
not as good as &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;others&lt;/a&gt;;
that&amp;#39;s how they managed to buy you. My advice is to
never pay attention to those cheap stories;
&lt;a href=&quot;/2016/01/12/good-programmers-dont-work-for-equity.html&quot;&gt;demand cash&lt;/a&gt;, up front, as
much as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Skeptical About Certifications&lt;/strong&gt;.
Many programmers think certifications are not important now because
they don&amp;#39;t really validate anything and are issued simply for money by
big companies. Don&amp;#39;t think like that. Certifications help you formalize
your knowledge, put borders around it, and remove gaps. And they demonstrate
to most of your potential employers that you&amp;#39;re truly &lt;em&gt;serious&lt;/em&gt; about software
engineering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Ignore Management&lt;/strong&gt;.
Being a good programmer is not the same as being a good architect or
a team leader. To move higher in that hierarchy, you must understand
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;project management&lt;/a&gt;.
And it&amp;#39;s not just being nice to people and wearing
a suit. It&amp;#39;s a science, with a lot of rules, principles, methods,
and best practices. You must study them and become very good at them. Just
as good as you are in Java or C++. Start with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Project_Management_Body_of_Knowledge&quot;&gt;PMBOK&lt;/a&gt; and earn your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Project_Management_Professional&quot;&gt;PMP&lt;/a&gt; certification.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Underestimate English&lt;/strong&gt;.
Most of my readers are not native English speakers, just like myself.
I&amp;#39;m addressing this paragraph to you: You must improve your speaking and
writing skills; it&amp;#39;s very important. You will never become an
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;expensive&lt;/a&gt;
software architect if you can&amp;#39;t speak and write well. And it can&amp;#39;t be
Russian in English words. It must be as the English people talk in San Francisco,
not in Moscow. The best advice to learn it: Watch English movies with subtitles.
You must speak like Matt Damon or Al Pacino, but not like
&lt;a href=&quot;https://www.youtube.com/watch?v=_0uM_xh7WOg&amp;amp;t=29s&quot;&gt;Mutko&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Ignore Open Source&lt;/strong&gt;.
You must be active in the open source community. It&amp;#39;s
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;a must&lt;/a&gt;. You either
have your own open source project or you actively contribute to an existing
one. Either way, it&amp;#39;s crucial. Working in a closed
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office environment&lt;/a&gt; is
one thing, while writing code that is visible to the entire world is a totally
different thing. Most programmers are simply afraid of that, and they make
up many excuses for why they are not there. Don&amp;#39;t be one of them. Yes, it&amp;#39;s
difficult, it&amp;#39;s stressful, it will consume a lot of your private time, and
nobody will pay you for it. Do it anyway&amp;mdash;this is the fastest way
to grow. Moreover, I would recommend you try to open as much source code
as possible, even if you write it for private and commercial projects.
Some companies won&amp;#39;t be against that.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;I should be able to Google your name and find a lot of professional links, not just your Tinder profile.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Invisible&lt;/strong&gt;.
Make sure you have Facebook, Twitter, LinkedIn, and Instagram accounts, along
with a blog. You must be present on the Internet. You&amp;#39;re a serious software
architect? I should be able to Google your name and find a lot of professional
links, not just your Tinder profile. And they will Google your name; don&amp;#39;t
ever doubt that. My book &lt;a href=&quot;/256-bloghacks.html&quot;&gt;&amp;quot;256 Bloghacks&amp;quot;&lt;/a&gt; may
help you understand how to do it right.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Stay Home&lt;/strong&gt;.
Attend seminars, meetups, and software conferences. At least once a month,
you must go somewhere where other programmers are hanging out. You don&amp;#39;t
need to be super active and make a lot of friends&amp;mdash;just be
there and watch. Eventually you will realize that it&amp;#39;s time to become
a speaker. Remember that it doesn&amp;#39;t really matter how much your
coworkers respect you. What matters is what the &lt;em&gt;market&lt;/em&gt; thinks about you.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Playing GTA &amp;#39;til 3 a.m. is not what successful and happy software architects do.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Forget to Relax&lt;/strong&gt;.
Nobody likes those smelly dorks who only get one haircut per year. They will
hire you and respect you as a coder, but they will never take you
seriously as a candidate for a role with a lot of &lt;del&gt;money&lt;/del&gt; responsibility. You will
always look like a mentally unstable person. Instead, you must look &amp;quot;like business,&amp;quot; even
though you are a geek. That&amp;#39;s why it&amp;#39;s very important to pay attention to
how you spend your free time&amp;mdash;how you relax. Playing GTA &amp;#39;til 3 a.m. is not
what successful and happy software architects do. Instead, here is your
short list of activities: sports, tourism, and night clubs.
Be a normal person&amp;mdash;that&amp;#39;s the point.&lt;/p&gt;

&lt;p&gt;Did I miss anything important?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="career" /><summary type="html">I get questions like this all the time: How does one become a senior
software developer or an architect? How does one grow from a junior just
starting to write Java code to the leader of a software team that is
driving a BMW and making $150K+ per year? What are the exact steps that
won&amp;#39;t waste time and will get you there faster? Let me share what I think might
be helpful.</summary></entry><entry><title type="html">Synchronized Decorators to Replace Thread-Safe Classes</title><link href="http://www.yegor256.com/2017/01/17/synchronized-decorators.html" rel="alternate" type="text/html" title="Synchronized Decorators to Replace Thread-Safe Classes" /><published>2017-01-17T00:00:00+00:00</published><updated>2017-01-17T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/01/17/synchronized-decorators</id><content type="html" xml:base="http://www.yegor256.com/2017/01/17/synchronized-decorators.html">&lt;p&gt;You know what thread safety is, right? If not, there is a simple example
below. All classes must be thread-safe, right? Not really. Some of them
have to be thread-safe? Wrong again. I think none of them have to
be thread-safe, while all of them have to provide synchronized decorators.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2017/01/aladdin.jpg&#39; longdesc=&#39;#f5aa3c20&#39;/&gt;&lt;figcaption id=&#39;f5aa3c20&#39;&gt;Aladdin (1992) by Ron Clements and John Musker&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s start with an example (it&amp;#39;s
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;mutable&lt;/a&gt;, by the way):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What do you think &amp;mdash; is it &lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_safety&quot;&gt;thread-safe&lt;/a&gt;?
This term refers to whether
an object of this class will operate without mistakes when used by multiple
threads at the same time. Let&amp;#39;s say we have two threads working with
the same object, &lt;code&gt;position&lt;/code&gt;, and calling its method &lt;code&gt;increment()&lt;/code&gt; at
exactly the same moment in time.&lt;/p&gt;

&lt;p&gt;We expect the &lt;code&gt;number&lt;/code&gt; integer to be equal to 2 when both threads
finish up, because each of them will increment it once, right?
However, most likely this won&amp;#39;t happen.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s see what will happen. In both threads, &lt;code&gt;before&lt;/code&gt;
will equal &lt;code&gt;0&lt;/code&gt; when they start. Then &lt;code&gt;after&lt;/code&gt; will be set to &lt;code&gt;1&lt;/code&gt;. Then, both threads
will do &lt;code&gt;this.number = 1&lt;/code&gt; and we will end up with &lt;code&gt;1&lt;/code&gt; in &lt;code&gt;number&lt;/code&gt; instead
of the expected &lt;code&gt;2&lt;/code&gt;. See the problem? Classes with such a flaw in their
design are &lt;strong&gt;not thread-safe&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The simplest and most obvious solution is to make our method
&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html&quot;&gt;&lt;code&gt;synchronized&lt;/code&gt;&lt;/a&gt;.
That will guarantee that no matter how many threads call it
at the same time, they will all go sequentially, not in parallel: one
thread after another. Of course, it will take longer, but it will prevent
that mistake from happening:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A class that guarantees it won&amp;#39;t break no matter how many threads
are working with it is called &lt;strong&gt;thread-safe&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now the question is: Do we have to make all classes
thread-safe or only some of them? It would seem to be better to have all
classes error-free, right? Why would anyone want an object
that may break at some point? Well, not exactly. Remember, there is
a performance concern involved; we don&amp;#39;t often have multiple
threads, and we always want our objects to run as fast as possible.
A between-threads synchronization mechanism will definitely slow us down.&lt;/p&gt;

&lt;p&gt;I think the right approach is to have two classes. The first one
is not thread-safe, while the other one is a &lt;strong&gt;synchronized decorator&lt;/strong&gt;,
which would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SyncPosition&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SyncPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when we need our &lt;code&gt;position&lt;/code&gt; object to be thread-safe, we decorate
it with &lt;code&gt;SyncPosition&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SyncPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimplePosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we need a plain simple position, without any thread safety, we do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimplePosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Making class functionality both rich &lt;em&gt;and&lt;/em&gt; thread-safe is, in my opinion,
a violation of that famous
&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By the way, this problem is very close to the one of
&lt;a href=&quot;/2016/01/26/defensive-programming.html&quot;&gt;defensive programming&lt;/a&gt;
and validators.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><category term="oop" /><summary type="html">You know what thread safety is, right? If not, there is a simple example
below. All classes must be thread-safe, right? Not really. Some of them
have to be thread-safe? Wrong again. I think none of them have to
be thread-safe, while all of them have to provide synchronized decorators.</summary></entry><entry><title type="html">How to Teach a Customer</title><link href="http://www.yegor256.com/2017/01/10/how-to-teach-customers.html" rel="alternate" type="text/html" title="How to Teach a Customer" /><published>2017-01-10T00:00:00+00:00</published><updated>2017-01-10T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/01/10/how-to-teach-customers</id><content type="html" xml:base="http://www.yegor256.com/2017/01/10/how-to-teach-customers.html">&lt;p&gt;In &lt;a href=&quot;/2015/10/27/outsourcing-doesnt-work.html&quot;&gt;outsourcing&lt;/a&gt;,
very often a customer &lt;del&gt;is an idiot&lt;/del&gt; doesn&amp;#39;t
really know what he needs&amp;mdash;not only in terms of functionality, but also
on a technical level. What makes the situation even worse is that the
customer &lt;del&gt;very often&lt;/del&gt; always thinks he knows
and understands enough. The question is how do you teach a customer? How
do you train, educate, and help him? You don&amp;#39;t!&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2017/01/the-firm.jpg&#39; longdesc=&#39;#fa67e914&#39;/&gt;&lt;figcaption id=&#39;fa67e914&#39;&gt;The Firm (1993) by Sydney Pollack&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The temptation will be huge, though. You will think that the customer is your
friend. You will want to help him. You will feel very motivated to
make the product better. Moreover, you have the needed knowledge,
so why not share it, right?&lt;/p&gt;

&lt;p&gt;Wrong. Very wrong. On so many levels.&lt;/p&gt;

&lt;p&gt;Most of all because the customer is not your friend. Not a partner, not a co-worker,
not a colleague, and not a teammate. The customer is a project
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;stakeholder&lt;/a&gt;,
just like you, but his needs are completely opposite of yours, and he is very aware
of that.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Very soon, when the project fails, the customer will find someone to blame&lt;/aside&gt;

&lt;p&gt;He wants the project to finish as soon as possible and to take as little
&lt;a href=&quot;/2015/06/02/how-to-estimate-software-cost.html&quot;&gt;money&lt;/a&gt;
out of his pocket as possible. You want exactly the opposite. You
both work for the project, but from two very different angles.&lt;/p&gt;

&lt;p&gt;Very soon, when the project fails (and it will fail, just like 94 percent of all
software projects, according to
&lt;a href=&quot;https://www.projectsmart.co.uk/white-papers/chaos-report.pdf&quot;&gt;Chaos Report&lt;/a&gt;),
the customer will find someone to blame. Needless to say,
he won&amp;#39;t blame himself; he will blame you.&lt;/p&gt;

&lt;p&gt;According to the same report, only 7 percent of failures are caused by technical incompetence. Thus,
most likely your project will fail because of an incorrect understanding of
requirements, poor planning, misalignment of management objectives, etc. Do you really want to
be blamed for the things you&amp;#39;re not an expert at? Let the customer
fail; it&amp;#39;s his project, his life, and his money.&lt;/p&gt;

&lt;p&gt;Do your technical job right and stay away from everything else. This
is what true professionalism is about&amp;mdash;focus on the things you can do
best of all and better than most others.&lt;/p&gt;

&lt;p&gt;However, if you see that he is doing something wrong and definitely
requires help, recommend that he hire a consultant. There are many people
in the market who can help him with requirements, UX, business analysis,
marketing planning, branding, etc. In most cases, customers just
don&amp;#39;t know that these people exist, or they believe these services
are just a waste of money.&lt;/p&gt;

&lt;p&gt;Try to convince them that it&amp;#39;s not true, but don&amp;#39;t become an adviser
in something you don&amp;#39;t understand. Your job is coding, so focus only on that.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="outsourcing" /><summary type="html">In outsourcing,
very often a customer is an idiot doesn&amp;#39;t
really know what he needs&amp;mdash;not only in terms of functionality, but also
on a technical level. What makes the situation even worse is that the
customer very often always thinks he knows
and understands enough. The question is how do you teach a customer? How
do you train, educate, and help him? You don&amp;#39;t!</summary></entry><entry><title type="html">How Much Do You Love Conflict?</title><link href="http://www.yegor256.com/2017/01/03/how-much-you-love-conflicts.html" rel="alternate" type="text/html" title="How Much Do You Love Conflict?" /><published>2017-01-03T00:00:00+00:00</published><updated>2017-01-03T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/01/03/how-much-you-love-conflicts</id><content type="html" xml:base="http://www.yegor256.com/2017/01/03/how-much-you-love-conflicts.html">&lt;p&gt;Conflict is what progress is made of. A professional and well-managed
team loves conflicts and creates them on a daily basis. A professional
project manager provokes conflicts and makes sure none of them end
in a consensus. Does that sound strange? It&amp;#39;s not sarcasm. Read on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2017/01/being-flynn.jpg&#39; longdesc=&#39;#929ab07e&#39;/&gt;&lt;figcaption id=&#39;929ab07e&#39;&gt;Being Flynn (2012) by Paul Weitz&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Have you ever heard the term &amp;quot;win-win?&amp;quot; Do you know what it means? My guess is that
most of my readers aren&amp;#39;t exactly sure what this is about, even though
it&amp;#39;s used very often. Let me explain. In any conflict,
there are three possible outcomes: lose-lose, win-lose, and win-win.
The first one is the worst, and the last one is the best. Here is an example.&lt;/p&gt;

&lt;p&gt;Say your wife wants to watch a movie, and you want to watch a
baseball game. That&amp;#39;s a conflict. It starts with a confrontation of &lt;em&gt;positions&lt;/em&gt;.
Your position is, &amp;quot;I want this game,&amp;quot; while her position is,
&amp;quot;I want this movie.&amp;quot;&lt;/p&gt;

&lt;p&gt;The easiest way is to hold to these positions no matter what, but very soon
your conflict will turn into a fight and maybe eventually a divorce.&lt;/p&gt;

&lt;p&gt;Project management offers a few
&lt;a href=&quot;https://en.wikipedia.org/wiki/Conflict_resolution&quot;&gt;conflict resolution techniques&lt;/a&gt;
that can help you and your wife get out of this confrontation without asking the police for help.
No matter which technique you use, the result will be either lose-lose,
win-lose, or win-win.&lt;/p&gt;

&lt;h2 id=&quot;lose-lose&quot;&gt;Lose-Lose&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Compromise&quot;&gt;Compromise&lt;/a&gt;
is the worst outcome, and it&amp;#39;s known as lose-lose. For example,
you both agree on watching the news&amp;mdash;that&amp;#39;s a compromise. Neither of you will
get what you wanted, a movie or a baseball game. You both lose.
Who gains in this case? You neighbors and the police, since there will be no
fight. Will the problem really be solved? No. You both will hate
each other even more, because neither of your desires were satisfied. The
divorce is still coming closer.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;If we resolve conflicts through compromises, everybody suffers except those management monkeys&lt;/aside&gt;

&lt;p&gt;The same happens in software team conflicts&amp;mdash;if and when we resolve
them through compromises, everybody suffers except those
&lt;a href=&quot;/2015/09/29/mayonnaise.html&quot;&gt;management and HR monkeys&lt;/a&gt;
who only care about a peaceful
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office&lt;/a&gt; environment. They don&amp;#39;t
want to see us fighting over a piece of damn Java code. Moreover, they
don&amp;#39;t really understand what the fight is about. They know nothing
about that &lt;a href=&quot;/2016/06/27/singletons-must-die.html&quot;&gt;Singleton&lt;/a&gt;
design pattern and can&amp;#39;t understand why these guys
are almost ready to kill each other just because one of them says
it&amp;#39;s a pattern and the other one calls it an
&lt;a href=&quot;/2016/02/03/design-patterns-and-anti-patterns.html&quot;&gt;anti-pattern&lt;/a&gt;, insists
that the project must not use it, and threatens everybody with an immediate
discharge if they don&amp;#39;t listen.&lt;/p&gt;

&lt;p&gt;Such a fight freaks everybody out. Everybody who sees positions and doesn&amp;#39;t
see &lt;em&gt;interests&lt;/em&gt;, that is. Remember, the position is, &amp;quot;I want to see the movie&amp;quot; and
&amp;quot;I want to use a singleton.&amp;quot; The only thing a confrontation of
positions can produce is a fight, and the only solution is a compromise:
&amp;quot;You guys need a good &lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;team-building party&lt;/a&gt;
so you become friends and lose &lt;del&gt;balls&lt;/del&gt; the desire to fight.&amp;quot; That&amp;#39;s what those
monkeys build: teams. They believe that when the team is &amp;quot;strong,&amp;quot;
there will be no fights, no conflicts, no arguments, no design patterns,
no anti-patterns, and ... no senior developers. There will be just one
permanent compromise over everything.&lt;/p&gt;

&lt;p&gt;In a family, compromises lead to divorces. In a software team, the best talent
just leaves. They simply don&amp;#39;t want to see their interests being disrespected
all the time, just for the sake of &lt;em&gt;avoiding&lt;/em&gt; fights. Stay away from compromises;
they are pure evil for both a family and a team.&lt;/p&gt;

&lt;h2 id=&quot;win-lose&quot;&gt;Win-Lose&lt;/h2&gt;

&lt;p&gt;The second option, which is a bit better than a compromise, is to use force:
&amp;quot;I&amp;#39;m a man, so you do what I say; we will watch the game!&amp;quot; or
&amp;quot;I feel sick; let me watch a movie.&amp;quot; In either case, one of you will
get what he or she initially wanted. Even though this approach looks
less &amp;quot;democratic,&amp;quot; it&amp;#39;s way more effective, mostly because
it doesn&amp;#39;t involve any third parties: There is no interest of
the police or neighbors involved, and the family resolves the conflict internally
and naturally.&lt;/p&gt;

&lt;p&gt;Both of you understand exactly why you&amp;#39;re watching that game now: because
the male part of the family is physically stronger. Even though it may sound
super annoying to you, my Californian readers, such a family would be way
farther from a divorce than the one that used to make compromises, especially
if the winning party is not always the same.&lt;/p&gt;

&lt;p&gt;If your software team has a &lt;del&gt;moronic&lt;/del&gt; experienced
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;architect&lt;/a&gt;, you will
most likely work in this conflict resolution model. He or she will make decisions,
and you will have to go along. I wrote about such an architect
&lt;a href=&quot;/2016/07/21/convince-me.html&quot;&gt;here&lt;/a&gt;
and &lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;here&lt;/a&gt;.
I said there that an architect must be a dictator, making decisions and taking
full responsibility for them.&lt;/p&gt;

&lt;p&gt;If the architect is super smart, respected by everybody, and immortal, this
force-based conflict resolution technique will work perfectly. The project
will move forward fast, because everybody will work instead of think. There
will be only one person who thinks&amp;mdash;the architect.&lt;/p&gt;

&lt;p&gt;The main drawback of this win-lose approach is the &amp;quot;lose&amp;quot; part: Someone
is always losing. And it&amp;#39;s not about an offense, even though that&amp;#39;s also important.
It&amp;#39;s about us missing some valuable information. You will never know why
your wife wanted to watch that movie or why that junior developer
was suggesting you use NoSQL instead of SQL. You will just force them both
to shut up and follow your will. While they did, you still &amp;quot;lost&amp;quot; something. So
basically it&amp;#39;s the team that is losing something, not just your wife or that
junior developer.&lt;/p&gt;

&lt;h2 id=&quot;win-win&quot;&gt;Win-Win&lt;/h2&gt;

&lt;p&gt;The most difficult and yet most effective way to resolve a conflict is to
collaborate in order to discover the interests of all parties and find
a solution that satisfies them all. You start by asking, &amp;quot;Why do you want to
watch that movie?&amp;quot; to learn what exactly is behind that aggressive
&amp;quot;I want the movie&amp;quot; position. Again, there is a huge difference between
a position and an interest.&lt;/p&gt;

&lt;p&gt;You may hear this back: &amp;quot;I&amp;#39;m just tired.&amp;quot; So the real interest is to &lt;em&gt;relax&lt;/em&gt;,
not to watch the movie. The movie was just one of the options to get rest.
Now, knowing her real interest, you may come up with, &amp;quot;How about I watch
the game and give you a massage at the same time?&amp;quot; This way, the divorce may never happen.&lt;/p&gt;

&lt;p&gt;Thus, the first important step is to help everybody abandon their &lt;em&gt;positions&lt;/em&gt;
and honestly expose their &lt;em&gt;interests&lt;/em&gt;. When that&amp;#39;s done, we can all start to work
not against each other but against the problem: With what solution will all our
interests be satisfied at the same time?&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;A truly professional software team is full of conflicts&lt;/aside&gt;

&lt;p&gt;We will ask that junior developer: &amp;quot;Why do you think we need NoSQL?&amp;quot; It&amp;#39;s
very likely that we will hear something like, &amp;quot;I just want to learn this new
concept.&amp;quot; This is his real interest&amp;mdash;to learn something new while
working on this project. Maybe we can offer him some other technology to
learn? Maybe we can move him to another project where NoSQL is used? There
are many options. But the first step is to understand what he really
wants. Not what position he took, but what was his real motivation for it.&lt;/p&gt;

&lt;p&gt;A truly professional software team is full of conflicts, which are always
being resolved by collaboration. The team is not afraid of conflicts. Instead,
it &lt;em&gt;welcomes&lt;/em&gt; them, because they help reveal the real interests of all parties
involved and make a lot of information visible and available.&lt;/p&gt;

&lt;p&gt;Truly professional team players always try to &lt;em&gt;provoke&lt;/em&gt; conflicts in order to gain
an opportunity to resolve them through collaboration, thereby exiting through the win-win door.
That&amp;#39;s how the team grows&amp;mdash;not by hiding conflicts and making compromises,
but by provoking them, making different interests visible, and finding the
most optimal solutions.&lt;/p&gt;

&lt;p&gt;Be aware, though, that this is way more difficult than organizing
&lt;a href=&quot;/2016/12/06/how-to-pay-programmers-less.html&quot;&gt;team-building parties&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Conflict is what progress is made of. A professional and well-managed
team loves conflicts and creates them on a daily basis. A professional
project manager provokes conflicts and makes sure none of them end
in a consensus. Does that sound strange? It&amp;#39;s not sarcasm. Read on.</summary></entry><entry><title type="html">Can Objects Be Friends?</title><link href="http://www.yegor256.com/2016/12/20/can-objects-be-friends.html" rel="alternate" type="text/html" title="Can Objects Be Friends?" /><published>2016-12-20T00:00:00+00:00</published><updated>2016-12-20T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/12/20/can-objects-be-friends</id><content type="html" xml:base="http://www.yegor256.com/2016/12/20/can-objects-be-friends.html">&lt;p&gt;As &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;discussed before&lt;/a&gt;,
proper encapsulation leads to a complete absence
of &amp;quot;naked data.&amp;quot; However, the question remains: How can objects
interact if they can&amp;#39;t exchange data? Eventually we have to expose
some data in order to let other objects use it, right? Yes, that&amp;#39;s true.
However, I guess I have a solution that keeps encapsulation in place
while allowing objects to interact.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/12/raging-bull.jpg&#39; longdesc=&#39;#52a9356c&#39;/&gt;&lt;figcaption id=&#39;52a9356c&#39;&gt;Raging Bull (1980) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Say that this is our object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d C&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It represents a temperature. The only behavior it exposes is printing
the temperature in Celsius. We don&amp;#39;t want to expose &lt;code&gt;t&lt;/code&gt;, because
that will lead to the &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;&amp;quot;naked data&amp;quot;&lt;/a&gt;
problem. We want to keep &lt;code&gt;t&lt;/code&gt; secret, and that&amp;#39;s a good desire.&lt;/p&gt;

&lt;p&gt;Now, we want to have the ability to print temperature in Fahrenheit. The most
obvious approach would be to introduce another method, &lt;code&gt;toFahrenheitString()&lt;/code&gt;,
or add a Boolean flag to the object, which will change the behavior
of method &lt;code&gt;toString()&lt;/code&gt;, right? Either one of these solutions is better than adding
a method &lt;code&gt;getT()&lt;/code&gt;, but neither one is perfect.&lt;/p&gt;

&lt;p&gt;What if we create this decorator:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TempFahrenheit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TempCelsius&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;%d F&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It should work just great:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TempFahrenheit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TempCelsius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only problem is that it won&amp;#39;t compile in Java, because class
&lt;code&gt;TempFahrenheit&lt;/code&gt; is not allowed to access private &lt;code&gt;t&lt;/code&gt; in class &lt;code&gt;TempCelsius&lt;/code&gt;.
And if we make &lt;code&gt;t&lt;/code&gt; public, everybody will be able to read it directly, and we&amp;#39;ll have
that &amp;quot;naked data&amp;quot; problem&amp;mdash;a severe violation of encapsulation.&lt;/p&gt;

&lt;p&gt;However, if we allow that access &lt;em&gt;only&lt;/em&gt; to one class, everything will be fine.
Something like this (won&amp;#39;t work in Java; it&amp;#39;s just a concept):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TempCelsius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;trust&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TempFahrenheit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// here!&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d C&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since this &lt;code&gt;trust&lt;/code&gt; keyword is placed into the class that allows access,
we won&amp;#39;t have the &amp;quot;naked data&amp;quot; problem&amp;mdash;we will always know exactly which
objects posses knowledge about &lt;code&gt;t&lt;/code&gt;. When we change
something about &lt;code&gt;t&lt;/code&gt;, we know exactly where to update the code.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

&lt;p&gt;P.S. After discussing this idea below in comments I
&lt;a href=&quot;http://www.yegor256.com/2016/12/20/can-objects-be-friends.html#comment-3068629632&quot;&gt;started&lt;/a&gt; to think
that we don&amp;#39;t need that &lt;code&gt;trust&lt;/code&gt; keyword at all. Instead, we should just
give all decorators access to all private attributes of an object.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">As discussed before,
proper encapsulation leads to a complete absence
of &amp;quot;naked data.&amp;quot; However, the question remains: How can objects
interact if they can&amp;#39;t exchange data? Eventually we have to expose
some data in order to let other objects use it, right? Yes, that&amp;#39;s true.
However, I guess I have a solution that keeps encapsulation in place
while allowing objects to interact.</summary></entry><entry><title type="html">MVC vs. OOP</title><link href="http://www.yegor256.com/2016/12/13/mvc-vs-oop.html" rel="alternate" type="text/html" title="MVC vs. OOP" /><published>2016-12-13T00:00:00+00:00</published><updated>2016-12-13T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/12/13/mvc-vs-oop</id><content type="html" xml:base="http://www.yegor256.com/2016/12/13/mvc-vs-oop.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;Model-View-Controller&lt;/a&gt;
(MVC) is an architectural pattern we all are well aware of.
It&amp;#39;s a de-facto standard for almost all UI and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Web_framework&quot;&gt;Web frameworks&lt;/a&gt;. It is convenient
and easy to use. It is simple and effective. It is a great concept ...
for a procedural programmer. If your software is object-oriented, you
should dislike MVC as much as I do. Here is why.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/12/hot-shots.jpg&#39; longdesc=&#39;#cdf5cce3&#39;/&gt;&lt;figcaption id=&#39;cdf5cce3&#39;&gt;Hot Shots! (1991) by Jim Abrahams&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This is how MVC architecture looks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/uml/45d05ab3bd9a93ad88ec209352b62f60.svg&#39; style=&quot;width:35%&quot;
        alt=&#39;PlantUML SVG diagram&#39; class=&#39;plantuml&#39;/&gt;&lt;/p&gt;

&lt;p&gt;Controller is &lt;em&gt;in charge&lt;/em&gt;, taking care of the data received from Model
and injecting it into View&amp;mdash;and this is exactly the problem. The data escapes
the Model and becomes &amp;quot;naked,&amp;quot; which is a big problem, as we
&lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;agreed earlier&lt;/a&gt;.
OOP is all about encapsulation&amp;mdash;data hiding.&lt;/p&gt;

&lt;p&gt;MVC architecture does exactly the opposite by &lt;em&gt;exposing&lt;/em&gt; the data and hiding
behavior. The controller deals with the data directly, making decisions about
its purpose and properties, while the objects, which are supposed to know
everything about the data and hide it, remain &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;anemic&lt;/a&gt;.
That is exactly the principle any procedural architecture is built upon; the
code is in charge of the data. Take this C++ code, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// controller&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_from_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// model&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The speed is %d mph&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// view&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function &lt;code&gt;print_speed()&lt;/code&gt; is the controller. It gets the data &lt;code&gt;s&lt;/code&gt; from
the model &lt;code&gt;load_from_engine()&lt;/code&gt; and renders it via the view &lt;code&gt;printf()&lt;/code&gt;. Only
the controller knows that the data is in miles per hour. The engine
returns &lt;code&gt;int&lt;/code&gt; without any properties. The controller simply assumed that
that data is in mph. If we want to create a similar controller somewhere
else, we will have to make a similar assumption again and again. That&amp;#39;s what the
&amp;quot;naked data&amp;quot; problem is about, and it leads to serious maintainability issues.&lt;/p&gt;

&lt;p&gt;This is an object-oriented alternative to the code above (pseudo-C++):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintedSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// view&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FormattedSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// controller&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpeedFromEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// model&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, &lt;code&gt;SpeedFromEngine.speed()&lt;/code&gt;
returns speed in mph, as an integer; &lt;code&gt;FormattedSpeed.speed()&lt;/code&gt; returns
&lt;code&gt;&amp;quot;%d mph&amp;quot;&lt;/code&gt;; and finally, &lt;code&gt;PrintedSpeed.to_str()&lt;/code&gt; returns the full text of the
message. We can call them &amp;quot;model, view, and controller,&amp;quot; but in reality they
are just objects decorating each other. It&amp;#39;s still the same entity&amp;mdash;the speed.
But it gets more complex and intelligent by being decorated.&lt;/p&gt;

&lt;p&gt;We don&amp;#39;t tear the concept of speed apart. The speed is the speed, no matter
who works with it and where it is presented. It just gets new behavior
from decorators. It grows, but never falls apart.&lt;/p&gt;

&lt;p&gt;To summarize, Controller is a pure &lt;em&gt;procedural&lt;/em&gt; component in the MVC trio,
which turns Model into a passive data holder and View into
a passive data renderer. The controll&lt;b&gt;er&lt;/b&gt;, the hold&lt;b&gt;er&lt;/b&gt;,
the render&lt;b&gt;er&lt;/b&gt; ...
Is it &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;really OOP&lt;/a&gt;?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">Model-View-Controller
(MVC) is an architectural pattern we all are well aware of.
It&amp;#39;s a de-facto standard for almost all UI and
Web frameworks. It is convenient
and easy to use. It is simple and effective. It is a great concept ...
for a procedural programmer. If your software is object-oriented, you
should dislike MVC as much as I do. Here is why.</summary></entry><entry><title type="html">How to Pay Programmers Less</title><link href="http://www.yegor256.com/2016/12/06/how-to-pay-programmers-less.html" rel="alternate" type="text/html" title="How to Pay Programmers Less" /><published>2016-12-06T00:00:00+00:00</published><updated>2016-12-06T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/12/06/how-to-pay-programmers-less</id><content type="html" xml:base="http://www.yegor256.com/2016/12/06/how-to-pay-programmers-less.html">&lt;p&gt;To create software, you need programmers. Unfortunately. They are expensive,
lazy, and almost impossible to control. The software they create either works or doesn&amp;#39;t, but
you still have to pay them, every month. Of course, it&amp;#39;s always better to pay less.
However, sometimes they may figure out they are being
underpaid and quit. How do you prevent that? &lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;Unfortunately&lt;/a&gt;,
we can&amp;#39;t use violence any more, but there are some other mechanisms. Let me
share.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/12/ben-hur.jpg&#39; longdesc=&#39;#cdad7b09&#39;/&gt;&lt;figcaption id=&#39;cdad7b09&#39;&gt;Ben-Hur (1959) by William Wyler&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Keep salaries secret&lt;/strong&gt;.
It&amp;#39;s obvious: Don&amp;#39;t let them discuss
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;salaries&lt;/a&gt;. They must keep this information
secret. Warn them or even sign
&lt;a href=&quot;/2015/05/04/how-to-protect-business-idea.html&quot;&gt;NDAs&lt;/a&gt; prohibiting any talks about wages, bonuses,
compensation plans, etc. They must feel that this information is toxic and
never even talk to each other about salaries. If they don&amp;#39;t know how much
their coworkers are getting, they won&amp;#39;t raise salary questions for much longer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give raises randomly&lt;/strong&gt;.
There should be no system behind your salary upgrades or
&lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;firing decisions&lt;/a&gt;. You give
them raises when you feel like it, not when they are being more productive
or effective. Try to make your decisions unpredictable. Unpredictability creates
fear, and this is exactly what you need. They will be afraid of you and will
not complain about being underpaid for a long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No conferences&lt;/strong&gt;.
Don&amp;#39;t allow them to attend meetups or
conferences. They may meet &lt;a href=&quot;/2015/09/29/mayonnaise.html&quot;&gt;recruiters&lt;/a&gt; there
and find out that their salaries are not
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;fair enough&lt;/a&gt;. Promote the idea
that conferences are just a waste of time. It&amp;#39;s better to organize events in the
&lt;a href=&quot;/2016/08/05/distributed-teams-are-higher-quality.html&quot;&gt;office&lt;/a&gt;.
They always have to stay together, never free to meet programmers from other companies.
The less they know, the safer you are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No work from home&lt;/strong&gt;.
The office must be their second home. Well, preferably the first one. They
must go there every day, have a desk there, a computer, a chair, and a stapler.
They will be emotionally attached to the place and it will be very difficult
to leave, no matter how underpaid they will be. Never allow them to work
&lt;a href=&quot;/2016/08/05/distributed-teams-are-higher-quality.html&quot;&gt;remotely&lt;/a&gt;&amp;mdash;they
may start thinking about a new home with a bigger salary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spy on them&lt;/strong&gt;.
Make sure they all use your email server, computers, servers, and even mobile phones.
Install software that tracks all their messages. Ideally, you should have
a security department watching all of them and regularly informing
you about abnormal or suspicious behavior (office cameras will help too). Any contact with other
companies should be considered suspicious. Employees must know you&amp;#39;re spying on them.
Extra fear is always helpful.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Brainwash them regularly by communicating how great your company is&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Make a deal with competitors&lt;/strong&gt;.
Contact your major competitors in the region and agree to not head-hunt
their programmers if they don&amp;#39;t touch yours. If they reject
this deal, try to recruit a few of their key engineers. Just offer to double
their salaries. You won&amp;#39;t really hire them, of course, but this move will definitely shake
your local market, and competitors will be afraid of you. They will agree to never
touch your &lt;del&gt;slaves&lt;/del&gt; developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promote corporate values&lt;/strong&gt;.
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;Brainwash&lt;/a&gt;
them regularly by communicating how great your company is, how big its
mission is, and how important their contribution is. The numbers on their
paychecks will look way less important compared to the multi-billion-dollar
market the team is trying to dominate. They will sacrifice for a while.
For quite a long time, this trick will work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build a family&lt;/strong&gt;.
Corporate parties, Friday beer, team building events, bowling, birthdays,
lunches and team nights&amp;mdash;use these
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;tools&lt;/a&gt;
to create a feeling that your company is their family. Money is not really what good people talk
about in a family, right? Asking for a raise will sound like a betrayal
of family values&amp;mdash;they will be afraid to do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stress them&lt;/strong&gt;.
They must not feel relaxed, it&amp;#39;s not in your favor. Make sure they
have tight deadlines, complex problems to solve, and enough guilt on
their shoulders. They won&amp;#39;t ask for a raise, constantly feeling guilty
for letting you down with project goals. Try to make them responsible
for failures as much as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make promises&lt;/strong&gt;.
You don&amp;#39;t need to keep them, but you have to make them: promise to
raise their salaries soon, or by the time you
raise investments, or by the time a big contract is signed, or when
&amp;quot;the time is right.&amp;quot; It is important
to always make your promises dependable on events that are out of your
control&amp;mdash;your hands must always be clean.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Instead of giving someone a raise, it&amp;#39;s always better to buy a new PlayStation for the office&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Buy them cushion chairs and tennis tables&lt;/strong&gt;.
Spend just a little on all those funny office things, and they will
pay you back big time, through the ability to underpay your programmers.
A fancy and professional coffee machine will cost you $1,000 and make
it possible to save $200 to $300 on each programmer monthly. Do the math.
Make yourself a rule that instead of giving someone a raise, it&amp;#39;s always
better to buy a new PlayStation for the office. Also, let them bring
their &lt;del&gt;spouses&lt;/del&gt; pets to the office&amp;mdash;they will &lt;del&gt;work&lt;/del&gt; stay
longer for less money.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give them sound titles&lt;/strong&gt;.
Call them Vice Presidents, for example VP of Engineering, VP of Technology,
VP of Whatever. Not a big deal for you, but very important for them. The salary
will be much less valuable than the title they can put on their LinkedIn
profiles. If you&amp;#39;re running out of Vice Presidents, try
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;Senior Architect&lt;/a&gt;,
Lead Technical Lead, Chief Scientist, etc.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;They will keep working for you for less money just because you&amp;#39;re good friends&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Help them survive&lt;/strong&gt;.
Most programmers are rather stupid when it comes to managing money. They simply don&amp;#39;t
know how to buy insurance, how to plan a retirement fund, or even how to
pay taxes. You help them, to your own benefit, of course. They will be
happy to feel safe in your hands, and won&amp;#39;t leave you. They won&amp;#39;t ask
for a raise, either, because they will feel bad about even starting such a negotiation.
You must be the &amp;quot;parent,&amp;quot; and they will be the &amp;quot;kids.&amp;quot; It&amp;#39;s a good old model.
It works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be a friend&lt;/strong&gt;.
This is the last and most powerful technique. You have to be a friend
to your programmers. It&amp;#39;s very difficult to negotiate money with a friend&amp;mdash;they
won&amp;#39;t be able to do it easily. They will keep working for you for less money
just because you&amp;#39;re good friends. How do you become friends? Well, meet their
families, invite them over for dinner at your house, give them birthday
gifts&amp;mdash;all those tricks. They will save you a lot of money.&lt;/p&gt;

&lt;p&gt;Did I forget anything?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><category term="sarcasm" /><summary type="html">To create software, you need programmers. Unfortunately. They are expensive,
lazy, and almost impossible to control. The software they create either works or doesn&amp;#39;t, but
you still have to pay them, every month. Of course, it&amp;#39;s always better to pay less.
However, sometimes they may figure out they are being
underpaid and quit. How do you prevent that? Unfortunately,
we can&amp;#39;t use violence any more, but there are some other mechanisms. Let me
share.</summary></entry><entry><title type="html">EO</title><link href="http://www.yegor256.com/2016/11/29/eolang.html" rel="alternate" type="text/html" title="EO" /><published>2016-11-29T00:00:00+00:00</published><updated>2016-11-29T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/11/29/eolang</id><content type="html" xml:base="http://www.yegor256.com/2016/11/29/eolang.html">&lt;p&gt;It&amp;#39;s time to do it! We&amp;#39;ve started work on a new programming language. Its
name is &lt;strong&gt;EO&lt;/strong&gt; (as in
&lt;a href=&quot;/elegant-objects.html&quot;&gt;Elegant Objects&lt;/a&gt; or in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Esperanto&quot;&gt;Esperanto&lt;/a&gt;): &lt;a href=&quot;http://www.eolang.org&quot;&gt;eolang.org&lt;/a&gt;.
It&amp;#39;s open source and community driven:
&lt;a href=&quot;https://github.com/yegor256/eo&quot;&gt;yegor256/eo&lt;/a&gt; GitHub repo. It&amp;#39;s still in
very early draft form, but the direction is more or less clear: It has to be
truly object-oriented, with no compromises. You&amp;#39;re welcome to join us.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/11/vicky-cristina-barcelona.jpg&#39; longdesc=&#39;#36492e39&#39;/&gt;&lt;figcaption id=&#39;36492e39&#39;&gt;Vicky Cristina Barcelona (2008) by Woody Allen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Why yet another language? Because there are no object-oriented languages
on the market that are really object-oriented, to my knowledge. Here are the
things I think do not belong in a pure object-oriented language:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;static methods&lt;/li&gt;
&lt;li&gt;classes (only types and objects)&lt;/li&gt;
&lt;li&gt;implementation inheritance&lt;/li&gt;
&lt;li&gt;mutability&lt;/li&gt;
&lt;li&gt;NULL&lt;/li&gt;
&lt;li&gt;reflection&lt;/li&gt;
&lt;li&gt;constants&lt;/li&gt;
&lt;li&gt;type casting&lt;/li&gt;
&lt;li&gt;annotations&lt;/li&gt;
&lt;li&gt;flow control (&lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many other minor mistakes that Java and C++ are full of.&lt;/p&gt;

&lt;p&gt;At the moment, we think that EO will compile into Java. Not into byte-code,
but into &lt;code&gt;.java&lt;/code&gt; files, later compilable to byte-code.&lt;/p&gt;

&lt;p&gt;I really count on your contribution. Please submit your ideas as
tickets and pull request to the
&lt;a href=&quot;https://github.com/yegor256/eo&quot;&gt;yegor256/eo&lt;/a&gt; GitHub repo.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">It&amp;#39;s time to do it! We&amp;#39;ve started work on a new programming language. Its
name is EO (as in
Elegant Objects or in
Esperanto): eolang.org.
It&amp;#39;s open source and community driven:
yegor256/eo GitHub repo. It&amp;#39;s still in
very early draft form, but the direction is more or less clear: It has to be
truly object-oriented, with no compromises. You&amp;#39;re welcome to join us.</summary></entry><entry><title type="html">Encapsulation Covers Up Naked Data</title><link href="http://www.yegor256.com/2016/11/21/naked-data.html" rel="alternate" type="text/html" title="Encapsulation Covers Up Naked Data" /><published>2016-11-21T00:00:00+00:00</published><updated>2016-11-21T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/11/21/naked-data</id><content type="html" xml:base="http://www.yegor256.com/2016/11/21/naked-data.html">&lt;p&gt;Encapsulation is the core principle of object-oriented programming
that makes objects solid, cohesive, trustworthy, etc. But
what exactly is encapsulation? Does it only protect against access
to private attributes from outside an object? I think it&amp;#39;s much more.
Encapsulation leads to the absence of &lt;em&gt;naked&lt;/em&gt; data on all levels and in all forms.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/11/borat.jpg&#39; longdesc=&#39;#30fc8a97&#39;/&gt;&lt;figcaption id=&#39;30fc8a97&#39;&gt;Borat: Cultural Learnings of America for Make Benefit Glorious Nation of Kazakhstan (2006) by Larry Charles&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This is what naked data is (C code):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The temperature is %d F&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here &lt;code&gt;t&lt;/code&gt; is the data, which is publicly accessible by the code around it.
Anyone can modify it or read it.&lt;/p&gt;

&lt;p&gt;Why is that bad? For one reason: tight and hidden coupling.&lt;/p&gt;

&lt;p&gt;The code around &lt;code&gt;t&lt;/code&gt; inevitably makes a lot of assumptions about the data. For
example, both lines after &lt;code&gt;int t&lt;/code&gt; decided that the temperature is in Fahrenheit.
At the moment of writing, this may be true, but this assumption couples the
code with the data. If tomorrow we change &lt;code&gt;t&lt;/code&gt; to Celsius, the code won&amp;#39;t know
about this change. That&amp;#39;s why I call this coupling &lt;em&gt;hidden&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we change the type of &lt;code&gt;t&lt;/code&gt; from &lt;code&gt;int&lt;/code&gt; to, say, &lt;code&gt;double&lt;/code&gt;, the &lt;code&gt;printf&lt;/code&gt;
line won&amp;#39;t print anything after the decimal point. Again, the coupling is
there, but it&amp;#39;s hidden. Later on, we simply won&amp;#39;t be able to find all the places in our
code where we made these or other assumptions about &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will seriously affect maintainability.&lt;/p&gt;

&lt;p&gt;And this is not a solution, as you can imagine (Java now):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks like an object, but the data is still naked. Anyone can retrieve
&lt;code&gt;t&lt;/code&gt; from the object and decide whether it&amp;#39;s Fahrenheit or Celsius, whether
it has digits after the dot or not, etc. This is not encapsulation yet!&lt;/p&gt;

&lt;p&gt;The only way to encapsulate &lt;code&gt;t&lt;/code&gt; is to make sure nobody can touch
it either directly or by retrieving it from an object. How do we do that?
Just stop exposing data and start exposing functionality. Here is how,
for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d F&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We don&amp;#39;t allow anyone to retrieve &lt;code&gt;t&lt;/code&gt; anymore. All they can do is
convert temperature to text. If and when we decide to change &lt;code&gt;t&lt;/code&gt; to Celsius,
we will do it just once and in one place: in the class &lt;code&gt;Temperature&lt;/code&gt;.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Any data elements that escape objects are naked and lead to maintainability problems&lt;/aside&gt;

&lt;p&gt;If we need other functions in the future, like math operations or conversion
to Celsius, we add more methods to class &lt;code&gt;Temperature&lt;/code&gt;. But we never
let anyone touch or know about &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This idea is close to
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;&amp;quot;printers instead of getters,&amp;quot;&lt;/a&gt;
which we discussed earlier, though from a much wider perspective.
Here I&amp;#39;m saying that any data elements that escape objects are &lt;em&gt;naked&lt;/em&gt;
and lead to maintainability problems.&lt;/p&gt;

&lt;p&gt;The question is how we can work entirely without naked data, right? Eventually
we have to let objects exchange data, don&amp;#39;t we? Yes, that&amp;#39;s true. But not entirely.
I&amp;#39;ll explain that in
&lt;a href=&quot;/2016/12/20/can-objects-be-friends.html&quot;&gt;my next post&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">Encapsulation is the core principle of object-oriented programming
that makes objects solid, cohesive, trustworthy, etc. But
what exactly is encapsulation? Does it only protect against access
to private attributes from outside an object? I think it&amp;#39;s much more.
Encapsulation leads to the absence of naked data on all levels and in all forms.</summary></entry></feed>
