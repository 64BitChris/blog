<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014</copyright>
    <lastBuildDate>Mon, 26 Jan 2015 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>Making Your Boss Happy Is a False Objective</title>
      <link>http://www.yegor256.com/2015/01/26/happy-boss-false-objective.html</link>
      <description>&lt;p&gt;We all have bosses. We also have customers who pay us for running
their software projects. They are my bosses for the time of the contract. I&amp;#39;m also
acting as a boss for developers who are working for &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;.
It is obvious that a good employee/contractor is one who makes his
boss/customer happy. But only a bad employee works toward
this goal. Trying to make your boss happy is a false target that,
if pursued, ruins the project. A professional employee works
for the project, not for the boss.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/the-million-dollar-hotel.png' style='width:600px;' alt='The Million Dollar Hotel (2000) by Wim Wenders'/&gt;&lt;figcaption&gt;The Million Dollar Hotel (2000) by Wim Wenders&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;We all work on &lt;strong&gt;projects&lt;/strong&gt; as developers, designers, programmers, managers,
testers, you name it. The boss is also a member of the project. More
formally, he or she is a &lt;strong&gt;stakeholder&lt;/strong&gt;, same as every one of us. Each stakeholder
has his own &lt;strong&gt;needs&lt;/strong&gt; for the project: 1) Jeff, the developer, wants to learn Scala
and collect his paychecks every two weeks; 2) Sally, the product owner,
wants to attend an expo in Paris and also collect her paychecks;
3) Bob, the CTO, wants to raise round A funding and collect a big paycheck; etc.&lt;/p&gt;

&lt;p&gt;The project has its own &lt;strong&gt;objectives&lt;/strong&gt;, to achieve 1 million downloads
in less than six months and under $300,000, for example.
This is what the project works for. This is what all of us are here for.&lt;/p&gt;

&lt;p&gt;Our personal needs may be fully satisfied
while we&amp;#39;re all working toward this goal, or some of them may
be sacrificed. I mean all of us, including the boss, whoever he or she is,
either a CTO, a co-founder, a project manager, or a team lead.&lt;/p&gt;

&lt;p&gt;The project is the source of our checks. Not the CFO.&lt;/p&gt;

&lt;p&gt;The CFO is a stakeholder, like everyone else. The project gives him more
power than others because it&amp;#39;s necessary for the whole mechanism to
work properly. Every project member has his or her own &lt;strong&gt;roles and responsibilities&lt;/strong&gt;.
I write code; the CFO writes checks. I eat at McDonalds; he drives
a Jaguar. We have different needs, and we both agreed that the project
would satisfy them. Otherwise we wouldn&amp;#39;t be here, right?&lt;/p&gt;

&lt;p&gt;We&amp;#39;re all parts of a mechanism called a &amp;quot;project&amp;quot;, which works according
to the rules and principles of &lt;strong&gt;project management&lt;/strong&gt; whether we are aware of
them or not. Whether we have a project manager or not. Even if we violate
all of them and manage ourselves in total chaos, we still have a scope,
cost, schedule, and all other attributes of project management.&lt;/p&gt;

&lt;p&gt;A professional and savvy boss understands that his role in the mechanism
is to clearly define project objectives and make sure everybody&amp;#39;s needs are
aligned with those objectives. In a properly managed and organized project,
everybody sees and feels how his or her personal needs are satisfied
when the project achieves its objectives: Jeff learns Scala, Sally
sees Paris, and Bob buys a new house.&lt;/p&gt;

&lt;p&gt;However, if Jeff wants to learn Scala and we&amp;#39;re
developing an iOS application, that is a problem for the boss to resolve.
Either convince Jeff to fall in love with Swift (I doubt that&amp;#39;s possible)
or replace him with someone who is already in love with it. It&amp;#39;s clear that
a professional boss will resort to such a tragic act as firing Jeff
not because of his personal feelings towards Jeff but because
they are both working toward the project objectives. Jeff and the boss
will both understand that Jeff&amp;#39;s need to learn Scala is not aligned
with the objective of the project.&lt;/p&gt;

&lt;p&gt;It is the CTO&amp;#39;s responsibility to do something about Jeff when his personal
needs become misaligned with the objectives of the project that is paying
his salary. A professional CEO understands that and
always acts in the best interest of the project, not of himself or
anyone else personally.&lt;/p&gt;

&lt;p&gt;I believe a professional team player does two things:
&lt;strong&gt;obeys and resists&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, you have to understand that the boss is here in order
to help you organize your time, your tasks, your communications,
your plans, etc. He knows more about the project and uses that
information to help you do your job. Your real boss is the project;
the boss you interact with is just a hired manager who translates
project objectives into plans, instructions, schedules, etc.&lt;/p&gt;

&lt;p&gt;This boss is your colleague who does management while you&amp;#39;re
writing code. You&amp;#39;re both equal. You and he are in the same boat. Your
functions are different than his; that&amp;#39;s all. You&amp;#39;re not working
&lt;em&gt;for&lt;/em&gt; him but &lt;em&gt;with&lt;/em&gt; him on a project. A true professional team player
feels himself equal to all other members of the project, no matter
how high they are in the hierarchy.&lt;/p&gt;

&lt;p&gt;At the same time, he strictly follows the process and
obeys all project rules and instructions, not because he is afraid of
being fired but because he wants the project to succeed.&lt;/p&gt;

&lt;p&gt;Second, being a professional team player requires a constant readiness
to resist each and every instruction if you feel it contradicts
the project objectives. A true professional doesn&amp;#39;t work for a boss.
He doesn&amp;#39;t want to make the boss happy. He actually doesn&amp;#39;t care whether the
boss is happy or not. He knows that the real boss is the project and tries
to make the project successful and ... happy.&lt;/p&gt;

&lt;p&gt;A true professional always works for himself. Jeff wants to learn Scala
and earn a certain amount of cash. He joined the project in order to satisfy these
needs. If the project fails, Jeff won&amp;#39;t get the money and won&amp;#39;t fully learn Scala.
So if the boss tells Jeff to do something that may jeopardize the
project&amp;#39;s success, will Jeff do it? Does he care about disappointing the boss?
Absolutely not. All he cares about is the project&amp;#39;s success, which translates to his
personal success.&lt;/p&gt;

&lt;p&gt;Thus, making your boss happy is a goal for the immature, fearsome, lazy, and weak.
Making your project successful is an objective for professional,
strong, mature, and brave team players.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/26/happy-boss-false-objective.html</guid>
      <dc:date>2015-01-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>If. Then. Throw. Else. WTF?</title>
      <link>http://www.yegor256.com/2015/01/21/if-then-throw-else.html</link>
      <description>&lt;p&gt;This is the code I could never understand:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X can&amp;#39;t be negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is positive or zero&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have been trying to find a proper metaphor to explain its incorrectness.
Today I finally found it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;If-then-else is a forking mechanism of procedural programming. The CPU
either goes to the left and &lt;strong&gt;then&lt;/strong&gt; does something or goes to the right and
does something &lt;strong&gt;else&lt;/strong&gt;. Imagine yourself driving a car and seeing this sign:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/if-then-throw-1.png' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;It looks logical, doesn&amp;#39;t it? You can go in the left lane if you&amp;#39;re not driving a truck.
Otherwise you should go in the right lane. Both lanes meet up
in a while. No matter which one you choose, you will end up on the same road.
This is what this code block does:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is positive or zero&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, try to imagine this sign:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/if-then-throw-2.png' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;It looks very strange to me, and you will never see this sign anywhere
simply because a dead end means an &lt;em&gt;end&lt;/em&gt;, a full stop, a finish.
What is the point of drawing a lane
after the dead end sign? There is no point.&lt;/p&gt;

&lt;p&gt;This is how a proper sign would look:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/if-then-throw-3.png' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;This is how a proper code block would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X can&amp;#39;t be negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is positive or zero&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The same is true for loops. This is wrong:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;found positive number&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this is right:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;found positive number&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is no road after the dead end! If you draw it, your code looks
like this very funny snippet I found a few years ago reviewing
sources written by some very well-paid developer in one very serious
company:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X is negative&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don&amp;#39;t do this.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/21/if-then-throw-else.html</guid>
      <dc:date>2015-01-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Cut Corners and Stay Cool</title>
      <link>http://www.yegor256.com/2015/01/15/how-to-cut-corners.html</link>
      <description>&lt;p&gt;You have a task assigned to you, and you don&amp;#39;t like it. You are simply
not in the mood. You don&amp;#39;t know how to fix that damn bug. You have no idea
how that bloody module was designed, and you don&amp;#39;t know how it works. But
you have to fix the issue, which was reported by someone who has no clue how
this software works. You get frustrated and blame that stupid project manager and
programmers who were fired two years ago. You spend hours just to find out
how the code works. Then even more hours trying to fix it. In the end,
you miss the deadline and &lt;strong&gt;everybody blames you&lt;/strong&gt;. Been there, done that?&lt;/p&gt;

&lt;p&gt;There is, however, an alternative approach that provides a professional exit
from this situation. Here are some tips I recommend to my peers who code with me
in &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt; projects.
In a nutshell, I&amp;#39;m going to explain how you can &lt;strong&gt;cut corners&lt;/strong&gt; and remain
professional, 1) protecting your nerves, 2) optimizing your project&amp;#39;s expenses,
and 3) increasing the quality of the source code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is a list of options you have, in order of preference. I would
recommend you start with the first one on the list and proceed down when you
have to.&lt;/p&gt;

&lt;h2 id=&quot;create-dependencies,-blame-them,-and-wait&quot;&gt;Create Dependencies, Blame Them, and Wait&lt;/h2&gt;

&lt;p&gt;This is the first and most preferable option. If you can&amp;#39;t figure out
how to fix an issue or how to implement a new feature, it&amp;#39;s a fault
of the project, not you. Even if you can&amp;#39;t figure it out because you
don&amp;#39;t know anything about Ruby and they hired you to fix bugs
in a Ruby on Rails code base &amp;mdash; it&amp;#39;s their fault. Why did they hire
you when you know nothing about Ruby?&lt;/p&gt;

&lt;p&gt;So be positive; don&amp;#39;t blame yourself. If you don&amp;#39;t know how this
damn code works, it&amp;#39;s a fault of the code, not you. Good code is
easy to understand and maintain.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-1.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Don&amp;#39;t try to eat spaghetti code; complain to the chef and ask
him or her to cook something better (BTW, I love spaghetti).&lt;/p&gt;

&lt;p&gt;How can you do that? Create dependencies &amp;mdash; new bugs complaining
about unclear design, lack of unit tests, absence of necessary classes, or
whatever. Be creative and offensive &amp;mdash; in a constructive and professional way,
of course. Don&amp;#39;t get personal. No matter who cooked that spaghetti, you have
nothing against him or her personally. You just want another dish, that&amp;#39;s all.&lt;/p&gt;

&lt;p&gt;Once you have those dependencies reported, explain in the main ticket
that you can&amp;#39;t continue until all of them are resolved. You will
legally stop working, and someone else will improve the code you need. Later,
when all dependencies are resolved and the code looks better, try to
get back to it again. If you still see issues, create new dependencies.
Keep doing this until the code in front of you is clean and easy to fix.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t be a hero &amp;mdash; don&amp;#39;t rush into fixing the bad code you inherited. Think
&lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;like a developer, not a hacker&lt;/a&gt;.
Remember that your first and most important responsibility as
a disciplined engineer is to help the project &lt;strong&gt;reveal&lt;/strong&gt; maintainability issues.
Who will fix them and how is the responsibility of a project manager.
Your job is to reveal, not to hide. By being a hero and trying to fix everything
in the scope of a single task, you&amp;#39;re not doing the project a favor
&amp;mdash; you&amp;#39;re concealing the problem(s).&lt;/p&gt;

&lt;p&gt;Edit: Another good example of a dependency may be a question raised
at, for example, StackOverflow.com or a user list of a third-party library.
If you can&amp;#39;t find a solution yourself and the problem is outside of the scope
of your project &amp;mdash; submit a question to SO and put its link to the
source code (in JavaDoc block, for example).&lt;/p&gt;

&lt;h2 id=&quot;demand-better-documentation-and-wait&quot;&gt;Demand Better Documentation and Wait&lt;/h2&gt;

&lt;p&gt;All dependencies are resolved and the code looks clean, but you still
don&amp;#39;t understand how to fix the problem or implement a new feature. It&amp;#39;s
too complex. Or maybe you just don&amp;#39;t know how this library works. Or you&amp;#39;ve
never done anything like that before. Anyhow, you can&amp;#39;t continue because
you don&amp;#39;t understand. And in order to understand, you will need a lot of time &amp;mdash;
much more than you have from your project manager or your Scrum board. What
do you do?&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-2.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Again, think positively and don&amp;#39;t blame yourself. If the software is not
clear enough for a total stranger, it&amp;#39;s &amp;quot;their&amp;quot; fault, not yours. They created
the software in a way that&amp;#39;s difficult to digest and modify. But the code is
clean; it&amp;#39;s not spaghetti anymore. It&amp;#39;s a perfectly cooked lobster, but
you don&amp;#39;t know how to eat lobster! You&amp;#39;ve never ate it before.&lt;/p&gt;

&lt;p&gt;The chef did a good job; he cooked it well, but the restaraunt didn&amp;#39;t give
you any instructions on how to eat such a sophisticated dish. What do you do?&lt;/p&gt;

&lt;p&gt;You ask for a manual. You ask for documentation. Properly designed
and written source code must be properly documented. Once you see that
something is not clear for you, create new dependencies that ask for better
documentation of certain aspects of the code.&lt;/p&gt;

&lt;p&gt;Again, don&amp;#39;t be a hero and try to understand everything yourself. Of course
you&amp;#39;re a smart guy, but the project doesn&amp;#39;t need a single smart guy. The
project needs maintainable code that is easy to modify, even by someone
who is not as smart as yourself. So do your project a favor: reveal the
documentation issue, and ask someone to fix it for you. Not just for you,
for everybody. The entire team will benefit from such a request.
Once the documentation is fixed, you will continue with your
task, and everybody will get source code that is a bit better than it
was before. Win-win, isn&amp;#39;t it?&lt;/p&gt;

&lt;h2 id=&quot;reproduce-the-bug-and-call-it-a-day&quot;&gt;Reproduce the Bug and Call It a Day&lt;/h2&gt;

&lt;p&gt;Now the code is clean, the documentation is good enough,
but you&amp;#39;re stuck anyway. What to do?
Well, I&amp;#39;m a big fan of test-driven development, so my next suggestion would be
to create a test that reproduces the bug. Basically, this is what you should start
every ticket with, be it a bug or a feature. Catch the bug with a unit test!
Prove that the bug exists by failing the build with a new test.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=7SI6P3M636MLCO5E'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/working-effectively-with-legacy-code.png' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;This may be rather difficult to achieve, especially when the software you&amp;#39;re
trying to fix or modify was written by &lt;span class=&quot;strike&quot;&gt;idiots&lt;/span&gt;
someone who had no idea about unit testing. There are plenty of techniques
that may help you find a way to make such software more testable. I would
highly recommend you read
&lt;a href=&quot;http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=7SI6P3M636MLCO5E&quot;&gt;Working Effectively with Legacy Code&lt;/a&gt;
by Michael Feathers. There are many different patterns, and most of them work.&lt;/p&gt;

&lt;p&gt;Once you manage to reproduce the bug and the build fails, stop right there.
That&amp;#39;s more than enough for a single piece of work. Skip the test
(for example, using &lt;code&gt;@Ignore&lt;/code&gt; annotation in JUnit 4) and commit your changes.
Then add documentation to the unit test you just created, preferably in the
form of a &lt;code&gt;@todo&lt;/code&gt;. Explain there that you managed to reproduce the problem
but didn&amp;#39;t have enough time to fix it. Or maybe you just don&amp;#39;t know how to
fix it. Be honest and give all possible details.&lt;/p&gt;

&lt;p&gt;I believe that catching a bug with a unit test is, in most cases, more than 80% of success.
The rest is way more simple: just fix the code and make the test pass. Leave
this job to someone else.&lt;/p&gt;

&lt;h2 id=&quot;prove-a-bug&amp;#39;s-absence&quot;&gt;Prove a Bug&amp;#39;s Absence&lt;/h2&gt;

&lt;p&gt;Very often you simply can&amp;#39;t reproduce a bug. That&amp;#39;s not because the code is not
testable and can&amp;#39;t be used in a unit test but because you can&amp;#39;t reproduce
an error situation. You know that the code crashes in production, but you can&amp;#39;t
crash it in a test. The error stack trace reported by the end user or your
production logging system is not reproducable. It&amp;#39;s a very common situation.
What do you do?&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-3.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;I think the best option here is to create a test that will prove that
the code works as intended. The test won&amp;#39;t fail, and the build will remain clean.
You will commit it to the repository and ... report that the problem is solved.
You will say that the reported bug doesn&amp;#39;t really exist in real life. You
will state that there is no bug &amp;mdash; &amp;quot;our software works correctly; here
is the proof: see my new unit test.&amp;quot;&lt;/p&gt;

&lt;p&gt;Will they believe you? I don&amp;#39;t think so, but they don&amp;#39;t have a choice. They
can&amp;#39;t push you any further. You&amp;#39;ve already done something &amp;mdash; created
a new test that proves everything is fine. The ticket will be closed
and the project will move on.&lt;/p&gt;

&lt;p&gt;If, later on, the same problem occurs in
production, a new bug will be reported. It will be linked to your ticket. Your
experience will help someone investigate the bug further. Maybe that
guy will also fail to catch the bug with a test and will also create
a new, successful and &amp;quot;useless&amp;quot; test. And this may happen again and again.
Eventually, this cumulative group experience will help the last guy
catch the bug and fix it.&lt;/p&gt;

&lt;p&gt;Thus, a new passing test is a good response to a bug that you can&amp;#39;t catch
with a unit test.&lt;/p&gt;

&lt;h2 id=&quot;disable-the-feature&quot;&gt;Disable the Feature&lt;/h2&gt;

&lt;p&gt;Sometimes the unit test technique won&amp;#39;t work, mostly because a bug will be
too important to be ignored. They won&amp;#39;t agree with you when you show them
a unit test that proves the bug doesn&amp;#39;t exist. They will tell you
that &amp;quot;when our users are trying to download a PDF, they get a blank page.&amp;quot;
And they will also say they don&amp;#39;t really care about your bloody
unit tests. All they care about is that PDF document that should be
downloadable. So the trick with a unit test won&amp;#39;t work. What do you do?&lt;/p&gt;

&lt;p&gt;It depends on many factors, and most of these factors are not technical.
They are political, organizational, managerial, social, you name it. However,
in most cases, I would recommend you disable that toxic feature,
release a new version, and close the ticket.&lt;/p&gt;

&lt;p&gt;You will take the problem off your shoulders and everybody will be pleased.
Well, except that poor end user. But this is not your problem. This is the
fault of management, which didn&amp;#39;t organize pre-production testing properly.
Again, don&amp;#39;t take this blame on yourself. Your job is to keep the code
clean and finish your tickets in a reasonable amount of time. Their
job is to make sure that developers, testers, DevOps, marketers, product
managers, and designers work together to deliver the product with an
acceptable number of errors.&lt;/p&gt;

&lt;p&gt;Production errors are not programmers&amp;#39; mistakes, though delayed
tickets are. If you keep a ticket in your hands for too long, you become
an unmanageable unit of work. They simply can&amp;#39;t manage you anymore. You&amp;#39;re doing
something, trying to fix the bug, saying &amp;quot;I&amp;#39;m trying, I&amp;#39;m trying ...&amp;quot;
How can they manage such a guy? Instead, you should deliver quickly, even if
it comes at the cost of a temporarily disabled feature.&lt;/p&gt;

&lt;h2 id=&quot;say-no&quot;&gt;Say No&lt;/h2&gt;

&lt;p&gt;OK, let&amp;#39;s say none of the above works. The code is clean, the documentation
is acceptable, but you can&amp;#39;t catch the bug, and they don&amp;#39;t accept a unit
test from you as proof of the bug&amp;#39;s absence. They also don&amp;#39;t allow you to
disable a feature, because it is critical to the user experience. What choices
do you have? Just one.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cut-corners-4.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Be professional and say &amp;quot;No, I can&amp;#39;t do this; find someone else.&amp;quot;
Being a professional developer doesn&amp;#39;t mean being able to fix any problem. Instead,
it means honesty. If you see that you can&amp;#39;t
fix the problem, say so as soon as possible. Let them decide what to do.
If they eventually decide to fire you because of that, you will remain a
professional. They will remember you as a guy who was honest and took his
reputation seriously. In the end, you will win.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t hold the task in your hands. The minute you realize you&amp;#39;re
not the best guy for it or you simply can&amp;#39;t fix it &amp;mdash; notify
your manager. Make it his problem. Actually, it is his problem in the
first place. He hired you. He interviewed you. He decided to give you this
task. He estimated your abilities and your skills.
So it&amp;#39;s payback time.&lt;/p&gt;

&lt;p&gt;Your &amp;quot;No!&amp;quot; will be very valuable feedback for him. It will help him
make his next important management decisions.&lt;/p&gt;

&lt;p&gt;On the other hand, if you lie just to give the impression you&amp;#39;re a guy who
can fix anything and yet fail in the end, you will damage not only your
reputation but also the project&amp;#39;s performance and objectives.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/15/how-to-cut-corners.html</guid>
      <dc:date>2015-01-15T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>A Compound Name Is a Code Smell</title>
      <link>http://www.yegor256.com/2015/01/12/compound-name-is-code-smell.html</link>
      <description>&lt;p&gt;Do you name variables like &lt;code&gt;textLength&lt;/code&gt;, &lt;code&gt;table_name&lt;/code&gt;, or &lt;code&gt;current-user-email&lt;/code&gt;?
All three are compound names that consist of more than one word. Even though
they look more descriptive than &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, or &lt;code&gt;email&lt;/code&gt;, I would strongly
recommend avoiding them. I believe a variable name that is more complex than a noun
is a code smell. Why? Because we usually give a variable a compound name when its scope
is so big and complex that a simple noun would sound ambiguous.
And a big, complex scope is an obvious code smell.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/meaning-of-life-every-sperm.png' style='width:600px;' alt='The Meaning of Life (1983) by Terry Jones and Terry Gilliam'/&gt;&lt;figcaption&gt;The Meaning of Life (1983) by Terry Jones and Terry Gilliam&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The scope of a variable is the place where it is visible, like a method, for example. Look
at this Ruby class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CSV&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvFileName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;csvLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The visible scope of variable &lt;code&gt;csvFileName&lt;/code&gt; is method &lt;code&gt;initialize()&lt;/code&gt;, which
is a constructor of the class &lt;code&gt;CSV&lt;/code&gt;. Why does it need a compound name
that consists of three words? Isn&amp;#39;t it already clear that a single-argument
constructor of class &lt;code&gt;CSV&lt;/code&gt; expects the name of a file with
comma-separated values? I would rename it to &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, the scope of &lt;code&gt;@fileName&lt;/code&gt; is the entire &lt;code&gt;CSV&lt;/code&gt; class. Renaming a single
variable in the class to just &lt;code&gt;@file&lt;/code&gt; won&amp;#39;t introduce
any confusion. It&amp;#39;s still clear what file we&amp;#39;re dealing with.
The same situation exists with the &lt;code&gt;csvLine&lt;/code&gt; variable. It is clear that we&amp;#39;re
dealing with CSV lines here. The &lt;code&gt;csv&lt;/code&gt; prefix is just a redundancy.
Here is how I would refactor the class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CSV&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now it looks clear and concise.&lt;/p&gt;

&lt;p&gt;If you can&amp;#39;t perform such a refactoring, it means your scope is too
big and/or too complex. An ideal method should deal with up to five variables,
and an ideal class should encapsulate up to five properties.&lt;/p&gt;

&lt;p&gt;If we have five variables, can&amp;#39;t we find five nouns to name them?&lt;/p&gt;

&lt;p&gt;Adam and Eve didn&amp;#39;t have second names. They were unique in Eden,
as were many other characters in the Old Testament. Second and middle
names were invented later in order to resolve ambiguity. To keep
your methods and classes clean and solid, and to prevent ambiguity, try to give your variables
and methods unique single-word names, just like Adam and Eve were named
by you know who :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/12/compound-name-is-code-smell.html</guid>
      <dc:date>2015-01-12T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Continuous Integration on Windows, with Appveyor and Maven</title>
      <link>http://www.yegor256.com/2015/01/10/windows-appveyor-maven.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.appveyor.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/appveyor.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;The purpose of Continuous Integration is to tell us, the developers,
when the product we&amp;#39;re working on is not &amp;quot;packagable&amp;quot; any more. The
sooner we get the signal, the better. Why? Because the damage will
be younger if we find it sooner. The younger the damage, the easier it is
to fix. There are many modern and high-quality
&lt;a href=&quot;/2014/10/05/ten-hosted-continuous-integration-services.html&quot;&gt;hosted continuous integration services&lt;/a&gt;,
but only one of them (to my knowledge) supports Windows as a build
platform &amp;mdash; &lt;a href=&quot;http://www.appveyor.com&quot;&gt;appveyor.com&lt;/a&gt;. My experience
tells me that it&amp;#39;s a good practice to continuously integrate on
different platforms at the same time, especially when developing an
open source library. That&amp;#39;s why, in &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;
we&amp;#39;re using AppVeyor in combination with &lt;a href=&quot;http://www.travis-ci.org&quot;&gt;Travis&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This is how I managed to configure AppVeyor to build my Java Maven projects
(this is &lt;code&gt;appveyor.yml&lt;/code&gt; configuration file you&amp;#39;re supposed to place
in the root directory of your Github repository):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;{build}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Windows Server 2012&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Add-Type -AssemblyName System.IO.Compression.FileSystem&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;if (!(Test-Path -Path &amp;quot;C:\maven&amp;quot; )) {&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;(new-object System.Net.WebClient).DownloadFile(&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;&amp;#39;http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.zip&amp;#39;,&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;&amp;#39;C:\maven-bin.zip&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;[System.IO.Compression.ZipFile]::ExtractToDirectory(&amp;quot;C:\maven-bin.zip&amp;quot;, &amp;quot;C:\maven&amp;quot;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SET PATH=C:\maven\apache-maven-3.2.5\bin;%JAVA_HOME%\bin;%PATH%&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SET MAVEN_OPTS=-XX:MaxPermSize=2g -Xmx4g&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SET JAVA_OPTS=-XX:MaxPermSize=2g -Xmx4g&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;build_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mvn clean package --batch-mode -DskipTest&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;test_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mvn clean install --batch-mode&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;C:\maven\&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;C:\Users\appveyor\.m2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It was not that easy at all, so I decided to share. You can see
how this configuration works in these projects:
&lt;a href=&quot;https://github.com/jcabi/jcabi-aspects&quot;&gt;jcabi-aspects&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jcabi/jcabi-email&quot;&gt;jcabi-email&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jcabi/jcabi-dynamo&quot;&gt;jcabi-dynamo&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/yegor256/rultor&quot;&gt;rultor&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sat, 10 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/10/windows-appveyor-maven.html</guid>
      <dc:date>2015-01-10T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily Stand-Up Meetings Are a Good Tool for a Bad Manager</title>
      <link>http://www.yegor256.com/2015/01/08/morning-standup-meetings.html</link>
      <description>&lt;p&gt;A stand-up meeting (or simply &amp;quot;stand-up&amp;quot;) is
&amp;quot;a daily team-meeting held to provide a status update
to the team members&amp;quot;, according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Stand-up_meeting&quot;&gt;Wikipedia&lt;/a&gt;.
In the next few paragraphs, I attempt to explain why these meetings,
despite being so popular in software development teams, are &lt;strong&gt;pure evil&lt;/strong&gt;
and should never be used by good managers.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not saying they can be done right or wrong;
there are plenty of articles about that. I&amp;#39;m not
trying to give advice about how to do them properly so they
work, either. I&amp;#39;m saying that a good manager should &lt;strong&gt;never&lt;/strong&gt; have daily stand-ups.
Because they not only &amp;quot;don&amp;#39;t work&amp;quot; but also do very bad, sometimes catastrophic,
things to your management process, whether it&amp;#39;s agile or not. On the other hand,
a bad manager will always use daily stand-ups as his or her
key management instrument.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/01/cool-hand-luke.png' style='width:600px;' alt='Cool Hand Luke (1967) by Stuart Rosenberg'/&gt;&lt;figcaption&gt;Cool Hand Luke (1967) by Stuart Rosenberg&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;To explain what I mean, let&amp;#39;s look at management from a few different
angles and compare how good and bad managers would organize their
work.&lt;/p&gt;

&lt;h2 id=&quot;information&quot;&gt;Information&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A Bad Manager Asks How Things Are Going&lt;/strong&gt;.
Strolling around the office asking how things are going is a great habit
of a terrible manager. He doesn&amp;#39;t know what his team is doing because
he is not smart enough to organize the process and information flow correctly.
However, he needs to know what&amp;#39;s going on because his boss is also asking him from time to time.
So the only way to collect the required information
is to ask the team, &amp;quot;What are you working on right now?&amp;quot;
Morning stand-up is a perfect place to ask this annoying question officially
without being marked as a manager who doesn&amp;#39;t know what he is doing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Good Manager Is Being Told When Necessary&lt;/strong&gt;.
Managing a project involves management of communications. When information
flows are organized correctly, every team member knows when and how
he or she has to report to the manager. When something goes wrong, everybody
knows how such a situation has to be reported: immediately and directly.
When a backlog task is completed, everybody understands how to inform
a project manager if he needs this information. A perfect project manager
never asks his people. Instead, they tell him when necessary. And when
someone does stop to tell him something, a good project manager fixes such a broken communication channel.
But he never uses daily meetings to collect information.&lt;/p&gt;

&lt;p&gt;As a good manager, inform your team what your goals are and what&amp;#39;s important
to you as a project manager (or Scrum master). They should know what&amp;#39;s
important for you to know about their progress, risks, impediments,
and failures. They should understand what trouble you will get into
if they let you down. It is your job, as a good manager, to inform
them about the most important issues the project and the team are working through.
It&amp;#39;s their job, as a good team, to inform you immediately when they
have some important information. This is what perfect management is about.&lt;/p&gt;

&lt;p&gt;If you manage to organize teamwork like that, you won&amp;#39;t need to wait
until the next morning to ask your developers what they were doing yesterday
and what problems they experienced. You would have seen this information earlier, exactly
when you needed it. You would stay informed about your project affairs
even outside of the office. Actually, you would not need an office at all,
but that&amp;#39;s a subject for another discussion :)&lt;/p&gt;

&lt;p&gt;Someone may say that daily stand-ups are a perfect place and time to
exchange information among programmers, not just to inform the Scrum master and
get his feedback. Again, we have the same argument here &amp;mdash; why can&amp;#39;t they
exchange information when it&amp;#39;s required, during the day? Why do we need to
put 10 people together every morning to discuss something that concerns
only five of them? I can answer. Bad managers, who don&amp;#39;t know how else to
organize the exchange of information between team members, use morning stand-ups
as a replacement for a correct communication model. These morning meetings
give the impression that the manager is working hard and well deserves his
overblown salary. To the contrary, a good manager would never have any
regular status update meetings, becuase he knows how to use effective
communication instruments, like issue tracking tools, emails, code reviews,
decision-making meetings, pair programming, etc.&lt;/p&gt;

&lt;h2 id=&quot;responsibility&quot;&gt;Responsibility&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A Bad Manager Micro-Manages&lt;/strong&gt;.
This guy knows very little about project management, and that&amp;#39;s why
he feels very insecure. He is afraid of losing control of the team; he
doesn&amp;#39;t trust his own people; and he always feels under-informed and shakes
when his own boss asks him, &amp;quot;What&amp;#39;s going on?&amp;quot; Because of all this, he
uses his people as anti-depressant pills &amp;mdash; when they are doing what
he says, he feels more secure and stable. A daily stand-up meeting is a great
place where he can ask each of us what we&amp;#39;re doing and then tell us
what we should do instead. This manager forces us to disclose our personal goals and plans
in order to correct them when he feels necessary. How many times have you heard
something like this: &amp;quot;&lt;em&gt;I&amp;#39;m planning to test X. ... No, next week; today you work with Y&lt;/em&gt;&amp;quot;
This is micro-management. Daily stand-ups are the perfect tool for a micro-manager.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Good Manager Delegates Responsibility&lt;/strong&gt;.
Ideal management involves four steps:
1) Breaking a complex task into smaller sub-tasks;
2) Delegating them to subordinates;
3) Declaring awards, penalties, and rules; and
4) Making sure that awards are generous, penalties are inevitable, and rules are strictly followed.
A perfect manager never tells his people what to do every day and how to
organize their work time. He trusts and controls. He never
humiliates his people by telling them how to do their work.
A great manager would say: &amp;quot;&lt;em&gt;You&amp;#39;re planning to test X today?
It&amp;#39;s your decision, and I fully respect it. Just remember that if Y
isn&amp;#39;t ready by the end of the week, you lose the project, as we agreed.&lt;/em&gt;&amp;quot;
Why would such a manager need daily stand-ups? Why would he need to
ask his people what they are doing? He is not meddling in their plans.
Instead, he trusts them and controls their results only.&lt;/p&gt;

&lt;p&gt;Let me reiterate: I strongly believe that responsibility must be
delegated, and this delegation consists of three components:
&lt;strong&gt;awards, penalties, and rules&lt;/strong&gt;. In a modern Western culture, it may
be rather difficult to define them &amp;mdash; we have long-term contracts and
monthly salaries. But a good manager has to find a way. Each task has to
be delegated and isolated. This means that the programmer working on the
task has to be personally responsible for its success or failure. And
he or she has to know the consequences.&lt;/p&gt;

&lt;p&gt;A good manager understands that any team member inevitably tries to
avoid personal responsibility. Everybody is trying to put a
&lt;a href=&quot;http://hbr.org/1999/11/management-time-whos-got-the-monkey/ar/1&quot;&gt;responsibility monkey&lt;/a&gt;
back on the shoulders of the manager. It is natural and inevitable. And
daily stand-up meetings only help everybody do this trick.&lt;/p&gt;

&lt;p&gt;When you ask me in the morning how things are going, I&amp;#39;ll say that there are
some problems and I&amp;#39;m not sure that I will be able to finish the
task by the end of the week. That&amp;#39;s it! I&amp;#39;m not responsible for the task
anymore. It&amp;#39;s not my fault if I fail. I told you that I may fail, remember?
From now, the responsibility is yours.&lt;/p&gt;

&lt;p&gt;A good manager knows about this trick and prevents it by explicitly
defining awards, penalties, and rules. When I tell you that I may fail,
you remind me that I&amp;#39;m going to lose my awards and will get penalties instead:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- I&amp;#39;m not sure I can meet the deadline ...
- Sorry to hear that you&amp;#39;re going to lose your
  $200 weekend bonus because of that :(&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Have you seen many project managers or Scrum masters saying such a thing?
Not so many, I believe. Yes, a good manager is a rare creature. But only
a good manager is capable of defining awards, penalties, and rules
so explicitly and strictly.&lt;/p&gt;

&lt;p&gt;When this triangle is defined, nobody needs status update meetings every morning.
Everything is clear as it is. We all know our goals and our objectives. We know
what will happen if we fail, and we also understand how much we&amp;#39;re going to
get if we succeed. We don&amp;#39;t need a manager to remind us about that every morning.
And we don&amp;#39;t need a manager to check our progress. He already gave us
a very clear definition of our objectives. Why would we talk about them again
every morning?&lt;/p&gt;

&lt;p&gt;A bad manager isn&amp;#39;t capable of defining objectives; that&amp;#39;s why he
wants to micro-manage us every morning. Actually, a bad manager is doing
it during the day too. He is afraid that without well-known goals and rules,
the team will do something wrong or won&amp;#39;t do anything at all. That&amp;#39;s why
he has &amp;quot;to keep his hand on the pulse&amp;quot;. In reality, he keeps his hand
on the neck of the team.&lt;/p&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A Bad Manager De-Motivates by Public Embarassment&lt;/strong&gt;.
He doesn&amp;#39;t know how to organize a proper motivational system within the team;
that&amp;#39;s why he relies on a natural fear of public embarassment. It&amp;#39;s only
logical that no one would feel comfortable saying, &amp;quot;&lt;em&gt;I forgot it&lt;/em&gt;&amp;quot;
in front of everybody. So the daily stand-up meeting is where he puts
everybody in a line and asks, &amp;quot;&lt;em&gt;What did you do yesterday?&lt;/em&gt;&amp;quot; This
fearful moment is a great motivator for the team, isn&amp;#39;t it? I don&amp;#39;t think so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Good Manager Motivates by Objectives&lt;/strong&gt;.
Ideal management defines objectives and lets people achieve
them using their skills, resources, knowledge, and passion. A properly
defined objective always has three components: awards, penalties, and rules.
A great manager knows how to translate corporate objectives into personal
ones: &amp;quot;&lt;em&gt;If we deliver this feature before the weekend, the company will
generate extra profit. You, Sally, will personally get $500. If you fail, you will be moved to
another, less interesting project.&lt;/em&gt;&amp;quot; This is a perfectly defined objective.
Do we need to ask Sally every morning, in front of everybody, if she forgot
to implement the feature? If she is working hard? Will this questioning help
her? Absolutely not! She already knows what she is working for, and she is motivated enough.
When she finishes on time, organize a meeting and
give her a $500 check in front of everybody. This is what a good manager
uses meetings for.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s more to this, too, as daily status updates in front of everybody motivate
the best team players to backslide and become the same as the worst ones. Well, this is mostly
because they don&amp;#39;t want to offend anyone by their super performance.
It is in our nature to try to look similar to everybody else while being
in a group. When everybody reports, &amp;quot;&lt;em&gt;I still have nothing to show&lt;/em&gt;&amp;quot;, it would
be strange to expect a good programmer to say, &amp;quot;&lt;em&gt;I finished all my tasks and
want to get more&lt;/em&gt;&amp;quot;. Well, this may happen once, but after a few times, this
A player will either stop working hard or will change the team. He will
see that his performance is standing out and that this can&amp;#39;t be appreciated by the group,
no matter what the manager says.&lt;/p&gt;

&lt;p&gt;A good manager understands that each programmer has his or her own speed,
quality, and salary. A good manager gives different tasks to different
people and expects different results from them. Obviously, lining everybody
up in the morning and expecting similar reports from them is a huge mistake.
The mistake will have a catastrophic effect on A players, who are interested
in achieving super results and expect to be super-appreciated and compensated.&lt;/p&gt;

&lt;p&gt;A bad manager can&amp;#39;t manage different people differently, just because
he doesn&amp;#39;t know how. That&amp;#39;s why he needs daily stand-ups, where everybody
reports almost the same, and it&amp;#39;s easy to compare their results to each other.
Also, it&amp;#39;s easier to blame or to cheer up those who don&amp;#39;t report similar to
others. In other words, a bad manager uses daily stand-ups as an instrument
of equality, which in this case only ruins the entire team&amp;#39;s motivation.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;Daily stand-ups, as well as any status update meetings,
are a great instrument to hide and protect a lazy and stupid manager. To hide
his inability to manage people. To hide his lack of competence. To hide
his fear of problems, challenges, and risks. If you&amp;#39;re a good manager,
don&amp;#39;t embarrass yourself with daily stand-ups.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/08/morning-standup-meetings.html</guid>
      <dc:date>2015-01-08T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Be Honest and Keep a Customer</title>
      <link>http://www.yegor256.com/2015/01/05/how-to-be-honest-and-keep-customer.html</link>
      <description>&lt;p&gt;Most of our clients are rather surprised when we explain to them that
they will have full access to the source code from the first day
of the project. We let them see everything that is happening in
the project, including the Git repository, bug reports, discussions
between programmers, continuous integration fails, etc.
They often tell me that other software development outsourcing teams
keep this information in-house and deliver only final releases,
rarely together with the source code.&lt;/p&gt;

&lt;p&gt;I understand why other developers are trying to hide as much as possible.
Giving a project sponsor full access to the development environment
is not easy at all. Here is a summary
of problems we&amp;#39;ve been having and our solutions. I hope they help you
honestly show your clients all project internals and still keep them on board.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/99-francs.png' style='width:600px;' alt='99 francs (2007) by Jan Kounen'/&gt;&lt;figcaption&gt;99 francs (2007) by Jan Kounen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;he-is-breaking-our-process&quot;&gt;He Is Breaking Our Process&lt;/h2&gt;

&lt;p&gt;This is the most popular problem we face with our new clients. Once they
gain access to the development environment, they try to give instructions
directly to programmers, walking around
&lt;a href=&quot;/2014/10/06/software-project-lifecycle.html&quot;&gt;our existing process&lt;/a&gt;.
&amp;quot;I&amp;#39;m paying these guys; why can&amp;#39;t I tell them what to do?&amp;quot; is a very typical mindset.
Instead of submitting requests through our standard change management mechanism,
such a client goes directly to one of the programmers and tells him what
should be fixed, how, and when. It&amp;#39;s micro-management in its worst form.
We see it very often. What do we do?&lt;/p&gt;

&lt;p&gt;First, we try to understand why it&amp;#39;s happening. The simplest answer
is that the client is a moron. Sometimes this is exactly the case, but it&amp;#39;s a rare one. Much more
often, our clients are not that bad. What is it, then? Why can&amp;#39;t they follow
the process and abide by the rules? There are a few possible reasons.&lt;/p&gt;

&lt;p&gt;Maybe the &lt;strong&gt;rules are not explained well&lt;/strong&gt;.
This is the most popular root cause &amp;mdash; the rules of work are not clear
enough for the client. He just doesn&amp;#39;t know what he is supposed to do in order
to submit a request and get it implemented. To prevent this, we try to educate
our clients at the beginning of a new project. We even write guidance
manuals for clients. Most of them are happy to read them and learn the
way we work, because they understand that this is the best way to achieve
success while working with us.&lt;/p&gt;

&lt;p&gt;Maybe our &lt;strong&gt;management is chaotic&lt;/strong&gt;, and the client is trying to &amp;quot;organize&amp;quot;
us by giving explicit instructions regarding the most important tasks. We&amp;#39;ve
seen it before, and we are always trying to learn from this. As soon as
we see that the client is trying to micro-manage us, we ask
ourselves: &amp;quot;Is our process transparent enough? Do we give enough
information to the client about milestones, risks, plans, costs, etc.?&amp;quot;
In most cases, it&amp;#39;s our own fault, and we&amp;#39;re trying to learn and improve.
If so, it&amp;#39;s important to react fast, before the client becomes too agressive in his
orders and instructions. It will be very difficult to escort him back to the normal
process once he gets &amp;quot;micro-management&amp;quot; in his blood.&lt;/p&gt;

&lt;p&gt;Maybe the client is not busy enough and has &lt;strong&gt;a lot of free time&lt;/strong&gt;, which he
is happy to spend by giving orders and distracting your team. I&amp;#39;ve seen
this many times. A solution? Keep him busy. Turn him into a member of the
team and assign him some tasks related to documentation and research. In
my experience, most clients would be happy to do this work and help the
project.&lt;/p&gt;

&lt;h2 id=&quot;he-is-asking-too-much&quot;&gt;He Is Asking Too Much&lt;/h2&gt;

&lt;p&gt;A technically-savvy client can turn the life of
&lt;a href=&quot;/&quot;&gt;an architect&lt;/a&gt;
into a nightmare by constantly asking him to explain every
single technical decision made, from &amp;quot;Why PostgreSQL instead of MySQL?&amp;quot;
to &amp;quot;Why doesn&amp;#39;t this method throw a checked exception?&amp;quot; Constantly answering
such questions can turn a project into a school of programming.
Even though he is paying for our time, that doesn&amp;#39;t mean we should teach him
how to develop software, right? On the other hand, he is interested in knowing
how &lt;em&gt;his&lt;/em&gt; software is developed and how it works. It&amp;#39;s a fair request, isn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;I believe there is a &lt;em&gt;win-win&lt;/em&gt; solution to this problem. Here is how we
manage it. First of all, we make all his requests formal. We ask
a client to create a new ticket for each request, properly explaining
what is not clear and how much detail is expected in the explanation.&lt;/p&gt;

&lt;p&gt;Second, we look at such requests positively &amp;mdash; they
are good indicators of certain inconsistencies in the software. If it&amp;#39;s
not clear for the client why PostgreSQL is used and not MySQL, it&amp;#39;s a fault
of &lt;a href=&quot;/&quot;&gt;our architect&lt;/a&gt;.
He didn&amp;#39;t document his decision and didn&amp;#39;t explain
how it was made, what other options were considered, what selection criteria
were applied, etc. Thus, a request from a client is &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;a bug&lt;/a&gt;
we get for free. So, we look at it positively.&lt;/p&gt;

&lt;p&gt;Finally, we charge our clients for the answers given. Every question, submitted
as a ticket, goes through the full flow and
&lt;a href=&quot;/2014/10/21/incremental-billing.html&quot;&gt;gets billed&lt;/a&gt;
just as any other ticket. This
approach prevents the client from asking for too much. He realizes that we&amp;#39;re
ready to explain anything he wants, but he will pay for it.&lt;/p&gt;

&lt;h2 id=&quot;he-is-telling-too-much&quot;&gt;He Is Telling Too Much&lt;/h2&gt;

&lt;p&gt;This problem is even bigger than the previous one. Some clients
believe they are savvy enough to argue with
&lt;a href=&quot;/&quot;&gt;our architect&lt;/a&gt;
and our programmers about how the software should be developed. They don&amp;#39;t just
ask why PostgreSQL is used, they tell us that we should use MySQL,
because &amp;quot;I know that it&amp;#39;s a great database; my friend is using it, and his
business is growing!&amp;quot; Sometimes it gets even worse, when suggestions
are directed at every class or even a method, like &amp;quot;You should use
a Singleton pattern here!&amp;quot;&lt;/p&gt;

&lt;p&gt;Our first choice is to agree and do what he wants. But it&amp;#39;s a road to nowhere.
Once you do it, your project is ruined, and you should start thinking
about a divorce with this client. Your entire team will quickly turn into
a group of coding monkeys, micro-managed by someone with some cash. It&amp;#39;s a very
wrong direction; don&amp;#39;t even think about going there.&lt;/p&gt;

&lt;p&gt;The second choice is to tell the client to mind his own business and let
us do ours. He hired us because we&amp;#39;re professional enough to develop the
software according to his requirements. If he questions our capabilities,
he is free to change the contractor. But until then, he has
to trust our decisions. Will this work? I doubt it. It&amp;#39;s the same as
giving him the finger. He will get offended, and you won&amp;#39;t get anything.&lt;/p&gt;

&lt;p&gt;The solution here is to turn the client&amp;#39;s demands into project requirements.
Most of them will be lost in the process, because they won&amp;#39;t be sane enough
to form a good requirement. Others will be documented, estimated, and crossed-out
by the client himself, becuase he will realize they are pointless or too expensive. Only
a few of them will survive, since they will be reasonable enough. And they will
help the project. So it is also a &lt;em&gt;win-win&lt;/em&gt; solution.&lt;/p&gt;

&lt;p&gt;For example, he says that &amp;quot;you should use MySQL because it&amp;#39;s great&amp;quot;. You tell
him that the project requirements document doesn&amp;#39;t limit you to choose whichever
database you like. Should it? He says yes, of course! OK, let&amp;#39;s try to
document such a requirement. How will it sound? How about, &amp;quot;We should only
use great databases?&amp;quot; Sound correct? If so, then PostgreSQL satisfies this
requirement. Problem solved; let us continue to do our work. He will have a
hard time figuring out how to write a requirement in a way that disallows
PostgreSQL but allows MySQL. It is simply not possible in most cases.&lt;/p&gt;

&lt;p&gt;Sometimes, though, it will make sense; for example, &amp;quot;We should use a database server
that understands our legacy data in MySQL format&amp;quot;. This is a perfectly sane
requirement, and the only way to satisfy it is to use MySQL.&lt;/p&gt;

&lt;p&gt;Thus, my recommendation is to never take a client&amp;#39;s demands directly to execution,
but rather use them first to amend the requirements documentation. Even if you don&amp;#39;t
have such documentation, create a simple one-page document. Agree with the
client that you work against this document, and when anyone wants to change
something, you first have to amend the document and then have your team ensure the
software satisfies it. This kind of discipline will be accepted by any client
and will protect you against sudden and distracting corrections.&lt;/p&gt;

&lt;h2 id=&quot;he-is-questioning-our-skills&quot;&gt;He Is Questioning Our Skills&lt;/h2&gt;

&lt;p&gt;When source code is open to the client, and he is technically capable
of reading it, it is very possible that one day he will tell us that
our code is crap and we have to learn how to program better. It has not
happened in our projects for many years, but it has happened before,
when we weren&amp;#39;t using static analysis as a &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;mandatory step&lt;/a&gt;
in our continuous integration pipeline.&lt;/p&gt;

&lt;p&gt;Another funny possibility is when the client shows the source code to a &amp;quot;friend&amp;quot;,
and he gives a &amp;quot;professional&amp;quot; opinion, which sounds like, &amp;quot;They don&amp;#39;t know what they
are doing.&amp;quot; Once such an opinion hits your client&amp;#39;s ears, the project is at
a significant risk of closure. It&amp;#39;ll be very difficult, almost impossible,
to convince the client not to listen to the &amp;quot;friend&amp;quot; and continue
to work with you. That&amp;#39;s why most outsourcers prefer to keep their sources
private until the very end of the project, when the final invoice is paid.&lt;/p&gt;

&lt;p&gt;I think that an accidental appearance of a &amp;quot;friend&amp;quot; with a negative opinion
is un-preventable. If it happens, it happens. You can&amp;#39;t avoid it.
On the other hand, if you think your code is perfect and your team
has only talented programmers writing beautiful software, this is not
going to protect you either. An opinion coming from a &amp;quot;friend&amp;quot; won&amp;#39;t be objective;
it will just be very personal, and that&amp;#39;s why it&amp;#39;s very credible. He is a friend
of a client, and he doesn&amp;#39;t send him bills every week. Why would he lie?
Of course, he is speaking from the heart! (I&amp;#39;m being sarcastic.) So, no matter
how beautiful your architecture and your source code is, the &amp;quot;friend&amp;quot; will
always be right.&lt;/p&gt;

&lt;p&gt;In my opinion, the only way to prevent such a situation or minimize its
consequences is to organize regular and systematic
&lt;a href=&quot;/2014/12/18/independent-technical-reviews.html&quot;&gt;independent technical reviews&lt;/a&gt;.
They will give confindence to the client that the team
is not lying to him about the quality of the product and key technical
decisions made internally.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;To conclude, I strongly believe it is important to be honest
and open with each client, no matter how difficult it is. Try to
learn from every conflict with each client, and improve your management
process and your principles of work. Hiding source code is not
professional and makes you look bad in the eyes of your clients and
the entire industry.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/01/05/how-to-be-honest-and-keep-customer.html</guid>
      <dc:date>2015-01-05T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Immutable Objects Are Not Dumb</title>
      <link>http://www.yegor256.com/2014/12/22/immutable-objects-not-dumb.html</link>
      <description>&lt;p&gt;After a few recent posts about immutability, including
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;&amp;quot;Objects Should Be Immutable&amp;quot;&lt;/a&gt; and
&lt;a href=&quot;/2014/12/09/immutable-object-state-and-behavior.html&quot;&gt;&amp;quot;How an Immutable Object Can Have State and Behavior?&amp;quot;&lt;/a&gt;,
I was surprised by the number of comments saying that I badly misunderstood
the idea. Most of those comments stated that an immutable object must always behave
the same way &amp;mdash; that is what immutability is about. What kind of immutability
is it, if a method returns different results each time we call it?
This is not how well-known immutable classes behave. Take, for example, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;BigInteger&lt;/code&gt;,
&lt;code&gt;Locale&lt;/code&gt;, &lt;code&gt;URI&lt;/code&gt;, &lt;code&gt;URL&lt;/code&gt;, &lt;code&gt;Inet4Address&lt;/code&gt;, &lt;code&gt;UUID&lt;/code&gt;, or wrapper classes for primitives, like &lt;code&gt;Double&lt;/code&gt; and
&lt;code&gt;Integer&lt;/code&gt;. Other comments argued against
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;the very definition&lt;/a&gt;
of an immutable object as a representative of a mutable real-world entity. How
could an immutable object represent a mutable entity? Huh?&lt;/p&gt;

&lt;p&gt;I&amp;#39;m very surprised. This post is going to clarify the definition of an immutable
object. First, here is a quick answer. How can an immutable object represent a mutable entity?
Look at an immutable class,
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/io/File.html&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;,
and its methods, for example &lt;code&gt;length()&lt;/code&gt; and &lt;code&gt;delete()&lt;/code&gt;. The class is immutable, according
to Oracle documentation, and its methods may return different values each time
we call them. An object of class &lt;code&gt;File&lt;/code&gt;, being perfectly immutable,
represents a mutable real-world entity, a file on disk.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/usual-suspects-kobayashi.png' style='width:600px;' alt='The Usual Suspects (1995) by Bryan Singer'/&gt;&lt;figcaption&gt;The Usual Suspects (1995) by Bryan Singer&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0321349601/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321349601&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=PHMGYYT46MJV2JLO'&gt;&lt;img src='http://www.yegor256.com/images/2014/12/java-concurrency-in-practice.png' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;In &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;this post&lt;/a&gt;, I said
that &amp;quot;an object is immutable if its state can&amp;#39;t be modified after it is created.&amp;quot;
This definition is not mine; it&amp;#39;s taken from
&lt;a href=&quot;http://www.amazon.com/gp/product/0321349601/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321349601&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=PHMGYYT46MJV2JLO&quot;&gt;Java Concurrency in Practice by Goetz et al.&lt;/a&gt;, Section 3.4
(by the way, I highly recommend you read it). Now look at this class
(I&amp;#39;m using &lt;a href=&quot;http://http.jcabi.com&quot;&gt;jcabi-http&lt;/a&gt; to read and write over HTTP):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdkRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdkRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;PUT&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What is the &amp;quot;state&amp;quot; in this class? That&amp;#39;s right, &lt;code&gt;this.uri&lt;/code&gt; is the state. It
uniquely identifies every object of this class, and it is not modifiable. Thus,
the class makes only immutable objects. And each object represents a
mutable entity of the real world, a web page with a URI.&lt;/p&gt;

&lt;p&gt;There is no contradiction in this situation. The class is perfectly immutable,
while the web page it represents is mutable.&lt;/p&gt;

&lt;p&gt;Why do most programmers I have talked to believe that
if an underlying entity is mutable, an object is mutable too? I think the
answer is simple &amp;mdash; they think that objects are
data structures with methods. That&amp;#39;s why, from this point of view,
an immutable object is a data structure that never changes.&lt;/p&gt;

&lt;p&gt;This is where the fallacy is coming from &amp;mdash; an object is
&lt;strong&gt;not a data structure&lt;/strong&gt;. It is a living organism representing
a real-world entity inside the object&amp;#39;s living environment (a computer program).
It does encapsulate some data, which helps to locate the entity in the real world. The encapsulated
data is the &lt;strong&gt;coordinates&lt;/strong&gt; of the entity being represented. In the case
of &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;URL&lt;/code&gt;, the coordinates are the same as the
entity itself, but this is just an isolated incident, not a generic rule.&lt;/p&gt;

&lt;p&gt;An immutable object is not a data structure that doesn&amp;#39;t change, even
though &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;BigInteger&lt;/code&gt;, and &lt;code&gt;URL&lt;/code&gt; look like one. An object is immutable
if and only if it doesn&amp;#39;t change the coordinates of the real-world entity
it represents. In the &lt;code&gt;Page&lt;/code&gt; class above, this means that an object of
the class, once instantiated, will never change &lt;code&gt;this.uri&lt;/code&gt;. It will
always point to the same web page, no matter what.&lt;/p&gt;

&lt;p&gt;And the object doesn&amp;#39;t guarantee anything about the behavior of that web page. The page
is a dynamic creature of a real world, living its own life. Our object
can&amp;#39;t promise anything about the page. The only thing it promises is that
it will always stay loyal to that page &amp;mdash; it will never forget or change
its coordinates.&lt;/p&gt;

&lt;p&gt;Conceptually speaking, immutability means loyalty, that&amp;#39;s all.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/22/immutable-objects-not-dumb.html</guid>
      <dc:date>2014-12-22T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>You Do Need Independent Technical Reviews!</title>
      <link>http://www.yegor256.com/2014/12/18/independent-technical-reviews.html</link>
      <description>&lt;p&gt;Do you have a team of brilliant and enthusiastic programmers? Of course! You&amp;#39;ve carefully
chosen them from a hundred candidates! Are they passionate about the product?
Absolutely! They use cutting-edge technologies, never sleep, and hardly eat or drink
anything except coffee! Do they believe in your business success? No doubts about it;
they live and breathe all those features, releases, continuous delivery, user
experience, etc. Are you sure they are developing the product correctly?
Well, yes, you&amp;#39;re pretty sure; why wouldn&amp;#39;t they? ...&lt;/p&gt;

&lt;p&gt;Does this sound familiar? I can&amp;#39;t count how many times I&amp;#39;ve heard
these stories told by startup founders. Most of them are in love with their teams ...
until that day when it&amp;#39;s time to hire a new one. There could be many
possible reasons for such a fiasco, but one of them is a lack of
regular, systematic, and independent &lt;strong&gt;technical reviews&lt;/strong&gt;.
Nothing demotivates a development team more than a lack of attention
to their deliverables. On the other hand, a regular
reconciliation of their results and your quality expectations is one
of the key factors that will guarantee technical success for your
startup. Below I summarize my experience with organizing such technical reviews.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/arizona-dream-car-shop.png' style='width:600px;' alt='Arizona Dream (1992) by Emir Kusturica'/&gt;&lt;figcaption&gt;Arizona Dream (1992) by Emir Kusturica&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;An independent review is when you ask someone outside of your team
to look at your source code and other technical resources
and give you an objective opinion about them.
Every modern software team should also use internal code reviews, which is
is something else entirely. An internal review occurs when one programmer
shows his code to other peers on the team and asks their opinion. This usually
happens as a daily activity and has nothing to do with independent
reviews.&lt;/p&gt;

&lt;p&gt;An independent review is performed by a programmer who knows nothing about your team.
He comes on board, checks out the code from your repository, spends a few hours
(or days) looking at it and trying to understand what it does. Then, he
tells you what is wrong and where. He explains how he would do it better,
where he would change it, and what he would do instead. Then, you pay him
and he leaves. You may never see him again, but his conclusions and suggestions
help you &lt;em&gt;check the reality&lt;/em&gt; of your code and evaluate how your team is really doing.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.teamed.io'&gt;&lt;img src='http://img.teamed.io/logo.svg' style='width:160px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;We, at &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;, do independent reviews
with every project of ours, and this is a list of principles we use:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Independent Reviews Systematic&lt;/strong&gt;.
This is the first and most important rule &amp;mdash; organize
such technical reviews regularly. Moreover, inform your team about the schedule,
and let them be prepared for the reviews. Once a month is a good practice,
according to my experience. Depending on your source code size, a full
review should take from &lt;strong&gt;two to eight hours&lt;/strong&gt;. Don&amp;#39;t spend more than eight hours;
there is no point in going too deep into the code during independent reviews.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pay for Bugs Found&lt;/strong&gt;.
We &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;always&lt;/a&gt;
pay for bugs, not for the time spent finding them. We ask our reviewers
to look at the code and report as many bugs as we think we need. For each
bug, we pay 15 minutes for their time. In other words, we assume that
a good reviewer can find and report approximately four problems in one hour. For example,
a reviewer charges $150 per hour. We hire him and ask him to find and report the 20 most
criticial issues he can discover. Our estimate is that he should spend five hours on this
work. Thus, he will get $750 when we have 20 bugs in our tracking system
reported by him. If he finds fewer, he gets proportionally less money.
This payment schedule will help you focus your reviewer on the main
objective of the review process &amp;mdash; finding and reporting issues. There
are no other goals. The only thing you&amp;#39;re interested in is knowing what
the issues with your current technical solution are. That&amp;#39;s what you&amp;#39;re paying for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hire the Best and Pay Well&lt;/strong&gt;.
My experience tells me that the position of an independent reviewer is a very
important one. He is not just a programmer but more of
&lt;a href=&quot;/&quot;&gt;an architect&lt;/a&gt;
who is capable of looking at the solution from a very high level of abstraction,
while at the same time paying a lot of attention to details; he should be very
good at designing similar systems; he should know how to report a bug
correctly and with enough detail; he should understand your business domain; etc.
Besides all that, he should be
well motivated to help you. You&amp;#39;re not hiring him for full-time work but
rather just for a few-hour gig. My advice is to try to get
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;the best guys&lt;/a&gt;,
and pay them as much as they ask, usually over $100 per hour. Don&amp;#39;t negotiate,
just pay. It&amp;#39;s just a few hundred dollars for you, but the effect of their
contribution will be huge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask For and Expect Criticism&lt;/strong&gt;.
It is a very common mistake to ask a reviewer, &amp;quot;Do you like our code?&amp;quot;
Don&amp;#39;t expect him to tell you how great your code is. This is not what you&amp;#39;re
paying him for! You already have a full team of programmers for cheering you up; they can tell
you a lot about the code they are creating and how awesome it is. You don&amp;#39;t want
to hear this again from the reviewer. Instead, you want to know what
is wrong and needs to be fixed. So your questions should sound like,
&amp;quot;What problems do you think we should fix first?&amp;quot; Some reviewers will try
to please you with positive comments, but ignore that flattery and bring them back
to the main goal &amp;mdash; bugs. The payment schedule explained above should help.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regularly Change Reviewers&lt;/strong&gt;.
Try not to use the same reviewer more than once on the same project (I mean the
same code base). I believe the reason here is obvious, but let me re-iterate:
You don&amp;#39;t need your reviewer to be nice to you and tell you how
great your code is. You want him to be objective and focused on problems,
not on bright sides. If you hire the same person again and again,
psychologically you make him engaged to the source code. He&amp;#39;s seen it once;
now he has to see it again. He already told you about some problem, and
now he has to repeat it again. He won&amp;#39;t feel comfortable doing it. Instead,
he will start feeling like a member of the team and will feel
responsible for the source code and its mistakes. He, as any other
team member, will start hiding issues instead of revealing them. Thus,
for every independent technical review, get a new person.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be Polite and Honest With Your Team&lt;/strong&gt;.
Independent reviews can be rather offensive to your programmers. They may
think that you don&amp;#39;t trust them. They may feel that you don&amp;#39;t respect them
as technical specialists. They may even decide that you&amp;#39;re getting ready
to fire them all and are currently looking for new people. This is a very
possible and very destructive side effect of an independent review. How do you avoid it?
I can&amp;#39;t give you universal advice, but the best suggestion I can give is this:
be honest with them. Tell them that the quality of the product is critical for you
and your business. Explain to them that the business is paying them for their
work and that in order to keep paychecks coming, you have to stress quality
control &amp;mdash; regularly, objectively, independently, and honestly. In the end,
if you manage to organize reviews as this article explains, the team will
be very thankful to you. They will gain a lot of new ideas and thoughts from every
review and will ask you to repeat them regularly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Review From Day One&lt;/strong&gt;.
Don&amp;#39;t wait until the end of the project! I&amp;#39;ve seen this mistake many times.
Very often startup founders think that until the product is done and ready
for the market, they shouldn&amp;#39;t distract their team. They think they should
let the team work toward project milestones and take care of quality
later, &amp;quot;when we have a million visitors per day&amp;quot;. This day will never come
if you let your team run without control! Start conducting independent reviews
from the moment your Git repository has its first file. Until the repository
is big enough, you may only spend $300 once a month to receive an objective,
independent opinion about its quality. Will this ruin your budget?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prohibit Discussions, and Ask for Formal Reporting&lt;/strong&gt;.
Don&amp;#39;t let your reviewers talk to the team. If you do, the entire
idea of a review being independent falls apart. If a reviewer is able
to ask informal questions and discuss your system design with your programmers,
their answers will satisfy him, and he will move on. But you,
the owner of the business, will stay exactly where you were before the review.
The point of the review is not to make the reviewer happy. It is exactly the
opposite. You want to make him confused! If he is confused, your
design is wrong and he feels the need to report a bug. The source code
should speak for itself, and it should be easy enough for a stranger (the
reviewer) to understand how it works. If this is not the case, there is
something wrong that should be fixed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Treat Any Question as a Bug&lt;/strong&gt;.
Don&amp;#39;t expect a review to produce any bugs in functionality, like
&amp;quot;I click this button and the system crashes&amp;quot;. This will happen rarely, if ever.
Your team is very good at discovering these issues and fixing them. Independent
reviews are not about that kind of bugs. The main goal of an independent review is to
discover bugs in the architecture and design. Your product may work, but its
architecture may have serious design flaws that won&amp;#39;t allow you, for example,
to handle exponential growth in web traffic. An independent reviewer will help you
find those flaws and address them sooner than later. In order to get bugs
of that kind from the reviewer, you should encourage him to report
&lt;em&gt;anything&lt;/em&gt; he doesn&amp;#39;t like &amp;mdash; unmotivated use of a technology,
lack of documentation, unclear purpose of a file, absence of
a unit test, etc. Remember, the reviewer is not a member of your team and has his
own ideas about the technologies you&amp;#39;re using and software development in general.
You&amp;#39;re interested in matching his vision with your team&amp;#39;s. Then, you&amp;#39;re
interested in fixing all critical mismatches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Review Everything, Not Just Source Code&lt;/strong&gt;.
Let your reviewer look at all technical resources you have, not just
source code files (&lt;code&gt;.java&lt;/code&gt;, &lt;code&gt;.rb&lt;/code&gt;, &lt;code&gt;.php&lt;/code&gt;, etc.) Give him access to the
database schema, continuous integration panel, build environment,
issue tracking system, plans and schedules, work agendas, uptime reports,
deployment pipeline, production logs,
customer bug reports, statistics, etc. Everything that
could help him understand how your system works, and more importantly,
where and how it breaks, is very useful. Don&amp;#39;t limit the reviewer to the
source code only &amp;mdash; this is simply not enough! Let him see the big
picture, and you will get a much more detailed and professional report.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Track How Inconsistencies Are Resolved&lt;/strong&gt;.
Once you get a report from the reviewer, make sure that the most important
issues immediately get into your team&amp;#39;s backlog. Then, make sure they are
addressed and closed. That doesn&amp;#39;t mean you should fix them all and listen
to everything said by the reviewer. Definitely not! Your
&lt;a href=&quot;/&quot;&gt;architect&lt;/a&gt;
runs the show, not the reviewer. Your architect should decide what is right
and what is wrong in the technical implementation of the product. But it&amp;#39;s
important to make him resolve all concerns raised by the reviewer. Very often
you will get answers like these from him: &amp;quot;We don&amp;#39;t care about it now&amp;quot;, &amp;quot;we won&amp;#39;t
fix it until the next release&amp;quot;, or &amp;quot;he is wrong; we&amp;#39;re doing it better&amp;quot;. These
answers are perfectly valid, but they have to be given
(reviewers are people and they also make mistakes). The answers will help
you, the founder, understand what your team is doing and how well they
understand their business.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;If you can offer more suggestions, based on your experience, please post
them below in the comments, and I&amp;#39;ll add them to the list. I&amp;#39;m still
thinking that I may have forgotten something important :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/18/independent-technical-reviews.html</guid>
      <dc:date>2014-12-18T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Much Your Objects Encapsulate?</title>
      <link>http://www.yegor256.com/2014/12/15/how-much-your-objects-encapsulate.html</link>
      <description>&lt;p&gt;Which line do you like more, the first or the second:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What is the difference? The first class &lt;code&gt;HTTP&lt;/code&gt; encapsulates a URL,
while the second one expects it as an argument of method &lt;code&gt;read()&lt;/code&gt;. Technically,
both objects do exactly the same thing: they read the content of the Google home page.
Which one is the right design? Usually I hate to say this, but in
this case I have to &amp;mdash; it depends.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/truman-show-universe.png' style='width:600px;' alt='The Truman Show (1998) by Peter Weir'/&gt;&lt;figcaption&gt;The Truman Show (1998) by Peter Weir&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;As &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;we discussed before&lt;/a&gt;,
a good object is a representative of a real-life entity. Such an entity
exists outside of the object&amp;#39;s living environment. The object knows
how to access it and how to communicate with it.&lt;/p&gt;

&lt;p&gt;What is that real-life entity in the example above? Each class
gives its own answer. And the answer is given by the list
of arguments its constructors accept. The first class accepts
a single URL as an argument of its constructor. This tells us
that the object of this class, after being constructed, will represent
a web page. The second class accepts no arguments, which tells us
that the object of it will represent ... the Universe.&lt;/p&gt;

&lt;p&gt;I think this principle is applicable to all classes in
object-oriented programming &amp;mdash; in order to understand what
real-life entity an object represents, look at its constructor. All
arguments passed into the constructor and encapsulated by the object identify
a real-life entity accessed and managed by the object.&lt;/p&gt;

&lt;p&gt;Of course, I&amp;#39;m talking about
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;good objects&lt;/a&gt;,
which are immutable and
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;don&amp;#39;t have setters and getters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pay attention that I&amp;#39;m talking about arguments encapsulated by the object. The
following class doesn&amp;#39;t represent the Universe, even though it does have
a no-arguments constructor:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;msec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This class has two constructors. One of them is the main one, and one is
supplementary. We&amp;#39;re interested in the main one, which implements
the &lt;em&gt;encapsulation&lt;/em&gt; of arguments.&lt;/p&gt;

&lt;p&gt;Now, the question is which is better: to represent a web page
or the Universe? It depends, but I think that in general, the smaller the
real-life entity we represent, the more solid and cohesive design
we give to the object.&lt;/p&gt;

&lt;p&gt;On the other hand, sometimes we have to have an object that represents
the Universe. For example, we may have this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// read via HTTP and return&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;online&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// check whether we&amp;#39;re online&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is not an elegant design, but it demonstrates when it may be
necessary to represent the entire Universe. An object of this &lt;code&gt;HTTP&lt;/code&gt; class can read
any web page from the entire web (it is almost as big as the Universe, isn&amp;#39;t it?),
and it can check whether the entire web is accessible by it. Obviously,
in this case, we don&amp;#39;t need it to encapsulate anything.&lt;/p&gt;

&lt;p&gt;I believe that objects representing the Universe are not good objects,
mostly because there is only one Universe; why do we need many
representatives of it? :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/15/how-much-your-objects-encapsulate.html</guid>
      <dc:date>2014-12-15T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How an Immutable Object Can Have State and Behavior?</title>
      <link>http://www.yegor256.com/2014/12/09/immutable-object-state-and-behavior.html</link>
      <description>&lt;p&gt;I often hear this argument against
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutable objects&lt;/a&gt;:
&amp;quot;Yes, they are useful when the state doesn&amp;#39;t change. However, in
our case, we deal with frequently changing objects. We simply
can&amp;#39;t afford to create a new &lt;code&gt;document&lt;/code&gt; every time we just
need to change its &lt;code&gt;title&lt;/code&gt;.&amp;quot; Here is where I disagree: object
title is &lt;strong&gt;not a state&lt;/strong&gt; of a document, if you need to change it frequently.
Instead, it is a document&amp;#39;s &lt;strong&gt;behavior&lt;/strong&gt;. A &lt;code&gt;document&lt;/code&gt; can and must be immutable,
if it is a &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;good object&lt;/a&gt;,
even when its title is changed frequently. Let me explain how.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/once-upon-a-time-in-the-west.png' style='width:600px;' alt='Once Upon a Time in the West (1968) by Sergio Leone'/&gt;&lt;figcaption&gt;Once Upon a Time in the West (1968) by Sergio Leone&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;identity,-state,-and-behavior&quot;&gt;Identity, State, and Behavior&lt;/h2&gt;

&lt;p&gt;Basically, there are three elements in every object:
identity, state, and behavior. &lt;em&gt;Identity&lt;/em&gt; is what distinguishes our &lt;code&gt;document&lt;/code&gt;
from other objects, &lt;em&gt;state&lt;/em&gt; is what a document
knows about itself (a.k.a. &amp;quot;encapsulated knowledge&amp;quot;), and
&lt;em&gt;behavior&lt;/em&gt; is what a document can do for us on request.
For example, this is a mutable document:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;doc #%d about &amp;#39;%s&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#39;s try to use this mutable object:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How to grill a sandwich&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How to grill a sandwich&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// FALSE&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%s is equal to %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we&amp;#39;re creating two objects and then modifying their encapsulated
states. Obviously, &lt;code&gt;first.equals(second)&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; because
the two objects have different identities, even though they encapsulate the
same state.&lt;/p&gt;

&lt;p&gt;Method &lt;code&gt;toString()&lt;/code&gt; exposes the document&amp;#39;s behavior &amp;mdash; the document can
convert itself to a string.&lt;/p&gt;

&lt;p&gt;In order to modify a document&amp;#39;s title, we just call its &lt;code&gt;setTitle()&lt;/code&gt;
once again:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook pasta&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simply put, we can reuse the object many times, modifying its
internal state. It is fast and convenient, isn&amp;#39;t it? Fast, yes.
Convenient, not really. Read on.&lt;/p&gt;

&lt;h2 id=&quot;immutable-objects-have-no-identity&quot;&gt;Immutable Objects Have No Identity&lt;/h2&gt;

&lt;p&gt;As I&amp;#39;ve &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;mentioned before&lt;/a&gt;,
immutability is one of the virtues of a good
object, and a very important one. A good object is immutable, and good
software contains only immutable objects. The main difference between
immutable and mutable objects is that
an immutable one doesn&amp;#39;t have an identity and its state never changes.
Here is an immutable variant of the same document:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;doc #%d about &amp;#39;%s&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This document is immutable, and its state (&lt;code&gt;id&lt;/code&gt; ad &lt;code&gt;title&lt;/code&gt;) is its identity. Let&amp;#39;s
see how we can use this immutable class
(by the way, I&amp;#39;m using &lt;a href=&quot;/&quot;&gt;&lt;code&gt;@Immutable&lt;/code&gt;&lt;/a&gt; annotation
from &lt;a href=&quot;/&quot;&gt;jcabi-aspects&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to grill a sandwich&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to grill a sandwich&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// TRUE&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%s is equal to %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can&amp;#39;t modify a document any more. When we need to change the title,
we have to create a new document:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to grill a sandwich&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook pasta&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every time we want to modify its encapsulated state, we have to modify
its identity too, because there is no identity. State is the identity.
Look at the code of the &lt;code&gt;equals()&lt;/code&gt; method above &amp;mdash; it compares documents
by their IDs and titles. Now ID+title of a document is its identity!&lt;/p&gt;

&lt;h2 id=&quot;what-about-frequent-changes?&quot;&gt;What About Frequent Changes?&lt;/h2&gt;

&lt;p&gt;Now I&amp;#39;m getting to the question we started with: What about performance
and convenience? We don&amp;#39;t want to change the entire document every time we
have to modify its title. If the document is big enough, that would be
a huge obligation. Moreover, if an immutable object encapsulates other immutable
objects, we have to change the entire hierarchy when modifying even a single
string in one of them.&lt;/p&gt;

&lt;p&gt;The answer is simple. A document&amp;#39;s title should not be part of its &lt;strong&gt;state&lt;/strong&gt;.
Instead, the title should be its &lt;strong&gt;behavior&lt;/strong&gt;. For example, consider this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// read title from storage&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// save text to storage&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;doc #%d about &amp;#39;%s&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Conceptually speaking, this document is acting as a proxy of a real-life
document that has a title stored somewhere &amp;mdash; in a file, for example. This is
what a good object should do &amp;mdash; be a proxy of a real-life entity.
The document exposes two features: reading the title and saving the title. Here is
how its interface would look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;title()&lt;/code&gt; reads the title of the document and returns it as a &lt;code&gt;String&lt;/code&gt;,
and &lt;code&gt;title(String)&lt;/code&gt; saves it back into the document. Imagine a real
paper document with a title. You ask an object to read that title from
the paper or to erase an existing one and write new text over it. This
paper is a &amp;quot;copy&amp;quot; utilized in these methods.&lt;/p&gt;

&lt;p&gt;Now we can make frequent changes to the immutable document, and the
document stays the same. It doesn&amp;#39;t stop being immutable, since it&amp;#39;s
state (&lt;code&gt;id&lt;/code&gt;) is not changed. It is the same document, even though we
change its title, becuase the title is not a state of the document. It
is something in the real world, outside of the document. The document
is just a proxy between us and that &amp;quot;something&amp;quot;. Reading and writing
the title are behaviors of the document, not its state.&lt;/p&gt;

&lt;h2 id=&quot;mutable-memory&quot;&gt;Mutable Memory&lt;/h2&gt;

&lt;p&gt;The only question we still have unanswered is what is that &amp;quot;copy&amp;quot;
and what happens if we need to keep the title of the document in memory?&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s look at it from an &amp;quot;object thinking&amp;quot; point of view. We have a &lt;code&gt;document&lt;/code&gt;
object, which &lt;a href=&quot;/&quot;&gt;is supposed to represent&lt;/a&gt; a real-life entity in an
object-oriented world. If such an entity is a file, we can easily
implement &lt;code&gt;title()&lt;/code&gt; methods. If such an entity is an Amazon S3 object,
we also implement title reading and writing methods easily, keeping the
object immutable. If such an entity is an HTTP page, we
have no issues in the implementation of title reading or writing, keeping the object immutable.
We have no issues as long as a real-world document exists and has its
own identity. Our title reading and writing methods will communicate with that
real-world document and extract or update its title.&lt;/p&gt;

&lt;p&gt;Problems arise when such an entity doesn&amp;#39;t exist in a real world. In that
case, we need to create a mutable object property called &lt;code&gt;title&lt;/code&gt;, read it via
&lt;code&gt;title()&lt;/code&gt;, and modify it via &lt;code&gt;title(String)&lt;/code&gt;. But an object is immutable,
so we can&amp;#39;t have a mutable property in it &amp;mdash; by definition! What do we do?&lt;/p&gt;

&lt;p&gt;Think.&lt;/p&gt;

&lt;p&gt;How could it be that our object doesn&amp;#39;t represent a real-world entity?
Remember, the &lt;em&gt;real world&lt;/em&gt; is everything around the living environment of an object.
Is it possible that an object doesn&amp;#39;t represent anyone and acts
on its own? No, it&amp;#39;s not possible. Every object is a representantive of
a real-world entity. So, who does it represent if we want to keep &lt;code&gt;title&lt;/code&gt; inside
it and we don&amp;#39;t have any file or HTTP page behind the object?&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/12/memory-stick.png' style='width:200px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;It represents &lt;em&gt;computer memory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The title of immutable document #50, &amp;quot;How to grill a sandwich&amp;quot;,
is stored in the memory, taking up 23 bytes of space. The document
should know where those bytes are stored, and it should be able to read them
and replace them with something else. Those 23 bytes are the real-world
entity that the object represents. The bytes have nothing to do with
the state of the object. They are a &lt;em&gt;mutable&lt;/em&gt; real-world entity, similar
to a file, HTTP page, or an Amazon S3 object.&lt;/p&gt;

&lt;p&gt;Unfortunately, Java (and many other modern languages) do not allow direct
access to computer memory. This is how we would design our class if such
direct access was possible:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That &lt;code&gt;Memory&lt;/code&gt; class would be implemented by JDK natively, and all other
classes would be immutable. The class &lt;code&gt;Memory&lt;/code&gt; would have direct access
to the memory heap and would be responsible for
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_dynamic_memory_allocation&quot;&gt;malloc and free&lt;/a&gt;
operations on the operating system level.
Having such a class would allow us to make all Java classes immutable,
including &lt;code&gt;StringBuffer&lt;/code&gt;, &lt;code&gt;ByteArrayOutputStream&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Memory&lt;/code&gt; class would explicitly emphasize the mission of an object
in a software program, which is to be a &lt;em&gt;data animator&lt;/em&gt;. An object is not
holding data; it is animating it. The data exists somewhere, and it is
anemic, static, motionless, stationary, etc. The data is &lt;strong&gt;dead&lt;/strong&gt;
while the object is &lt;strong&gt;alive&lt;/strong&gt;. The role of an object is to make a piece of data
alive, to &lt;em&gt;animate&lt;/em&gt; it but not to become a piece of data. An object needs some
knowledge in order to gain access to that dead piece of data. An object
may need a database unique key, an HTTP address, a file name, or
a memory address in order to find the data and animate it. But an
object should never think of itself as data.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-practical-solution?&quot;&gt;What Is the Practical Solution?&lt;/h2&gt;

&lt;p&gt;Unfortunately, we don&amp;#39;t have such a memory-representing class
in Java, Ruby, JavaScript, Python, PHP, and many other high-level languages.
It looks like language designers didn&amp;#39;t get the idea of
alive objects vs. dead data, which is sad. We&amp;#39;re forced to mix
data with object states using the same language constructs:
object variables and properties.
Maybe someday we&amp;#39;ll have that &lt;code&gt;Memory&lt;/code&gt; class in Java and other languages,
but until then, we have a few options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use C++&lt;/strong&gt;.
In C++ and similar low-level languages, it is possible to access memory
directly and deal with in-memory data the same way we deal with
in-file or in-HTTP data. In C++, we can create that &lt;code&gt;Memory&lt;/code&gt; class
and use it exactly the way we explained above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use Arrays&lt;/strong&gt;.
In Java, an array is a data structure with a unique property &amp;mdash;
it can be modified while being declared as &lt;code&gt;final&lt;/code&gt;. You can use
an array of bytes as a mutable data structure inside an immutable object.
It&amp;#39;s a surrogate solution that conceptually resembles the &lt;code&gt;Memory&lt;/code&gt; class
but is much more primitive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Avoid In-Memory Data&lt;/strong&gt;.
Try to avoid in-memory data as much as possible. In some domains, it is
easy to do; for example, in web apps, file processing, I/O adapters, etc.
However, in other domains, it is much easier said than done. For example,
in games, data manipulation algorithms, and GUI, most of the objects animate
in-memory data mostly because memory is the only resource they have.
In that case, without the &lt;code&gt;Memory&lt;/code&gt; class, you end up with mutable objects :(
There is no workaround.&lt;/p&gt;

&lt;p&gt;To summarize, don&amp;#39;t forget that an object is an &lt;strong&gt;animator&lt;/strong&gt; of data. It is using
its encapsulated knowledge in order to reach the data. No matter where
the data is stored &amp;mdash; in a file, in HTTP, or in memory &amp;mdash; it is
conceptually very different from an object state, even though they may
look very similar.&lt;/p&gt;

&lt;p&gt;A good object is an immutable animator of mutable data. Even though it
is immutable and data is mutable, it is alive and data is dead
in the scope of the object&amp;#39;s living environment.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/09/immutable-object-state-and-behavior.html</guid>
      <dc:date>2014-12-09T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Synchronization Between Nodes</title>
      <link>http://www.yegor256.com/2014/12/04/synchronization-between-nodes.html</link>
      <description>&lt;p&gt;When two or more software modules are accessing the same
resource, they have to be synchronized. This means that only
one module at a time should be working with the resource. Without
such synchronization, there will be collisions and conflicts. This
is especially true when we&amp;#39;re talking about &amp;quot;resources&amp;quot; that do
not support &lt;em&gt;atomic&lt;/em&gt; transactions.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://img.stateful.co/pomegranate.svg' style='width:64px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;To solve this issue and prevent conflicts, we have to introduce
one more element into the picture. All software modules, before
accessing the resource, should &lt;em&gt;capture&lt;/em&gt; a lock from a centralized
server. Once the manipulations with the resource are complete, the module
should &lt;em&gt;release&lt;/em&gt; the lock. While the lock is being captured by one
module, no other modules will be able to capture it. The approach
is very simple and well-known. However, I didn&amp;#39;t find any cloud services
that would provide such a locking and unlocking service over a RESTful API.
So I decided to create one &amp;mdash; &lt;a href=&quot;http://www.stateful.co&quot;&gt;stateful.co&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/van-damme-split.png' style='width:600px;' alt='No Retreat, No Surrender (1986) by Corey Yuen'/&gt;&lt;figcaption&gt;No Retreat, No Surrender (1986) by Corey Yuen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is a practical example. I have a Java web app that is hosted
at Heroku. There are three servers (a.k.a. &amp;quot;dynos&amp;quot;) running the same &lt;code&gt;.war&lt;/code&gt;
application. Why three? Because the web traffic is rather active, and one
server is not powerful enough. So I have to have three of them. They all
run exactly the same applications.&lt;/p&gt;

&lt;p&gt;Each web app works with a table in Amazon DynamoDB. It updates the table,
puts new items into it, deletes some items sometimes, and selects them. So far,
so good, but conflicts are inevitable. Here is an example of a typical
interaction scenario between the web app and DynamoDB (I&amp;#39;m using jcabi-dynamo):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;posts&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recalculate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The logic is obvious here. First, I retrieve an item from the table &lt;code&gt;posts&lt;/code&gt;,
then read its &lt;code&gt;salary&lt;/code&gt;, and then modify it according to my recalculation
algorithm. The problem is that another module may start to do the same while
I&amp;#39;m recalculating. It will read the same initial value from the table
and will start exactly the same recalculation. Then it will save a new
value, and I will save one too. We will end up having Jeff&amp;#39;s salary modified
only once, while users will expect a double modification since two of them
initiated two transactions with two different web apps.&lt;/p&gt;

&lt;p&gt;The right approach here is to &amp;quot;lock&amp;quot; the DynamoDB table first, even before
reading the salary. Then do the modifications and eventually unlock it. Here is
how &lt;a href=&quot;http://www.stateful.co&quot;&gt;stateful.co&lt;/a&gt; helps me. All I need to do is create a new named lock
in the &lt;a href=&quot;http://www.stateful.co&quot;&gt;stateful.co&lt;/a&gt; web panel,
get my authentication keys, and modify my Java code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Sttc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sttc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RtSttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;urn:github:526301&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// my Github ID&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;9FF3-4320-73FB-EEAC&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// my secret key!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Locks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;locks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;posts-table-lock&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;posts&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Atomic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recalculate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, I wrap that critical transaction into &lt;code&gt;Callable&lt;/code&gt;, which will
be executed in isolation. This approach, obviously, doesn&amp;#39;t
guarantee atomicity of transaction &amp;mdash; if part of the transaction fails,
there won&amp;#39;t be any automatic rollbacks and the DynamoDB table will be left
in a &amp;quot;broken&amp;quot; state.&lt;/p&gt;

&lt;p&gt;Locks from &lt;a href=&quot;http://www.stateful.co&quot;&gt;stateful.co&lt;/a&gt; guarantee isolation in resource usage, and you can
use any type of resources, including NoSQL tables, files, S3 objects,
embedded software, etc.&lt;/p&gt;

&lt;p&gt;I should not forget to add this dependency to my &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;co.stateful&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;java-sdk&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, you can do the same; the service is absolutely free of charge.
And you can use any other languages, not just Java. BTW, if interested,
contribute with your own SDK in your preferred language; I&amp;#39;ll add it to
the &lt;a href=&quot;https://github.com/sttc&quot;&gt;Github collection&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/04/synchronization-between-nodes.html</guid>
      <dc:date>2014-12-04T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ORM Is an Offensive Anti-Pattern</title>
      <link>http://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html</link>
      <description>&lt;p&gt;TL;DR ORM is a terrible anti-pattern that violates all principles of
object-oriented programming, tearing objects apart and turning them into dumb and passive
data bags. There is no excuse for ORM existence in any application, be it
a small web app or an enterprise-size system with thousands of tables and CRUD
manipulations on them. What is the alternative? &lt;strong&gt;SQL-speaking objects&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/11/broken-object.png' style='width:600px;' alt='Vinni-Pukh (1969) by Fyodor Khitruk'/&gt;&lt;figcaption&gt;Vinni-Pukh (1969) by Fyodor Khitruk&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;how-orm-works&quot;&gt;How ORM Works&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;Object-relational mapping&lt;/a&gt;
(ORM) is a technique (a.k.a. design pattern) of
accessing a relational database from an object-oriented language
(Java, for example). There are multiple implementations of ORM
in almost every language; for example:
&lt;a href=&quot;http://hibernate.org/orm/&quot;&gt;Hibernate&lt;/a&gt; for Java,
&lt;a href=&quot;http://guides.rubyonrails.org/active_record_basics.html&quot;&gt;ActiveRecord&lt;/a&gt; for Ruby on Rails,
&lt;a href=&quot;http://www.doctrine-project.org/&quot;&gt;Doctrine&lt;/a&gt; for PHP, and
&lt;a href=&quot;http://www.sqlalchemy.org/&quot;&gt;SQLAlchemy&lt;/a&gt; for Python.
In Java, the ORM design is even standardized as &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Persistence_API&quot;&gt;JPA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, let&amp;#39;s see how ORM works, by example. Let&amp;#39;s use Java, PostgreSQL, and Hibernate.
Let&amp;#39;s say we have a single table in the database, called &lt;code&gt;post&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;+-----+------------+--------------------------+
| id  | date       | title                    |
+-----+------------+--------------------------+
|   9 | 10/24/2014 | How to cook a sandwich   |
|  13 | 11/03/2014 | My favorite movies       |
|  27 | 11/17/2014 | How much I love my job   |
+-----+------------+--------------------------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we want to CRUD-manipulate this table from our Java app (CRUD
stands for create, read, update, and delete). First, we should create
a &lt;code&gt;Post&lt;/code&gt; class (I&amp;#39;m sorry it&amp;#39;s so long, but that&amp;#39;s the best I can do):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Temporal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TemporalType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TIMESTAMP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before any operation with Hibernate, we have to create a session factory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;SessionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnnotationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAnnotatedClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This factory will give us &amp;quot;sessions&amp;quot; every time we want to manipulate
with &lt;code&gt;Post&lt;/code&gt; objects. Every manipulation with the session should be wrapped
in this code block:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// your manipulations with the ORM, see below&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HibernateException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the session is ready, here is how we get a list of all posts
from that database table:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;FROM Post&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Title: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think it&amp;#39;s clear what&amp;#39;s going on here. Hibernate is a big, powerful
engine that makes a connection to the database, executes necessary SQL
&lt;code&gt;SELECT&lt;/code&gt; requests, and retrieves the data. Then it makes instances
of class &lt;code&gt;Post&lt;/code&gt; and stuffs them with the data.
When the object comes to us, it is filled with data, and we should
use getters to take them out, like we&amp;#39;re using &lt;code&gt;getTitle()&lt;/code&gt; above.&lt;/p&gt;

&lt;p&gt;When we want to do a reverse operation and send an object to the
database, we do all of the same but in reverse order. We make an instance
of class &lt;code&gt;Post&lt;/code&gt;, stuff it with the data, and ask Hibernate to save it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook an omelette&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how almost every ORM works. The basic principle is always the same &amp;mdash;
ORM objects are anemic envelopes with data. We are talking with the ORM
framework, and the framework is talking to the database. Objects only help
us send our requests to the ORM framework and understand its response.
Besides getters and setters, objects have no other methods. They don&amp;#39;t even know
which database they came from.&lt;/p&gt;

&lt;p&gt;This is how object-relational mapping works.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s wrong with it, you may ask? Everything!&lt;/p&gt;

&lt;h2 id=&quot;what&amp;#39;s-wrong-with-orm?&quot;&gt;What&amp;#39;s Wrong With ORM?&lt;/h2&gt;

&lt;p&gt;Seriously, what is wrong? Hibernate has been one of the most popular Java libraries
for more than 10 years already. Almost every SQL-intensive application in the world
is using it. Each Java tutorial would mention Hibernate (or maybe
&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_object-relational_mapping_software&quot;&gt;some other ORM&lt;/a&gt;
like TopLink or OpenJPA) for a database-connected application. It&amp;#39;s a standard
&lt;em&gt;de-facto&lt;/em&gt; and still I&amp;#39;m saying that it&amp;#39;s wrong? Yes.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m claiming that the entire idea behind ORM is wrong. Its invention
was maybe the second big mistake in OOP after
&lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;NULL reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Actually, I&amp;#39;m not the only one saying something like this, and
definitely not the first. A lot about
this subject has already been published by very respected authors, including
&lt;a href=&quot;http://martinfowler.com/bliki/OrmHate.html&quot;&gt;OrmHate&lt;/a&gt; by Martin Fowler,
&lt;a href=&quot;http://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/&quot;&gt;Object-Relational Mapping Is the Vietnam of Computer Science&lt;/a&gt; by Jeff Atwood,
&lt;a href=&quot;http://blogs.tedneward.com/2006/06/26/The+Vietnam+Of+Computer+Science.aspx&quot;&gt;The Vietnam of Computer Science&lt;/a&gt; by Ted Neward,
&lt;a href=&quot;http://seldo.com/weblog/2011/08/11/orm_is_an_antipattern&quot;&gt;ORM Is an Anti-Pattern&lt;/a&gt; by Laurie Voss,
and many others.&lt;/p&gt;

&lt;p&gt;However, my argument is different than what they&amp;#39;re saying. Even though their reasons are
practical and valid, like &amp;quot;ORM is slow&amp;quot; or &amp;quot;database upgrades are hard&amp;quot;,
they miss the main point. You can see a very good, practical answer
to these practical arguments given by Bozhidar Bozhanov
in his &lt;a href=&quot;http://techblog.bozho.net/orm-haters-dont-get-it/&quot;&gt;ORM Haters Don’t Get It&lt;/a&gt; blog post.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/orm-anti-pattern.svg' style='width:413px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;The main point is that ORM, instead of encapsulating database interaction
inside an object, extracts it away, literally tearing a solid and cohesive
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;living organism&lt;/a&gt; apart.
One part of the object keeps the data while another one, implemented inside
the ORM engine (session factory), knows how to deal with this data and transfers it to the
relational database. Look at this picture; it illustrates what ORM is doing.&lt;/p&gt;

&lt;p&gt;I, being a reader of posts, have to deal with two components: 1) the ORM
and 2) the &amp;quot;obtruncated&amp;quot; object returned to me. The behavior I&amp;#39;m interacting
with is supposed to be provided through a single entry point, which is an object
in OOP. In the case of ORM, I&amp;#39;m getting this behavior via two entry points &amp;mdash;
the ORM and the &amp;quot;thing&amp;quot;, which we can&amp;#39;t even call an object.&lt;/p&gt;

&lt;p&gt;Because of this terrible and offensive violation of the object-oriented
paradigm, we have a lot of practical issues already mentioned in
respected publications. I can only add a few more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL Is Not Hidden&lt;/strong&gt;.
Users of ORM should speak SQL
(or its dialect, like &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html&quot;&gt;HQL&lt;/a&gt;).
See the example above; we&amp;#39;re calling &lt;code&gt;session.createQuery(&amp;quot;FROM Post&amp;quot;)&lt;/code&gt; in order
to get all posts. Even though it&amp;#39;s not SQL, it is very similar to it. Thus,
the relational model is not encapsulated inside objects. Instead, it is exposed
to the entire application. Everybody, with each object, inevitably has to
deal with a relational model in order to get or save something. Thus,
ORM doesn&amp;#39;t hide and wrap the SQL but pollutes the entire application with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Difficult to Test&lt;/strong&gt;.
When some object is working a list of posts, it needs to deal with an
instance of &lt;code&gt;SessionFactory&lt;/code&gt;. How can we mock this dependency? We have to
create a mock of it? How complex is this task? Look at the code above, and you
will realize how verbose and cumbersome that unit test will be. Instead,
we can write integration tests and connect the entire application to a test
version of PostgreSQL. In that case, there is no need to mock &lt;code&gt;SessionFactory&lt;/code&gt;,
but such tests will be rather slow, and even more important, our
having-nothing-to-do-with-the-database objects will be tested against
the database instance. A terrible design.&lt;/p&gt;

&lt;p&gt;Again, let me reiterate. Practical problems of ORM are just consequences. The
fundamental drawback is that ORM tears objects apart, terribly and offensively
violating the very idea of &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;what an object is&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;sql-speaking-objects&quot;&gt;SQL-Speaking Objects&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/sql-speaking-object.svg' style='width:213px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;What is the alternative? Let me show it to you by example. Let&amp;#39;s try to design that
class, &lt;code&gt;Post&lt;/code&gt;, my way. We&amp;#39;ll have to break it down into two classes: &lt;code&gt;Post&lt;/code&gt;
and &lt;code&gt;Posts&lt;/code&gt;, singular and plural. I already mentioned in one of my previous
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;articles&lt;/a&gt; that
a good object is always an abstraction of a real-life entity. Here is how
this principle works in practice. We have two entities: database table
and table row. That&amp;#39;s why we&amp;#39;ll make two classes; &lt;code&gt;Posts&lt;/code&gt; will represent the
table, and &lt;code&gt;Post&lt;/code&gt; will represent the row.&lt;/p&gt;

&lt;p&gt;As I also mentioned in that &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;article&lt;/a&gt;,
every object should work by contract
and implement an interface. Let&amp;#39;s start our design with two interfaces.
Of course, our objects will be immutable. Here is how &lt;code&gt;Posts&lt;/code&gt; would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how a single &lt;code&gt;Post&lt;/code&gt; would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how we will list all posts in the database table:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// we&amp;#39;ll discuss this right now&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Title: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how we will create a new post:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// we&amp;#39;ll discuss this right now&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook an omelette&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, we have true objects now. They are in charge of all operations,
and they perfectly hide their implementation details. There are no transactions,
sessions, or factories. We don&amp;#39;t even know whether these objects are actually
talking to the PostgreSQL or if they keep all the data in text files. All
we need from &lt;code&gt;Posts&lt;/code&gt; is an ability to list all posts for us and to create
a new one. Implementation details are perfectly hidden inside. Now let&amp;#39;s
see how we can implement these two classes.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m going to use &lt;a href=&quot;http://jdbc.jcabi.com&quot;&gt;jcabi-jdbc&lt;/a&gt; as a JDBC wrapper,
but you can use something else or just plain JDBC if you like. It doesn&amp;#39;t
really matter. What matters is that your database interactions are hidden
inside objects. Let&amp;#39;s start with &lt;code&gt;Posts&lt;/code&gt; and implement it in class
&lt;code&gt;PgPosts&lt;/code&gt; (&amp;quot;pg&amp;quot; stands for PostgreSQL):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PgPosts&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT id FROM post&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;INSERT INTO post (date, title) VALUES (?, ?)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Utc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SingleOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, let&amp;#39;s implement the &lt;code&gt;Post&lt;/code&gt; interface in class &lt;code&gt;PgPost&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PgPost&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT date FROM post WHERE id = ?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SingleOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Utc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Utc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT title FROM post WHERE id = ?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SingleOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how a full database interaction scenario would look like
using the classes we just created:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Title: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook an omelette&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Just added post #&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see a full practical example &lt;a href=&quot;https://github.com/aintshy/hub/tree/0.7.2/src/main/java/com/aintshy/pgsql&quot;&gt;here&lt;/a&gt;.
It&amp;#39;s an open source
web app that works with PostgreSQL using the exact approach explained
above &amp;mdash; SQL-speaking objects.&lt;/p&gt;

&lt;h2 id=&quot;what-about-performance?&quot;&gt;What About Performance?&lt;/h2&gt;

&lt;p&gt;I can hear you screaming, &amp;quot;What about performance?&amp;quot; In that script
a few lines above, we&amp;#39;re making many redundant round trips to the database.
First, we retrieve post IDs with &lt;code&gt;SELECT id&lt;/code&gt; and then, in order to get their titles,
we make an extra &lt;code&gt;SELECT title&lt;/code&gt; call for each post. This is inefficient, or simply
put, too slow.&lt;/p&gt;

&lt;p&gt;No worries; this is object-oriented programming, which means it is flexible! Let&amp;#39;s create
a decorator of &lt;code&gt;PgPost&lt;/code&gt; that will accept all data in its constructor
and cache it internally, forever:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstPost&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConstPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pay attention: This decorator doesn&amp;#39;t know anything about PostgreSQL or
JDBC. It just decorates an object of type &lt;code&gt;Post&lt;/code&gt; and pre-caches the date
and title. As usual, this decorator is also immutable.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s create another implementation of &lt;code&gt;Posts&lt;/code&gt; that will return
the &amp;quot;constant&amp;quot; objects:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstPgPosts&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT * FROM post&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConstPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Utc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTimestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now all posts returned by &lt;code&gt;iterate()&lt;/code&gt; of this new class are pre-equipped with dates and titles
fetched in one round trip to the database.&lt;/p&gt;

&lt;p&gt;Using decorators and multiple implementations of the same interface, you
can compose any functionality you wish. What is the most important is that
while functionality is being extended, the complexity of the design is
not escalating, because classes don&amp;#39;t grow in size. Instead, we&amp;#39;re introducing
new classes that stay cohesive and solid, because they are small.&lt;/p&gt;

&lt;h2 id=&quot;what-about-transactions?&quot;&gt;What About Transactions?&lt;/h2&gt;

&lt;p&gt;Every object should deal with its own transactions and encapsulate
them the same way as &lt;code&gt;SELECT&lt;/code&gt; or &lt;code&gt;INSERT&lt;/code&gt; queries. This will lead to
nested transactions, which is perfectly fine provided the database
server supports them. If there is no such support, create a session-wide
transaction object that will accept a &amp;quot;callable&amp;quot; class. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Txn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JdbcSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;START TRANSACTION&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;COMMIT&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ROLLBACK&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, when you want to wrap a few object manipulations in one
transaction, do it like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Txn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook an omelette&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;This is my first comment!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code will create a new post and post a comment to it. If one
of the calls fail, the entire transaction will be rolled back.&lt;/p&gt;

&lt;p&gt;This approach looks object-oriented to me. I&amp;#39;m calling it &amp;quot;SQL-speaking objects&amp;quot;,
because they know how to speak SQL with the database server. It&amp;#39;s their
skill, perfectly encapsulated inside their borders.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html</guid>
      <dc:date>2014-12-01T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Five Principles of Bug Tracking</title>
      <link>http://www.yegor256.com/2014/11/24/principles-of-bug-tracking.html</link>
      <description>&lt;p&gt;A team working remotely requires much stronger discipline than
a co-located crew sitting in the same office. First of all, I mean discipline of
communications. At &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;, we have developed software
remotely for the last five years. We manage tasks strictly through
ticketing systems (like Github, JIRA, Trac, Basecamp, etc.) and
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;discourage&lt;/a&gt;
any informal communications, like Skype, HipChat, emails, or phone calls.
Every ticket for us is an isolated task with its own life cycle,
its own participants, and its own goal. Over these years, we&amp;#39;ve learned
a few lessons that I want to share. If you also work remotely with your
team, you may find them useful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/11/monty-python-argument-sketch.png' style='width:600px;' alt='Monty Python Flying Circus, TV Series (1969-1974)'/&gt;&lt;figcaption&gt;Monty Python Flying Circus, TV Series (1969-1974)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;1.-keep-it-one-on-one&quot;&gt;1. Keep It One-on-One&lt;/h2&gt;

&lt;p&gt;Each ticket (aka &amp;quot;bug&amp;quot;) is a link between two people: problem specifier and problem
solver. If it is a bug, I&amp;#39;m reporting it &amp;mdash; you&amp;#39;re solving it. If it is
a question, I&amp;#39;m asking for an explanation &amp;mdash; you&amp;#39;re explaining. If it
is a task, I&amp;#39;m ordering you to do it &amp;mdash; you&amp;#39;re doing it. In any case,
there are two main characters. No matter how many people are involved in the ticket
resolution, only these two characters have formal roles.&lt;/p&gt;

&lt;p&gt;The responsibility of the ticket reporter is to &lt;strong&gt;defend the problem&lt;/strong&gt;. When I
report a bug, I have to insist that it exists &amp;mdash; this is my job. Others
may tell me that I&amp;#39;m wrong and the bug is not there. They may tell
me that they can&amp;#39;t reproduce it. They may say that my description of
a task is too vague and nobody understands it. There may be many issues
of that kind. My job is to do the best I can in order to &lt;em&gt;keep the ticket alive&lt;/em&gt;.
Obviously, if the bug is not reproducible, I&amp;#39;ll be forced to close
the ticket. However, until the ticket is closed, I&amp;#39;m its guardian angel. :)&lt;/p&gt;

&lt;p&gt;On the other hand, the responsibility of the ticket solver is to
&lt;strong&gt;defend the solution&lt;/strong&gt;. When a ticket is assigned to me and I have to resolve it,
my job is to convince the reporter that my solution is good enough. He may
tell me that my solution is not sufficient, not the most efficient, or
incomplete. My job is to insist that I&amp;#39;m right and he is wrong. Well, of course,
in a reasonable way. And in order to create a solution that will be
accepted as sufficient enough, I have to understand the problem first, investigate
all possible options, and propose the most elegant implementation. But all this
is secondary. The first thing I will be focused on is how to convince
the reporter. I will always remember that my primary goal is to &lt;em&gt;close the ticket&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;My point here is that no matter how many people are involved in the
ticket discussion, always remember what is happening there &amp;mdash; one
person is selling his solution to another person. Everybody else around
them is help or distraction (see below).&lt;/p&gt;

&lt;h2 id=&quot;2.-close-it!&quot;&gt;2. Close It!&lt;/h2&gt;

&lt;p&gt;Remember that a ticket is not a chat. You&amp;#39;re not there to talk.
You&amp;#39;re there to &lt;em&gt;close&lt;/em&gt;. When the ticket is assigned to you,
focus on closing it as soon as possible.&lt;/p&gt;

&lt;p&gt;Also, keep in mind that the sooner you close the ticket, the better job
you will do for the project. Long-living tickets are a management nightmare.
It is difficult to track them and control them. It&amp;#39;s difficult to understand
what&amp;#39;s going on. Have you seen those two-year-old tickets in open source projects
that have hundreds of comments and no deliverables? It is a mistake
by their project managers and ticket participants. Each ticket should be
short and focused &amp;mdash; 1) a problem, 2) a refinement
question, 3) a short explanation, 4) a solution, 5) closed, thanks everybody.
This is an ideal scenario.&lt;/p&gt;

&lt;p&gt;As soon as you realize that your ticket is turning into a long discussion,
try to close it even faster. How can I close it if the reporter doesn&amp;#39;t
like my solution? Find a temporary solution that will satisfy the reporter
and allow you to close the ticket. Use &amp;quot;TODO&amp;quot; in your code or dirty
workarounds &amp;mdash; they are all better than a ticket hovering for a long time.&lt;/p&gt;

&lt;p&gt;Once you see that the solution is provided and is sufficient enough
to close the ticket, ask its reporter to close it. Explicitly ask for that;
don&amp;#39;t dance arround with &amp;quot;looks like this solution may be accepted, if you don&amp;#39;t mind&amp;quot;.
Be explicit in your intention to close the ticket and move on. Try this:
&amp;quot;@jeff, please close the ticket if you don&amp;#39;t have any further questions.&amp;quot;&lt;/p&gt;

&lt;h2 id=&quot;3.-don&amp;#39;t-close-it!&quot;&gt;3. Don&amp;#39;t Close It!&lt;/h2&gt;

&lt;p&gt;Every time you raise a bug and create a new ticket, you consume project
resources. Every bug report means money spent on the project: 1) money for your time
spent finding the problem and reporting it; 2) for the time of the project manager
who is working with the ticket and finding who will fix it; 3) for the time
of the ticket solver, who is trying to understand your report and provide
a solution; and also 4) for the time of everybody else who will participate
in the discussion.&lt;/p&gt;

&lt;p&gt;If you close the ticket without a problem being properly solved,
you put this money into the trash bin. Once the ticket is started, there
is no way back. We can&amp;#39;t just say, &amp;quot;Nah, ignore it; it&amp;#39;s not important anymore.&amp;quot;
Your ticket already consumed project time and budget resources, and in order to turn
them into something useful, you have to make sure that &lt;em&gt;some&lt;/em&gt;
solution is delivered.&lt;/p&gt;

&lt;p&gt;It can be a temporary solution. It can be a single line change in the
project documentation. It can be a TODO marker in the code saying that
&amp;quot;we are aware of the problem but won&amp;#39;t fix it because we&amp;#39;re lazy&amp;quot;. Anything
would work, but not nothing.&lt;/p&gt;

&lt;p&gt;Look at it from a different perspective. When you started that ticket, you had
something in mind. Something was not right with the product. That&amp;#39;s why you
reported a bug. If you close the ticket without anyone even touching that place
of code, someone else will have the same concern in a few days or a few years.
And then the project will have to pay again for a similar ticket or discussion
of the same problem. Even if you&amp;#39;re convinced that the issue you found in
the code is not really an issue, ask a ticket resolver to document it right
in the source code in order to prevent such confusion from happening again in the future.&lt;/p&gt;

&lt;h2 id=&quot;4.-avoid-noise-&amp;mdash;-address-your-comments&quot;&gt;4. Avoid Noise &amp;mdash; Address Your Comments&lt;/h2&gt;

&lt;p&gt;Every time you post a message to the ticket, address it to someone. Otherwise,
if you post just because you want to express your opinion, your
comments become communication noise. Remember, a ticket is a conversation
between two people &amp;mdash; one of them reported an issue and the other one is
trying to fix it. Comments like, &amp;quot;How about we try another approach&amp;quot;
or &amp;quot;I remember I had a similar issue some time ago&amp;quot; are very annoying
and distracting. Let&amp;#39;s be honest, nobody really needs or cares about &amp;quot;opinions&amp;quot;.
All we need in a ticket is a solution(s).&lt;/p&gt;

&lt;p&gt;If you think the ticket should be closed because the introduced solution
is good enough, address your comment to the ticket reporter. And start
it with &amp;quot;@jeff, I think the solution you&amp;#39;ve got already is good enough, because ...&amp;quot;
This way, you will help the assignee to close the ticket and move on.&lt;/p&gt;

&lt;p&gt;If you think the solution is wrong, address your comment to the assignee
of the ticket, starting with &amp;quot;@jeff, I believe your solution is not good enough
because ...&amp;quot; This way, you will help the ticket reporter keep the ticket
open until a proper solution comes up.&lt;/p&gt;

&lt;p&gt;Again, don&amp;#39;t pollute the air with generic opinions. Instead, be very specific
and take sides &amp;mdash; you either like the solution and want the ticket to
be closed, or you don&amp;#39;t like it and want the ticket to stay open. Everything
in between is just making the situation more complex and isn&amp;#39;t helping the
project at all.&lt;/p&gt;

&lt;h2 id=&quot;5.-report-when-it-is-broken&quot;&gt;5. Report When It Is Broken&lt;/h2&gt;

&lt;p&gt;I think it is obvious, but I will reiterate: Every bug has
to be reproducible. Every time you report a bug, you should explain
how exactly the product is broken. Yes, it is your job to prove that the
software doesn&amp;#39;t work as intended, or is not documented properly, or
doesn&amp;#39;t satisfy the requirements, etc.&lt;/p&gt;

&lt;p&gt;Every bug report should follow the same simple formula: &amp;quot;This is what we &lt;em&gt;have&lt;/em&gt;,
this is what we &lt;em&gt;should have&lt;/em&gt; instead, so fix it&amp;quot;. Every ticket, be it a bug,
a task, a question, or a suggestion, should be formatted in this way. By
submitting it, you&amp;#39;re asking the project to move from point A to point B. Something
is not right at point A, and it will be much better for all of us to be
at that point B. So it&amp;#39;s obvious that you have to explain where these points
A and B are. It is highly desirable if you can explain how to get there &amp;mdash;
how to reproduce a problem and how to fix it.&lt;/p&gt;

&lt;p&gt;Even when you have a question, you should also follow that format. If you
have a question, it means the project documentation is not sufficient
enough for you to find an answer there. This is what is broken. You should
ask for a fix. So instead of reporting, &amp;quot;How should I use class X?&amp;quot;, say
something like, &amp;quot;The current documentation is not complete; it doesn&amp;#39;t explain
how I should use class X. Please fix.&amp;quot;&lt;/p&gt;

&lt;p&gt;If you can&amp;#39;t explain how to get there, say so in the ticket: &amp;quot;I see that
this class doesn&amp;#39;t work as it should, but I don&amp;#39;t know how to reproduce
the problem and how to fix it.&amp;quot; This will give everybody a clear message
that you are aware that your bug report is not perfect. The first step
for its resolver will be to refine the problem and find a way to reproduce it.
If such a replica can&amp;#39;t be found, obviously your bug will be forced into closing.&lt;/p&gt;

&lt;p&gt;Let me reiterate again: Every ticket is dragging the project from point A,
where something is not right, to point B, where it is fixed. Your job,
as a ticket reporter, is to draw that line &amp;mdash; clearly and explicitly.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/24/principles-of-bug-tracking.html</guid>
      <dc:date>2014-11-24T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Seven Virtues of a Good Object</title>
      <link>http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html</link>
      <description>&lt;p&gt;Martin Fowler &lt;a href=&quot;http://martinfowler.com/bliki/InversionOfControl.html&quot;&gt;says&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A library is essentially a set of functions that you can call,
these days usually organized into classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Functions organized into classes? With all due respect, this is wrong. And it
is a very common misconception of a class in object-oriented programming. Classes
are not organizers of functions. And objects are not data structures.&lt;/p&gt;

&lt;p&gt;So what is a &amp;quot;proper&amp;quot; object? Which one is not a proper one?
What is the difference? Even though it is a very polemic subject, it is very important.
Unless we understand what an object is, how can we write object-oriented software?
Well, thanks to Java, Ruby, and others, we can. But how good will it be?
Unfortunately, this is not an exact science, and there are many opinions.
Here is my list of qualities of a good object.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;class-vs.-object&quot;&gt;Class vs. Object&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/good-object-1.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Before we start talking about objects, let&amp;#39;s define what a &lt;em&gt;class&lt;/em&gt; is. It
is a place where objects are being born (a.k.a. &lt;em&gt;instantiated&lt;/em&gt;). The main responsibility
of a class is to &lt;em&gt;construct&lt;/em&gt; new objects on demand and &lt;em&gt;destruct&lt;/em&gt; them when
they are not used anymore. A class knows how its children should look
and how they should behave. In other words, it knows what &lt;em&gt;contracts&lt;/em&gt; they should obey.&lt;/p&gt;

&lt;p&gt;Sometimes I hear classes being called &amp;quot;object templates&amp;quot;
(for example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_%28computer_programming%29&quot;&gt;Wikipedia says so&lt;/a&gt;).
This definition is not correct because it places classes into a passive position. This definition
assumes that someone will get a template and build an object by using it.
This may be true, technically speaking, but conceptually it&amp;#39;s wrong. Nobody else
should be involved &amp;mdash; there are only a class and its children. An
object asks a class to create another object, and the class constructs it; that&amp;#39;s it.
Ruby expresses this concept much better than Java or C++:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The object &lt;code&gt;photo&lt;/code&gt; is constructed by the class &lt;code&gt;File&lt;/code&gt; (&lt;code&gt;new&lt;/code&gt; is an entry point to the class).
Once constructed, the object is acting on its own. It shouldn&amp;#39;t know who constructed it
and how many more brothers and sisters it has in the class. Yes, I mean
that &lt;a href=&quot;https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29&quot;&gt;reflection&lt;/a&gt;
is a terrible idea, but I&amp;#39;ll write more about it in one of the next posts :)
Now, let&amp;#39;s talk about objects and their best and worst sides.&lt;/p&gt;

&lt;h2 id=&quot;1.-he-exists-in-real-life&quot;&gt;1. He Exists in Real Life&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/good-object-2.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;First of all, an object is a &lt;strong&gt;living organism&lt;/strong&gt;. Moreover, an object
should be &lt;a href=&quot;https://en.wikipedia.org/wiki/Anthropomorphism&quot;&gt;anthropomorphized&lt;/a&gt;, i.e.
treated like a human being (or a pet, if you like them more). By this
I basically mean that an object is not a &lt;em&gt;data structure&lt;/em&gt; or a collection
of functions. Instead, it is an independent entity with its own life cycle,
its own behavior, and its own habits.&lt;/p&gt;

&lt;p&gt;An employee, a department, an HTTP request, a table in MySQL,
a line in a file, or a file itself are proper objects &amp;mdash; because they exist in
real life, even when our software is turned off. To be more precise, an object is a
&lt;em&gt;representative&lt;/em&gt; of a real-life creature. It is a &lt;em&gt;proxy&lt;/em&gt; of that
real-life creature in front of all other objects. Without
such a creature, there is &amp;mdash; obviously &amp;mdash; no object.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, I&amp;#39;m asking &lt;code&gt;File&lt;/code&gt; to construct a new object &lt;code&gt;photo&lt;/code&gt;, which will
be a representative of a real file on disk. You may say that a file
is also something virtual and exists only when the computer is turned on.
I would agree and refine the definition of &amp;quot;real life&amp;quot; as follows: It is
everything that exists aside from the scope of the program the object
lives in. The disk file is outside the scope of our program; that&amp;#39;s why
it is perfectly correct to create its representative inside the program.&lt;/p&gt;

&lt;p&gt;A controller, a parser, a filter, a validator, a service locator,
a singleton, or a factory are &lt;strong&gt;not&lt;/strong&gt; good objects
(yes, most GoF patterns are anti-patterns!).
They don&amp;#39;t exist apart from your software, in real life. They
are invented just to tie other objects together. They are artificial
and fake creatures. They don&amp;#39;t represent anyone. Seriously, an XML parser
&amp;mdash; who does it represent? Nobody.&lt;/p&gt;

&lt;p&gt;Some of them may become good if they change their names;
others can never excuse their existence. For example, that XML parser can be
renamed to &amp;quot;parseable XML&amp;quot; and start to represent an XML document
that exists outside of our scope.&lt;/p&gt;

&lt;p&gt;Always ask yourself, &amp;quot;What is
the real-life entity behind my object?&amp;quot; If you can&amp;#39;t find an answer,
start thinking about refactoring.&lt;/p&gt;

&lt;h2 id=&quot;2.-he-works-by-contracts&quot;&gt;2. He Works by Contracts&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/good-object-3.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;A good object always works by contracts. He expects to be hired not
because of his personal merits but because he obeys the contracts. On the
other hand, when we hire an object, we shouldn&amp;#39;t discriminate and expect some specific
object from a specific class to do the work for us. We should expect &lt;em&gt;any&lt;/em&gt;
object to do what our contract says. As long as the object does what
we need, we should not be interested in his class of origin, his sex, or his religion.&lt;/p&gt;

&lt;p&gt;For example, I need to show a photo on the screen.
I want that photo to be read from a file in PNG format. I&amp;#39;m
contracting an object from class &lt;code&gt;DataFile&lt;/code&gt; and asking him to give me
the binary content of that image.&lt;/p&gt;

&lt;p&gt;But wait, do I care where exactly the content will come from &amp;mdash; the file on disk, or
an HTTP request, or maybe a document in Dropbox? Actually, I don&amp;#39;t. All I care about
is that some object gives me a byte array with PNG content. So my contract
would look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, any object from any class (not just &lt;code&gt;DataFile&lt;/code&gt;) can work for me.
All he has to do, in order to be eligible, is to obey the contract
&amp;mdash; by implementing the interface &lt;code&gt;Binary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The rule here is simple: every public method in a good object should
implement his counterpart from an interface. If your object has
public methods that are not inherited from any interface, he is badly designed.&lt;/p&gt;

&lt;p&gt;There are two practical reasons for this. First, an object working
without a contract is impossible to mock in a unit test. Second,
a contractless object is impossible to extend via
&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decoration&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;3.-he-is-unique&quot;&gt;3. He Is Unique&lt;/h2&gt;

&lt;p&gt;A good object should always encapsulate something in order
to be unique. If there is nothing to encapsulate, an object may
have identical clones, which I believe is bad. Here is an example
of a bad object, which may have clones:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTPStatus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I can create a few instances of class &lt;code&gt;HTTPStatus&lt;/code&gt;, and all of them will be
equal to each other:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTPStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTPStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously utility classes, which have only static methods,
can&amp;#39;t instantiate good objects. More generally, utility classes
don&amp;#39;t have any of the merits mentioned in this article and can&amp;#39;t
even be called &amp;quot;classes&amp;quot;. They are simply terrible abusers of an object paradigm
and exist in modern object-oriented languages only because their
inventors enabled static methods.&lt;/p&gt;

&lt;h2 id=&quot;4.-he-is-immutable&quot;&gt;4. He Is Immutable&lt;/h2&gt;

&lt;p&gt;A good object should never change his encapsulated state.
Remember, an object is a representative of a real-life entity, and this
entity should stay the same through the entire life of the object. In other
words, an object should never betray those whom he represents. He should
never change owners. :)&lt;/p&gt;

&lt;p&gt;Be aware that immutability doesn&amp;#39;t mean that all methods always return the same values.
Instead, a good immutable object is very dynamic.
However, he never changes his internal state. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTPStatus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTPStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Even though the method &lt;code&gt;read()&lt;/code&gt; may return different values, the
object is immutable. He points to a certain web page and will
never point anywhere else. He will never change his encapsulated state, and he will
never betray the URL he represents.&lt;/p&gt;

&lt;p&gt;Why is immutability a virtue? This article explains in detail:
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;Objects Should Be Immutable&lt;/a&gt;.
In a nutshell, immutable objects are better because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Immutable objects are simpler to construct, test, and use.&lt;/li&gt;
&lt;li&gt;Truly immutable objects are always thread-safe.&lt;/li&gt;
&lt;li&gt;They help avoid temporal coupling.&lt;/li&gt;
&lt;li&gt;Their usage is side-effect free (no defensive copies).&lt;/li&gt;
&lt;li&gt;They always have failure atomicity.&lt;/li&gt;
&lt;li&gt;They are much easier to cache.&lt;/li&gt;
&lt;li&gt;They prevent &lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;NULL references&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, a good object doesn&amp;#39;t have
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;setters&lt;/a&gt;, which
may change his state and force him to betray the URL. In other words,
introducing a &lt;code&gt;setURL()&lt;/code&gt; method would be a terrible mistake in class &lt;code&gt;HTTPStatus&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Besides all that, immutable objects will force you to make
more cohesive, solid, and understandable designs, as this article
explains: &lt;a href=&quot;/2014/11/07/how-immutability-helps.html&quot;&gt;How Immutability Helps&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;5.-his-class-doesn&amp;#39;t-have-anything-static&quot;&gt;5. His Class Doesn&amp;#39;t Have Anything Static&lt;/h2&gt;

&lt;p&gt;A static method implements a behavior of a class, not an object. Let&amp;#39;s say
we have class &lt;code&gt;File&lt;/code&gt;, and his children have method &lt;code&gt;size()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Measurable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// calculate the size of the file and return&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, so good; the method &lt;code&gt;size()&lt;/code&gt; is there because of the contract &lt;code&gt;Measurable&lt;/code&gt;,
and every object of class &lt;code&gt;File&lt;/code&gt; will be able to measure his size. A terrible
mistake would be to design this class with a static method instead
(this design is also known as
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;a utility class&lt;/a&gt;
and is very popular in Java, Ruby, and almost every OOP language):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// TERRIBLE DESIGN, DON&amp;#39;T USE!&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// calculate the size of the file and return&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This design runs completely against the object-oriented paradigm. Why?
Because static methods turn object-oriented programming into &amp;quot;class-oriented&amp;quot; programming.
This method, &lt;code&gt;size()&lt;/code&gt;, exposes the behavior of the class, not of his objects. What&amp;#39;s
wrong with this, you may ask? Why can&amp;#39;t we have both objects and classes
as first-class citizens in our code? Why can&amp;#39;t both of them have methods and properties?&lt;/p&gt;

&lt;p&gt;The problem is that with class-oriented programming,
decomposition doesn&amp;#39;t work anymore. We can&amp;#39;t break down a complex problem
into parts, because only a single instance of a class exists in the entire
program. The power of OOP is that it allows us to use objects as an instrument
for scope decomposition. When I instantiate an object inside a method, he
is dedicated to my specific task. He is perfectly isolated from
all other objects around the method. This object is a &lt;em&gt;local variable&lt;/em&gt;
in the scope of the method. A class, with his static methods, is always
a &lt;em&gt;global variable&lt;/em&gt; no matter where I use him. Because of that, I can&amp;#39;t
isolate my interaction with this variable from others.&lt;/p&gt;

&lt;p&gt;Besides being conceptually against object-oriented principles, public static
methods have a few practical drawbacks:&lt;/p&gt;

&lt;p&gt;First, it&amp;#39;s &lt;strong&gt;impossible to mock&lt;/strong&gt; them
(Well, you can use &lt;a href=&quot;https://code.google.com/p/powermock/&quot;&gt;PowerMock&lt;/a&gt;,
but this will then be the most terrible decision
you could make in a Java project ... I made it once, a few years ago).&lt;/p&gt;

&lt;p&gt;Second, they are &lt;strong&gt;not thread-safe&lt;/strong&gt; by definition, because they always
work with static variables, which are accessible from all threads. You can
make them thread-safe, but this will always require explicit
synchronization.&lt;/p&gt;

&lt;p&gt;Every time you see a public static method, start rewriting immediately. I don&amp;#39;t
even want to mention how terrible static (or global) variables are. I think
it is just obvious.&lt;/p&gt;

&lt;h2 id=&quot;6.-his-name-is-not-a-job-title&quot;&gt;6. His Name Is Not a Job Title&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/good-object-4.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;The name of an object should tell us what this object &lt;strong&gt;is&lt;/strong&gt;, not what
it &lt;strong&gt;does&lt;/strong&gt;, just like we name objects in real life: book instead of
page aggregator, cup instead of water holder, T-shirt instead of body dresser.
There are exceptions, of course, like printer or computer, but
they were invented just recently and by those who didn&amp;#39;t read this article. :)&lt;/p&gt;

&lt;p&gt;For example, these names tell us who their owners are:
an apple, a file, a series of HTTP requests, a socket, an XML document, a list of users, a regular
expression, an integer, a PostgreSQL table, or Jeffrey Lebowski. A properly named object is always
possible to draw as a small picture. Even a regular expression can be drawn.&lt;/p&gt;

&lt;p&gt;In the opposite, here is an example of names that tell us what their owners do:
a file reader, a text parser, a URL validator, an XML printer,
a service locator, a singleton, a script runner, or a Java programmer. Can you draw
any of them? No, you can&amp;#39;t. These names are not suitable for good objects.
They are terrible names that lead to terrible design.&lt;/p&gt;

&lt;p&gt;In general, avoid names that end with &amp;quot;-er&amp;quot; &amp;mdash; most of them are bad.&lt;/p&gt;

&lt;p&gt;&amp;quot;What is the alternative of a &lt;code&gt;FileReader&lt;/code&gt;?&amp;quot; I hear you asking. What would
be a better name? Let&amp;#39;s see. We already have &lt;code&gt;File&lt;/code&gt;, which is a representative
of a real-world file on disk. This representative is not powerful enough for us,
because he doesn&amp;#39;t know how to read the content of the file. We want to create
a more powerful one that will have that ability. What would we call him?
Remember, the name should say what he is, not what he does. What is he? He
is a file that has data; not just a file, like &lt;code&gt;File&lt;/code&gt;, but a more sophisticated
one, with data. So how about &lt;code&gt;FileWithData&lt;/code&gt; or simply &lt;code&gt;DataFile&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The same logic should be applicable to all other names.
Always think about &lt;strong&gt;what it is&lt;/strong&gt; rather than what it does. Give your
objects real, meaningful names instead of job titles.&lt;/p&gt;

&lt;h2 id=&quot;7.-his-class-is-either-final-or-abstract&quot;&gt;7. His Class Is Either Final or Abstract&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/good-object-5.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;A good object comes from either a final or abstract class. A &lt;code&gt;final&lt;/code&gt; class is one that
can&amp;#39;t be extended via inheritance. An &lt;code&gt;abstract&lt;/code&gt; class is one that
can&amp;#39;t have children. Simply put, a class should either say, &amp;quot;You can never break
me; I&amp;#39;m a black box for you&amp;quot; or &amp;quot;I&amp;#39;m broken already; fix me first and then use&amp;quot;.&lt;/p&gt;

&lt;p&gt;There is nothing in between. A final class is a black box that you can&amp;#39;t modify
by any means. He works as he works, and you either use him or throw him away. You can&amp;#39;t
create another class that will inherit his properties. This is not allowed
because of that &lt;code&gt;final&lt;/code&gt; modifier. The only way to extend such a final class
is through decoration of his children. Let&amp;#39;s say I have the class &lt;code&gt;HTTPStatus&lt;/code&gt; (see
above), and I don&amp;#39;t like him. Well, I like him, but he&amp;#39;s not powerful enough
for me. I want him to throw an exception if HTTP status is over 400. I want
his method, &lt;code&gt;read()&lt;/code&gt;, to do more that it does now. A traditional way would be
to extend the class and overwrite his method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnlyValidStatus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTPStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnlyValidStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;unsuccessful HTTP code&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Why is this wrong? It is very wrong because we risk breaking
the logic of the entire parent class by overriding one of his methods. Remember,
once we override the method &lt;code&gt;read()&lt;/code&gt; in the child class, all methods from the
parent class start to use his new version. We&amp;#39;re literally injecting
a new &amp;quot;piece of implementation&amp;quot; right into the class. Philosophically
speaking, this is an offense.&lt;/p&gt;

&lt;p&gt;On the other hand, to extend a final class, you have to treat him like a black box
and decorate him with your own implementation (a.k.a.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;Decorator Pattern&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnlyValidStatus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnlyValidStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;unsuccessful HTTP code&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure that this class is implementing the same interface
as the original one: &lt;code&gt;Status&lt;/code&gt;. The instance of &lt;code&gt;HTTPStatus&lt;/code&gt; will
be passed into him through the constructor and encapsulated. Then every
call will be intercepted and implemented in a different way, if necessary.
In this design, we treat the original object as a black box and never
touch his internal logic.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t use that &lt;code&gt;final&lt;/code&gt; keyword, anyone (including yourself) will
be able to extend the class and ... offend him :( So a class without &lt;code&gt;final&lt;/code&gt;
is a bad design.&lt;/p&gt;

&lt;p&gt;An abstract class is the exact oposite case &amp;mdash; he tells us that
he is incomplete and we can&amp;#39;t use him &amp;quot;as is&amp;quot;. We have to inject
our custom implementation logic into him, but only into the places he allows
us to touch. These places are explicitly marked as &lt;code&gt;abstract&lt;/code&gt; methods.
For example, our &lt;code&gt;HTTPStatus&lt;/code&gt; may look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidatedHTTPStatus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;unsuccessful HTTP code&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, the class doesn&amp;#39;t know how exactly to validate the HTTP
code, and he expects us to inject that logic through inheritance and through
overloading the method &lt;code&gt;isValid()&lt;/code&gt;. We&amp;#39;re not going to offend him with
this inheritance, since he defended all other methods with &lt;code&gt;final&lt;/code&gt; (pay
attention to the modifiers of his methods). Thus, the class is ready
for our offense and is perfectly guarded against it.&lt;/p&gt;

&lt;p&gt;To summarize, your class should either be &lt;code&gt;final&lt;/code&gt; or &lt;code&gt;abstract&lt;/code&gt; &amp;mdash;
nothing in between.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html</guid>
      <dc:date>2014-11-20T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>