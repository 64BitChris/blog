<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.1">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2016-02-14T03:20:14+00:00</updated><id>http://www.yegor256.com/</id><title>Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><entry><title>Are You Still Debugging?</title><link href="http://www.yegor256.com/2016/02/09/are-you-still-debugging.html" rel="alternate" type="text/html" title="Are You Still Debugging?" /><published>2016-02-09T00:00:00+00:00</published><updated>2016-02-09T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/02/09/are-you-still-debugging</id><content type="html" xml:base="http://www.yegor256.com/2016/02/09/are-you-still-debugging.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Debugging&quot;&gt;Debugging&lt;/a&gt;
is &amp;quot;a process of running a program/method interactively,
breaking execution flow after each statement and showing...&amp;quot; In a nutshell, it is
a very useful technique ... for a bad programmer. Or an old programmer
who is still writing procedural code in C. Object-oriented programmers
never debug their code &amp;mdash; they write unit tests. My point here
is that unit testing is a technique that completely replaces debugging.
If debugging is required, the &lt;strong&gt;design is bad&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;/images/2016/02/the-revenant.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;The Revenant (2015) by Alejandro G. I침치rritu&#39;/&gt;&lt;figcaption&gt;The Revenant (2015) by Alejandro G. I침치rritu&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s say I&amp;#39;m a &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;bad&lt;/a&gt;
imperative procedural programmer, and this is my Java code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileUtils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readWords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAllBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This static &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;utility&lt;/a&gt;
method reads file content and then
finds all the unique words in it. Pretty simple. However, if
it doesn&amp;#39;t work, what do we do? Let&amp;#39;s say this is the file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;We know what we are,
but know not what we may be.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From it, we get this list of words:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;We&amp;quot;
&amp;quot;know&amp;quot;
&amp;quot;what&amp;quot;
&amp;quot;we&amp;quot;
&amp;quot;are,\n&amp;quot;
&amp;quot;but&amp;quot;
&amp;quot;not&amp;quot;
&amp;quot;may&amp;quot;
&amp;quot;be\n&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that doesn&amp;#39;t look right to me ... so what is the next step? Either the file
reading doesn&amp;#39;t work correctly or the split is broken. Let&amp;#39;s &lt;strong&gt;debug&lt;/strong&gt;, right?
Let&amp;#39;s give it a file through an input and go step by step, tracing and watching
the variables. We&amp;#39;ll find the bug and fix it. But when a similar
problem shows up, we&amp;#39;ll have to debug again! And that&amp;#39;s what unit testing
is supposed to &lt;strong&gt;prevent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re supposed to create a unit test once, in which the problem is reproduced.
Then we fix the problem and make sure the test passes. That&amp;#39;s how we save
our investments in problem solving. We won&amp;#39;t fix it again, because it won&amp;#39;t
happen again. Our &lt;strong&gt;test&lt;/strong&gt; will prevent it from happening.&lt;/p&gt;

&lt;p&gt;However, all this will work only if it&amp;#39;s easy to create a unit test. If it&amp;#39;s
difficult, I&amp;#39;ll be too lazy to do it. I will just debug and fix the problem.
In this particular example, creating a test is a rather expensive procedure.
What I mean is the complexity of the unit test will be rather high. We have to
create a temporary file, fill it with data, run the method, and check the results.
To find out what&amp;#39;s going on and where the bug is, I&amp;#39;ll have to create a number
of tests. To avoid code duplication, I&amp;#39;ll also have to create some supplementary
utilities to help me create that temporary file and fill it with data.
That&amp;#39;s a lot of work. Well, maybe not &amp;quot;a lot&amp;quot;, but way more than a few minutes
of debugging.&lt;/p&gt;

&lt;p&gt;Thus, if you perceive debugging to be faster and easier, think about the quality
of your code. I bet it has a lot of opportunities for refactoring, just like
the code from the example above. Here is how I would modify it. First of all,
I would turn it into a class, because utility static methods are a
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;bad practice&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Words&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAllBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks better already, but the complexity is still there. Next, I would
break it down into smaller classes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAllBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Words&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What do you think now? Writing a test for the &lt;code&gt;Words&lt;/code&gt; class is a pretty
trivial task:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hamcrest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hamcrest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WordsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parsesSimpleText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;are&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;you&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How much time did that take? Less than a minute. We don&amp;#39;t need to create
a temporary file and load it with data, because class &lt;code&gt;Words&lt;/code&gt; doesn&amp;#39;t do
anything with files. It just parses the incoming string and finds the unique
words in it. Now it&amp;#39;s easy to fix, since the test is small and we can
easily create more tests; for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hamcrest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hamcrest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WordsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parsesSimpleText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;are&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;you&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parsesMultipleLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;first line\nsecond line\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;line&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My point is that debugging is necessary when the amount of time
to write a unit test is significantly more than the time it takes to click
those Trace-In/Trace-Out buttons. And it&amp;#39;s logical. We all are lazy and
want fast and easy solutions. But debugging burns time and wastes
energy. It helps us find problems but doesn&amp;#39;t help prevent
them from reappearing.&lt;/p&gt;

&lt;p&gt;Debugging is needed when our code is
&lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;procedural&lt;/a&gt;
and algorithmic &amp;mdash; when the code is all
about &lt;strong&gt;how&lt;/strong&gt; the goal should be achieved instead of &lt;strong&gt;what&lt;/strong&gt; the goal is.
See the examples above again. The first static method is all about
how we read the file, parse it, and find words. It&amp;#39;s even named &lt;code&gt;readWords()&lt;/code&gt; (a &lt;strong&gt;verb&lt;/strong&gt;).
To the contrary, the second example is about what will be achieved. It&amp;#39;s either
the &lt;code&gt;Text&lt;/code&gt; of the file or &lt;code&gt;Words&lt;/code&gt; of the text (both are &lt;strong&gt;nouns&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;I believe there is no place for debugging in clean object-oriented
programming. Only unit testing!&lt;/p&gt;</content><category term="tdd" /><summary>Debugging
is &amp;quot;a process of running a program/method interactively,
breaking execution flow after each statement and showing...&amp;quot; In a nutshell, it is
a very useful technique ... for a bad programmer. Or an old programmer
who is still writing procedural code in C. Object-oriented programmers
never debug their code &amp;mdash; they write unit tests. My point here
is that unit testing is a technique that completely replaces debugging.
If debugging is required, the design is bad.</summary></entry><entry><title>Design Patterns and Anti-Patterns, Love and Hate</title><link href="http://www.yegor256.com/2016/02/03/design-patterns-and-anti-patterns.html" rel="alternate" type="text/html" title="Design Patterns and Anti-Patterns, Love and Hate" /><published>2016-02-03T00:00:00+00:00</published><updated>2016-02-03T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/02/03/design-patterns-and-anti-patterns</id><content type="html" xml:base="http://www.yegor256.com/2016/02/03/design-patterns-and-anti-patterns.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;Design Patterns&lt;/a&gt; are ...
Come on, you know what they are. They are
something we &lt;strong&gt;love&lt;/strong&gt; and &lt;strong&gt;hate&lt;/strong&gt;. We love them because they let us
write code without thinking. We hate them when we see the code
of someone who is used to writing code without thinking. Am I wrong?
Now, let me try to go through all of them and show you how much
I love or hate each one. Follow me, in alphabetic order.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;/images/2016/02/the-shining.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;The Shining (1980) by Stanley Kubrick&#39;/&gt;&lt;figcaption&gt;The Shining (1980) by Stanley Kubrick&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_factory_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Abstract Factory&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Adapter_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Adapter&lt;/span&gt;&lt;/a&gt;.
Good one!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bridge_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Bridge&lt;/span&gt;&lt;/a&gt;.
Good one!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Builder_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Builder&lt;/span&gt;&lt;/a&gt;.
Terrible concept, since it encourages us to create and
use big, complex objects. If you need a builder, there
is already something wrong in your code. Refactor it so
any object is easy to create through its constructors.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chain_of_responsibility_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Chain of Responsibility&lt;/span&gt;&lt;/a&gt;.
Seems fine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Command_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Command&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Composite_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Composite&lt;/span&gt;&lt;/a&gt;.
Good one; check out &lt;a href=&quot;/2015/10/01/vertical-horizontal-decorating.html&quot;&gt;this&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Decorator&lt;/span&gt;&lt;/a&gt;.
My &lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;favorite&lt;/a&gt; one.
I highly recommend you use it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Facade_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Facade&lt;/span&gt;&lt;/a&gt;.
Bad idea. In OOP, we need objects and only objects,
not facades for them. This design pattern is very procedural
in its spirit, since a facade is nothing more than a collection
of &lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;procedures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;&lt;span class=&#39;orange&#39;&gt;Factory Method&lt;/span&gt;&lt;/a&gt;.
This one seems OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Flyweight_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Flyweight&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s a workaround, as I see it, so it&amp;#39;s not a good design pattern. I would
recommend you not use it unless there is a really critical performance
issue. But calling it a design pattern ... no way. A fix for a
performance problem in Java? Yes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Front_controller&quot;&gt;&lt;span class=&#39;red&#39;&gt;Front Controller&lt;/span&gt;&lt;/a&gt;.
Terrible idea, as well as the entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt;.
It&amp;#39;s very &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;procedural&lt;/a&gt;, that&amp;#39;s why.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interpreter_pattern&quot;&gt;&lt;span class=&#39;orange&#39;&gt;Interpreter&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK, but I &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;don&amp;#39;t like&lt;/a&gt;
the name. &amp;quot;Expression&amp;quot; would be a much better alternative.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Iterator_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Iterator&lt;/span&gt;&lt;/a&gt;.
Bad idea, since it is mutable. It would be much better
to have &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutable&lt;/a&gt; &amp;quot;cursors&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lazy_initialization&quot;&gt;&lt;span class=&#39;green&#39;&gt;Lazy Initialization&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Marker_interface_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Marker&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s a terrible idea, along with reflection and
&lt;a href=&quot;/2015/04/02/class-casting-is-anti-pattern.html&quot;&gt;type casting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;&lt;span class=&#39;red&#39;&gt;MVC&lt;/span&gt;&lt;/a&gt;.
Bad idea, since it&amp;#39;s very procedural. &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;Controllers&lt;/a&gt;
are the key broken element in this
concept. We need real objects, not procedural controllers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mediator_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Mediator&lt;/span&gt;&lt;/a&gt;.
I don&amp;#39;t like it. Even though it sounds like a technique
for decreasing complexity and coupling, it is not really object-oriented.
Who is this mediator? Just a &amp;quot;channel&amp;quot; between objects? Why shouldn&amp;#39;t objects
communicate directly? Because they are too complex? Make
them smaller and simpler, rather than inventing these mediators.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memento_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Memento&lt;/span&gt;&lt;/a&gt;.
This idea implies that objects are &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;mutable&lt;/a&gt;,
which I&amp;#39;m against in general.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Module_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Module&lt;/span&gt;&lt;/a&gt;.
If Wikipedia is right about this pattern, it&amp;#39;s something
even more terrible than the Singleton.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiton_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Multiton&lt;/span&gt;&lt;/a&gt;.
Really bad idea. Same as Singleton.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Null_Object_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Null Object&lt;/span&gt;&lt;/a&gt;.
Good one. By the way, see
&lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;Why NULL Is Bad&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_pattern_object_library&quot;&gt;&lt;span class=&#39;green&#39;&gt;Object Library&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s good.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_pool_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Object Pool&lt;/span&gt;&lt;/a&gt;.
Good one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;&lt;span class=&#39;orange&#39;&gt;Observer&lt;/span&gt;&lt;/a&gt;.
The idea is good, but the name is bad, since it
&lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;ends with -ER&lt;/a&gt;.
A much better one would be &amp;quot;Source&amp;quot; and &amp;quot;Target&amp;quot;. The Source
generates events and the Target listens to them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;&lt;span class=&#39;red&#39;&gt;ORM&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s terrible and &amp;quot;offensive&amp;quot;; check
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;this&lt;/a&gt; out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Prototype_pattern&quot;&gt;&lt;span class=&#39;orange&#39;&gt;Prototype&lt;/span&gt;&lt;/a&gt;.
Good idea, but what does it have to do with OOP?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Proxy&lt;/span&gt;&lt;/a&gt;.
Good one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot;&gt;&lt;span class=&#39;green&#39;&gt;RAII&lt;/span&gt;&lt;/a&gt;.
This is a really good one, and I highly recommend you use it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_pattern_Servant&quot;&gt;&lt;span class=&#39;red&#39;&gt;Servant&lt;/span&gt;&lt;/a&gt;.
A very bad idea, because it&amp;#39;s highly
&lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;procedural&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Singleton&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s the king of all anti-patterns. Stay away from it at all costs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Specification_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Specification&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/State_pattern&quot;&gt;&lt;span class=&#39;orange&#39;&gt;State&lt;/span&gt;&lt;/a&gt;.
Although it&amp;#39;s not implied, I feel that in most cases
the use of this pattern results in mutability, a code characteristic that
I&amp;#39;m generally &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;against&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Strategy_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Strategy&lt;/span&gt;&lt;/a&gt;.
A good one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Template Method&lt;/span&gt;&lt;/a&gt;.
Seems fine, as long as you keep classes
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Visitor&lt;/span&gt;&lt;/a&gt;.
A rather &lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;procedural&lt;/a&gt;
concept that treats objects as
data structures, which we can manipulate.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;I have nothing against &lt;a href=&quot;https://en.wikipedia.org/wiki/Concurrency_pattern&quot;&gt;concurrency patterns&lt;/a&gt; either;
they are all &lt;span class=&quot;green&quot;&gt;good&lt;/span&gt;, since they
have almost nothing to do with object-oriented programming.&lt;/p&gt;

&lt;p&gt;If you know some other design (anti-)patterns, let me know
in the comments below. I&amp;#39;ll add them here.&lt;/p&gt;</content><category term="oop" /><summary>Design Patterns are ...
Come on, you know what they are. They are
something we love and hate. We love them because they let us
write code without thinking. We hate them when we see the code
of someone who is used to writing code without thinking. Am I wrong?
Now, let me try to go through all of them and show you how much
I love or hate each one. Follow me, in alphabetic order.</summary></entry><entry><title>Defensive Programming via Validating Decorators</title><link href="http://www.yegor256.com/2016/01/26/defensive-programming.html" rel="alternate" type="text/html" title="Defensive Programming via Validating Decorators" /><published>2016-01-26T00:00:00+00:00</published><updated>2016-01-26T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/01/26/defensive-programming</id><content type="html" xml:base="http://www.yegor256.com/2016/01/26/defensive-programming.html">&lt;p&gt;Do you check the input parameters of your methods for validity?
I don&amp;#39;t. I used to, but not anymore.
I just let my methods crash with a null pointer and other exceptions
when parameters are not valid.
This may sound illogical, but only in the beginning.
I&amp;#39;m suggesting you use &lt;strong&gt;validating decorators&lt;/strong&gt; instead.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;/images/2016/01/shi-mian-mai-fu.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Shi mian mai fu (2004) by Yimou Zhang&#39;/&gt;&lt;figcaption&gt;Shi mian mai fu (2004) by Yimou Zhang&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s take a look at this rather typical Java example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;File is NULL; can&amp;#39;t export.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;File already exists.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Export the report to the file&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pretty &lt;a href=&quot;https://en.wikipedia.org/wiki/Defensive_programming&quot;&gt;defensive&lt;/a&gt;, right?
If we remove these validations, the code
will be much shorter, but it will crash with rather confusing messages
if &lt;code&gt;NULL&lt;/code&gt; is provided by the client. Moreover, if the file already exists,
our &lt;code&gt;Report&lt;/code&gt; will silently overwrite it. Pretty dangerous, right?&lt;/p&gt;

&lt;p&gt;Yes, we must protect ourselves, and we must be defensive.&lt;/p&gt;

&lt;p&gt;But not this way, not by bloating the class with validations that
have nothing to do with its core functionality. Instead, we should
use decorators to do the validation. Here is how. First,
there must be an interface &lt;code&gt;Report&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, a class that implements the core functionality:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultReport&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Export the report to the file&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And, finally, a number of decorators that will protect us:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoWriteOverReport&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NoWriteOverReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;File already exists.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, the client has the flexibility of composing a complex object
from decorators that perform their specific tasks. The core object
will do the reporting, while the decorators will validate parameters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoNullReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoWriteOverReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DefaultReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What do we achieve with this approach?
First and foremost: smaller objects.
And smaller objects always mean higher &lt;strong&gt;maintainability&lt;/strong&gt;.
Our &lt;code&gt;DefaultReport&lt;/code&gt; class will always remain small, no matter
how many validations we may invent in the future. The
more things we need to validate, the more validating decorators
we will create. All of them will be small and cohesive. And we&amp;#39;ll
be able to put them together in different variations.&lt;/p&gt;

&lt;p&gt;Besides that, this approach makes our code much more
&lt;strong&gt;reusable&lt;/strong&gt;, as classes perform very few operations
and don&amp;#39;t defend themselves by default. While being defensive
is an important feature, we&amp;#39;ll use validating decorators. But
this will not always be the case. Sometimes validation is just
too expensive in terms of time and memory, and we may want to work
directly with objects that don&amp;#39;t defend themselves.&lt;/p&gt;

&lt;p&gt;I also decided not to use the Java Validation API anymore for the
same reason. Its annotations make classes much more verbose
and less cohesive. I&amp;#39;m using validating decorators instead.&lt;/p&gt;</content><category term="oop" /><summary>Do you check the input parameters of your methods for validity?
I don&amp;#39;t. I used to, but not anymore.
I just let my methods crash with a null pointer and other exceptions
when parameters are not valid.
This may sound illogical, but only in the beginning.
I&amp;#39;m suggesting you use validating decorators instead.</summary></entry><entry><title>How Expensive Is Your Outsourcing Team?</title><link href="http://www.yegor256.com/2016/01/19/how-expensive-is-outsourcing.html" rel="alternate" type="text/html" title="How Expensive Is Your Outsourcing Team?" /><published>2016-01-19T00:00:00+00:00</published><updated>2016-01-19T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/01/19/how-expensive-is-outsourcing</id><content type="html" xml:base="http://www.yegor256.com/2016/01/19/how-expensive-is-outsourcing.html">&lt;p&gt;Let me put it this way: $15 per hour for a senior Java developer &amp;mdash;
is that cheap or expensive? It&amp;#39;s cheap, right? Right. What would you
say if I told you this cheap Java developer hardly writes two
primitive lines of code per day? You&amp;#39;re paying $600 every week but
rarely getting anything back. How cheap is this Java guy now?
My point is that using hourly rate as a cost indicator is a very bad idea,
whether with &lt;a href=&quot;/2015/10/27/outsourcing-doesnt-work.html&quot;&gt;outsourcing&lt;/a&gt;
or in-house teams.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;/images/2016/01/the-fan.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;The Fan (1996) by Tony Scott&#39;/&gt;&lt;figcaption&gt;The Fan (1996) by Tony Scott&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I actually decided to write this after a short sales meeting recently
with a prospect from Illinois. He wanted to hire &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt; for his
Java project and seemed to like our approach. I explained how we work,
how we control &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality&lt;/a&gt;,
and why and how we&amp;#39;re &lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;different&lt;/a&gt;
from everybody else. He seemed to be impressed.
Then, he asked, &amp;quot;&lt;strong&gt;How much&lt;/strong&gt; do you charge?&amp;quot;&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.teamed.io&#39;&gt;&lt;img src=&#39;http://img.teamed.io/logo.svg&#39; style=&#39;width:100px;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I told him that we are also different in the way we bill for our work,
because we don&amp;#39;t charge for the time spent by our programmers sitting
in front of monitors. Instead, we bill for &lt;strong&gt;results&lt;/strong&gt; produced, merged,
and delivered. I showed him this article about
&lt;a href=&quot;/2014/10/21/incremental-billing.html&quot;&gt;incremental billing&lt;/a&gt;.
He seemed to understand the advantages of our approach, compared to the
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;hourly salaries&lt;/a&gt;
being paid by &lt;del&gt;almost&lt;/del&gt; everybody else in the market.&lt;/p&gt;

&lt;p&gt;Still, the question remained &amp;mdash; how much?&lt;/p&gt;

&lt;p&gt;What could I do? I had to give him an answer.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Under different management, programmers deliver very different results in the same 60 minutes&lt;/aside&gt;

&lt;p&gt;I told him that our best Java programmers earn $30 to $50 per hour and
we add our margin on top of that, in the amount of 100 percent, for management.
In the end, &amp;quot;one hour&amp;quot; will cost him $60 to $100. He ran away.&lt;/p&gt;

&lt;p&gt;What did I do wrong? I think I know what it was.
I didn&amp;#39;t explain to him that, under different management,
programmers deliver very different results in the same
60 minutes. By &amp;quot;very different&amp;quot;, I mean &lt;strong&gt;dramatically&lt;/strong&gt; different. Let
me demonstrate the numbers (I actually did that already almost two
years ago, in my &lt;a href=&quot;/2014/04/11/cost-of-loc.html&quot;&gt;How Much Do You Pay Per Line of Code?&lt;/a&gt;
post, but will try again from a different perspective).&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href=&quot;https://github.com/yegor256/takes/issues/430&quot;&gt;yegor256/takes#430&lt;/a&gt;,
a feature request in the &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes Framework&lt;/a&gt;,
one of the projects we&amp;#39;re managing.
Let&amp;#39;s see how much the project paid for the work done in this ticket:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;15 minutes to me for creating a new ticket&lt;/li&gt;
&lt;li&gt;30 minutes to &lt;a href=&quot;https://github.com/hdouss&quot;&gt;@hdous&lt;/a&gt; for fixing it&lt;/li&gt;
&lt;li&gt;52 minutes to &lt;a href=&quot;https://github.com/pinaf&quot;&gt;@pinaf&lt;/a&gt; for code review&lt;/li&gt;
&lt;li&gt;20 minutes to &lt;a href=&quot;https://github.com/ypshenychka&quot;&gt;@ypshenychka&lt;/a&gt; for QA review&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming that an average price &amp;quot;per hour&amp;quot; is $50
($25 for developers and $25 for our management),
the total cost of this new feature was $97.50 (117 minutes).&lt;/p&gt;

&lt;p&gt;Look at these two tickets again.
&lt;a href=&quot;https://github.com/yegor256/takes/issues/430&quot;&gt;#430&lt;/a&gt; is the feature
request and &lt;a href=&quot;https://github.com/yegor256/takes/issues/493&quot;&gt;#493&lt;/a&gt; is
the pull request with two new Java files and code review comments.&lt;/p&gt;

&lt;p&gt;Four people worked on this feature. If you put them all together
in an office, full-time, with the same hourly rate, they will cost
$800 per day (I&amp;#39;m not adding any management costs!).
Now the question is whether they will be able to
create &lt;strong&gt;eight&lt;/strong&gt; new features &lt;strong&gt;every day&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re a manager, you know the velocity of your programmers.
If you&amp;#39;re a programmer, you know how much code you can write in a day.
Now, honestly tell me if you find and solve eight bugs per day with that
level of complexity, detailed code review, and precision of
documentation? I seriously doubt it.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.xdsd.org&#39;&gt;&lt;img src=&#39;http://www.xdsd.org/logo.svg&#39; style=&#39;width:100px;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;In that &lt;a href=&quot;/2014/04/11/cost-of-loc.html&quot;&gt;How Much Do You Pay Per Line of Code?&lt;/a&gt;
post, I actually did a comparison of a co-located project, where I was an architect,
with a distributed one, where I also was an architect. My numbers tell
me that a traditionally managed team is at least 10 times less
productive than a team managed by &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt; under
&lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt; principles.&lt;/p&gt;

&lt;p&gt;My point is that asking &amp;quot;What is your hourly rate?&amp;quot; is just as wrong as
asking &lt;a href=&quot;/2015/06/02/how-to-estimate-software-cost.html&quot;&gt;How Much for This Software?&lt;/a&gt;
if we&amp;#39;re talking about software developers motivated by results,
not &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office slaves&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead, we should ask: How much can you do for $100?&lt;/p&gt;

&lt;p&gt;As you can see, we can easily demonstrate how much we are capable
of delivering for $100. Can you and your team do the same?&lt;/p&gt;

&lt;p&gt;Thus, your &lt;a href=&quot;https://en.wikipedia.org/wiki/Return_on_investment&quot;&gt;ROI&lt;/a&gt;
while working with an &lt;a href=&quot;/2015/05/21/avoid-software-outsourcing-disaster.html&quot;&gt;outsourced team&lt;/a&gt; mostly
depends on their &lt;strong&gt;results per dollar&lt;/strong&gt;, not dollars per hour. The first
metric is difficult to calculate, and only the best teams will be able
to do so. The second metric is absolutely misleading, but anyone
will give it to you.&lt;/p&gt;

&lt;p&gt;An &lt;a href=&quot;/2015/06/15/software-outsourcing-survival-guide.html&quot;&gt;outsourced team&lt;/a&gt;
is expensive when its results per dollar are low,
no matter how big or small its dollars-per-hour rate is. To the contrary,
a team is financially very efficient if its results per dollar is high.
It doesn&amp;#39;t really matter what the value of the second metric is.&lt;/p&gt;

&lt;p&gt;P.S. I&amp;#39;m going to show this article to that prospect who ran away. Maybe
he will come back :)&lt;/p&gt;</content><category term="outsourcing" /><summary>Let me put it this way: $15 per hour for a senior Java developer &amp;mdash;
is that cheap or expensive? It&amp;#39;s cheap, right? Right. What would you
say if I told you this cheap Java developer hardly writes two
primitive lines of code per day? You&amp;#39;re paying $600 every week but
rarely getting anything back. How cheap is this Java guy now?
My point is that using hourly rate as a cost indicator is a very bad idea,
whether with outsourcing
or in-house teams.</summary></entry><entry><title>Good Programmers Don&amp;#39;t Work for Equity</title><link href="http://www.yegor256.com/2016/01/12/good-programmers-dont-work-for-equity.html" rel="alternate" type="text/html" title="Good Programmers Don&#39;t Work for Equity" /><published>2016-01-12T00:00:00+00:00</published><updated>2016-01-12T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/01/12/good-programmers-dont-work-for-equity</id><content type="html" xml:base="http://www.yegor256.com/2016/01/12/good-programmers-dont-work-for-equity.html">&lt;p&gt;&amp;quot;You&amp;#39;re a good programmer. I&amp;#39;m a great entrepreneur. This is a
breakthrough idea. Help me build it. I don&amp;#39;t have cash, but I will
give you equity. Deal?&amp;quot; I hear this at least once a month, and
I always say no. Not because I don&amp;#39;t like your idea. Indeed, it
is really interesting. And not because I&amp;#39;m too busy. I would
definitely find time for a good idea. It&amp;#39;s not that. I say no because
I don&amp;#39;t think you&amp;#39;re a good entrepreneur.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;/images/2016/01/how-much-do-you-love-me.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Combien tu m&amp;amp;apos;aimes? (2005) by Bertrand Blier&#39;/&gt;&lt;figcaption&gt;Combien tu m&amp;#39;aimes? (2005) by Bertrand Blier&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;So you want a good programmer to build your product. Or maybe a group
of good programmers. And you are ready to give me some equity
in exchange. That&amp;#39;s reasonable.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;You&amp;#39;re a good entrepreneur, right? How come you don&amp;#39;t have money, then?&lt;/aside&gt;

&lt;p&gt;But what is your part of the deal?&lt;/p&gt;

&lt;p&gt;How much are you putting on the table?&lt;/p&gt;

&lt;p&gt;You say that you&amp;#39;re a good entrepreneur, right? How come
you don&amp;#39;t have money, then? How come you can&amp;#39;t find someone to pay
for the work of a good programmer?&lt;/p&gt;

&lt;p&gt;I will create a product for you, but you will most certainly
fail. You &lt;strong&gt;already&lt;/strong&gt; failed. You failed to find initial
investment to cover the startup expenses of the business.
Why do you think you will succeed after the product is ready?&lt;/p&gt;

&lt;p&gt;The point is that a good programmer will &lt;strong&gt;never&lt;/strong&gt;
work for equity. Not because a good programmer is greedy,
or doesn&amp;#39;t want to risk, or doesn&amp;#39;t believe
in new ideas. Not at all.&lt;/p&gt;

&lt;p&gt;A good programmer wants to work with a &lt;strong&gt;good&lt;/strong&gt; entrepreneur. And
a good entrepreneur knows how to find money. That&amp;#39;s the definition
of a decent entrepreneur.&lt;/p&gt;

&lt;p&gt;Period.&lt;/p&gt;</content><category term="business" /><summary>&amp;quot;You&amp;#39;re a good programmer. I&amp;#39;m a great entrepreneur. This is a
breakthrough idea. Help me build it. I don&amp;#39;t have cash, but I will
give you equity. Deal?&amp;quot; I hear this at least once a month, and
I always say no. Not because I don&amp;#39;t like your idea. Indeed, it
is really interesting. And not because I&amp;#39;m too busy. I would
definitely find time for a good idea. It&amp;#39;s not that. I say no because
I don&amp;#39;t think you&amp;#39;re a good entrepreneur.</summary></entry><entry><title>How Do You Punish Your Employees?</title><link href="http://www.yegor256.com/2016/01/05/how-to-punish-employees.html" rel="alternate" type="text/html" title="How Do You Punish Your Employees?" /><published>2016-01-05T00:00:00+00:00</published><updated>2016-01-05T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/01/05/how-to-punish-employees</id><content type="html" xml:base="http://www.yegor256.com/2016/01/05/how-to-punish-employees.html">&lt;p&gt;Punishment ... how do you prefer to do it? There are many ways to punish
employees; some are rather effective, while others simply don&amp;#39;t work. This is
not an exact science. Actually, I would say it&amp;#39;s an &lt;strong&gt;art&lt;/strong&gt;. You must be creative,
innovative, and very open-minded. You never know which method of
punishment will work with whom. Some people respond to one method,
while others may completely ignore it. The overarching goal, of course, is
to make employees &lt;strong&gt;scared&lt;/strong&gt; of &lt;strong&gt;you&lt;/strong&gt;, their boss, so they will obey enthusiastically.
Here is a list of the most effective methods :)&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;/images/2016/01/office-space.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Office Space (1999) by Mike Judge&#39;/&gt;&lt;figcaption&gt;Office Space (1999) by Mike Judge&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Disclaimer: I&amp;#39;m using the pronoun &amp;quot;he&amp;quot; merely for simplicity of speech. The
same exact rules apply to both males and females.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use Your Voice&lt;/strong&gt;.
This, of course, is your best instrument of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Punishment&quot;&gt;punishment&lt;/a&gt;. Make sure he is scared
of you. He must know who he works for &amp;mdash; you, his boss. The rule
of thumb is that the one with the strongest voice is the boss. Thus, you
must be heard, you must &lt;strong&gt;rule&lt;/strong&gt; with your voice, and he must physically
feel your presence in the room. Even if it&amp;#39;s just a Skype call,
your voice must sound stronger than all others.
Moreover, don&amp;#39;t let him speak if he is trying to argue back.
You&amp;#39;re the boss!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Play Hard to Get&lt;/strong&gt;.
Is he feeling &lt;a href=&quot;https://en.wikipedia.org/wiki/Guilt_%28emotion%29&quot;&gt;guilty&lt;/a&gt; for
an error? Simply ignore him. Or, even better, schedule
meetings and don&amp;#39;t show up. Or reschedule many times. That will demonstrate
that you&amp;#39;re not interested in him anymore. His frustration
will grow. You&amp;#39;ll still be in the office, having meetings with other employees,
eating lunch, laughing, walking, and talking. You exist, but not for him.
He is dead to you, because of his mistake. He is nothing and is getting
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Silent_treatment&quot;&gt;silent treatment&lt;/a&gt;.
Then, suddenly, you attend a meeting! Oh, how happy he will be.
He will literally kiss your hands, and you will love that feeling!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Fun of Him&lt;/strong&gt;.
We inherit this technique from good, old-school
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bullying&quot;&gt;bullying&lt;/a&gt;. We all know how it
works. Select the person who messed up and make him the target of your jokes.
In the office, this method works even better than in school, because
you&amp;#39;re the boss and he basically can&amp;#39;t do anything to you. He will first try
to laugh alongside everybody else, but this won&amp;#39;t last for the long term. In the
end, everybody will laugh at him, and he will do whatever it takes just to stop it.
He will obey any order you give!&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Having a personal life outside the office is not for everybody; it is a luxury&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Mistakes Must be Visible&lt;/strong&gt;.
Is he wrong? Did he miss a deadline? Did he deploy a broken version to production?
Did he forget something? Don&amp;#39;t resolve this face to face. Always make such things
public, simply to let others punish him. This approach is known as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Peer_pressure&quot;&gt;peer pressure&lt;/a&gt;, a very
useful technique. His coworkers must keep up the momentum and punish
him using &lt;a href=&quot;https://en.wikipedia.org/wiki/Social_rejection&quot;&gt;social rejection&lt;/a&gt;.
That&amp;#39;s why, by all means, you as a leader must encourage back-stabbing.
You will rise to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_and_control_in_abusive_relationships&quot;&gt;power&lt;/a&gt;
much faster if your employees are not only afraid of
you but also of each other. Use their fear wisely!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Late-Night Phone Calls&lt;/strong&gt;.
Having a &lt;a href=&quot;https://en.wikipedia.org/wiki/Personal_life&quot;&gt;personal life&lt;/a&gt;
outside the office is not for everybody. It is a luxury, and
you are not just going to give it away. He must earn it, and if he is guilty of
not completing a task on time, his private life will be ruined by your
late-night phone calls. He must remember that. It doesn&amp;#39;t really matter
what exactly the calls are about. Just make them somewhere around 11 p.m.
Your key message is this: &amp;quot;I&amp;#39;m worrying about the project while you&amp;#39;re
enjoying your family time!&amp;quot; Guilt is what you&amp;#39;re planting with this.
He won&amp;#39;t be able to ask you not to call him after work; he is not that brave.
He will instead try to please you somehow so that you stop calling him.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Check Results&lt;/strong&gt;.
This technique is close to playing hard to get, but here you don&amp;#39;t ignore him.
You communicate with the guilty employee, but you don&amp;#39;t talk about his
results. You discuss his uncle&amp;#39;s wedding, his snowboarding weekend, his
new bicycle, etc. But you don&amp;#39;t ask about the migration to PostgreSQL he
has been working on for the last three weeks. You are &lt;strong&gt;not interested&lt;/strong&gt;. This is
a perfect method for demonstrating that you don&amp;#39;t see him as a valuable
team member anymore. The team doesn&amp;#39;t need his results. The team can live
without them. You will see how soon he realizes who the boss is and
what it means when the boss is not happy!&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Obviously, the best desk is the one at which nobody can see your monitor&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;A Bad Office Spot Is a Great De-Motivator&lt;/strong&gt;.
This is a classic instrument of punishment: The worst desks go to
those who forget who the boss is around here. Obviously, the best desk is the
one at which nobody can see your monitor. Give those to good people who
obey your orders and don&amp;#39;t argue with you. They are your core team. They
support you as a leader, and they help you rise to power. Others must
sit closer to the door, and their monitors must be seen by everybody.
As with all other techniques, &lt;a href=&quot;https://en.wikipedia.org/wiki/Psychological_manipulation&quot;&gt;conceal&lt;/a&gt;
your intentions &amp;mdash; you
locate people in the office due to their job descriptions in order to help
them communicate effectively. Everybody will understand what&amp;#39;s really going on,
but you must look like a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Leadership_style#Laissez-faire&quot;&gt;laissez-faire leader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy Tasks Are Rewards&lt;/strong&gt;.
You decide who does what, and you distribute tasks and projects &amp;mdash; that&amp;#39;s your
instrument of power. Easy-to-do tasks are how you reward those who are loyal
and supportive. They complete such tasks, hardly expending any effort. Complex
and risky projects, on the other hand, are assigned to the under-performing employee. He will most likely
fail, and there won&amp;#39;t be anyone to blame &amp;mdash; it&amp;#39;s just a project, like
all others. Boring, ambiguous, unfocused, unnecessary, under-funded, and routine
tasks all go to the employee who deserves punishment. Of course,
you must look unbiased &amp;mdash; be very polite and supportive, acting as if you&amp;#39;re
a good friend!&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Leaving the office at 5 p.m. is a privilege; only the best employees can afford it&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Spread Rumors&lt;/strong&gt;.
Simply show your annoyance of his poor results, but not to his face. Talk
about his performance with his coworkers. They must know that you&amp;#39;re not
happy. Furthermore, they must suspect that you&amp;#39;re thinking about
terminating his contract. Don&amp;#39;t say it straight away, but don&amp;#39;t deny it if they
ask. I doubt they will ask, though. Very soon, these rumors will
reach his ear, and he will do whatever it takes just to hear that you&amp;#39;re
not thinking about termination anymore. He will likely be scared to ask you directly,
but even if he does ask, deny it. He will be afraid of you anyway. That will
make him much more manageable!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overtime&lt;/strong&gt;.
Leaving the office at 5 p.m. is a privilege. Only the best employees can afford it.
Ideally, everybody must ask you before they leave. The one who feels
guilty won&amp;#39;t be comfortable asking you whether he can leave at 5 p.m. He will
stay longer just because he is afraid to ask. That&amp;#39;s exactly what you need!
Just to earn the ability to ask whether it&amp;#39;s possible to leave the office,
he will work harder. The question is how to make employees ask for your permission
to go home in the first place. I recommend you stay late and schedule
interesting meetings at 6 p.m. Of course, you will come to work at 1 p.m., while
everybody else must be there at 9 a.m. sharp. The point is that you must be
in the office when they leave, and you must do something important. They will
be afraid to disappoint you by showing ignorance, so they will ask for permission.
That&amp;#39;s what you need!&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;This list is definitely not exhaustive. I&amp;#39;m sure there are many
more &lt;a href=&quot;https://en.wikipedia.org/wiki/Psychopathy&quot;&gt;interesting&lt;/a&gt;
methods and technologies. Don&amp;#39;t hesitate to
share them below in the comments. As I said above, I believe this is
an art, not a science.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.amazon.com/gp/product/0749464763/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0749464763&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=JVXRPNAEJBMNGINR&#39;&gt;&lt;img src=&#39;/images/2016/01/management-stripped-bare.jpg&#39; style=&#39;width:96px;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;PS. If you like this article, you will certainly enjoy this
&lt;a href=&quot;http://www.amazon.com/gp/product/0749464763/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0749464763&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=JVXRPNAEJBMNGINR&quot;&gt;Management Stripped Bare: What They Don&amp;#39;t Teach You at Business School&lt;/a&gt;
book by Jo Owen. I actually borrowed some ideas from that book.&lt;/p&gt;</content><category term="management" /><summary>Punishment ... how do you prefer to do it? There are many ways to punish
employees; some are rather effective, while others simply don&amp;#39;t work. This is
not an exact science. Actually, I would say it&amp;#39;s an art. You must be creative,
innovative, and very open-minded. You never know which method of
punishment will work with whom. Some people respond to one method,
while others may completely ignore it. The overarching goal, of course, is
to make employees scared of you, their boss, so they will obey enthusiastically.
Here is a list of the most effective methods :)</summary></entry><entry><title>Employee Turnover Is Good for the Maintainability of Your Code Base</title><link href="http://www.yegor256.com/2015/12/29/turnover-is-good-for-maintainability.html" rel="alternate" type="text/html" title="Employee Turnover Is Good for the Maintainability of Your Code Base" /><published>2015-12-29T00:00:00+00:00</published><updated>2015-12-29T00:00:00+00:00</updated><id>http://www.yegor256.com/2015/12/29/turnover-is-good-for-maintainability</id><content type="html" xml:base="http://www.yegor256.com/2015/12/29/turnover-is-good-for-maintainability.html">&lt;p&gt;This is what Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/Turnover_%28employment%29&quot;&gt;says&lt;/a&gt; about this:
&amp;quot;High turnover may be harmful to a company&amp;#39;s
productivity if skilled workers are often leaving,
and the worker population contains a high percentage of novices.&amp;quot;
I agree. However, I believe that low turnover may also
be very harmful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;/images/2015/12/commando.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Commando (1985) by Mark L. Lester&#39;/&gt;&lt;figcaption&gt;Commando (1985) by Mark L. Lester&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;ve found this
&lt;a href=&quot;http://www.eremedia.com/ere/a-low-turnover-rate-could-mean-that-you-have-ugly-employees/&quot;&gt;good article&lt;/a&gt;
where John Sullivan explains why low turnover could be a troubling
symptom. It&amp;#39;s a really good read, but rather generic. It is not specifically about software
teams. My experience is mostly focused on programmers and their
turnover. I&amp;#39;ve learned that low turnover negatively affects code maintainability
and encourages &lt;strong&gt;hero-driven development&lt;/strong&gt; and &lt;strong&gt;strong code ownership&lt;/strong&gt;
(both of which are bad practices).&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;If you consider programmers to be a valuable long-term asset, you&amp;#39;re wrong&lt;/aside&gt;

&lt;p&gt;&amp;quot;Turnover&amp;quot; is basically the act of replacing an employee
with a new employee for any reason, including termination,
retirement, resignation, or any other. Simply put, the more
people your team loses every year, the higher your turnover.
If there are 20 programmers on your team, and five of them
walk away every year, your turnover is 25 percent.&lt;/p&gt;

&lt;p&gt;I can&amp;#39;t pinpoint what number you should aim for, but I strongly believe
that if you consider &lt;strong&gt;programmers&lt;/strong&gt; to be a &lt;strong&gt;valuable long-term asset&lt;/strong&gt;,
and try to retain them at all cost, you&amp;#39;re doing it wrong.&lt;/p&gt;

&lt;p&gt;My point is that a healthy software team must
&lt;strong&gt;replace&lt;/strong&gt; programmers &lt;strong&gt;regularly&lt;/strong&gt;. I would say having one
person on board for longer than a year is asking for trouble.&lt;/p&gt;

&lt;p&gt;By replacing, I don&amp;#39;t necessarily mean
&lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;firing&lt;/a&gt;.
Not at all. I mean moving them
&lt;strong&gt;away&lt;/strong&gt; from the code base. Obviously, if you have a single code
base, replacing will mean firing.&lt;/p&gt;

&lt;p&gt;When programmers stay together for a long time, working on the
same code base, they inevitably become subject matter &lt;strong&gt;experts&lt;/strong&gt;. First of
all, this leads to strong code ownership. Naturally, each of them
becomes a specialist in his or her own part of the code, mostly because
it&amp;#39;s easier to work with something you&amp;#39;re familiar with instead of jumping
from module to module. Needless to say, strong code ownership is
a bad practice. Collective code ownership is a much better alternative,
as &lt;a href=&quot;http://martinfowler.com/bliki/CodeOwnership.html&quot;&gt;explained&lt;/a&gt; by Martin Fowler.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Having strong experts on the team inevitably leads to hero-driven development&lt;/aside&gt;

&lt;p&gt;Then, having strong experts on the team inevitably leads to
hero-driven development, where firefighting is very much appreciated.
An expert doesn&amp;#39;t want to lose his or her position, and always tries to demonstrate
how valuable he or she is for the team. The best way to do this is to
solve a problem that nobody else can solve. That&amp;#39;s how one gets &amp;quot;job security&amp;quot;.
And that&amp;#39;s how the team starts to degrade.
This &lt;a href=&quot;http://highlevelbits.com/2014/08/hero-driven-development.html&quot;&gt;blog post&lt;/a&gt;
by Fredrik Rubensson is right about this problem.&lt;/p&gt;

&lt;p&gt;Thus, to achieve higher maintainability of the source code and
robustness of the product, we must &lt;strong&gt;rotate&lt;/strong&gt; programmers, preventing
them from becoming subject matter experts.&lt;/p&gt;

&lt;p&gt;I realize this idea sounds counter-intuitive, but think about it.
By keeping people together, working on the same problem for a long time,
we put a lot of knowledge into their heads, not our source code.
These people become the &lt;strong&gt;asset&lt;/strong&gt;. They become smarter, they know the
solution very well, and they solve all issues rather quickly.
But the code base degrades.&lt;/p&gt;

&lt;p&gt;When the time comes to change someone (for any reason), the loss will be
damaging. We may lose significant knowledge, and the code base left
behind will be unmaintainable. In most cases, we will have to re-write it.
That&amp;#39;s why in most software teams, management is &lt;strong&gt;afraid&lt;/strong&gt; of programmers.
They are scared to lose key software developers, because the
consequences may be fatal.&lt;/p&gt;

&lt;p&gt;In the end, programmers control management, not the other way around.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;It&amp;#39;s Not a School!&lt;/a&gt; &amp;mdash;
This earlier post explains how this problem can be solved without
&lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;firing&lt;/a&gt;
or rotating programmers, but few teams, especially co-located ones,
can afford it. If your team can&amp;#39;t, just try to keep your turnover high
enough to prevent the appearance of &lt;strong&gt;heros&lt;/strong&gt; (a.k.a. subject matter experts).&lt;/p&gt;</content><category term="management" /><summary>This is what Wikipedia says about this:
&amp;quot;High turnover may be harmful to a company&amp;#39;s
productivity if skilled workers are often leaving,
and the worker population contains a high percentage of novices.&amp;quot;
I agree. However, I believe that low turnover may also
be very harmful.</summary></entry><entry><title>Why Don&amp;#39;t You Contribute to Open Source?</title><link href="http://www.yegor256.com/2015/12/22/why-dont-you-contribute-to-open-source.html" rel="alternate" type="text/html" title="Why Don&#39;t You Contribute to Open Source?" /><published>2015-12-22T00:00:00+00:00</published><updated>2015-12-22T00:00:00+00:00</updated><id>http://www.yegor256.com/2015/12/22/why-dont-you-contribute-to-open-source</id><content type="html" xml:base="http://www.yegor256.com/2015/12/22/why-dont-you-contribute-to-open-source.html">&lt;p&gt;In my &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;How Much Do You Cost?&lt;/a&gt;
post last year, I said open-source contribution is a very
important factor in defining who is good and who isn&amp;#39;t, as far as programmers go.
I was saying that if you&amp;#39;re not contributing to open source, if your
GitHub profile is not full of projects and commits, your &amp;quot;value&amp;quot; as a
software developer is low, simply because this lack of open-source
activity tells everybody that you&amp;#39;re &lt;strong&gt;not passionate&lt;/strong&gt; about software
development and are simply working for money. I keep getting angry comments
about that every week. Let me answer them all here.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;/images/2015/12/kung-fu-hustle.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Kung Fu Hustle (2004) by Stephen Chow&#39;/&gt;&lt;figcaption&gt;Kung Fu Hustle (2004) by Stephen Chow&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The gist of all those comments is this: &amp;quot;I don&amp;#39;t contribute to open source,
but I&amp;#39;m still very passionate about software development&amp;quot;. Then, there is
a list of &lt;strong&gt;reasons&lt;/strong&gt; why the author of the comment doesn&amp;#39;t contribute:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I spend my free time with my family.&lt;/li&gt;
&lt;li&gt;I&amp;#39;m already busy in the office; why should I do extra work?&lt;/li&gt;
&lt;li&gt;I&amp;#39;m well-paid; why should I do anything for free?&lt;/li&gt;
&lt;li&gt;My employer doesn&amp;#39;t allow me to contribute to open source.&lt;/li&gt;
&lt;li&gt;My company won&amp;#39;t pay me for writing open-source code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good excuses, but let&amp;#39;s try to look at it from a different perspective.&lt;/p&gt;

&lt;p&gt;Today, it&amp;#39;s &lt;strong&gt;not possible&lt;/strong&gt; at all to create software without using
open-source components. I&amp;#39;m sure nobody will argue with this. Only something
very basic and simple can be created without code reuse. Nah, I&amp;#39;m wrong. Even
super small pieces of software can&amp;#39;t be created without open-source
&amp;quot;neighbors&amp;quot;. You need at the very least an operating system and a programming language.
In most cases, they are open source (Microsoft is an exception, and it must die).&lt;/p&gt;

&lt;p&gt;Thus, no matter what software you&amp;#39;re creating, you&amp;#39;re using modules
created for you by &lt;strong&gt;others&lt;/strong&gt;. Someone else spent his or her time to help you.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Just admit that you don&amp;#39;t care; it&amp;#39;s not a crime, after all&lt;/aside&gt;

&lt;p&gt;Now, you&amp;#39;re not giving anything back. I&amp;#39;m curious, why is that?&lt;/p&gt;

&lt;p&gt;There could be two reasons. The first one is that you just don&amp;#39;t care.
They give you something, and you&amp;#39;re not giving anything back. You simply
don&amp;#39;t feel like being a player in this market. You take their libraries,
reuse them in your product, collect a
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;paycheck&lt;/a&gt;, and go home. You don&amp;#39;t care
what will happen with the industry, with those programmers, with the language
you&amp;#39;re writing in, with the platform, etc. You don&amp;#39;t want to improve the
libraries, you don&amp;#39;t want to create and share new ones, you don&amp;#39;t want to
report bugs and feature requests, and you don&amp;#39;t want to send patches and pull
requests to them.&lt;/p&gt;

&lt;p&gt;I do understand that. Millions of programmers are like that; you&amp;#39;re not alone.
But please, don&amp;#39;t tell me that you&amp;#39;re passionate about software development.
Just admit that you don&amp;#39;t care. It&amp;#39;s &lt;strong&gt;not a crime&lt;/strong&gt;, after all. You&amp;#39;re not stealing
anything (although I actually think you are, but that&amp;#39;s a different story).&lt;/p&gt;

&lt;p&gt;That was the first reason why you may not contribute.
However, in most cases, my typical opponent tells me he or she does care,
but just can&amp;#39;t. There are &lt;strong&gt;obstacles&lt;/strong&gt;, right? Your family is taking
all your free time, and in the office, you simply are not allowed to
work on something that is outside of your business scope. I can imagine that,
but let&amp;#39;s see what&amp;#39;s happening behind the scenes.&lt;/p&gt;

&lt;p&gt;You&amp;#39;re telling me that your company doesn&amp;#39;t care about the software industry,
right? They don&amp;#39;t allow you to give anything back to the open-source community.
They want you to use those free libraries and give nothing back. And it is their
corporate strategy. I doubt that&amp;#39;s the case.
Did you ask your CTO about it?&lt;/p&gt;

&lt;p&gt;I strongly believe that in 95 percent of cases, when you explain that your software
seriously depends on a few open-source libraries that may need some
improvements, your boss will have nothing against you becoming a contributor.
Try it.&lt;/p&gt;

&lt;p&gt;Sometimes, the boss says he or she doesn&amp;#39;t care about any open source
and wants you to focus on your product. Maybe this happens rather often;
I don&amp;#39;t know.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;If you don&amp;#39;t walk away, you accept this attitude; you&amp;#39;re part of it&lt;/aside&gt;

&lt;p&gt;In that case, my next question is philosophical. You&amp;#39;re working for such a person and
such a company. You&amp;#39;re accepting their
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;paychecks&lt;/a&gt;. Aren&amp;#39;t you a part
of this team and this mentality? If you don&amp;#39;t walk away, you &lt;strong&gt;accept&lt;/strong&gt; this
attitude. You&amp;#39;re part of it. It&amp;#39;s &lt;strong&gt;you&lt;/strong&gt; who doesn&amp;#39;t care, not just them.
Because of your existence, they have an ability to not care.&lt;/p&gt;

&lt;p&gt;Tomorrow if they ask you to use stolen software, you may say
you had no choice: &amp;quot;My boss asked me to do this. I did care about
copyright and strongly believed that software authors must be paid, but
I had to steal, because that&amp;#39;s what my company asked me to do&amp;quot;.
Does it sound like a good excuse?&lt;/p&gt;

&lt;p&gt;The same story goes for open source. If you do care and you&amp;#39;re passionate
about software development, you will either &lt;strong&gt;contribute&lt;/strong&gt; actively
or &lt;strong&gt;walk away&lt;/strong&gt; from the company that doesn&amp;#39;t share your passion. What, you can&amp;#39;t
walk away because of some reasons? Then don&amp;#39;t tell me about your passion.
Simply admit that you&amp;#39;re too weak to follow your passion.&lt;/p&gt;

&lt;p&gt;Again, it&amp;#39;s not a crime. It&amp;#39;s just who you are.&lt;/p&gt;</content><category term="programming" /><summary>In my How Much Do You Cost?
post last year, I said open-source contribution is a very
important factor in defining who is good and who isn&amp;#39;t, as far as programmers go.
I was saying that if you&amp;#39;re not contributing to open source, if your
GitHub profile is not full of projects and commits, your &amp;quot;value&amp;quot; as a
software developer is low, simply because this lack of open-source
activity tells everybody that you&amp;#39;re not passionate about software
development and are simply working for money. I keep getting angry comments
about that every week. Let me answer them all here.</summary></entry><entry><title>Investors Are Too Scared</title><link href="http://www.yegor256.com/2015/12/16/investors-are-too-scared.html" rel="alternate" type="text/html" title="Investors Are Too Scared" /><published>2015-12-16T00:00:00+00:00</published><updated>2015-12-16T00:00:00+00:00</updated><id>http://www.yegor256.com/2015/12/16/investors-are-too-scared</id><content type="html" xml:base="http://www.yegor256.com/2015/12/16/investors-are-too-scared.html">&lt;p&gt;We&amp;#39;re starting a new thing, a seed fund. Its name is
&lt;a href=&quot;http://www.seedramp.com&quot;&gt;SeedRamp&lt;/a&gt;. The formula is simple: You schedule
an interview, we have a one-hour conversation, you present me your
startup idea, and we either give you cash right away or explain why we don&amp;#39;t
feel like it. We don&amp;#39;t do any due diligence or background checks. The decision
is made right there. It&amp;#39;s something similar to angel investment, but the
amount is smaller &amp;mdash; less than &lt;strong&gt;$20K&lt;/strong&gt;, and decisions are faster.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;/images/2015/12/the-game.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;The Game (1997) by David Fincher&#39;/&gt;&lt;figcaption&gt;The Game (1997) by David Fincher&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are basically three problems we&amp;#39;re trying to solve with this
new idea: 1) Investors are &lt;strong&gt;cowards&lt;/strong&gt;, 2) investors are &lt;strong&gt;cowards&lt;/strong&gt;, and
3) investors are &lt;strong&gt;cowards&lt;/strong&gt;. Here is why.&lt;/p&gt;

&lt;h2 id=&quot;they-are-afraid-of-strangers&quot;&gt;They Are Afraid of Strangers&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s no secret that Silicon Valley is very &amp;quot;&lt;strong&gt;corrupted&lt;/strong&gt;&amp;quot; territory,
where in order to get access to money people, you must know some other
money people or someone who knows someone, etc. You must be &lt;strong&gt;well-connected&lt;/strong&gt;
in order to be successful. You simply can&amp;#39;t raise money just by having an
awesome idea or even a great implementation. You need connections.&lt;/p&gt;

&lt;p&gt;I think that&amp;#39;s disgusting.&lt;/p&gt;

&lt;p&gt;I am, in general, a big fan of &lt;strong&gt;meritocracy&lt;/strong&gt;, where those who are smarter
or stronger win the most. This is the principle we,
at &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, apply to software developers who come to us.
I explained it last year in this rather popular and provocative post:
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;How Much Do You Cost?&lt;/a&gt;.
We simply don&amp;#39;t care how many years of experience you have,
how much time you&amp;#39;ve spent with your previous employer,
or how many programming languages you know. We only care about your
objective achievements, which are validated by the market. And, of course,
we don&amp;#39;t pay attention to any references or any previous relationships.&lt;/p&gt;

&lt;p&gt;I strongly believe this is how it should be.&lt;/p&gt;

&lt;p&gt;Unfortunately, this is not how it is in Silicon Valley when a young
startup is looking for $100K to $150K of seed money. Angel investors are difficult
to reach. They are afraid of you, if you come out of nowhere. They only want
to talk to someone they can &lt;strong&gt;complain&lt;/strong&gt; about to their friends. This
basically encourages startup founders to spend their time on friend-making
activities instead of business-making ones. Very often, good teams simply
&lt;strong&gt;miss&lt;/strong&gt; their chance.&lt;/p&gt;

&lt;h2 id=&quot;they-are-afraid-of-telling-the-truth&quot;&gt;They Are Afraid of Telling the Truth&lt;/h2&gt;

&lt;p&gt;Have you ever talked to a venture capital firm? To angel investors? To
any investors, basically? If you have, you&amp;#39;d know they all
are very &lt;strong&gt;polite&lt;/strong&gt;, nodding their heads and smiling while listening
to your pitch. They usually are &amp;quot;very excited&amp;quot; to meet you and
&amp;quot;learn more&amp;quot; about your business.&lt;/p&gt;

&lt;p&gt;In the end, they don&amp;#39;t give you the money.&lt;/p&gt;

&lt;p&gt;Why? Who knows. They won&amp;#39;t tell you. They are cowards, and they are afraid
of telling you that your idea sucks and your business plan is totally wrong.
They are afraid of being &lt;strong&gt;honest&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is an almost identical situation with recruitment. You send your resume
to Facebook, they interview you, and you spend a few hours with them, answering
their questions. In the end, they email you, saying &amp;quot;We decided not to proceed
any further; good luck in your job search&amp;quot;. They are afraid of telling you
the &lt;strong&gt;truth&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And it&amp;#39;s disgusting.&lt;/p&gt;

&lt;p&gt;In our recruitment process at &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, we do
exactly the opposite. You apply to us, we ask one of our programmers to
interview you, and then, when finished, we make a decision about whether you&amp;#39;re
a good candidate or not. We discuss your profile right in front of you. We
don&amp;#39;t have any discussions without you. We make our decision fully disclosing
our reasoning to you. This is how it should be everywhere, I believe.
Especially with regard to investments.&lt;/p&gt;

&lt;h2 id=&quot;they-are-afraid-of-losses&quot;&gt;They are Afraid of Losses&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s a very infamous problem, mentioned everywhere there&amp;#39;s a list
of &amp;quot;top 10 reasons for startup failures&amp;quot;. Investors simply turn you
into an &lt;strong&gt;employee&lt;/strong&gt;. Before you get their money, you&amp;#39;re on your own. You make
your own decisions, you manage your business, you&amp;#39;re in charge.&lt;/p&gt;

&lt;p&gt;Then, you get the money. It doesn&amp;#39;t mean you&amp;#39;re &lt;strong&gt;rich&lt;/strong&gt;. Not at all. It means
that, from now on, you&amp;#39;re their employee. They decide what your salary is.
They decide whether you can rent this office or not. They decide what
car you can afford.&lt;/p&gt;

&lt;p&gt;Keep in mind that your salary is lower than your friends are getting,
working somewhere on Facebook. Your salary is low, and you can&amp;#39;t change it.
All your expenses have to be approved. You&amp;#39;re simply under the full control
of your &lt;strong&gt;board&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Why is that? Because they are afraid of you being &lt;strong&gt;free&lt;/strong&gt;. They are afraid
of losing their money. That&amp;#39;s why they are doing everything they can
to keep a close eye on you.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s disgusting and very counter-productive.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s similar to trying to win in poker by always making small bets. In most
cases, they lose their money, you lose your time, and the market loses the opportunity
to get a new product.&lt;/p&gt;

&lt;h2 id=&quot;we-are-not-cowards&quot;&gt;We Are Not Cowards&lt;/h2&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.seedramp.com&#39;&gt;&lt;img src=&#39;http://www.seedramp.com/logo-256x256.png&#39; style=&#39;width:128px;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.seedramp.com&quot;&gt;SeedRamp&lt;/a&gt; is going to solve all of these three problems.&lt;/p&gt;

&lt;p&gt;First of all, we completely remove the necessity to have any connections
in order to reach us. You need money? Just &lt;strong&gt;schedule&lt;/strong&gt; an appointment online.
We don&amp;#39;t care who you are, where you&amp;#39;re coming from, or who you know. We
give you one hour of our time, and if we reject your idea, you can apply again in
a month. Thus, any young startup without any friends or connections is
&lt;strong&gt;welcome&lt;/strong&gt;. Just bring your strategy, your existing results, and your passion, and
we&amp;#39;ll talk.&lt;/p&gt;

&lt;p&gt;Second, we don&amp;#39;t say, &amp;quot;We will call you back&amp;quot;. We give you our reasons right
away, and we always tell the truth. Moreover, we record our interview and
publish it on &lt;strong&gt;YouTube&lt;/strong&gt;. Yes, that&amp;#39;s not a joke; we will publish all interviews
online, and you can see how we talk about other startups. We are not afraid of
telling the truth; it&amp;#39;s part of our marketing strategy.&lt;/p&gt;

&lt;p&gt;Third, we don&amp;#39;t sit on your board after the investment is made. We simply
give you a check, and you can fly to Vegas the next day and spend all of that
money there. We don&amp;#39;t care. When our decision is made, we don&amp;#39;t tell you
what to do with the money. If we gave you the money, we believed in you
and your judgment. If you think that the best use of this money would
be a new &lt;strong&gt;Kawasaki&lt;/strong&gt;, do it.&lt;/p&gt;

&lt;h2 id=&quot;instant-micro-investments&quot;&gt;Instant Micro Investments&lt;/h2&gt;

&lt;p&gt;To make it all happen, we have a few principles and limitations.&lt;/p&gt;

&lt;p&gt;First, we expect you to ask for enough cash for one calendar month. You simply
have to explain to us how much you need for one month and how you&amp;#39;re planning
to spend this money, approximately. One calendar month. We expect you
to come back to us in a month, demonstrate your progress, and ask for one
more month. Of course, we may say no.&lt;/p&gt;

&lt;p&gt;Second, the maximum we can give you is $20,000. Maybe, in the future,
we will raise this limit. For now, it is $20K.&lt;/p&gt;

&lt;p&gt;And one last thing. We will ask you to give us some stock in your
startup. You decide how much, but it has to be enough to make us
interested. It all depends on your situation. A few percent, I&amp;#39;d guess.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re planning to host our first interviews in the middle of January 2016.
You can schedule them &lt;a href=&quot;https://calendly.com/yegor256/seedramp&quot;&gt;right here&lt;/a&gt;.&lt;/p&gt;</content><category term="startup" /><summary>We&amp;#39;re starting a new thing, a seed fund. Its name is
SeedRamp. The formula is simple: You schedule
an interview, we have a one-hour conversation, you present me your
startup idea, and we either give you cash right away or explain why we don&amp;#39;t
feel like it. We don&amp;#39;t do any due diligence or background checks. The decision
is made right there. It&amp;#39;s something similar to angel investment, but the
amount is smaller &amp;mdash; less than $20K, and decisions are faster.</summary></entry><entry><title>Temporal Coupling Between Method Calls</title><link href="http://www.yegor256.com/2015/12/08/temporal-coupling-between-method-calls.html" rel="alternate" type="text/html" title="Temporal Coupling Between Method Calls" /><published>2015-12-08T00:00:00+00:00</published><updated>2015-12-08T00:00:00+00:00</updated><id>http://www.yegor256.com/2015/12/08/temporal-coupling-between-method-calls</id><content type="html" xml:base="http://www.yegor256.com/2015/12/08/temporal-coupling-between-method-calls.html">&lt;p&gt;Temporal coupling happens between sequential method calls
when they must stay in a particular order. This is inevitable
in imperative programming, but we can reduce the negative effect
of it just by turning those static procedures into functions. Take
a look at this example.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;/images/2015/12/blueberry.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Blueberry (2004) by Jan Kounen&#39;/&gt;&lt;figcaption&gt;Blueberry (2004) by Jan Kounen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What do you think about that? I believe it&amp;#39;s clear what &lt;code&gt;names()&lt;/code&gt; is doing &amp;mdash;
creating a list of names. In order to avoid duplication, there is a supplementary
&lt;em&gt;procedure&lt;/em&gt;, &lt;code&gt;append()&lt;/code&gt;, which converts an item to lowercase and adds it to the
list.&lt;/p&gt;

&lt;p&gt;This is poor design.&lt;/p&gt;

&lt;p&gt;It is a &lt;strong&gt;procedural&lt;/strong&gt; design, and there is &lt;strong&gt;temporal coupling&lt;/strong&gt; between
lines in method &lt;code&gt;names()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let me first show you a better (though not the best!) design,
then I will try to explain its benefits:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;An ideal design for method &lt;code&gt;with()&lt;/code&gt; would create a new instance of
&lt;code&gt;List&lt;/code&gt;, populate it through &lt;code&gt;addAll(list)&lt;/code&gt;, then &lt;code&gt;add(item)&lt;/code&gt; to it, and
finally return. That would be perfectly
&lt;a href=&quot;http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutable&lt;/a&gt;,
but slow.&lt;/p&gt;

&lt;p&gt;So, what is wrong with this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks perfectly clean, doesn&amp;#39;t it? Instantiate a list, append two items to it, and
return it. Yes, it is clean &amp;mdash; for now. Because we remember what &lt;code&gt;append()&lt;/code&gt; is
doing. In a few months, we&amp;#39;ll get back to this code, and it will look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Is it so clear now that &lt;code&gt;append()&lt;/code&gt; is actually adding &lt;code&gt;&amp;quot;Jeff&amp;quot;&lt;/code&gt; to &lt;code&gt;list&lt;/code&gt;? What
will happen if I remove that line? Will it affect the result being
returned in the last line? I don&amp;#39;t know. I need to &lt;strong&gt;check&lt;/strong&gt; the body of method
&lt;code&gt;append()&lt;/code&gt; to make sure.&lt;/p&gt;

&lt;p&gt;Also, how about returning &lt;code&gt;list&lt;/code&gt; first and calling &lt;code&gt;append()&lt;/code&gt; afterwards? This
is what possible &amp;quot;refactoring&amp;quot; may do to our code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* something */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First of all, we return &lt;code&gt;list&lt;/code&gt; too early, when it is not ready. But did anyone
tell me that these two calls to &lt;code&gt;append()&lt;/code&gt; must happen before &lt;code&gt;return list&lt;/code&gt;?
Second, we changed the order of &lt;code&gt;append()&lt;/code&gt; calls. Again, did anyone tell me
that it&amp;#39;s important to call them in that particular order?&lt;/p&gt;

&lt;p&gt;Nobody. Nowhere. This is called &lt;strong&gt;temporal coupling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Our lines are &lt;strong&gt;coupled&lt;/strong&gt; together. They must stay in this particular order, but the
knowledge about that order is hidden. It&amp;#39;s easy to destroy
the order, and our compiler won&amp;#39;t be able to catch us.&lt;/p&gt;

&lt;p&gt;To the contrary, this design doesn&amp;#39;t have any &amp;quot;order&amp;quot;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It just &lt;strong&gt;returns&lt;/strong&gt; a list, which is constructed by a few calls to the &lt;code&gt;with()&lt;/code&gt;
method. It is a single line instead of four.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/2015/08/18/multiple-return-statements-in-oop.html&quot;&gt;discussed before&lt;/a&gt;,
an ideal method in OOP must have just a single statement, and this statement is
&lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The same is true about validation. For example, this code is bad:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkIfListStillHasSpace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this one is much better:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withEnoughSpace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;And, of course, an ideal approach would be to use
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;composable decorators&lt;/a&gt;
instead of these ugly static methods. But if it&amp;#39;s not possible for
some reason, just don&amp;#39;t make those static methods look like procedures.
Make sure they always return results, which become arguments to
further calls.&lt;/p&gt;</content><category term="java" /><category term="oop" /><summary>Temporal coupling happens between sequential method calls
when they must stay in a particular order. This is inevitable
in imperative programming, but we can reduce the negative effect
of it just by turning those static procedures into functions. Take
a look at this example.</summary></entry></feed>
