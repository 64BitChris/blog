<?xml version="1.0"?> <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"> <channel><title>yegor256.com</title><link>http://www.yegor256.com</link> <description>Yegor Bugayenko About Programming</description> <language>en-us</language> <copyright>Yegor Bugayenko, 2014</copyright> <lastBuildDate>Sun, 12 Oct 2014 00:00:00 +0000</lastBuildDate> <image> <url>/images/icon-128x128.png</url><title>yegor256.com</title><link>http://www.yegor256.com/rss.xml</link> </image> <item><title>What Does a Software Architect Do?</title><link>http://www.yegor256.com/2014/10/12/who-is-software-architect.html</link> <description>&lt;p&gt;Do you have a software architect in your project? Do you need one?&lt;/p&gt;&lt;p&gt;Well, most agile teams do not define such a role explicitly and work in a democratic mode. Every important technical decision is discussed with the entire team, and the most voted for solution wins. When such a team eventually decides to put a &amp;quot;software architect&amp;quot; badge on someone&amp;#39;s t-shirt, the most reputable programmer gets it.&lt;/p&gt;&lt;p&gt;The badge rarely changes his responsibilities, though. After all, the team stays the same and enjoys having technical discussions together, involving everyone. In the end, a software architect is more of a status than a role with explicitly defined responsibilities. It is a sign of respect, paid by other team players to the oldest and the most authoritative one among them. Right?&lt;/p&gt;&lt;p&gt;Absolutely wrong!&lt;/p&gt;&lt;!--more--&gt;&lt;iframe class="video" width="640" height="360" src="//www.youtube.com/embed/9IEN9z36V98" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Obviously, an architect is usually someone who has the most knowledge, skills, experience, and authority. Of course, an architect usually knows more than others and is able to communicate his knowledge with diplomacy and pedagogy when required. An architect is usually one of the smartest guys on the team.&lt;/p&gt;&lt;p&gt;This is not, however, what makes him/her an architect.&lt;/p&gt;&lt;p&gt;And this is not what the team needs. My definition of a software architect is this:&lt;/p&gt;&lt;p&gt;An &lt;strong&gt;architect&lt;/strong&gt; is the one who takes the &lt;strong&gt;blame&lt;/strong&gt; for the &lt;strong&gt;quality&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;You can replace &amp;quot;blame&amp;quot; with accountability or responsibility. Although, I prefer to use &amp;quot;blame&amp;quot;, because it much better emphasizes the fact that every quality issue in the product under development is a personal fault of the architect. Of course, together with the blame he also takes all the credit from happy customers, when the quality is good.&lt;/p&gt;&lt;p&gt;This is what the team needs &amp;mdash; someone personally responsible for the quality of the software being developed.&lt;/p&gt;&lt;p&gt;How this guy will delegate this responsibility to others is his job. Whether he will use his knowledge and skills, or quality control tools, or unit testing frameworks, or authority, or coaching, or corporal punishment &amp;mdash; it&amp;#39;s his business. A project manager delegates quality control to the software architect, and it is up to the software architect how to delegate it further.&lt;/p&gt;&lt;p&gt;The role of a software architect is crucial for every project, even if there are just two coders working at the same desk. One of them has to be the architect.&lt;/p&gt;&lt;p&gt;An ideal architect has all the merits mentioned above. He listens to everybody and takes their opinions into account. He is a good coach and a teacher, with a lot of patience. He is an effective communicator and negotiator. He is a diplomat. And he is an expert in the technical domain.&lt;/p&gt;&lt;p&gt;But, even if he doesn&amp;#39;t have all these merits, &lt;strong&gt;his decision is always final&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;And this is the job of the project manager, to make sure that every technical decision the architect makes is not doubted by anyone. This is what delegation is all about &amp;mdash; responsibility should always come with power.&lt;/p&gt;&lt;p&gt;As a project manager, you should regularly evaluate the results of your architect. Remember, the quality of the product your team is working on is his personal (!) reponsibility. Any problems you see are his problems. Don&amp;#39;t be afraid to blame him and punish him. But, always remember that in order to make your punishments productive you should give your architect full power in his actions. Let me reiterate: his decisions should be final.&lt;/p&gt;&lt;p&gt;If you, as a project manager, are not happy with the quality of the product and the architect doesn&amp;#39;t improve the situation, replace him. Downgrade him to a programmer and promote one of the programmers to an architect. But always remember that there can only be one architect in the team, and that his decisions are final.&lt;/p&gt;&lt;p&gt;That&amp;#39;s the only way of having a chance of building a perfect product.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/10/12/who-is-software-architect.html'&gt;What Does a Software Architect Do?&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/10/12/who-is-software-architect.html</guid> </item> <item><title>Continuous Integration is Dead</title><link>http://www.yegor256.com/2014/10/08/continuous-integration-is-dead.html</link> <description>&lt;p&gt;A few days ago, my article &lt;a href="http://devops.com/blogs/continuous-integration-doesnt-work/"&gt;&amp;quot;Why Continuous Integration Doesnâ€™t Work&amp;quot;&lt;/a&gt; was published at &lt;a href="http://www.devops.com"&gt;DevOps.com&lt;/a&gt;. Almost the same day I received a few strongly negative critiques on Twitter.&lt;/p&gt;&lt;p&gt;Here is my response to the un-asked question:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Why the hell shouldn&amp;#39;t continuous integration work, being such a brilliant and popular idea?&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;Even though I have some experience in this area, I won&amp;#39;t use it as an argument. I&amp;#39;ll try to rely only on logic instead.&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;BTW, my experience includes five years of using Apache Continuum, Hudson, CruiseControl, and Jenkins in over 50 open source and commercial projects. Besides that, a few years ago I created a hosted continuous integration service called &lt;a href="http://www.fazend.com"&gt;fazend.com&lt;/a&gt;, renamed to &lt;a href="http://www.rultor.com"&gt;rultor.com&lt;/a&gt; in 2013. Currently, I&amp;#39;m also an active user of &lt;a href="http://www.travis-ci.org"&gt;Travis&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="how-continuous-integration-should-work"&gt;How Continuous Integration Should Work&lt;/h2&gt;&lt;p&gt;The idea is simple and obvious. Every time you make a new commit to the &lt;code&gt;master&lt;/code&gt; branch (or &lt;code&gt;/trunk&lt;/code&gt; in Subversion), a continuous integration server (or service) attempts to build the entire product. &amp;quot;Build&amp;quot; means compile, unit test, integration test, quality analysis, etc.&lt;/p&gt;&lt;p&gt;The result is either &amp;quot;success&amp;quot; or &amp;quot;failure&amp;quot;. If it is a success, we say that &amp;quot;the build is clean&amp;quot;. If it is a failure, we say that &amp;quot;the build is broken&amp;quot;. The build usually gets broken because someone breaks it by commiting new code that turns previously passing unit tests into failing ones.&lt;/p&gt;&lt;p&gt;This is the technical side of the problem. It always works. Well, it may have its problems, like hard-coded dependencies, lack of isolation between environments or parallel build collisions, but this article is not about those. If the application is well written and its unit tests are stable, continuous integration is easy. Technically.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s see the organizational side.&lt;/p&gt;&lt;p&gt;Continuous integration is not only a server that builds, but a management/organizational process that should &amp;quot;work&amp;quot;. Being a process that works means exactly what Jez Humble said in &lt;a href="http://www.amazon.com/gp/product/0321601912/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321601912&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=GKWBKGZUJGJLFMHE"&gt;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/a&gt;, on page 55:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Crucially, if the build fails, the development team stops whatever they are doing and fixes the problem immediately&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;This is what doesn&amp;#39;t work and can&amp;#39;t work.&lt;/p&gt;&lt;h2 id="who-needs-this?"&gt;Who Needs This?&lt;/h2&gt;&lt;p&gt;As we see, continuous integration is about setting the entire development team on pause and fixing the broken build. Let me reiterate. Once the build is broken, everybody should focus on fixing it and making a commit that returns the build to the stable state.&lt;/p&gt;&lt;p&gt;Now, my question is &amp;mdash; who, in an actively working team, may need this?&lt;/p&gt;&lt;p&gt;A product owner, who is interested in launching new features to the market as soon as possible? Or maybe a project manager, who is responsible for the deadlines? Or maybe programmers, who hate to fix someone else&amp;#39;s bugs, especially under pressure.&lt;/p&gt;&lt;p&gt;Who likes this continuous integration and who needs it?&lt;/p&gt;&lt;p&gt;Nobody.&lt;/p&gt;&lt;h2 id="what-happens-in-reality?"&gt;What Happens In Reality?&lt;/h2&gt;&lt;p&gt;I can tell you. I&amp;#39;ve seen it multiple times. The scenario is always the same. We just start to ignore that continuous integration build status. Either the build is clean or it is broken, and we continue to do what we were doing before.&lt;/p&gt;&lt;p&gt;We don&amp;#39;t stop and fix it, as Jez Humble recommends.&lt;/p&gt;&lt;p&gt;Instead, we ignore the information that&amp;#39;s coming from the continuous integration server.&lt;/p&gt;&lt;p&gt;Eventually, maybe tomorrow or on Monday, we&amp;#39;ll try to find some spare time and will try to fix the build. Only because we don&amp;#39;t like that red button on the dashboard and want to turn it into a green one.&lt;/p&gt;&lt;h2 id="what-about-discipline?"&gt;What About Discipline?&lt;/h2&gt;&lt;p&gt;Yes, there is another side of this coin. We can try to enforce discipline in the team. We can make it a strict rule, that our build is always clean and whoever breaks it gets some sort of a punishment.&lt;/p&gt;&lt;p&gt;Try doing this and you will get a &lt;strong&gt;fear driven development&lt;/strong&gt;. Programmers will be afraid of committing anything to the repository because they will know that if they cause a build failure they will have to &lt;a href="http://programmers.stackexchange.com/questions/79041"&gt;apologize&lt;/a&gt;, at least.&lt;/p&gt;&lt;p&gt;A strict discipline (which I&amp;#39;m a big fan of) in this case only makes the situation worse. The entire development process slows down and programmers keep their code to themselves for as long as possible, to avoid possibly broken builds. When it&amp;#39;s time to commit, their changes are so massive that merging becomes very difficult and sometimes impossible.&lt;/p&gt;&lt;p&gt;As a result you get a lot of throw-away code, written by someone but never committed to &lt;code&gt;master&lt;/code&gt;, because of that fear factor.&lt;/p&gt;&lt;h2 id="ok,-what-is-the-solution?"&gt;OK, What Is The Solution?&lt;/h2&gt;&lt;p&gt;I wrote about it before; it is called &lt;a href="/2014/07/21/read-only-master-branch.html"&gt;&amp;quot;read-only master branch&amp;quot;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;It is simple &amp;mdash; prohibit anyone from merging anything into &lt;code&gt;master&lt;/code&gt; and create a script that anyone can call. The script will merge, test, and commit. The script will not make any exceptions. If any branch breaks at even one unit test, the entire branch will be rejected.&lt;/p&gt;&lt;p&gt;In other words: raise the red flag &lt;strong&gt;before&lt;/strong&gt; the code gets into &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This solves all problems.&lt;/p&gt;&lt;p&gt;First, the build is always clean. We simply can&amp;#39;t break it because nobody can commit unless his code keeps the build clean.&lt;/p&gt;&lt;p&gt;Second, there is no fear of breaking anything. Simply because you technically can&amp;#39;t do it. All you can do is get a negative response from a merging script. Then you fix your errors and tell the script to try again. Nobody sees these attempts, and you don&amp;#39;t need to apologize. Fear factor is gone.&lt;/p&gt;&lt;p&gt;BTW, try to use &lt;a href="http://www.rultor.com"&gt;rultor.com&lt;/a&gt; to enforce this &lt;a href="/2014/07/21/read-only-master-branch.html"&gt;&amp;quot;read-only master branch&amp;quot;&lt;/a&gt; principle in your project.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/10/08/continuous-integration-is-dead.html'&gt;Continuous Integration is Dead&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/10/08/continuous-integration-is-dead.html</guid> </item> <item><title>Stop Chatting, Start Coding</title><link>http://www.yegor256.com/2014/10/07/stop-chatting-start-coding.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.xdsd.org'&gt;&lt;img src='http://img.xdsd.org/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;The first principle of eXtremely Distributed Software Development (&lt;a href="http://www.xdsd.org"&gt;XDSD&lt;/a&gt;) states that &amp;quot;everyone gets paid for verified deliverables&amp;quot;. This literally means that, in order to get paid, every programmer has to write the code, commit it to the repository, pass a code review and make sure the code is &lt;a href="/2014/07/21/read-only-master-branch.html"&gt;merged into the destination branch&lt;/a&gt;. Only then, is his result appreciated and paid for.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/barton-fink.png' style='width:600px;' alt='Barton Fink (1991) by Joel Coen'/&gt;&lt;figcaption&gt;Barton Fink (1991) by Joel Coen&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;For most of my clients this already sounds extreme. They are used to a traditional scheme of paying per hour or per month. They immediately realize the benefits of XDSD, though, because for them this approach means that project funds are not wasted on activities that don&amp;#39;t produce results.&lt;/p&gt;&lt;p&gt;But that&amp;#39;s not all.&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;This principle also means that nobody is paid for anything except tasks explicitly assigned to him/her. Thus, when a programmer has a question about current design, specification, configuration, etc. &amp;mdash; nobody will be interested in answering it. Why not? Because there is no payment attached to this. Answering questions in Skype or Hipchat or by email is something that is not appreciated in XDSD in any way. The project simply doesn&amp;#39;t pay for this activity. That&amp;#39;s why none of our programmers do this.&lt;/p&gt;&lt;p&gt;We don&amp;#39;t use &lt;strong&gt;any&lt;/strong&gt; (I mean it!) informal communication channels in XDSD projects. We don&amp;#39;t do meetings or conference calls. We never discuss any technical issues on Skype or by phone.&lt;/p&gt;&lt;p&gt;So, how do we resolve problems and share information?&lt;/p&gt;&lt;p&gt;We use task tracking systems for that. When a developer has a question, he submits it as a new &amp;quot;ticket&amp;quot;. The project manager then picks it up and assigns it to another developer, who is able to answer it. Then, the answer goes back through the tracking system or directly into the source code.&lt;/p&gt;&lt;p&gt;The &amp;quot;question ticket&amp;quot; gets closed when its author is satisfied with the answer. When the ticket is closed, those who answered it get paid.&lt;/p&gt;&lt;p&gt;Using this model, we significantly improve project communications, by making them clean and transparent. We also save a lot of project funds, since every hour spent by a team member is traceable to the line of code he produced.&lt;/p&gt;&lt;p&gt;You can see how this happens in action, for example, in this ticket (the project is open source; that&amp;#39;s why all communications are open): &lt;a href="https://github.com/jcabi/jcabi-github/issues/731"&gt;jcabi/jcabi-github#731&lt;/a&gt;. One Java developer is having a problem with his Git repository. Apparently he did something wrong and couldn&amp;#39;t solve the problem by himself. He asked for help by submitting a new bug to the project. He was paid for the bug report. Then, another team member was assigned to help him. He did, through a number of suggestions and instructions. In the end, the problem was solved, and he was also paid for the solution. In total, the project spent 45 minutes, and the problem was solved.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/10/07/stop-chatting-start-coding.html'&gt;Stop Chatting, Start Coding&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Tue, 07 Oct 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/10/07/stop-chatting-start-coding.html</guid> </item> <item><title>Project Lifecycle in Teamed.io</title><link>http://www.yegor256.com/2014/10/06/software-project-lifecycle.html</link> <description>&lt;p&gt;In addition to being a hands-on programmer, I&amp;#39;m also co-founder and CTO of &lt;a href="http://www.teamed.io"&gt;Teamed.io&lt;/a&gt;, a custom software development company. I play the role of a technical and management leader in all projects we work with.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.teamed.io'&gt;&lt;img src='http://img.teamed.io/logo.svg' style='width:160px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I wrote this article for those who&amp;#39;re interested in hiring me and/or my team. This article will demonstrate what happens from day one until the end of the project, when you choose to &lt;a href="mailto:hire@teamed.io"&gt;work with us&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You will see below that our methods of software development &lt;a href="/2014/04/17/how-xdsd-is-different.html"&gt;seriously differ&lt;/a&gt; from what many other teams are using. I personally pay a lot of attention to quality of code and quality of the internal processes that connect our team.&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;There are four phases in every project I work with in &lt;a href="http://www.teamed.io"&gt;Teamed.io&lt;/a&gt;:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;Thinking&lt;/strong&gt;. Here we&amp;#39;re trying to understand: What is the problem that the product is going to solve? We&amp;#39;re also investigating the product&amp;#39;s boundaries &amp;mdash; who will work with the software (actors) and how will they work with it (user stories). Deliverables: specification. Duration: from 2 days up to 3 weeks. Participants: product owner, analyst(s), architect, project manager.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;Building&lt;/strong&gt;. Here the software architect is creating a &lt;a href="https://en.wikipedia.org/wiki/Proof_of_concept"&gt;proof-of-concept&lt;/a&gt; (aka an &lt;a href="https://en.wikipedia.org/wiki/Minimum_viable_product"&gt;MVP&lt;/a&gt; or prototype or a skeleton). It is a one-man job that is done almost without any interaction with anyone else. The architect builds the product according to the specification in a very limited time frame. The result will have multiple bugs and open ends, but it will implement the main user story. The architect also configures continuous integration and delivery pipelines. Deliverables: working software. Duration: 2-5 days. Participants: architect.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;Fixing&lt;/strong&gt;. At this phase we are adding all the meat to the skeleton. This phase takes most of the time and budget and involves many participants. In some projects we invite up to 50 people to work, at the same time. Since we treat all inconsistencies as bugs, this phase is mostly about finding, reporting and fixing bugs, in order to stabilize the product and get it ready for market launch. We increment and release the software multiple times a day, preferably to its user champions. Deliverables: bug fixes via pull requests. Duration: from weeks to months. Participants: programmer(s), designer(s), tester(s), code reviewer(s), architect, project manager.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;Using&lt;/strong&gt;. At this final phase we are launching the product to its end-users, and collecting their feedback (both positive and negative). Everything they are reporting back to us is being registered as a bug. Then, we categorize the bugs and fix them. This phase may take years, but it never involves active implementation of new features. Deliverables: bug fixes via pull requests. Duration: months. Participants: programmer(s), code reviewer(s), project manager.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The biggest (i.e., longest and most expensive) phase is, of course, Fixing. It usually takes the majority of time (over 70%). However, the most important and risky phase is the first one &amp;mdash; Thinking. A mistake made during Thinking will cost much more than a mistake made later.&lt;/p&gt;&lt;h2 id="thinking"&gt;Thinking&lt;/h2&gt;&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-thinking.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;Thinking is the first and the most important phase.&lt;/p&gt;&lt;p&gt;First, we give a name to the project and create a &lt;a href="https://github.com"&gt;Github&lt;/a&gt; repository. We try to keep all our projects (both open source and commercial) in Github. Mostly because the platform is very popular, very powerful, and really cheap (&lt;a href="https://github.com/pricing"&gt;$7/mo&lt;/a&gt; for a set of 5 private projects). We also keep all communication in the Github issue tracker.&lt;/p&gt;&lt;p&gt;Then, we create a simple half-page SRS document (Software Requirements Specification). Usually this is done right inside the source code, but sometimes in the Github wiki. What&amp;#39;s important is that the document should be under version control. We will modify it during the course of the project, very intensively. The SRS should briefly identify main &amp;quot;actors&amp;quot; of the system and define the product scope.&lt;/p&gt;&lt;p&gt;Even though it is only half a page, the creation of this initial SRS document is the most important and the most expensive task in the entire project. We pay a lot of attention to this step. Usually this document is written by myself in a direct communication with the project sponsor. We can&amp;#39;t afford a mistake at this step.&lt;/p&gt;&lt;p&gt;Then, we invite a few system analysts to the project. These guys are responsible for turning our initial SRS into a more complete and detailed specification. They start by asking questions, submitting them one by one as Github issues. Every question is addressed to the product owner. Using his answers, system analysts modify the SRS document. This article explains how &lt;a href="http://www.requs.org"&gt;Requs&lt;/a&gt; helps us in this process: &lt;a href="/2014/04/26/incremental-requirements-with-requs.html"&gt;Incremental Requirements With Requs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;At the end of the Thinking phase we estimate the size of the project, in lines of code. Using lines of code, we can roughly &lt;a href="http://www.teamed.io/calculator.html"&gt;estimate a budget&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I stay personally involved in the project during the entire Thinking phase.&lt;/p&gt;&lt;h2 id="building"&gt;Building&lt;/h2&gt;&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-building.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;This is a one-man job for an architect. Every project we work with has an architect who is personally responsible for the quality and all technical decisions made there. I try to play this role in most projects.&lt;/p&gt;&lt;p&gt;The Building phase is rather straight forward. I have to implement the solution according to the SRS, in a few working days. No matter how big the idea and how massive the planning development, I still have to create (build from scratch!) the product in, say, three days.&lt;/p&gt;&lt;p&gt;Besides building the software itself, I have to configure all basic DevOps processes, including: 1) automated testing and quality control, 2) deploying and releasing pipelines, 3) repository of artifacts, 4) &lt;a href="/2014/10/08/continuous-integration-is-dead.html"&gt;continuous integration&lt;/a&gt; service, etc.&lt;/p&gt;&lt;p&gt;The result of this phase is a working software package, deployable to its destination and available for testers. Technical &lt;a href="/2014/08/13/strict-code-quality-control.html"&gt;quality requirements&lt;/a&gt; are also defined at this phase.&lt;/p&gt;&lt;h2 id="fixing"&gt;Fixing&lt;/h2&gt;&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-fixing.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;Now it&amp;#39;s time to build a distributed team of programmers. First, we invite those who&amp;#39;ve worked in other projects before and have already have proven their quality. Very often we invite new people, finding them through StackOverflow, Github, oDesk, and other sources. An average team size of an average project is 10-20 programmers.&lt;/p&gt;&lt;p&gt;At this phase, we understand any inconsistency as a bug. If something is not clear in the documentation, or if something can be refactored for better readability, or if a function can be improved for higher performance &amp;mdash; it is a bug to us. And &lt;a href="/2014/04/13/bugs-are-welcome.html"&gt;bugs are welcome&lt;/a&gt; in our projects. We encourage everybody to report as many bugs as possible. This is how we achieve high quality.&lt;/p&gt;&lt;p&gt;That is why the phase is called Fixing, after all. We are reporting bugs and fixing them. Hundreds of bugs. Sometimes thousands. The product grows in front of our very eyes, because after every bug fix we re-deploy the entire product to the production platform.&lt;/p&gt;&lt;p&gt;Every bug is reported, classified, discussed, and fixed in its own Github ticket and its own Git branch. We never allow anyone to just commit to the &lt;code&gt;master&lt;/code&gt; branch &amp;mdash; all changes must pass through our &lt;a href="/2014/08/13/strict-code-quality-control.html"&gt;quality controls&lt;/a&gt; and be merged into &lt;code&gt;master&lt;/code&gt; by &lt;a href="http://www.rultor.com"&gt;rultor.com&lt;/a&gt;, our &lt;a href="/2014/07/24/rultor-automated-merging.html"&gt;merging bot&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Also important to mention is that all communications with the product owner and between programmers happen only through Github issues. We &lt;a href="/2014/10/07/stop-chatting-start-coding.html"&gt;never use any chats&lt;/a&gt;, Skype, emails or conferencing software. We communicate only through tickets and comments in Github.&lt;/p&gt;&lt;h2 id="using"&gt;Using&lt;/h2&gt;&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-using.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;This is the final phase and it can take quite a long time. By now, the product is ready and is launched to the market. But we still receive bug reports and feature request from the product owner, and we still fix them through the same process flow as in the Fixing phase.&lt;/p&gt;&lt;p&gt;We try to keep this phase as quiet as possible, in terms of the amount of bugs reported and fixed. Thanks to our intensive and pro-active bug finding and fixing in the previous phase, we usually have very few problems at the Using phase.&lt;/p&gt;&lt;p&gt;And big feature requests? At this phase, we usually try to convert them into new projects and develop them separately, starting again from Thinking.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/10/06/software-project-lifecycle.html'&gt;Project Lifecycle in Teamed.io&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/10/06/software-project-lifecycle.html</guid> </item> <item><title>10 Hosted Continuous Integration Services for a Private Repository</title><link>http://www.yegor256.com/2014/10/05/ten-hosted-continuous-integration-services.html</link> <description>&lt;p&gt;Every project I&amp;#39;m working with starts with a setup of continuous integration pipeline. I&amp;#39;m a big fan of cloud services, that&amp;#39;s why I was always using travis-ci.org. A few of my clients questioned this choice recently, mostly because of the price. So I decided to make a brief analysis of the market.&lt;/p&gt;&lt;p&gt;I configured &lt;a href="https://github.com/yegor256/rultor"&gt;rultor&lt;/a&gt;, an open source project, in every CI service I managed to find. All of them are free for open source projects. All of them are hosted and do not require any server installation Here they are, in order of my personal preference:&lt;/p&gt;&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt; &lt;td class="cnt"&gt;Linux&lt;/td&gt; &lt;td class="cnt"&gt;Windows&lt;/td&gt; &lt;td class="cnt"&gt;MacOS&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://www.travis-ci.org"&gt;travis-ci.com&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;&lt;a href="https://travis-ci.com/plans"&gt;$129/mo&lt;/a&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://www.snap-ci.com"&gt;snap-ci.com&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;&lt;a href="https://snap-ci.com/plans"&gt;$80/mo&lt;/a&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://www.semaphoreapp.com"&gt;semaphoreapp.com&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;&lt;a href="https://semaphoreapp.com/pricing"&gt;$29/mo&lt;/a&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://www.appveyor.com"&gt;appveyer.com&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;&lt;a href="http://www.appveyor.com/pricing"&gt;$39/mo&lt;/a&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://www.shippable.com"&gt;shippable.com&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;&lt;a href="http://www.shippable.com/pricing.html"&gt;$1/mo&lt;/a&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://www.wercker.com"&gt;wercker.com&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;free!&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://www.codeship.io"&gt;codeship.io&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;&lt;a href="https://codeship.io/pricing"&gt;$49/mo&lt;/a&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://www.magnum-ci.com"&gt;magnum-ci.com&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;?&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://www.drone.io"&gt;drone.io&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;&lt;a href="https://drone.io/pricing"&gt;$25/mo&lt;/a&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://www.circleci.io"&gt;circleci.io&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;&lt;a href="https://circleci.com/pricing"&gt;$19/mo&lt;/a&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://ci.solanolabs.com"&gt;sonolabs.com&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;&lt;a href="https://www.solanolabs.com/#pricing"&gt;$15/mo&lt;/a&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://ww.hosted-ci.com"&gt;hosted-ci.com&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;&lt;a href="https://hosted-ci.com/#plans"&gt;$49/mo&lt;/a&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;a href="http://www.ship.io"&gt;ship.io&lt;/a&gt;&lt;/td&gt; &lt;td class="rht"&gt;&lt;a href="https://ship.io/pricing"&gt;free!&lt;/a&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-no"&gt;&lt;/i&gt;&lt;/td&gt; &lt;td class="cnt"&gt;&lt;i class="icon-yes"&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;!--more--&gt;&lt;p&gt;If you know any other good continuous integration services, &lt;a href="/about-me.html"&gt;email me&lt;/a&gt;, I&amp;#39;ll review and add them to this list. BTW, here is a &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software"&gt;&amp;quot;full&amp;quot; list&lt;/a&gt; of continuous integration software and services.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.travis-ci.org'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/travis.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.travis-ci.org"&gt;&lt;strong&gt;travis-ci.org&lt;/strong&gt;&lt;/a&gt; is the best platform I&amp;#39;ve seen so far. Mostly because it is the most popular. Perfectly integrates with Github and has proper documentation. One important downside is the price of $129 per month. &amp;quot;With this money you can get a dedicated EC2 instance and install Jenkins there&amp;quot; &amp;mdash; some of my clients say. I strongly disagree, since Jenkins will require a 24x7 administration, which costs way more than $129, but it&amp;#39;s always difficult to explain.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.snap-ci.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/snap.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.snap-ci.com"&gt;&lt;strong&gt;snap-ci.com&lt;/strong&gt;&lt;/a&gt; is a product of ThoughtWorks, an author of &lt;a href="http://www.go.cd/"&gt;Go&lt;/a&gt;, an open source continuous integration server. It looks a bit more complicated than others, giving you an ability to define &amp;quot;stages&amp;quot; and combine them into pipelines. I&amp;#39;m not sure yet how these mechanisms may help in small and medium size projects we&amp;#39;re mostly working with, but they look &amp;quot;cool&amp;quot;. There is also a very unfortunate limitation of 2Gb RAM per build &amp;mdash; some of my Java projects fail because of that.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.semaphoreapp.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/semaphoreapp.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.semaphoreapp.com"&gt;&lt;strong&gt;semaphoreapp.com&lt;/strong&gt;&lt;/a&gt; is easy to configure and work with. It makes an impression of a light-weight system, which I generally appreciate. As a downside, they don&amp;#39;t have any Maven pre-installed, but this was solved easily with a short custom script that downloads and unpacks Maven. Another downside is that they are not configurable through a file (like &lt;code&gt;.travis.yml&lt;/code&gt;) &amp;mdash; you should do everything through a UI.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.appveyor.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/appveyor.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.appveyor.com"&gt;&lt;strong&gt;appveyor.com&lt;/strong&gt;&lt;/a&gt; is the only one that runs Windows builds. Even though I&amp;#39;m working mostly with Java and Ruby, which are expected to be platform independent, they very often appear to be exactly the opposite. When your build succeedes on Linux, there is almost no guarantee it will pass on Windows or Mac. I&amp;#39;m planning to use appveyor in every project, in combination with some other CI service. I&amp;#39;m still testing it though...&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.shippable.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/shippable.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.shippable.com"&gt;&lt;strong&gt;shippable.com&lt;/strong&gt;&lt;/a&gt; was easy to configure since it understands &lt;code&gt;.travis.yml&lt;/code&gt; out of the box. Besides that, nothing fancy.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.wercker.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/wercker.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.wercker.com"&gt;&lt;strong&gt;wercker.com&lt;/strong&gt;&lt;/a&gt; is a European product from Amsterdam, which is still in beta and that&amp;#39;s why free for all projects. The platform looks very promissing. It is still free for private repositories and is backed up by &lt;a href="https://gigaom.com/2014/10/01/wercker-takes-in-2-4-million-to-help-developers-test-their-code-in-the-cloud/"&gt;investments&lt;/a&gt;. I&amp;#39;m still testing it...&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.codeship.io'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/codeship.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.codeship.io"&gt;&lt;strong&gt;codeship.io&lt;/strong&gt;&lt;/a&gt; works fine, but their web UI looks a bit out-dated. Anyway, I&amp;#39;m using them now, will see.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.magnum-ci.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/magnum.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.magnum-ci.com"&gt;&lt;strong&gt;magnum-ci.com&lt;/strong&gt;&lt;/a&gt; is a very lightweight and young system. It doesn&amp;#39;t connect automatically to Github, so you should do some manual operations of adding a web hook. Besides that, works just fine.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.drone.io'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/drone.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.drone.io"&gt;&lt;strong&gt;drone.io&lt;/strong&gt;&lt;/a&gt; works fine, but their support didn&amp;#39;t reply to me when I asked for a Maven version update. Besides that, their badge is not updated correctly in Gitub README.md.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.circleci.io'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/circleci.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.circleci.io"&gt;&lt;strong&gt;circleci.io&lt;/strong&gt;&lt;/a&gt; I still don&amp;#39;t know why my build fails there. Really difficult to configure and understand what&amp;#39;s going on. Trying to figure it out...&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.zeroci.com"&gt;&lt;strong&gt;zeroci.com&lt;/strong&gt;&lt;/a&gt; looks like a one-man project, which definitely needs usability testing. It was rather difficult to configure a project via its web interface. The good thing is that it&amp;#39;s free, but its quality is not high enough to recommend it.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.ship.io"&gt;&lt;strong&gt;ship.io&lt;/strong&gt;&lt;/a&gt; is building only mobile applications (for iOS and Android). Besides that, they don&amp;#39;t support Maven for Android apps, only Gradle. I&amp;#39;ll try to build iOS Swift app with them soon....&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.solanolabs.com"&gt;&lt;strong&gt;solanolabs.com&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.hosted-ci.com"&gt;&lt;strong&gt;hosted-ci.com&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.cloudbees.com"&gt;&lt;strong&gt;cloudbees.com&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;&lt;p&gt;&lt;a href="http://dploy.io/"&gt;&lt;strong&gt;dploy.io&lt;/strong&gt;&lt;/a&gt; testing now...&lt;/p&gt;&lt;p&gt;BTW, if you don&amp;#39;t like the idea of keeping continuous integration in cloud, consider these on-premise software packages (in order or preference): &lt;a href="http://www.jenkins-ci.com"&gt;Jenkins&lt;/a&gt;, &lt;a href="http://www.jetbrains.com/teamcity/"&gt;TeamCity&lt;/a&gt;, &lt;a href="http://www.thoughtworks.com/products/go-continuous-delivery"&gt;Go&lt;/a&gt;, &lt;a href="http://stridercd.com/"&gt;Strider&lt;/a&gt;, &lt;a href="http://buildbot.net/"&gt;BuildBot&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Keep in mind that no matter how good and expensive your continuous integration service is, it &lt;a href="/2014/10/08/continuous-integration-is-dead.html"&gt;won&amp;#39;t help you&lt;/a&gt; unless you make your &lt;a href="/2014/07/21/read-only-master-branch.html"&gt;master branch read-only&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/10/05/ten-hosted-continuous-integration-services.html'&gt;10 Hosted Continuous Integration Services for a Private Repository&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/10/05/ten-hosted-continuous-integration-services.html</guid> </item> <item><title>DI Containers are Code Polluters</title><link>http://www.yegor256.com/2014/10/03/di-containers-are-evil.html</link> <description>&lt;p&gt;While &lt;a href="http://martinfowler.com/articles/injection.html"&gt;dependency injection&lt;/a&gt; (aka, &amp;quot;DI&amp;quot;) is a natural technique of composing objects in OOP (known long before the term was &lt;a href="http://www.martinfowler.com/articles/injection.html"&gt;introduced by Martin Fowler&lt;/a&gt;), &lt;a href="http://www.spring.io"&gt;Spring IoC&lt;/a&gt;, &lt;a href="https://code.google.com/p/google-guice/"&gt;Google Guice&lt;/a&gt;, &lt;a href="http://docs.oracle.com/javaee/6/tutorial/doc/giwhl.html"&gt;Java EE6 CDI&lt;/a&gt;, &lt;a href="http://square.github.io/dagger/"&gt;Dagger&lt;/a&gt; and other &lt;a href="https://en.wikipedia.org/wiki/Dependency_injection"&gt;DI frameworks&lt;/a&gt; turn it into an anti-pattern.&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;I&amp;#39;m not going to discuss obvious arguments against &amp;quot;setter injections&amp;quot; (like in &lt;a href="http://www.springbyexample.org/examples/intro-to-ioc-basic-setter-injection.html"&gt;Spring IoC&lt;/a&gt;) and &amp;quot;field injections&amp;quot; (like in &lt;a href="http://picocontainer.codehaus.org/annotated-field-injection.html"&gt;PicoContainer&lt;/a&gt;). These mechanisms simply violate basic principles of object-oriented programming and encourage us to create incomplete, mutable objects, that get stuffed with data during the course of application execution. Remember: ideal objects &lt;a href="/2014/06/09/objects-should-be-immutable.html"&gt;must be immutable&lt;/a&gt; and &lt;a href="/2014/09/16/getters-and-setters-are-evil.html"&gt;may not contain setters&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Instead, let&amp;#39;s talk about &amp;quot;constructor injection&amp;quot; (like in &lt;a href="https://github.com/google/guice/wiki/Injections#constructor-injection"&gt;Google Guice&lt;/a&gt;) and its use with &lt;strong&gt;dependency injection containers&lt;/strong&gt;. I&amp;#39;ll try to show why I consider these containers a redundancy, at least.&lt;/p&gt;&lt;h2 id="what-is-dependency-injection?"&gt;What is Dependency Injection?&lt;/h2&gt;&lt;p&gt;This is what dependency injection is (not really different from a plain old object composition):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Budget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Budget&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;total&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cell&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SELECT SUM(cost) FROM ledger&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The object &lt;code&gt;data&lt;/code&gt; is called a &amp;quot;dependency&amp;quot;.&lt;/p&gt;&lt;p&gt;A &lt;code&gt;Budget&lt;/code&gt; doesn&amp;#39;t know what kind of database it is working with. All it needs from the database is its ability to fetch a cell, using an arbitrary SQL query, via method &lt;code&gt;cell()&lt;/code&gt;. We can instantiate a &lt;code&gt;Budget&lt;/code&gt; with a PostgreSQL implementation of the &lt;code&gt;DB&lt;/code&gt; interface, for example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Budget&lt;/span&gt; &lt;span class="n"&gt;budget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Budget&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Postgres&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jdbc:postgresql:5740/main&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Total is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;budget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, we&amp;#39;re &amp;quot;injecting&amp;quot; a dependency into a new object &lt;code&gt;budget&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;An alternative to this &amp;quot;dependency injection&amp;quot; approach would be to let &lt;code&gt;Budget&lt;/code&gt; decide what database it wants to work with:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Budget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Postgres&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jdbc:postgresql:5740/main&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// class methods&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is very dirty and leads to 1) code duplication, 2) inability to reuse, and 3) inability to test, etc. No need to discuss why. It&amp;#39;s obvious.&lt;/p&gt;&lt;p&gt;Thus, dependency injection via a constructor is an amazing technique. Well, not even a technique, really. More like a feature of Java and all other object-oriented languages. It&amp;#39;s expected that almost any object will want to encapsulate some knowledge (aka, a &amp;quot;state&amp;quot;). That&amp;#39;s what constructors are for.&lt;/p&gt;&lt;h2 id="what-is-a-di-container?"&gt;What is a DI Container?&lt;/h2&gt;&lt;p&gt;So far so good, but here comes the dark side &amp;mdash; a dependency injection container. Here is how it works (let&amp;#39;s use Google Guice as an example):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.inject.Inject&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Budget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nd"&gt;@Inject&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Budget&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// same methods as above&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pay attention: the constructor is annotated with &lt;a href="http://docs.oracle.com/javaee/6/api/javax/inject/Inject.html"&gt;&lt;code&gt;@Inject&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Then, we&amp;#39;re supposed to configure a container somewhere, when the application starts:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Injector&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Guice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createInjector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AbstractModule&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Postgres&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jdbc:postgresql:5740/main&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some frameworks even allow us to configure the injector in an XML file.&lt;/p&gt;&lt;p&gt;From now on, we are not allowed to instantiate &lt;code&gt;Budget&lt;/code&gt; through the &lt;code&gt;new&lt;/code&gt; operator, like we did before. Instead, we should use the injector we just created:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Injection&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// as we just did in the previous snippet&lt;/span&gt; &lt;span class="n"&gt;Budget&lt;/span&gt; &lt;span class="n"&gt;budget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Budget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Total is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;budget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The injection automatically finds out that in order to instantiate a &lt;code&gt;Budget&lt;/code&gt; it has to provide an argument for its constructor. It will use an instance of class &lt;code&gt;Postgres&lt;/code&gt;, which we instantiated in the injector.&lt;/p&gt;&lt;p&gt;This is the right and recommended way to use Guice. There are a few even darker patterns, though, which are possible but not recommended. For example, you can make your injector a singleton and use it right inside the &lt;code&gt;Budget&lt;/code&gt; class. These mechanisms are considered wrong even by DI container makers, however, so let&amp;#39;s ignore them and focus on the recommended scenario.&lt;/p&gt;&lt;h2 id="what-is-this-for?"&gt;What Is This For?&lt;/h2&gt;&lt;p&gt;Let me reiterate and summarize the scenarios of &lt;strong&gt;incorrect usage&lt;/strong&gt; of dependency injection containers:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;p&gt;Field injection&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Setter injection&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Passing injector as a dependency&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Making injector a global singleton&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;If we put all of them aside, all we have left is the constructor injection explained above. And how does that help us? Why do we need it? Why can&amp;#39;t we use plain old &lt;code&gt;new&lt;/code&gt; in the main class of the application?&lt;/p&gt;&lt;p&gt;The container we created simply adds more lines to the code base, or even more files, if we use XML. And it doesn&amp;#39;t add anything, except an additional complexity. We should always remember this if we have the question: &amp;quot;What database is used as an argument of a Budget?&amp;quot;&lt;/p&gt;&lt;h2 id="the-right-way"&gt;The Right Way&lt;/h2&gt;&lt;p&gt;Now, let me show you a real life example of using &lt;code&gt;new&lt;/code&gt; to construct an application. This is how we create a &amp;quot;thinking engine&amp;quot; in &lt;a href="http://www.rultor.com"&gt;rultor.com&lt;/a&gt; (full class is in &lt;a href="https://github.com/yegor256/rultor/blob/1.34/src/main/java/com/rultor/agents/Agents.java"&gt;&lt;code&gt;Agents.java&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt;&lt;script src="https://gist.github.com/c76c06baee1f74e3100e.js?file=Agents.java"&gt; &lt;/script&gt;&lt;p&gt;Impressive? This is a true object composition. I believe this is how a proper object-oriented application should be instantiated.&lt;/p&gt;&lt;p&gt;And DI containers? In my opinion, they just add unnecessary noise.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/10/03/di-containers-are-evil.html'&gt;DI Containers are Code Polluters&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Fri, 03 Oct 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/10/03/di-containers-are-evil.html</guid> </item> <item><title>Why Monetary Awards Don't Work?</title><link>http://www.yegor256.com/2014/09/24/why-monetary-awards-dont-work.html</link> <description>&lt;p&gt;Monetary rewards for employees. Do they work? Should we use them? Can money motivate creative minds? Will a programmer work better if he gets paid only when he reaches his goals and objectives?&lt;/p&gt;&lt;iframe class="video" width="640" height="360" src="//www.youtube.com/embed/XJRHkbrZuO8?rel=0" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Much research has already been done on this subject, and most of it proves that connecting results with money is a very demotivating approach. For example, Ian Larkin &lt;a href="http://hbswk.hbs.edu/item/7215.html"&gt;says&lt;/a&gt; that the most productive workers &amp;quot;suffered a 6-8% decrease in productivity after the award was instituted&amp;quot;.&lt;/p&gt;&lt;p&gt;I believe this is completely true. Money may become a terrible de-motivator for all modern employees (not just programmers).&lt;/p&gt;&lt;p&gt;My question is &amp;mdash; why is this so?&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;Why doesn&amp;#39;t money work, even when it was invented to be a universal instrument to measure our labor? Why can&amp;#39;t an American dollar, which has been used for centuries as a trading tool between working people, be used anymore?&lt;/p&gt;&lt;p&gt;Why, in a modern office, do we try to hide monetary motivation and replace it with &lt;a href="http://www.hrworld.com/features/25-employee-rewards/"&gt;everything else&lt;/a&gt;, like free lunches, team building events, paid vacations, etc. Why don&amp;#39;t we just say &amp;mdash; &amp;quot;Jeff completed his task faster than everybody else. This is his $500 check. Whoever completes the next task gets $300,&amp;quot; out loud in the office?... Sounds uncomfortable, doesn&amp;#39;t it?&lt;/p&gt;&lt;p&gt;Why does money as a motivator scare us?&lt;/p&gt;&lt;p&gt;I have an answer.&lt;/p&gt;&lt;p&gt;Money doesn&amp;#39;t work when there are no ground rules.&lt;/p&gt;&lt;p&gt;When we say that Jeff will get a $500 bonus if he finishes his task on time, but don&amp;#39;t say what he should do when someone distracts him &amp;mdash; Jeff gets frustrated. He also doesn&amp;#39;t understand who his boss is anymore. Does he just work for the bonus, or should he also satisfy a CTO who comes to his desk asking him to do something else urgently? Is Jeff allowed to tell the CTO &amp;quot;to get lost&amp;quot; because he&amp;#39;s working towards his own personal objective (the bonus)?&lt;/p&gt;&lt;p&gt;In all cases I&amp;#39;ve seen myself and in all research cases I&amp;#39;ve read about, people keep repeating the same mistake. They create a rewards program (monetary or not) without setting ground rules for the team. By doing so, they encourage people to play wild-wild west, where the fastest gets the cash bag. Obviously, the Bad and the Ugly get to the prize faster, while the Good gets demotivated and depressed.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/09/rules-with-and-without-rewards.png' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;&lt;p class="note"&gt; In a clockwise direction from the top left corner: The Good, the Bad and the Ugly (1966) by Sergio Leone; Roger Federer; A Serious Man (2009) by Ethan Coen and Joel Coen; Two and a Half Men (TV Series). &lt;/p&gt;&lt;p&gt;What do I mean by ground rules?&lt;/p&gt;&lt;p&gt;It should be a simple document (&lt;a href="http://www.pmi.org/PMBOK-Guide-and-Standards.aspx"&gt;PMBOK&lt;/a&gt; calls it a Staffing Management Plan) that helps me, as a team member, answer at least these basic questions:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;p&gt;How my personal results are measured?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Who gives me tasks and who do I report to?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How should I resolve conflicts between tasks?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What are my personal deadlines for every task?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Do I have measurable quality expectations for my deliverables?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do my mistakes affect my performance grade?&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The ground rules document should be superior to your boss. If the document says that your results get an A+ grade, the boss should have no say. If she doesn&amp;#39;t like you personally, it doesn&amp;#39;t matter. You get an A+ grade, and you are the best. That&amp;#39;s it.&lt;/p&gt;&lt;p&gt;Does your team have such a document? Can you answer all of these questions? If not, you&amp;#39;re not ready for a rewards program. It will only make your management situation worse, just like all the scientific research says. Rewards will motivate the most cunning to take advantage of the most hard working and good-natured. Team spirit will suffer, big time.&lt;/p&gt;&lt;p&gt;On the other hand, if you have that &amp;quot;ground rules&amp;quot; document and you strictly follow it, giving monetary rewards to your workers will significantly increase their performance and motivation. They will know exactly what needs to be done to get the rewards, and they won&amp;#39;t have any distraction. Your team won&amp;#39;t be a group of wild west gunslingers anymore, but more like players in a sports arena. The best players will go further, and the worst will know exactly what needs to be done to improve. Fair competition will lead to a better cumulative result.&lt;/p&gt;&lt;p&gt;Moreover, if your ground rules are strict and explicit, you can use not only rewards, but also punishments. And your team will gladly accept them, because they will help emphasize what (and who) works best and help get rid of the waste.&lt;/p&gt;&lt;p&gt;I&amp;#39;m speaking from experience here. In &lt;a href="http://www.xdsd.org"&gt;XDSD&lt;/a&gt; we&amp;#39;re not only rewarding programmers with money, but we also never pay for anything except delivered results. We manage to do this mostly because our groud rules are very strict and non-ambiguous. And we never break them.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/09/24/why-monetary-awards-dont-work.html'&gt;Why Monetary Awards Don't Work?&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/24/why-monetary-awards-dont-work.html</guid> </item> <item><title>Built-in Fake Objects</title><link>http://www.yegor256.com/2014/09/23/built-in-fake-objects.html</link> <description>&lt;p&gt;While mock objects are perfect instruments for unit testing, mocking through mock frameworks may turn your unit tests into an unmaintainable mess. Thanks to them we often hear that &amp;quot;mocking is bad&amp;quot; and &amp;quot;mocking is evil&amp;quot;.&lt;/p&gt;&lt;p&gt;The root cause of this complexity is that our objects are too big. They have many methods and these methods return other objects, which also have methods. When we pass a mock version of such an object as a parameter, we should make sure that all of its methods return valid objects.&lt;/p&gt;&lt;p&gt;This leads to inevitable complexity, which turns unit tests to &lt;a href="https://news.ycombinator.com/item?id=7353767"&gt;waste&lt;/a&gt; almost impossible to maintain.&lt;/p&gt;&lt;!--more--&gt;&lt;h2 id="object-hierarchy"&gt;Object Hierarchy&lt;/h2&gt;&lt;p&gt;Take the &lt;code&gt;Region&lt;/code&gt; interface from &lt;a href="http://dynamo.jcabi.com"&gt;jcabi-dynamo&lt;/a&gt; as an example (this snippet and all others in this article are simplified, for the sake of brevity):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Region&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt; &lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Its &lt;code&gt;table()&lt;/code&gt; method returns an instance of the &lt;code&gt;Table&lt;/code&gt; interface, which has its own methods:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Table&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Frame&lt;/span&gt; &lt;span class="nf"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Attributes&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="nf"&gt;region&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Interface &lt;code&gt;Frame&lt;/code&gt;, returned by the &lt;code&gt;frame()&lt;/code&gt; method, also has its own methods. And so on. In order to create a properly mocked instance of interface &lt;code&gt;Region&lt;/code&gt;, one would normally create a dozen other mock objects. With &lt;a href="http://www.mockito.org"&gt;Mockito&lt;/a&gt; it will look like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testMe&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// many more lines here...&lt;/span&gt; &lt;span class="n"&gt;Frame&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doReturn&lt;/span&gt;&lt;span class="o"&gt;(...).&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;anyString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And all of this is just a scaffolding before the actual testing.&lt;/p&gt;&lt;h2 id="sample-use-case"&gt;Sample Use Case&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s say, you&amp;#39;re developing a project that uses jcabi-dynamo for managing data in DynamoDB. Your class may look similar to this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;empl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;dynamo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;empl&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dynamo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;region&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;employees&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getN&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can imagine how difficult it will be to unit test this class, using Mockito, for example. First, we have to mock the &lt;code&gt;Region&lt;/code&gt; interface. Then, we have to mock a &lt;code&gt;Table&lt;/code&gt; interface and make sure it is returned by the &lt;code&gt;table()&lt;/code&gt; method. Then, we have to mock a &lt;code&gt;Frame&lt;/code&gt; interface, etc.&lt;/p&gt;&lt;p&gt;The unit test will be much longer than the class itself. Besides that, its real purpose, which is to test the retrieval of an employee&amp;#39;s salary, will not be obvious to the reader.&lt;/p&gt;&lt;p&gt;Moreover, when we need to test a similar method of a similar class, we will need to restart this mocking from scratch. Again, multiple lines of code, which will look very similar to what we have already written.&lt;/p&gt;&lt;h2 id="fake-classes"&gt;Fake Classes&lt;/h2&gt;&lt;p&gt;The solution is to create fake classes and ship them together with real classes. This is what &lt;a href="http://dynamo.jcabi.com"&gt;jcabi-dynamo&lt;/a&gt; is doing. Just look at its &lt;a href="http://dynamo.jcabi.com/apidocs-0.16.1/index.html"&gt;JavaDoc&lt;/a&gt;. There is a package called &lt;code&gt;com.jcabi.dynamo.mock&lt;/code&gt; that contains only fake classes, suitable only for unit testing.&lt;/p&gt;&lt;p&gt;Even though their sole purpose is to optimize unit testing, we ship them together with production code, in the same JAR package.&lt;/p&gt;&lt;p&gt;This is what a test will look like, when a fake class &lt;code&gt;MkRegion&lt;/code&gt; is used:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EmployeeTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;canFetchSalaryFromDynamoDb&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MkRegion&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;H2Data&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;employees&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;employees&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AttributeValue&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;withN&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="n"&gt;emp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This test looks obvious to me. First, we create a fake DynamoDB region, which works on top of &lt;code&gt;H2Data&lt;/code&gt; storage (in-memory H2 database). The storage will be ready for a single &lt;code&gt;employees&lt;/code&gt; table with a hash key &lt;code&gt;name&lt;/code&gt; and a single &lt;code&gt;salary&lt;/code&gt; attribute.&lt;/p&gt;&lt;p&gt;Then, we put a record into the table, with a hash &lt;code&gt;Jeff&lt;/code&gt; and a salary &lt;code&gt;50000&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Finally, we create an instance of class &lt;code&gt;Employee&lt;/code&gt; and check how it fetches the salary from DynamoDB.&lt;/p&gt;&lt;p&gt;I&amp;#39;m currently doing the same thing in almost every open source library I&amp;#39;m working with. I&amp;#39;m creating a collection of fake classes, that simplify testing inside the library and for its users.&lt;/p&gt;&lt;p&gt;BTW, a great article on the same subject: &lt;a href="http://nedbatchelder.com/blog/201206/tldw_stop_mocking_start_testing.html"&gt;tl;dw: Stop mocking, start testing&lt;/a&gt; by Ned Batchelder.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/09/23/built-in-fake-objects.html'&gt;Built-in Fake Objects&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/23/built-in-fake-objects.html</guid> </item> <item><title>Remote Programming in Teamed.io</title><link>http://www.yegor256.com/2014/09/22/remote-programming-interview.html</link> <description>&lt;p&gt;Here is an interview taken by Lisette Sutherland from &lt;a href="http://www.collaborationsuperpowers.com"&gt;www.CollaborationSuperpowers.com&lt;/a&gt;, a few hours ago, which I enjoyed to give :)&lt;/p&gt;&lt;iframe class="video" width="640" height="360" src="//www.youtube.com/embed/TWBBZK_XRNU?rel=0" allowfullscreen&gt;&lt;/iframe&gt;&lt;!--more--&gt;&lt;p&gt;I answered these questions (approximately):&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;p&gt;How Teamed.io differs from other software companies (0:50)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do we control programmers remotely (1:59)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Do we compare ourselves with open source (3:52)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do we build a network of programmers (5:10)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Why people like to work with us (5:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What happens when a programmer fails (7:50)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How can it be financially successful (9:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do we organize &amp;quot;team building&amp;quot; (11:50)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What challenges do we have (14:50)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What about micro-management (17:55)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Can this work in a non-IT sector (19:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What do you do to manage the team (20:48)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Isn&amp;#39;t it difficult to manage so many tasks (24:18)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Do we have cultural issues (25:35)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Is it true that people are not enough result-oriented (27:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Are there any other challenges (29:12)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What do I like personally about it (30:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do we scale our teams when we need more programmers (32:01)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What an &amp;quot;unlimited pool of talents&amp;quot; means (34:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What advice do I have for those who work remotely (37:50)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Where do I work from, personally (39:10)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do we find clients (42:29)?&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Enjoy :)&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/09/22/remote-programming-interview.html'&gt;Remote Programming in Teamed.io&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/22/remote-programming-interview.html</guid> </item> <item><title>Getters/Setters. Evil. Period.</title><link>http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html</link> <description>&lt;p&gt;There is an old debate, started in 2003 by Allen Holub in this &lt;a href="http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html"&gt;Why getter and setter methods are evil&lt;/a&gt; famous article, about whether getters/setters is an anti-pattern and should be avoided or if it is something we inevitably need in object-oriented programming. I&amp;#39;ll try to add my two cents to this discussion.&lt;/p&gt;&lt;p&gt;The gist of the following text is this: getters and setters is a terrible practice and those who use it can&amp;#39;t be excused. Again, to avoid any misunderstanding, I&amp;#39;m not saying that get/set should be avoided when possible. No. I&amp;#39;m saying that you should &lt;strong&gt;never&lt;/strong&gt; have them near your code.&lt;/p&gt;&lt;!--more--&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT'&gt;&lt;img src='http://www.yegor256.com/images/2014/09/object-thinking-by-david-west.png' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Arrogant enough to catch your attention? You&amp;#39;ve been using that get/set pattern for 15 years and you&amp;#39;re a respected Java architect? And you don&amp;#39;t want to hear that nonsense from a stranger? Well, I understand your feelings. I felt almost the same when I stumbled upon &lt;a href="http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT"&gt;Object Thinking&lt;/a&gt; by David West, the best book about object-oriented programming I&amp;#39;ve read so far. So please. Calm down and try to understand while I try to explain.&lt;/p&gt;&lt;h2 id="existing-arguments"&gt;Existing Arguments&lt;/h2&gt;&lt;p&gt;There are a few arguments against &amp;quot;accessors&amp;quot; (another name for getters and setters), in an object-oriented world. All of them, I think, are not strong enough. Let&amp;#39;s briefly go through them.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tell, Don&amp;#39;t Ask&lt;/strong&gt; Allen Holub says, &amp;quot;Don&amp;#39;t ask for the information you need to do the work; ask the object that has the information to do the work for you&amp;quot;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Violated Encapsulation Principle&lt;/strong&gt; An object can be teared apart by other objects, since they are able to inject any new data into it, through setters. The object simply can&amp;#39;t encapsulate its own state safely enough, since anyone can alter it.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Exposed Implementation Details&lt;/strong&gt; If we can get an object out of another object, we are relying too much on the first object&amp;#39;s implementation details. If tomorrow it will change, say, the type of that result, we have to change our code as well.&lt;/p&gt;&lt;p&gt;All these justifications are reasonable, but they are missing the main point.&lt;/p&gt;&lt;h2 id="fundamental-misbelief"&gt;Fundamental Misbelief&lt;/h2&gt;&lt;p&gt;Most programmers believe that an object is a data structure with methods. I&amp;#39;m quoting &lt;a href="http://java.dzone.com/articles/getters-and-setters-are-not"&gt;Getters and Setters Are Not Evil&lt;/a&gt;, an article by Bozhidar Bozhanov:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;But the majority of objects for which people generate getters and setters are simple data holders.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;This misconception is the consequence of a huge misunderstanding! Objects are not &amp;quot;simple data holders&amp;quot;. Objects are &lt;strong&gt;not&lt;/strong&gt; data structures with attached methods. This &amp;quot;data holder&amp;quot; concept came to object-oriented programming from procedural languages, especially C and COBOL. I&amp;#39;ll say it again: an object is &lt;strong&gt;not&lt;/strong&gt; a set of data elements and functions that manipulate them. An object is &lt;strong&gt;not&lt;/strong&gt; a data entity.&lt;/p&gt;&lt;p&gt;What is it then?&lt;/p&gt;&lt;h2 id="a-ball-and-a-dog"&gt;A Ball and A Dog&lt;/h2&gt;&lt;p&gt;In true object-oriented programming, objects are living creatures, like you and me. They are living organisms, with their own behaviour, properties and a life cycle.&lt;/p&gt;&lt;p&gt;Can a living organism have a setter? Can you &amp;quot;set&amp;quot; a ball to a dog? Not really. But that is exactly what the following piece of software is doing:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Ball&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How does that sound?&lt;/p&gt;&lt;p&gt;Can you get a ball from a dog? Well, you probably can, if she ate it and you&amp;#39;re doing surgery. In that case, yes, we can &amp;quot;get&amp;quot; a ball from a dog. This is what I&amp;#39;m talking about:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;Ball&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBall&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or an even more ridiculous example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;23kg&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Can you imagine this transaction in the real world? :)&lt;/p&gt;&lt;p&gt;Does it look similar to what you&amp;#39;re writing every day? If yes, then you&amp;#39;re a procedural programmer. Admit it. And this is what David West has to say about it, on page 30 of his book:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Step one in the transformation of a successful procedural developer into a successful object developer is a lobotomy.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;Do you need a lobotomy? Well, I definitely needed one and received it, while reading West&amp;#39;s &lt;a href="http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT"&gt;Object Thinking&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="object-thinking"&gt;Object Thinking&lt;/h2&gt;&lt;p&gt;Start thinking like an object and you will immediately rename those methods. This is what you will probably get:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;take&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Ball&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="n"&gt;Ball&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;give&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we&amp;#39;re treating the dog as a real animal, who can take a ball from us and can give it back, when we ask. Worth mentioning is that the dog can&amp;#39;t give &lt;code&gt;NULL&lt;/code&gt; back. Dogs simply don&amp;#39;t know what &lt;code&gt;NULL&lt;/code&gt; is :) Object thinking immediately eliminates &lt;a href="/2014/05/13/why-null-is-bad.html"&gt;NULL references&lt;/a&gt; from your code.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/09/fish-called-wanda.png' style='width:600px;' alt='A Fish Called Wanda (1988) by Charles Crichton'/&gt;&lt;figcaption&gt;A Fish Called Wanda (1988) by Charles Crichton&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Besides that, object thinking will lead to object immutability, like in the &amp;quot;weight of the dog&amp;quot; example. You would re-write that like this instead:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;23kg&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The dog is an immutable living organism, which doesn&amp;#39;t allow anyone from the outside to change her weight, or size, or name, etc. She can tell, on request, her weight or name. There is nothing wrong with public methods that demonstrate requests for certain &amp;quot;insides&amp;quot; of an object. But these methods are not &amp;quot;getters&amp;quot; and they should never have the &amp;quot;get&amp;quot; prefix. We&amp;#39;re not &amp;quot;getting&amp;quot; anything from the dog. We&amp;#39;re not getting her name. We&amp;#39;re asking her to tell us her name. See the difference?&lt;/p&gt;&lt;p&gt;We&amp;#39;re not talking semantics here, either. We are differentiating the procedural programming mindset from an object-oriented one. In procedural programming, we&amp;#39;re working with data, manipulating them, getting, setting, and deleting when necessary. We&amp;#39;re in charge, and the data is just a passive component. The dog is nothing to us &amp;mdash; it&amp;#39;s just a &amp;quot;data holder&amp;quot;. It doesn&amp;#39;t have its own life. We are free to get whatever is necessary from it and set any data into it. This is how C, COBOL, Pascal and many other procedural languages work(ed).&lt;/p&gt;&lt;p&gt;On the contrary, in a true object-oriented world, we treat objects like living organisms, with their own date of birth and a moment of death &amp;mdash; with their own identity and habits, if you wish. We can ask a dog to give us some piece of data (for example, her weight), and she may return us that information. But we always remember that the dog is an active component. She decides what will happen after our request.&lt;/p&gt;&lt;p&gt;That&amp;#39;s why, &lt;strong&gt;it is conceptually incorrect to have any methods starting with &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;get&lt;/code&gt; in an object&lt;/strong&gt;. And it&amp;#39;s not about breaking encapsulation, like many people argue. It is whether you&amp;#39;re thinking like an object or you&amp;#39;re still writing COBOL in Java syntax.&lt;/p&gt;&lt;p&gt;PS. Yes, you may ask, &amp;mdash; what about JavaBeans, JPA, JAXB, and many other Java APIs that rely on the get/set notation? What about Ruby&amp;#39;s built-in feature that simplies the creation of accessors? Well, all of that is our misfortune. It is much easier to stay in a primitive world of procedural COBOL than to truly understand and appreciate the beautiful world of true objects.&lt;/p&gt;&lt;p&gt;PPS. Forgot to say, yes, dependency injection via setters is also a terrible anti-pattern. About it, in &lt;a href="/2014/10/03/di-containers-are-evil.html"&gt;one of the next posts&lt;/a&gt; :)&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html'&gt;Getters/Setters. Evil. Period.&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html</guid> </item> <item><title>Deploying to Heroku, in One Click</title><link>http://www.yegor256.com/2014/09/13/deploying-to-heroku.html</link> <description>&lt;p&gt;There were a few articles already about our usage of Rultor for automating continuous delivery cycles of Java and Ruby projects, including &lt;a href="http://www.yegor256.com/2014/08/26/publish-to-rubygems.html"&gt;Rubygems&lt;/a&gt;, &lt;a href="http://www.yegor256.com/2014/08/25/deploy-to-cloudbees.html"&gt;CloudBees&lt;/a&gt; and &lt;a href="http://www.yegor256.com/2014/08/19/how-to-release-to-maven-central.html"&gt;MavenCentral&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This one describes how Heroku deployment can be automated. When I need to deploy a new version of an Aintshy web application, all I do is create one message in a Github ticket. I just say &lt;code&gt;@rultor release 0.1.4&lt;/code&gt; and version 0.1.4 gets deployed to Heroku. See Github ticket &lt;a href="https://github.com/aintshy/hub/issues/5"&gt;#5&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You can do the same, with the help of &lt;a href="http://www.rultor.com"&gt;Rultor.com&lt;/a&gt;, a free hosted DevOps assistant.&lt;/p&gt;&lt;!--more--&gt;&lt;h2 id="create-heroku-project"&gt;Create Heroku Project&lt;/h2&gt;&lt;p&gt;Create a new project at &lt;a href="http://www.heroku.com"&gt;Heroku.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Then install their &lt;a href="https://toolbelt.heroku.com/"&gt;command line toolbelt&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="authenticate-at-heroku"&gt;Authenticate at Heroku&lt;/h2&gt;&lt;p&gt;You should authenticate your public SSH key at Heroku, using their command line toolbelt. The process is explained &lt;a href="https://devcenter.heroku.com/articles/authentication"&gt;here&lt;/a&gt;, but it is not much of a process. You just run &lt;code&gt;heroku login&lt;/code&gt; and enter your login credentials. As a result, you will get your existing key (located at &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;) authenticated by Heroku.&lt;/p&gt;&lt;p&gt;If you didn&amp;#39;t have the key before, it will be created automatically.&lt;/p&gt;&lt;h2 id="encrypt-ssh-key"&gt;Encrypt SSH Key&lt;/h2&gt;&lt;p&gt;Now, encrypt &lt;code&gt;id_rsa&lt;/code&gt; and &lt;code&gt;id_rsa.pub&lt;/code&gt; (they are in the &lt;code&gt;~/.ssh&lt;/code&gt; directory) with a &lt;a href="https://github.com/yegor256/rultor-remote"&gt;rultor remote&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;$ gem install rultor $ rultor encrypt -p me/test id_rsa $ rultor encrypt -p me/test id_rsa.pub&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of &lt;code&gt;me/test&lt;/code&gt; use the name of your Github project.&lt;/p&gt;&lt;p&gt;You will get two new files &lt;code&gt;id_rsa.asc&lt;/code&gt; and &lt;code&gt;id_rsa.pub.asc&lt;/code&gt;. Add them to the root directory of your project, commit and push. These files contain your secret information, but only the Rultor server can decrypt them.&lt;/p&gt;&lt;h2 id="create-rultor-config"&gt;Create Rultor Config&lt;/h2&gt;&lt;p&gt;Create a &lt;code&gt;.rultor.yml&lt;/code&gt; file in the root directory of your project (&lt;a href="http://doc.rultor.com/reference.html"&gt;reference page&lt;/a&gt; explains this format in detail):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="l-Scalar-Plain"&gt;decrypt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;id_rsa&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repo/id_rsa.asc&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;id_rsa.pub&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repo/id_rsa.pub.asc&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;release&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt; &lt;span class="no"&gt;mvn versions:set &amp;quot;-DnewVersion=${tag}&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;git commit -am &amp;quot;${tag}&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;mvn clean install -Pqulice --errors&lt;/span&gt; &lt;span class="no"&gt;git remote add heroku git@heroku.com:aintshy.git&lt;/span&gt; &lt;span class="no"&gt;mkdir ~/.ssh&lt;/span&gt; &lt;span class="no"&gt;mv ../id_rsa ../id_rsa.pub ~/.ssh&lt;/span&gt; &lt;span class="no"&gt;chmod -R 600 ~/.ssh/*&lt;/span&gt; &lt;span class="no"&gt;echo -e &amp;quot;Host *\n StrictHostKeyChecking no\n UserKnownHostsFile=/dev/null&amp;quot; &amp;gt; ~/.ssh/config&lt;/span&gt; &lt;span class="no"&gt;git push -f heroku $(git symbolic-ref --short HEAD):master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can compare your file with live Rultor &lt;a href="https://github.com/aintshy/hub/blob/master/.rultor.yml"&gt;configuration of aintshy/hub&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="run-it!"&gt;Run It!&lt;/h2&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Now it&amp;#39;s time to see how it all works. Create a new ticket in the Github issue tracker, and post something like this into it (read more about &lt;a href="http://doc.rultor.com/basics.html"&gt;Rultor commands&lt;/a&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;@rultor release, tag is `0.1`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will get a response in a few seconds. The rest will be done by Rultor.&lt;/p&gt;&lt;p&gt;Enjoy :)&lt;/p&gt;&lt;p&gt;BTW, if something doesn&amp;#39;t work as I&amp;#39;ve explained, don&amp;#39;t hesitate to submit a ticket to the &lt;a href="https://github.com/yegor256/rultor/issues"&gt;Rultor issue tracker&lt;/a&gt;. I will try to help you.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/09/13/deploying-to-heroku.html'&gt;Deploying to Heroku, in One Click&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Sat, 13 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/13/deploying-to-heroku.html</guid> </item> <item><title>Deployment Script vs. Rultor</title><link>http://www.yegor256.com/2014/09/11/deployment-script-vs-rultor.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;When I explain how &lt;a href="http://www.rultor.com"&gt;Rultor&lt;/a&gt; automates deployment/release processes, very often I hear something like:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;But I already have a script that deploys everything automatically.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;This response is very common, so I decided to summarize my three main arguments for automated Rultor deployment/release processes in one article: 1) isolated docker containers, 2) visibility of logs and 3) security of credentials.&lt;/p&gt;&lt;p&gt;Read about them and see what Rultor gives you on top of &lt;strong&gt;your existing&lt;/strong&gt; deployment script(s).&lt;/p&gt;&lt;!--more--&gt;&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/09/charlie-and-chocolate-factory-father.png' style='width:600px;' alt='Charlie and the Chocolate Factory (2005) by Tim Burton'/&gt;&lt;figcaption&gt;Charlie and the Chocolate Factory (2005) by Tim Burton&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Before we start with the arguments, let me emphasize that Rultor is a useful interface to your custom scripts. When you decide to automate deployment with Rultor, you don&amp;#39;t throw away any of your existing scripts. You just teach Rultor how to call them.&lt;/p&gt;&lt;h2 id="isolated-docker-containers"&gt;Isolated Docker Containers&lt;/h2&gt;&lt;p&gt;The first advantage you get once you start calling your deployment scripts from Rultor is the &lt;a href="/2014/07/29/docker-in-rultor.html"&gt;usage of Docker&lt;/a&gt;. I&amp;#39;m sure you know what &lt;a href="http://www.docker.io"&gt;Docker&lt;/a&gt; is, but for those who don&amp;#39;t &amp;mdash; it is a manager of virtual Linux &amp;quot;machines&amp;quot;. It&amp;#39;s a command line script that you call when you need to run some script in a new virtual machine (aka &amp;quot;container&amp;quot;). Docker starts the container almost immediately and runs your script. The beauty of Docker is that every container is a perfectly isolated Linux environment, with its own file system, memory, processes, etc.&lt;/p&gt;&lt;p&gt;When you tell Rultor to run your deployment script, it starts a new Docker container and runs your script there. But what benefit does this give me, you ask?&lt;/p&gt;&lt;p&gt;The main benefit is that the container gets destroyed right after your script is done. This means that you can do all pre-configuration inside the container without any fear of conflict with your main working platform. Let me give an example.&lt;/p&gt;&lt;p&gt;I&amp;#39;m developing on MacBook, where I install and remove packages which I need for development. At the same time, I have a project that, in order to be deployed, requires PHP 5.3, MySQL 5.6, phing, phpunit, phpcs and xdebug. Every MacOS version needs to be configured specifically to get these applications up and running, and it&amp;#39;s a time-consuming job.&lt;/p&gt;&lt;p&gt;I can change laptops, and I can change MacOS versions, but the project stays the same. It still requires the same set of packages in order to run its deployment script successfully. And the project is not in active development any more. I simply don&amp;#39;t need these packages for my day-to-day work, since I&amp;#39;m working with Java more now. But, when I need to make a minor fix to that PHP project and deploy it, I have to install all the required PHP packages and configure them. Only after that can I deploy that minor fix.&lt;/p&gt;&lt;p&gt;It is annoying, to say the least.&lt;/p&gt;&lt;p&gt;Docker gives me the ability to automate all of this together. My &lt;strong&gt;existing&lt;/strong&gt; deployment script will get a preamble, which will install and configure all necessary PHP-related packages in a clean Ubuntu container. This preamble will be executed on every run of my deployment script, &lt;strong&gt;inside&lt;/strong&gt; a Docker container. For example, it may look like this:&lt;/p&gt;&lt;p&gt;My deployment script looked like this before I started to use Rultor:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;1 2 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt; phing &lt;span class="nb"&gt;test&lt;/span&gt; git ftp push --user &lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --passwd &lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --syncroot php/src ftp://ftp.example.com/ &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Just two lines. The first one is a full run of unit tests. The second one is an FTP deployment to the production server. Very simple. But this script will only work if PHP 5.3, MySQL, phing, xdebug, phpcs and phpunit are installed. Again, it&amp;#39;s a lot of work to install and configure them every time I upgrade my MacOS or change a laptop.&lt;/p&gt;&lt;p&gt;Needless to say, that if/when someone joins the project and tries to run my scripts, he/she will have to do this pre-installation work again.&lt;/p&gt;&lt;p&gt;So, here is a new script, which I&amp;#39;m using now. It is being executed inside a new Docker container, every time:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt; 1 2 3 4 5 6 7 8 9 10 11 12 13&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt; &lt;span class="c"&gt;# First, we install all prerequisites&lt;/span&gt; sudo apt-get install -y php5 php5-mysql mysql sudo apt-get install php-pear sudo pear channel-discover pear.phpunit.de sudo pear install phpunit/PHPUnit sudo pear install PHP_CodeSniffer sudo pecl install xdebug sudo pear channel-discover pear.phing.info sudo pear install phing/phing &lt;span class="c"&gt;# And now the same script I had before&lt;/span&gt; phing &lt;span class="nb"&gt;test&lt;/span&gt; git ftp push --user &lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --passwd &lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --syncroot php/src ftp://ftp.example.com/ &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Obviously, running this script on my MacBook (without virtualization) would cause a lot of trouble. Well, I don&amp;#39;t even have &lt;code&gt;apt-get&lt;/code&gt; here :)&lt;/p&gt;&lt;p&gt;Thus, the first benefit that Rultor gives you is an isolation of your deployment script in its own virtual environment. We have this mostly thanks to Docker.&lt;/p&gt;&lt;h2 id="visibility-of-logs"&gt;Visibility of Logs&lt;/h2&gt;&lt;p&gt;Traditionally, we keep deployment scripts in some &lt;code&gt;~/deploy&lt;/code&gt; directory and run them with a magic set of parameters. In a small project, you do this yourself and this directory is on your own laptop. In a bigger project, there is a &amp;quot;deployment&amp;quot; server, that has that magic directory with a set of scripts that can be executed only by a few trusted senior developers. I&amp;#39;ve seen this setup many times.&lt;/p&gt;&lt;p&gt;The biggest issue here is traceability. It&amp;#39;s almost impossible to find out who deployed what and why some particular deployment failed. The senior deployment gurus simply SSH to the server and run those magic scripts with magic parameters. Logs are usually lost and problem tracking is very difficult or impossible.&lt;/p&gt;&lt;p&gt;Rultor offers something different. With Rultor, there is no SSH access to deployment scripts any more. All scripts stay in the &lt;code&gt;.rultor.yml&lt;/code&gt; configuration file, and you start them by posting messages in your issue tracking system (for example Github, JIRA or Trac). Rultor runs the script and publishes its full log right to your ticket. The log stays with your project forever. You can always get back to the ticket you were working with and check why deployment failed and what instructions were actually executed.&lt;/p&gt;&lt;p&gt;For example, check out this Github issue, where I was deploying a new version of Rultor itself, and failed a few times: &lt;a href="https://github.com/yegor256/rultor/issues/563"&gt;yegor256/rultor#563&lt;/a&gt;. All my failed attempts are protocolled. I can always get back to them and investigate. For a big project this information is vital.&lt;/p&gt;&lt;p&gt;Thus, the second benefit of Rultor versus a standalone deployment script is visibility of every single operation.&lt;/p&gt;&lt;h2 id="security-of-credentials"&gt;Security of Credentials&lt;/h2&gt;&lt;p&gt;When you have a custom script sitting in your laptop or in that secret team deployment server, your production credentials stay close to it. There is just no other way. If your software works with a database, it has to know login credentials (user name, password, DB name, port number, etc.). Well, in the worst case, some people just hard code that information right into the source code. We aren&amp;#39;t even going to discuss this case, that&amp;#39;s how bad it is.&lt;/p&gt;&lt;p&gt;But let&amp;#39;s say you separate your DB credentials from the source code. You will have something like a &lt;code&gt;db.properties&lt;/code&gt; or &lt;code&gt;db.ini&lt;/code&gt; file, which will be attached to the application right before deployment. You can also keep that file directly in the production server, which is even better, but not always possible, especially with PaaS deployments, for example.&lt;/p&gt;&lt;p&gt;A similar problem exists with deployments of artifacts to repositories. Say, you&amp;#39;re regularly deploying to RubyGems.org. Your &lt;code&gt;~/.gem/credentials&lt;/code&gt; will contain your secret API key.&lt;/p&gt;&lt;p&gt;So, very often, your deployment scripts are accompanied by some files with sensitive and secure information. And these files have this information in a plain, open format. No encryption, no protection. Just user names, passwords, codes and tokens in plain text.&lt;/p&gt;&lt;p&gt;Why is this bad? Well, for a single developer with a single laptop this doesn&amp;#39;t sound like a problem. Although, I don&amp;#39;t like the idea of losing a laptop somewhere in an airport with all credentials open and ready to be used. You may argue that there are disc protection tools, like FileVault for MacOS or BestCrypt for Windows. Yes, maybe.&lt;/p&gt;&lt;p&gt;But let&amp;#39;s see what happens when we have a team of developers, working together and sharing those deployment scripts &lt;strong&gt;and&lt;/strong&gt; files with credentials. Once you give access to your deployment scripts to a new member of the team, you have to share all that sensitive data. There is just no way around it. In order to use the scripts he/she has to be able to open files with credentials.&lt;/p&gt;&lt;p&gt;This is a problem, if you care about the security of your data.&lt;/p&gt;&lt;p&gt;Rultor solves this problem by offering an on-the-fly GPG decryption of your sensitive data, right before they are used by your deployment scripts. In the &lt;code&gt;.rultor.yml&lt;/code&gt; configuration file you just say:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="l-Scalar-Plain"&gt;decrypt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;db.ini&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repo/db.ini.asc&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;deploy&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;ftp put db.ini production&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, you encrypt your &lt;code&gt;db.ini&lt;/code&gt; using a Rultor GPG key, and fearlessly commit &lt;code&gt;db.ini.asc&lt;/code&gt; to the repository. Nobody will be able to open and read that file, except the Rultor server itself, right before running the deployment script.&lt;/p&gt;&lt;p&gt;Thus, the third benefit of Rultor versus a standalone deployment script is proper security of sensitive data.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/09/11/deployment-script-vs-rultor.html'&gt;Deployment Script vs. Rultor&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Thu, 11 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/11/deployment-script-vs-rultor.html</guid> </item> <item><title>Anti-Patterns in OOP</title><link>http://www.yegor256.com/2014/09/10/anti-patterns-in-oop.html</link> <description>&lt;p&gt;Here they come:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;a href="/2014/05/13/why-null-is-bad.html"&gt;NULL References&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href="/2014/05/05/oop-alternative-to-utility-classes.html"&gt;Utility Classes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href="/2014/06/09/objects-should-be-immutable.html"&gt;Mutable Objects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href="/2014/09/16/getters-and-setters-are-evil.html"&gt;Getters and Setters&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Singletons&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Controllers, Managers, Validators&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Public Static Methods&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Avoid them at all cost.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/09/10/anti-patterns-in-oop.html'&gt;Anti-Patterns in OOP&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/10/anti-patterns-in-oop.html</guid> </item> <item><title>RESTful API and a Web Site in the Same URL</title><link>http://www.yegor256.com/2014/09/09/restful-web-sites.html</link> <description>&lt;p&gt;Look at Github RESTful API, for example. To get information about a repository you should make a GET request to &lt;a href="https://api.github.com/repos/yegor256/rultor"&gt;api.github.com/repos/yegor256/rultor&lt;/a&gt;. In response, you will get a JSON document with all the details of the &lt;code&gt;yegor256/rultor&lt;/code&gt; repository. Try it, the URL doesn&amp;#39;t require any authentication.&lt;/p&gt;&lt;p&gt;To open the same repository in a nice HTML+CSS page, you should use a different URL: &lt;a href="https://github.com/yegor256/rultor"&gt;github.com/yegor256/rultor&lt;/a&gt;. The URL is different, the server-side is definitely different, but the nature of the data is exactly the same. The only thing that changes is a representation layer.&lt;/p&gt;&lt;p&gt;In the first case, we get JSON; in the second &amp;mdash; HTML.&lt;/p&gt;&lt;p&gt;How about combining them? How about using the same URL and the same server-side processing mechanism for both of them? How about shifting the whole rendering task to the client-side (the browser) and letting the server work solely with the data?&lt;/p&gt;&lt;!--more--&gt;&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/09/good_bad_weird.png' style='width:600px;' alt='The Good, the Bad, The Wierd (2008) by Kim Jee-woon'/&gt;&lt;figcaption&gt;The Good, the Bad, The Wierd (2008) by Kim Jee-woon&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;XSLT is the technology that can help us do this. In &lt;a href="/2014/06/25/xml-and-xslt-in-browser.html"&gt;&amp;quot;XML+XSLT in a Browser&amp;quot;&lt;/a&gt; I explained briefly how it works in a browser. In a nutshell, the server returns an XML with some data and a link to the XSL stylesheet. The stylesheet, being executed in a browser, converts XML to HTML. XSL language is as powerful as any other rendering engine, like JSP, JSF, Tiles, or what have you. Actually, it is much more powerful.&lt;/p&gt;&lt;p&gt;Using this approach we literally remove the entire rendering layer (&amp;quot;View&amp;quot; in the MVC paradigm) from the server and move it to the browser.&lt;/p&gt;&lt;p&gt;If we can make it possible, the web server will exponse just a RESTful API, and every response page will have an XSL stylesheet attached. What do we gain? We&amp;#39;ll discuss later, at the end of the post. Now, let&amp;#39;s see what problems we will face:&lt;/p&gt;&lt;ol&gt; &lt;li&gt;&lt;p&gt;JSON doesn&amp;#39;t have a rendering layer. There is no such thing as XSLT for JSON. So, we will have to forget about JSON and stay with XML only. For me, this sounds perfectly all right. Others don&amp;#39;t like XML and prefer to work with JSON only. Never understood them :)&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;XSLT 2.0 is not supported by all browsers. Even XSLT 1.0 is only supported by some of them. For example, Internet Explorer 8 doesn&amp;#39;t support XSLT at all.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Browsers support only &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; HTTP methods, while traditional RESTful APIs exploit also, at least, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;The first problem is not really a problem. It&amp;#39;s just a matter of taste (and level of education). The last two problems are much more serious. Let&amp;#39;s discuss them.&lt;/p&gt;&lt;h2 id="xsl-transformation-on-the-server"&gt;XSL Transformation on the Server&lt;/h2&gt;&lt;p&gt;XSLT is not supported by some browsers. How do we solve this?&lt;/p&gt;&lt;p&gt;I think that the best approach is to parse the &lt;code&gt;User-Agent&lt;/code&gt; HTTP header in every request and make a guess, whether this particular version of the browser supports XSLT or not. It&amp;#39;s not so difficult to do, since this compatibility information is public.&lt;/p&gt;&lt;p&gt;If the browser doesn&amp;#39;t support XSLT, we can do the transformation on the server side. We already have the XML with data, generated by the server, and we already have the XSL attached to it. All we need to do is to apply the latter to the former and obtain an HTML page. Then, we return the HTML to the browser.&lt;/p&gt;&lt;p&gt;Besides that, we can also pay attention to the &lt;code&gt;Accept&lt;/code&gt; header. If it is set to &lt;code&gt;application/xml&lt;/code&gt; or &lt;code&gt;text/xml&lt;/code&gt;, we return XML, no matter what &lt;code&gt;User-Agent&lt;/code&gt; is saying. This means, basically, that some API client is talking to us, not a browser. And this client is not interested in HTML, but in pure data in XML format.&lt;/p&gt;&lt;h2 id="post-instead-of-put"&gt;POST Instead of PUT&lt;/h2&gt;&lt;p&gt;There is no workaround for this. Browsers don&amp;#39;t know anything about &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt;. So, we should also forget them in our RESTful APIs. We should design our API using only two methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;. Is this even possible? Yes. Why not? It won&amp;#39;t look as fancy as with all six methods (some APIs also use &lt;code&gt;OPTIONS&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt;), but it will work.&lt;/p&gt;&lt;h2 id="what-do-we-gain?"&gt;What Do We Gain?&lt;/h2&gt;&lt;p&gt;OK, here is the question &amp;mdash; why do we need this? What&amp;#39;s wrong with the way most people work now? Why can&amp;#39;t we make a web site separate from the API? What benefits do we get if we combine them?&lt;/p&gt;&lt;p&gt;I&amp;#39;ve been combining them in all web applications I&amp;#39;ve worked with since 2011. And the biggest advantage I&amp;#39;m experiencing is avoiding code duplication.&lt;/p&gt;&lt;p&gt;It is obvious that in the server we don&amp;#39;t duplicate controllers (in the case of MVC). We have one layer of controllers, and they control both the API and the web site (since they are one thing now).&lt;/p&gt;&lt;p&gt;Avoiding code duplication is a very important achievement. Moreover, I believe that it is the most important target for any software project.&lt;/p&gt;&lt;p&gt;These small web apps work exactly as explained above: &lt;a href="http://www.s3auth.com"&gt;s3auth.com&lt;/a&gt;, &lt;a href="http://www.stateful.co"&gt;stateful.co&lt;/a&gt;, &lt;a href="http://www.bibrarian.com"&gt;bibrarian.com&lt;/a&gt;. They are all open source, and you can see their source code in Github.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/09/09/restful-web-sites.html'&gt;RESTful API and a Web Site in the Same URL&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Tue, 09 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/09/restful-web-sites.html</guid> </item> <item><title>Simple Java SSH Client</title><link>http://www.yegor256.com/2014/09/02/java-ssh-client.html</link> <description>&lt;p&gt;An execution of a shell command via SSH can be done in Java, in just a few lines, using &lt;a href="http://ssh.jcabi.com"&gt;jcabi-ssh&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Plain&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SSH&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ssh.example.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;yegor&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;echo &amp;#39;Hello, world!&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="http://ssh.jcabi.com"&gt;jcabi-ssh&lt;/a&gt; is a convenient wrapper of &lt;a href="http://www.jcraft.com/jsch/"&gt;JSch&lt;/a&gt;, a well-known pure Java implementation of SSH2.&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;Here is a more complex scenario, where I upload a file via SSH and then read back its grepped content:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;Shell shell = new SSH( &amp;quot;ssh.example.com&amp;quot;, 22, &amp;quot;yegor&amp;quot;, &amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot; ); File file = new File(&amp;quot;/tmp/data.txt&amp;quot;); new Shell.Safe(shell).exec( &amp;quot;cat &amp;gt; d.txt &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; grep &amp;#39;some text&amp;#39; d.txt&amp;quot;, new FileInputStream(file), Logger.stream(Level.INFO, this), Logger.stream(Level.WARNING, this) );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Class &lt;code&gt;SSH&lt;/code&gt;, which implements interface &lt;code&gt;Shell&lt;/code&gt;, has only one method, &lt;code&gt;exec&lt;/code&gt;. This method accepts four arguments:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;interface Shell { int exec( String cmd, InputStream stdin, OutputStream stdout, OutputStream stderr ); }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think it&amp;#39;s obvious what these arguments are about.&lt;/p&gt;&lt;p&gt;There are also a few convenient decorators that make it easier to operate with simple commands.&lt;/p&gt;&lt;h2 id="shell.safe"&gt;Shell.Safe&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Shell.Safe&lt;/code&gt; decorates an instance of &lt;code&gt;Shell&lt;/code&gt; and throws an exception if the &lt;code&gt;exec&lt;/code&gt; exit code is not equal to zero. This may be very useful when you want to make sure that your command executed successfully, but don&amp;#39;t want to duplicate &lt;code&gt;if/throw&lt;/code&gt; in many places of your code.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;Shell ssh = new Shell.Safe( new SSH( &amp;quot;ssh.example.com&amp;quot;, 22, &amp;quot;yegor&amp;quot;, &amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot; ) );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="shell.verbose"&gt;Shell.Verbose&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Shell.Verbose&lt;/code&gt; decorates an instance of &lt;code&gt;Shell&lt;/code&gt; and copies &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; to the slf4j logging facility (using &lt;a href="http://log.jcabi.com"&gt;jcabi-log&lt;/a&gt;). Of course, you can combine decorators, for example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;Shell ssh = new Shell.Verbose( new Shell.Safe( new SSH( &amp;quot;ssh.example.com&amp;quot;, 22, &amp;quot;yegor&amp;quot;, &amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot; ) ) );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="shell.plain"&gt;Shell.Plain&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Shell.Plain&lt;/code&gt; is a wrapper of &lt;code&gt;Shell&lt;/code&gt; that introduces a new &lt;code&gt;exec&lt;/code&gt; method with only one argument, a command to execute. It also doesn&amp;#39;t return an exit code, but &lt;code&gt;stdout&lt;/code&gt; instead. This should be very convenient when you want to execute a simple command and just get its output (I&amp;#39;m combining it with &lt;code&gt;Shell.Safe&lt;/code&gt; for safety):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;String login = new Shell.Plain(new Shell.Safe(ssh)).exec(&amp;quot;whoami&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="download"&gt;Download&lt;/h2&gt;&lt;p&gt;You need a single dependency &lt;a href="http://repo1.maven.org/maven2/com/jcabi/jcabi-ssh"&gt;&lt;code&gt;jcabi-ssh.jar&lt;/code&gt;&lt;/a&gt; in your Maven project (get its latest version in &lt;a href="http://search.maven.org/"&gt;Maven Central&lt;/a&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.jcabi&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jcabi-ssh&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The project is in &lt;a href="https://github.com/jcabi/jcabi-ssh"&gt;Github&lt;/a&gt;. If you have any problems, just submit an issue. I&amp;#39;ll try to help.&lt;/p&gt; &lt;p&gt;Read the full article at: &lt;a href='http://www.yegor256.com/2014/09/02/java-ssh-client.html'&gt;Simple Java SSH Client&lt;/a&gt;&lt;/p&gt;</description> <pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/02/java-ssh-client.html</guid> </item> <generator>Jekyll</generator> </channel> </rss>