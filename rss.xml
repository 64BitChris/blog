<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014-2015</copyright>
    <lastBuildDate>Wed, 16 Dec 2015 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>Investors Are Too Scared</title>
      <link>http://www.yegor256.com/2015/12/16/investors-are-too-scared.html</link>
      <description>&lt;p&gt;We&amp;#39;re starting a new thing, a seed fund. Its name is
&lt;a href=&quot;http://www.seedramp.com&quot;&gt;SeedRamp&lt;/a&gt;. The formula is simple: You schedule
an interview, we have a one-hour conversation, you present me your
startup idea, and we either give you cash right away or explain why we don&amp;#39;t
feel like it. We don&amp;#39;t do any due diligence or background checks. The decision
is made right there. It&amp;#39;s something similar to angel investment, but the
amount is smaller &amp;mdash; less than &lt;strong&gt;$20K&lt;/strong&gt;, and decisions are faster.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/12/the-game.jpg' style='width:600px;' alt='The Game (1997) by David Fincher'/&gt;&lt;figcaption&gt;The Game (1997) by David Fincher&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are basically three problems we&amp;#39;re trying to solve with this
new idea: 1) Investors are &lt;strong&gt;cowards&lt;/strong&gt;, 2) investors are &lt;strong&gt;cowards&lt;/strong&gt;, and
3) investors are &lt;strong&gt;cowards&lt;/strong&gt;. Here is why.&lt;/p&gt;

&lt;h2 id=&quot;they-are-afraid-of-strangers&quot;&gt;They Are Afraid of Strangers&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s no secret that Silicon Valley is very &amp;quot;&lt;strong&gt;corrupted&lt;/strong&gt;&amp;quot; territory,
where in order to get access to money people, you must know some other
money people or someone who knows someone, etc. You must be &lt;strong&gt;well-connected&lt;/strong&gt;
in order to be successful. You simply can&amp;#39;t raise money just by having an
awesome idea or even a great implementation. You need connections.&lt;/p&gt;

&lt;p&gt;I think that&amp;#39;s disgusting.&lt;/p&gt;

&lt;p&gt;I am, in general, a big fan of &lt;strong&gt;meritocracy&lt;/strong&gt;, where those who are smarter
or stronger win the most. This is the principle we,
at &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, apply to software developers who come to us.
I explained it last year in this rather popular and provocative post:
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;How Much Do You Cost?&lt;/a&gt;.
We simply don&amp;#39;t care how many years of experience you have,
how much time you&amp;#39;ve spent with your previous employer,
or how many programming languages you know. We only care about your
objective achievements, which are validated by the market. And, of course,
we don&amp;#39;t pay attention to any references or any previous relationships.&lt;/p&gt;

&lt;p&gt;I strongly believe this is how it should be.&lt;/p&gt;

&lt;p&gt;Unfortunately, this is not how it is in Silicon Valley when a young
startup is looking for $100K to $150K of seed money. Angel investors are difficult
to reach. They are afraid of you, if you come out of nowhere. They only want
to talk to someone they can &lt;strong&gt;complain&lt;/strong&gt; about to their friends. This
basically encourages startup founders to spend their time on friend-making
activities instead of business-making ones. Very often, good teams simply
&lt;strong&gt;miss&lt;/strong&gt; their chance.&lt;/p&gt;

&lt;h2 id=&quot;they-are-afraid-of-telling-the-truth&quot;&gt;They Are Afraid of Telling the Truth&lt;/h2&gt;

&lt;p&gt;Have you ever talked to a venture capital firm? To angel investors? To
any investors, basically? If you have, you&amp;#39;d know they all
are very &lt;strong&gt;polite&lt;/strong&gt;, nodding their heads and smiling while listening
to your pitch. They usually are &amp;quot;very excited&amp;quot; to meet you and
&amp;quot;learn more&amp;quot; about your business.&lt;/p&gt;

&lt;p&gt;In the end, they don&amp;#39;t give you the money.&lt;/p&gt;

&lt;p&gt;Why? Who knows. They won&amp;#39;t tell you. They are cowards, and they are afraid
of telling you that your idea sucks and your business plan is totally wrong.
They are afraid of being &lt;strong&gt;honest&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is an almost identical situation with recruitment. You send your resume
to Facebook, they interview you, and you spend a few hours with them, answering
their questions. In the end, they email you, saying &amp;quot;We decided not to proceed
any further; good luck in your job search&amp;quot;. They are afraid of telling you
the &lt;strong&gt;truth&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And it&amp;#39;s disgusting.&lt;/p&gt;

&lt;p&gt;In our recruitment process at &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, we do
exactly the opposite. You apply to us, we ask one of our programmers to
interview you, and then, when finished, we make a decision about whether you&amp;#39;re
a good candidate or not. We discuss your profile right in front of you. We
don&amp;#39;t have any discussions without you. We make our decision fully disclosing
our reasoning to you. This is how it should be everywhere, I believe.
Especially with regard to investments.&lt;/p&gt;

&lt;h2 id=&quot;they-are-afraid-of-losses&quot;&gt;They are Afraid of Losses&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s a very infamous problem, mentioned everywhere there&amp;#39;s a list
of &amp;quot;top 10 reasons for startup failures&amp;quot;. Investors simply turn you
into an &lt;strong&gt;employee&lt;/strong&gt;. Before you get their money, you&amp;#39;re on your own. You make
your own decisions, you manage your business, you&amp;#39;re in charge.&lt;/p&gt;

&lt;p&gt;Then, you get the money. It doesn&amp;#39;t mean you&amp;#39;re &lt;strong&gt;rich&lt;/strong&gt;. Not at all. It means
that, from now on, you&amp;#39;re their employee. They decide what your salary is.
They decide whether you can rent this office or not. They decide what
car you can afford.&lt;/p&gt;

&lt;p&gt;Keep in mind that your salary is lower than your friends are getting,
working somewhere on Facebook. Your salary is low, and you can&amp;#39;t change it.
All your expenses have to be approved. You&amp;#39;re simply under the full control
of your &lt;strong&gt;board&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Why is that? Because they are afraid of you being &lt;strong&gt;free&lt;/strong&gt;. They are afraid
of losing their money. That&amp;#39;s why they are doing everything they can
to keep a close eye on you.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s disgusting and very counter-productive.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s similar to trying to win in poker by always making small bets. In most
cases, they lose their money, you lose your time, and the market loses the opportunity
to get a new product.&lt;/p&gt;

&lt;h2 id=&quot;we-are-not-cowards&quot;&gt;We Are Not Cowards&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.seedramp.com'&gt;&lt;img src='http://www.seedramp.com/logo.jpg' style='width:128px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.seedramp.com&quot;&gt;SeedRamp&lt;/a&gt; is going to solve all of these three problems.&lt;/p&gt;

&lt;p&gt;First of all, we completely remove the necessity to have any connections
in order to reach us. You need money? Just &lt;strong&gt;schedule&lt;/strong&gt; an appointment online.
We don&amp;#39;t care who you are, where you&amp;#39;re coming from, or who you know. We
give you one hour of our time, and if we reject your idea, you can apply again in
a month. Thus, any young startup without any friends or connections is
&lt;strong&gt;welcome&lt;/strong&gt;. Just bring your strategy, your existing results, and your passion, and
we&amp;#39;ll talk.&lt;/p&gt;

&lt;p&gt;Second, we don&amp;#39;t say, &amp;quot;We will call you back&amp;quot;. We give you our reasons right
away, and we always tell the truth. Moreover, we record our interview and
publish it on &lt;strong&gt;YouTube&lt;/strong&gt;. Yes, that&amp;#39;s not a joke; we will publish all interviews
online, and you can see how we talk about other startups. We are not afraid of
telling the truth; it&amp;#39;s part of our marketing strategy.&lt;/p&gt;

&lt;p&gt;Third, we don&amp;#39;t sit on your board after the investment is made. We simply
give you a check, and you can fly to Vegas the next day and spend all of that
money there. We don&amp;#39;t care. When our decision is made, we don&amp;#39;t tell you
what to do with the money. If we gave you the money, we believed in you
and your judgment. If you think that the best use of this money would
be a new &lt;strong&gt;Kawasaki&lt;/strong&gt;, do it.&lt;/p&gt;

&lt;h2 id=&quot;instant-micro-investments&quot;&gt;Instant Micro Investments&lt;/h2&gt;

&lt;p&gt;To make it all happen, we have a few principles and limitations.&lt;/p&gt;

&lt;p&gt;First, we expect you to ask for enough cash for one calendar month. You simply
have to explain to us how much you need for one month and how you&amp;#39;re planning
to spend this money, approximately. One calendar month. We expect you
to come back to us in a month, demonstrate your progress, and ask for one
more month. Of course, we may say no.&lt;/p&gt;

&lt;p&gt;Second, the maximum we can give you is $20,000. Maybe, in the future,
we will raise this limit. For now, it is $20K.&lt;/p&gt;

&lt;p&gt;And one last thing. We will ask you to give us some stock in your
startup. You decide how much, but it has to be enough to make us
interested. It all depends on your situation. A few percent, I&amp;#39;d guess.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re planning to host our first interviews in the middle of January 2016.
You can schedule them right here:&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/12/16/investors-are-too-scared.html</guid>
      <dc:date>2015-12-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Temporal Coupling Between Method Calls</title>
      <link>http://www.yegor256.com/2015/12/08/temporal-coupling-between-method-calls.html</link>
      <description>&lt;p&gt;Temporal coupling happens between sequential method calls
when they must stay in a particular order. This is inevitable
in imperative programming, but we can reduce the negative effect
of it just by turning those static procedures into functions. Take
a look at this example.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/12/blueberry.jpg' style='width:600px;' alt='Blueberry (2004) by Jan Kounen'/&gt;&lt;figcaption&gt;Blueberry (2004) by Jan Kounen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What do you think about that? I believe it&amp;#39;s clear what &lt;code&gt;names()&lt;/code&gt; is doing &amp;mdash;
creating a list of names. In order to avoid duplication, there is a supplementary
&lt;em&gt;procedure&lt;/em&gt;, &lt;code&gt;append()&lt;/code&gt;, which converts an item to lowercase and adds it to the
list.&lt;/p&gt;

&lt;p&gt;This is poor design.&lt;/p&gt;

&lt;p&gt;It is a &lt;strong&gt;procedural&lt;/strong&gt; design, and there is &lt;strong&gt;temporal coupling&lt;/strong&gt; between
lines in method &lt;code&gt;names()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let me first show you a better (though not the best!) design,
then I will try to explain its benefits:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An ideal design for method &lt;code&gt;with()&lt;/code&gt; would create a new instance of
&lt;code&gt;List&lt;/code&gt;, populate it through &lt;code&gt;addAll(list)&lt;/code&gt;, then &lt;code&gt;add(item)&lt;/code&gt; to it, and
finally return. That would be perfectly
&lt;a href=&quot;http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutable&lt;/a&gt;,
but slow.&lt;/p&gt;

&lt;p&gt;So, what is wrong with this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It looks perfectly clean, doesn&amp;#39;t it? Instantiate a list, append two items to it, and
return it. Yes, it is clean &amp;mdash; for now. Because we remember what &lt;code&gt;append()&lt;/code&gt; is
doing. In a few months, we&amp;#39;ll get back to this code, and it will look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Is it so clear now that &lt;code&gt;append()&lt;/code&gt; is actually adding &lt;code&gt;&amp;quot;Jeff&amp;quot;&lt;/code&gt; to &lt;code&gt;list&lt;/code&gt;? What
will happen if I remove that line? Will it affect the result being
returned in the last line? I don&amp;#39;t know. I need to &lt;strong&gt;check&lt;/strong&gt; the body of method
&lt;code&gt;append()&lt;/code&gt; to make sure.&lt;/p&gt;

&lt;p&gt;Also, how about returning &lt;code&gt;list&lt;/code&gt; first and calling &lt;code&gt;append()&lt;/code&gt; afterwards? This
is what possible &amp;quot;refactoring&amp;quot; may do to our code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* something */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First of all, we return &lt;code&gt;list&lt;/code&gt; too early, when it is not ready. But did anyone
tell me that these two calls to &lt;code&gt;append()&lt;/code&gt; must happen before &lt;code&gt;return list&lt;/code&gt;?
Second, we changed the order of &lt;code&gt;append()&lt;/code&gt; calls. Again, did anyone tell me
that it&amp;#39;s important to call them in that particular order?&lt;/p&gt;

&lt;p&gt;Nobody. Nowhere. This is called &lt;strong&gt;temporal coupling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Our lines are &lt;strong&gt;coupled&lt;/strong&gt; together. They must stay in this particular order, but the
knowledge about that order is hidden. It&amp;#39;s easy to destroy
the order, and our compiler won&amp;#39;t be able to catch us.&lt;/p&gt;

&lt;p&gt;To the contrary, this design doesn&amp;#39;t have any &amp;quot;order&amp;quot;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It just &lt;strong&gt;returns&lt;/strong&gt; a list, which is constructed by a few calls to the &lt;code&gt;with()&lt;/code&gt;
method. It is a single line instead of four.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/2015/08/18/multiple-return-statements-in-oop.html&quot;&gt;discussed before&lt;/a&gt;,
an ideal method in OOP must have just a single statement, and this statement is
&lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The same is true about validation. For example, this code is bad:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkIfListStillHasSpace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this one is much better:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withEnoughSpace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;And, of course, an ideal approach would be to use
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;composable decorators&lt;/a&gt;
instead of these ugly static methods. But if it&amp;#39;s not possible for
some reason, just don&amp;#39;t make those static methods look like procedures.
Make sure they always return results, which become arguments to
further calls.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/12/08/temporal-coupling-between-method-calls.html</guid>
      <dc:date>2015-12-08T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Throwing an Exception Without Proper Context Is a Bad Habit</title>
      <link>http://www.yegor256.com/2015/12/01/rethrow-exceptions.html</link>
      <description>&lt;p&gt;I keep repeating the same mistake again and again. So it&amp;#39;s time to
stop and make a rule to prevent this from happening anymore. The mistake
is not fatal, but it&amp;#39;s very annoying. When I look at production logs, I often see
something like &lt;code&gt;&amp;quot;File doesn&amp;#39;t exist&amp;quot;&lt;/code&gt;, and I ask myself:
What file? Where is it supposed to exist? What did the server try to do with it?
What was going on a second before it crashed?
There is no answer in the log, and it&amp;#39;s totally my fault.
I either 1) don&amp;#39;t re-throw or 2) re-throw without providing context.
Both are wrong.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/12/four-rooms.jpg' style='width:600px;' alt='Four Rooms (1995) by Allison Anders et al.'/&gt;&lt;figcaption&gt;Four Rooms (1995) by Allison Anders et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This is how the code may look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;File doesn&amp;#39;t exist&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It may also look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Both examples demonstrate an inadequate style of handling situations that
involve exceptions and reporting them. What&amp;#39;s wrong here? The exception messages
are not thorough enough. They simply don&amp;#39;t contain any information
from the place where they originated from.&lt;/p&gt;

&lt;p&gt;This is how they should look instead:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;User profile file %s doesn&amp;#39;t exist&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the second example should look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;Can&amp;#39;t delete user profile data file %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See the difference? This may look like redundant code, but it&amp;#39;s not.
Of course, when I&amp;#39;m writing all this, I don&amp;#39;t really care about
logs and exceptions. I&amp;#39;m not really expecting this file
to be absent.&lt;/p&gt;

&lt;p&gt;But I should.&lt;/p&gt;

&lt;p&gt;There should be a rule: Every time we throw or re-throw, an
exception message must describe the problem with as much
detail as possible.&lt;/p&gt;

&lt;p&gt;Of course, we can&amp;#39;t forget about security and risk putting any
sensitive information into the exception message, like passwords,
credit card numbers, etc. Besides that, as much as possible
must be exposed to the exception catcher at a higher level.&lt;/p&gt;

&lt;p&gt;Throwing an exception is literally an escalation of a problem
to a higher level of management. Imagine that my boss is asking
me to install a new server. I come back to him in a few hours
and say, &amp;quot;I failed; sorry.&amp;quot; That would sound strange. He
would ask for more details. Why did I fail? What exactly went wrong?
Is it possible to do it differently? Etc.&lt;/p&gt;

&lt;p&gt;Such code is literally a sign of disrespect to the client:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;File doesn&amp;#39;t exist&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have to be more verbose and give more details.&lt;/p&gt;

&lt;p&gt;And I&amp;#39;m not alone in this mistake. I see it everywhere, and it really
makes debugging difficult, especially in production, where it&amp;#39;s
almost impossible to reproduce the problem right away.&lt;/p&gt;

&lt;p&gt;Thus, please be more verbose in your exception messages. I will do the same
in my code :)&lt;/p&gt;

&lt;p&gt;And one more thing before you go. In most OOP languages, exceptions
are unchecked, which means that catching them is not a mandatory
operation, &lt;a href=&quot;/2015/07/28/checked-vs-unchecked-exceptions.html&quot;&gt;unfortunately&lt;/a&gt;.
Nevertheless, I recommend you catch, add context, and
re-throw them all, &lt;strong&gt;always&lt;/strong&gt;. This may seem like pure noise, but it&amp;#39;s not!
Just make your methods smaller and ensure all exceptions
sent out of them have enough information about their origins.
You will do yourself and everybody else a big favor.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 01 Dec 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/12/01/rethrow-exceptions.html</guid>
      <dc:date>2015-12-01T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Imprisonment for Irresponsible Coding!</title>
      <link>http://www.yegor256.com/2015/11/24/imprisonment-for-irresponsible-coding.html</link>
      <description>&lt;p&gt;If I drive too fast and I get caught, I may get a ticket. If I drive
under the influence and get caught, I may go to jail. If I turn my
radio up too loud in the middle of the night and my neighbors call the police,
I may get into trouble if I don&amp;#39;t stop it. The law basically protects
us from causing trouble with each other. Why don&amp;#39;t we have a law
against &lt;strong&gt;irresponsible coding&lt;/strong&gt;?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/11/thursday.jpg' style='width:600px;' alt='Thursday (1998) by Skip Woods'/&gt;&lt;figcaption&gt;Thursday (1998) by Skip Woods&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Software is part of my life. It actually &lt;strong&gt;is&lt;/strong&gt; my &lt;strong&gt;life&lt;/strong&gt;, not just part of it. I stare
at this MacBook for much more time every day than I drive, talk, or listen
to the radio.&lt;/p&gt;

&lt;p&gt;Code is the &lt;strong&gt;territory&lt;/strong&gt; where I
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;interfere&lt;/a&gt;
with others, and this is where
we may bother each other. Irresponsible coding is precisely how one
of us can really disturb the other. So why don&amp;#39;t the &lt;strong&gt;police&lt;/strong&gt; protect
me against, say, authors of Apache Hadoop?&lt;/p&gt;

&lt;p&gt;They created something that turns part of my life into a nightmare &amp;mdash; much
faster and much more severely than drunk drivers. So, where is
the police? Why aren&amp;#39;t they protecting me, for my tax dollars? Why
aren&amp;#39;t those Java guys in &lt;strong&gt;jail&lt;/strong&gt; yet? :)&lt;/p&gt;

&lt;p&gt;We need a law against irresponsible coding!&lt;/p&gt;

&lt;p&gt;How about two months of imprisonment for a
&lt;a href=&quot;http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons&quot;&gt;Singleton&lt;/a&gt;?&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 24 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/11/24/imprisonment-for-irresponsible-coding.html</guid>
      <dc:date>2015-11-24T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Ringelmann Effect vs. Agile</title>
      <link>http://www.yegor256.com/2015/11/21/ringelmann-effect-vs-agile.html</link>
      <description>&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Ringelmann_effect&quot;&gt;Ringelmann Effect&lt;/a&gt;
(a.k.a. &lt;a href=&quot;https://en.wikipedia.org/wiki/Social_loafing&quot;&gt;social loafing&lt;/a&gt;)
is basically about people experiencing &lt;strong&gt;decreasing&lt;/strong&gt; productivity
when working in groups. We&amp;#39;re basically more productive when
we work individually to achieve personal goals rather than being
teamed up. That was discovered by Prof. &lt;a href=&quot;https://en.wikipedia.org/wiki/Max_Ringelmann&quot;&gt;Max Ringelmann&lt;/a&gt; a hundred
years ago in 1913. Today, during my workshop in Berlin at
&lt;a href=&quot;http://distributed-agile-teams.org/workshops/&quot;&gt;DATFlock 2015&lt;/a&gt;, we tried
to reproduce that experiment. It seems the French professor was right.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class='badge'&gt;&lt;a href='https://en.wikipedia.org/wiki/Max_Ringelmann'&gt;&lt;img src='https://www.socialpsychology.org/images/socialfigures/ringelmann.jpg' style='width:72px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Here is what we did. We created two groups with four people in each of them,
all non-native English speakers. Then, both groups received the same
task &amp;mdash; to create as many words as possible using the letters in a single given word.
It&amp;#39;s a pretty simple task that just requires some time and creativity.&lt;/p&gt;

&lt;p&gt;The first group worked as a team. They had just one piece of paper
and one pen to write down the words they found. We called them a
&lt;strong&gt;co-located&lt;/strong&gt; team.&lt;/p&gt;

&lt;p&gt;The second group of four people worked in a &lt;strong&gt;distributed&lt;/strong&gt; mode &amp;mdash;
they had four pieces of paper and four pens. They didn&amp;#39;t communicate with
each other and just created words. They knew that the best performer
would receive a prize (a bar of organic chocolate).&lt;/p&gt;

&lt;p&gt;I promised a prize to the co-located team too. A very similar chocolate bar.&lt;/p&gt;

&lt;p&gt;We gave them both just 5 minutes.&lt;/p&gt;

&lt;p&gt;Our result was this: &lt;strong&gt;38 words&lt;/strong&gt; found by a co-located team and &lt;strong&gt;41 words&lt;/strong&gt;
found by a distributed team. Of course, we removed duplicates and non-English
words.&lt;/p&gt;

&lt;p&gt;The distributed team was &lt;strong&gt;8 percent&lt;/strong&gt; more productive than the co-located one.&lt;/p&gt;

&lt;p&gt;Of course, this may not be a clear experiment, and we can&amp;#39;t use these numbers
to really prove anything, but it was interesting to see how groups work and what
actually motivates us to achieve results. We had an hour-long discussion afterward
in an attempt to find out what each group member felt while working in a group
or individually.&lt;/p&gt;

&lt;p&gt;You can try to repeat this (or a similar experiment) in your team and check
the results. Post them below in the comments; it would be interesting to see whether
it does or doesn&amp;#39;t work in your case.&lt;/p&gt;

&lt;p&gt;Now, my main question. If I understand it right, Agile promotes group
responsibility and discourages &lt;strong&gt;individualism&lt;/strong&gt;. How does it go along
with the Ringelmann Effect? Any thoughts?&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sat, 21 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/11/21/ringelmann-effect-vs-agile.html</guid>
      <dc:date>2015-11-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Stop Comparing JSON and XML</title>
      <link>http://www.yegor256.com/2015/11/16/json-vs-xml.html</link>
      <description>&lt;p&gt;JSON or XML? Which one is better? Which one is faster? Which
one should I use in my next project? Stop it! These things are not comparable.
It&amp;#39;s similar to comparing a bicycle and an
&lt;a href=&quot;http://www.mbusa.com/mercedes/vehicles/model/class-S/model-S65V&quot;&gt;AMG S65&lt;/a&gt;. Seriously,
which one is better? They both can take you from home to the office, right?
In some cases, a bicycle will do it better. But does that mean
they can be compared to each other? The same applies here with JSON and XML.
They are very different things with their own areas of applicability.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/11/the-man-who-stare-at-goats.jpg' style='width:600px;' alt='The Men Who Stare at Goats (2009) by Grant Heslov'/&gt;&lt;figcaption&gt;The Men Who Stare at Goats (2009) by Grant Heslov&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is how a simple JSON piece of data may look
(140 characters):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Object Thinking&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;David West&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;published&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;by&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Microsoft Press&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2004&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A similar document would look like this in XML
(167 characters):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;?xml&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;book&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;title&amp;gt;Object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Thinking&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;author&amp;gt;David&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;West&amp;lt;/author&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;published&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&amp;lt;by&amp;gt;Microsoft&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Press&amp;lt;/by&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&amp;lt;year&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2004&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;/year&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;/published&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;/book&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;aside class='quote'&gt;JSON is a good data format, and it is just a data format&lt;/aside&gt;

&lt;p&gt;Looks easy to compare, right? The first example is a bit shorter,
is easier to understand since it&amp;#39;s less &amp;quot;cryptic,&amp;quot; and is also
perfectly parseable in JavaScript. That&amp;#39;s it, then; let&amp;#39;s use JSON
and manifest the death of XML! Who needs this heavyweight 15-year-old
XML in the first place?&lt;/p&gt;

&lt;p&gt;Well, I need it, and I love it. Let me explain why.&lt;/p&gt;

&lt;p&gt;And don&amp;#39;t get me wrong; I&amp;#39;m not against JSON. Not at all.
It&amp;#39;s a good &lt;strong&gt;data format&lt;/strong&gt;. But it&amp;#39;s just a data format.
We&amp;#39;re using it &lt;strong&gt;temporarily&lt;/strong&gt; to transfer a piece
of data from point A to point B. Indeed, it is shorter than XML and
more readable. That&amp;#39;s it.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0596007647/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0596007647&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=MWLP356M3CQZSBS7'&gt;&lt;img src='/images/2015/04/book-xml-nutshell.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;XML is not a data format; it is a &lt;strong&gt;language&lt;/strong&gt;. A very powerful one. Let me
show you what it&amp;#39;s capable of. Let me basically explain why I love it. And I would
strongly recommend you read
&lt;a href=&quot;http://www.amazon.com/gp/product/0596007647/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0596007647&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=MWLP356M3CQZSBS7&quot;&gt;&lt;strong&gt;XML in a Nutshell, Third Edition&lt;/strong&gt;&lt;/a&gt;
by Elliotte Rusty Harold and W. Scott Means.&lt;/p&gt;

&lt;p&gt;I believe there are four features XML has that seriously set it apart from
JSON or any other simple data format, like
&lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;YAML&lt;/a&gt; for example.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;XPath&lt;/strong&gt;.
To get data like the year of publication from the document above, I just
send an &lt;a href=&quot;http://www.w3.org/TR/xpath20/&quot;&gt;XPath&lt;/a&gt;
query: &lt;code&gt;/book/published/year/text()&lt;/code&gt;. However, there has to be
an XPath processor that understands my request and returns &lt;code&gt;2004&lt;/code&gt;.
The beauty of this is that XPath &lt;a href=&quot;http://www.xml.com/pub/a/2002/03/20/xpath2.html&quot;&gt;2.0&lt;/a&gt;
is a very powerful query engine
with its own functions, predicates, axes, etc. You can literally put
any logic into your XPath request without writing any traversing logic
in Java, for example. You may ask &amp;quot;How many books were published by David West in 2004?&amp;quot;
and get an answer, just via XPath. JSON is not even close to this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Attributes and Namespaces&lt;/strong&gt;.
You can attach metadata to your data, just like it&amp;#39;s done above
with the &lt;code&gt;id&lt;/code&gt; attribute. The data stays inside elements, just like the
name of the book author, for example, while metadata (data about data)
can and should be placed into attributes. This significantly helps in organizing
and structuring information. On top of that, both elements and attributes
can be marked as belonging to certain &lt;a href=&quot;http://www.w3.org/TR/REC-xml-names/&quot;&gt;namespaces&lt;/a&gt;.
This is a very useful technique during times
when a few applications are working with the same XML document.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;XML Schema&lt;/strong&gt;.
When you create an XML document in one place, modify it a few times somewhere
else, and then transfer it to yet another place, you want to make sure its
structure is not broken by any of these actions. One of them may
use &lt;code&gt;&amp;lt;year&amp;gt;&lt;/code&gt; to store the publication date while another uses
&lt;code&gt;&amp;lt;date&amp;gt;&lt;/code&gt; with ISO-8601. To avoid that mess in structure, create a supplementary
document, which is called &lt;a href=&quot;http://www.w3.org/XML/Schema&quot;&gt;XML Schema&lt;/a&gt;,
and ship it together with the main document.
Everyone who wants to work with the main document will first &lt;strong&gt;validate&lt;/strong&gt;
its correctness using the schema supplied. This is a sort of integration testing
in production. &lt;a href=&quot;http://relaxng.org/&quot;&gt;RelaxNG&lt;/a&gt;
is a similar but simpler mechanism; give it a try if you find XML Schema too complex.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;XSL&lt;/strong&gt;.
You can make modifications to your XML document without any Java/Ruby/etc. code
at all. Just create an
&lt;a href=&quot;http://www.w3.org/TR/xslt20/&quot;&gt;XSL transformation&lt;/a&gt; document and &amp;quot;apply&amp;quot; it to your
original XML. As an output, you will get a new XML. The
&lt;a href=&quot;http://www.w3.org/Style/XSL/&quot;&gt;XSL&lt;/a&gt; language
(it is purely functional, by the way) is designed for hierarchical data
manipulations. It is much more suitable for this task than Java or any other
OOP/procedural approach. You can transform an XML document into anything, including
plain text and
&lt;a href=&quot;/2014/06/25/xml-and-xslt-in-browser.html&quot;&gt;HTML&lt;/a&gt;.
Some complain about XSL&amp;#39;s complexity, but please
give it a try. You won&amp;#39;t need all of it, while its core functionality is
pretty straight-forward.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not a full list, but these four features really mean a lot to me.
They give my document the ability to be &amp;quot;self-sufficient.&amp;quot; It can validate
itself (XML Schema), it knows how to modify itself (XSL), and
it gives me very convenient access to anything inside it (XPath).&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;http://users.jyu.fi/%7Eairi/xmlfamily.html&quot;&gt;many more&lt;/a&gt;
languages, standards, and applications developed around XML, including
&lt;a href=&quot;http://www.w3.org/MarkUp/Forms/&quot;&gt;XForms&lt;/a&gt;,
&lt;a href=&quot;http://www.w3.org/Graphics/SVG/&quot;&gt;SVG&lt;/a&gt;,
&lt;a href=&quot;http://www.w3.org/Math/&quot;&gt;MathML&lt;/a&gt;,
&lt;a href=&quot;http://www.w3.org/RDF/&quot;&gt;RDF&lt;/a&gt;,
&lt;a href=&quot;http://www.w3.org/2001/sw/wiki/OWL&quot;&gt;OWL&lt;/a&gt;,
&lt;a href=&quot;http://www.w3.org/TR/wsdl&quot;&gt;WSDL&lt;/a&gt;, etc.
But you are less likely to use them
in a mainstream project, as they are rather &amp;quot;niche.&amp;quot;&lt;/p&gt;

&lt;p&gt;JSON was not designed to have such features, even though some of them
are now trying to find their places in the JSON world, including
&lt;a href=&quot;http://goessner.net/articles/JsonPath/&quot;&gt;JSONPath&lt;/a&gt; for querying,
&lt;a href=&quot;http://stackoverflow.com/questions/1618038&quot;&gt;some tools&lt;/a&gt; for transformations, and
&lt;a href=&quot;http://json-schema.org/&quot;&gt;json-schema&lt;/a&gt; for validation. But they are just
weak parodies compared to what XML offers, and I don&amp;#39;t think they have any future. Or
let&amp;#39;s put it this way: I wish they would disappear sooner or later. They just
turn a good, simple format into something &lt;strong&gt;clumsy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thus, to conclude, JSON is a simple data format with no additional
functionality. Its best-use case is &lt;a href=&quot;https://en.wikipedia.org/wiki/Ajax_%28programming%29&quot;&gt;AJAX&lt;/a&gt;.
In all other cases, I strongly recommend you use XML.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/11/16/json-vs-xml.html</guid>
      <dc:date>2015-11-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>10 Typical Mistakes in Specs</title>
      <link>http://www.yegor256.com/2015/11/10/ten-mistakes-in-specs.html</link>
      <description>&lt;p&gt;There is a great book called
&lt;a href=&quot;http://www.amazon.com/gp/product/B00JDMPMOA/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00JDMPMOA&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=PRSWJK34HNP355LK&quot;&gt;Software Requirements&lt;/a&gt;
written by Karl Wiegers about, well, software requirements.
It&amp;#39;s a must read for every software engineer, in my opinion. There&amp;#39;s
no need for me to repeat what it says, but there are a few very
simple and very typical mistakes we keep making in our
specs. I see them in our documents again and again,
which is why I&amp;#39;ve decided to summarize them. So here they are,
the ten most critical and typical of them,
from the point of view of a programmer reading a specification document.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/11/reservoir-dogs.jpg' style='width:600px;' alt='Reservoir Dogs (1992) by Quentin Tarantino'/&gt;&lt;figcaption&gt;Reservoir Dogs (1992) by Quentin Tarantino&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Chapter 4.3 of a famous standard
&lt;a href=&quot;https://standards.ieee.org/findstds/standard/830-1998.html&quot;&gt;IEEE 830-1998&lt;/a&gt;
says that a good
&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_requirements_specification&quot;&gt;specification&lt;/a&gt;
should be &lt;strong&gt;correct&lt;/strong&gt;, &lt;strong&gt;unambiguous&lt;/strong&gt;, &lt;strong&gt;complete&lt;/strong&gt;, &lt;strong&gt;consistent&lt;/strong&gt;,
&lt;strong&gt;ranked&lt;/strong&gt;, &lt;strong&gt;verifiable&lt;/strong&gt;, &lt;strong&gt;modifiable&lt;/strong&gt;, and &lt;strong&gt;traceable&lt;/strong&gt;.
Eight qualities in total. Then, the standard explains them one by one
in pretty simple English. But do we have time to read those boring standards?
They are for university professors and certification boards.
We are practitioners, for goodness sake! ... Hold on, I&amp;#39;m joking.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='https://standards.ieee.org/findstds/standard/830-1998.html'&gt;&lt;img src='/images/2015/11/ieee-830.jpg' style='width:128px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;No matter how small the project is and how practical we are, there
is always a document that explains what needs to be done, and it
may be called the &amp;quot;software requirements specification,&amp;quot; or &amp;quot;specification,&amp;quot;
or just &amp;quot;spec.&amp;quot; Of course, there is a lot of space for creativity, but
we&amp;#39;re &lt;strong&gt;engineers&lt;/strong&gt;, not artists. We must follow rules and standards,
mostly because they make our communication easier.&lt;/p&gt;

&lt;p&gt;Now, I&amp;#39;m getting to my point. The specs I usually see violate pretty much
&lt;strong&gt;all&lt;/strong&gt; eight principles mentioned earlier. Below is a summary of how exactly
they do it. By the way, all examples are taken from real documents in
real commercial software projects.&lt;/p&gt;

&lt;h2 id=&quot;no-glossary-or-a-messy-one&quot;&gt;No Glossary or a Messy One&lt;/h2&gt;

&lt;p&gt;How about this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;UUID is set incrementally to make sure there
are no two users with the same account number.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What is the difference between UUID and account number? Is it the
same thing? It seems so, right? Or maybe they are different ... it would
be great to know what UUID stands for. Is it &amp;quot;unique user ID&amp;quot; or maybe
&amp;quot;unified user identity descriptor&amp;quot;? I have no idea. I&amp;#39;m lost, and I want
to find the author of this text and do something bad to him ... or her.&lt;/p&gt;

&lt;aside class='quote'&gt;We're writing in order to be understood, not to impress the reader&lt;/aside&gt;

&lt;p&gt;I&amp;#39;ve written already that the
&lt;a href=&quot;/2015/03/16/technical-glossaries.html&quot;&gt;worst technical specifications have no glossaries&lt;/a&gt;.
In my experience, this is the biggest problem in all requirement
documents. It&amp;#39;s not prose! It&amp;#39;s not a love letter! It&amp;#39;s technical
documentation. We can&amp;#39;t juggle words for the sake of fun. We should
not use product specs just to express ourselves. We&amp;#39;re writing in order
to be understood, not to impress the reader. And the rule is the
same here as with
&lt;a href=&quot;/2015/06/29/simple-diagrams.html&quot;&gt;diagrams&lt;/a&gt;:
if I don&amp;#39;t understand you, it&amp;#39;s your fault.&lt;/p&gt;

&lt;p&gt;Here is how that text would look after a proper re-writing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;UUID is user unique ID, a positive 4-bytes integer.
UUID is set incrementally to make sure there
are no two users with the same UUID.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Better now?&lt;/p&gt;

&lt;p&gt;Thus, the first and biggest problem is a frivolous
use of terms and just words, without having them pre-defined in a glossary.&lt;/p&gt;

&lt;h2 id=&quot;questions,-discussions,-suggestions,-opinions&quot;&gt;Questions, Discussions, Suggestions, Opinions&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve seen this very recently in a product spec:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;I believe that multiple versions of the API
must be supported. What options do we have? I&amp;#39;d
suggest we go with versioned URLs. Feel free to
post your thoughts here.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, this text exists verbatim in a requirements document. First, the
author expresses his personal opinion about the subject. Then,
the author asks me what possible options are out there. Then,
he suggests I consider something, and after that,
he invites me for a talk.&lt;/p&gt;

&lt;aside class='quote'&gt;Find all your answers before writing the document, that's what you're paid for&lt;/aside&gt;

&lt;p&gt;Impressive, right? Obviously, the author has a very creative personality.
But we should keep this person as far away from project documentation as possible.
This is not what a requirements document appreciates. Well, we appreciate
creativity, but these four things are strictly prohibited:
questions, discussions, suggestions, and opinions.&lt;/p&gt;

&lt;p&gt;Specifications can&amp;#39;t have any &lt;strong&gt;questions&lt;/strong&gt; in them. Who are these questions
addressed to? Me, a programmer? Am I supposed to implement the
software or answer your questions? I&amp;#39;m not interested in brainstorming
with you. I expect you, a requirements author, to tell me
what needs to be done. Find all your answers before writing the document. That&amp;#39;s
what you&amp;#39;re paid for. If you don&amp;#39;t have the answers, put something like
TBD (&amp;quot;to be determined&amp;quot;) there. But don&amp;#39;t ask questions. It&amp;#39;s annoying.&lt;/p&gt;

&lt;p&gt;A requirements document is not a &lt;strong&gt;discussion&lt;/strong&gt; board. As a reader of the
spec, I expect to see exactly what needs to be done without any &amp;quot;maybe&amp;quot; or
&amp;quot;we could do it differently.&amp;quot; Of course you need to discuss these issues,
but do it before documenting it. Do it somewhere else, like in Skype, on Slack,
or by email. If you really want to discuss in the document, use Google Docs or
Word with version tracking. But when the discussion is over, remove its history
from the document. Its presence only confuses me, a programmer.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s no need to format requirements as &lt;strong&gt;suggestions&lt;/strong&gt; either. Just say what
needs to be done and how the software has to work without fear of being wrong.
Usually, people resort to suggestion when they are afraid to say it straight. Instead
of saying &amp;quot;the app must work on Android 3.x and higher,&amp;quot; they say
&amp;quot;I would suggest making the app compatible with Android 3.x and higher.&amp;quot;
See the difference? In the second sentence, the author is trying to avoid
personal responsibility. He&amp;#39;s not saying &amp;quot;exactly Android 3.x;&amp;quot; he&amp;#39;s just
suggesting. Don&amp;#39;t be a coward; say it straight. If you make a mistake,
we&amp;#39;ll correct you.&lt;/p&gt;

&lt;p&gt;And, of course, &lt;strong&gt;opinions&lt;/strong&gt; are not appreciated at all. It&amp;#39;s not a letter
to a friend; it&amp;#39;s a formal document that belongs to the project. In a few
months or weeks, you may leave the project, and somebody else will work with
your document. The spec is a contract between the project sponsor and project
team. The opinion of a document author doesn&amp;#39;t make any difference here.
Instead of noting &amp;quot;it seems Java would be faster&amp;quot; and suggesting &amp;quot;we should use it,&amp;quot;
say &amp;quot;Java is faster, so we must use it.&amp;quot; Obviously you put it there because you
thought so. But once it&amp;#39;s there, we don&amp;#39;t care who it came from and what
you thought about this problem. The information would just
confuse us more, so skip it. Just facts, no opinions.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t get me wrong, I&amp;#39;m not against creativity. Programmers are not robots,
quietly implementing what the document says. But a messy document has
nothing to do with creativity. If you want me to create, define
the limits of that creativity and let me experiment within them; for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Multiple versions of the API must be supported. How exactly
that is done doesn&amp;#39;t really matter.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how you invite me to be creative. I realize that the user
of the product doesn&amp;#39;t really have any justifications or expectations
for the versioning mechanisms in the API. I&amp;#39;m free to do whatever
I can. Great, I&amp;#39;ll do it my way.&lt;/p&gt;

&lt;p&gt;But again, let me reiterate: A specification is not a discussion board.&lt;/p&gt;

&lt;h2 id=&quot;mixing-functional-and-quality-requirements&quot;&gt;Mixing Functional and Quality Requirements&lt;/h2&gt;

&lt;p&gt;This is how it looks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;User must be able to scroll down through
the list of images in the profile smoothly and fast.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s a typical mistake in almost every spec I&amp;#39;ve seen. Here, we mix
together a functional requirement (&amp;quot;to scroll images&amp;quot;) and
and a non-functional one (&amp;quot;scrolling is smooth and fast&amp;quot;). Why is it
bad? Well, there is no specific reason, but it exhibits a lack
of discipline.&lt;/p&gt;

&lt;p&gt;Such a requirement is difficult to verify or test, difficult to trace,
and difficult to implement. As a programmer, I don&amp;#39;t know what is more
important: to scroll or to make sure the scrolling is fast.&lt;/p&gt;

&lt;p&gt;Also, it is difficult to modify such a statement. If tomorrow we add
another functional requirement &amp;mdash; scrolling a list
of friends, for example &amp;mdash; we&amp;#39;ll want to require this scrolling to also be smooth and fast.
Then, a few days later, we&amp;#39;ll want to say that &amp;quot;fast&amp;quot; means less than
10 milliseconds of reaction time. We&amp;#39;ll then have to duplicate this information
in two places. See how messy our document may become eventually?&lt;/p&gt;

&lt;p&gt;Thus, I would strongly recommend you always document functional and non-functional
requirements separately.&lt;/p&gt;

&lt;h2 id=&quot;mixing-requirements-and-supplementary-docs&quot;&gt;Mixing Requirements and Supplementary Docs&lt;/h2&gt;

&lt;p&gt;This is similar to a previous problem and may look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;User can download a PDF report that includes a full
list of transactions. Each transaction has ID,
date, description, account, and full amount. The report
also contains a summary and a link to the user account.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s obvious there are two things described in this
paragraph. First is that a user can download a PDF report. Second is
how this report should look. The first thing is a functional
requirement, and the second one must be described in a supplementary
document (or appendix).&lt;/p&gt;

&lt;p&gt;In general, functional requirements must be very short:
&amp;quot;user downloads,&amp;quot; &amp;quot;user saves,&amp;quot; &amp;quot;client requests and receives,&amp;quot; etc.
If your text gets any longer, there is something wrong.
Try to move part of it to a supplementary document.&lt;/p&gt;

&lt;h2 id=&quot;unmeasurable-quality-requirements&quot;&gt;Unmeasurable Quality Requirements&lt;/h2&gt;

&lt;p&gt;This is what I&amp;#39;m talking about:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Credit card numbers must be encrypted.
The app should launch in less than 2 seconds.
Each web page must open in less than 500 milliseconds.
User interface must be responsive.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I can find many more examples just by opening requirement specs in
many projects I&amp;#39;ve seen over the past few years. They all look the same.
And the problem is always the same: It is very difficult
to define a truly testable and measurable non-functional requirement.&lt;/p&gt;

&lt;p&gt;Yes, it&amp;#39;s difficult. Mostly because there are many factors. Take this
line, for example: &amp;quot;The app must launch in 2 seconds.&amp;quot; On what equipment?
With what amount of data in the user profile? What does &amp;quot;launch&amp;quot; mean; does it include
profile loading time? What if there are launching problems? Do they count?
There are a lot of questions like that.&lt;/p&gt;

&lt;p&gt;If we answer &lt;strong&gt;all&lt;/strong&gt; of them, the requirement text will fill an entire
page. Nobody wants that, but having unmeasurable requirements
is a greater evil.&lt;/p&gt;

&lt;p&gt;Again, it&amp;#39;s not easy, but it&amp;#39;s necessary. Try to make sure all
quality requirements are complete and without ambiguity.&lt;/p&gt;

&lt;h2 id=&quot;implementation-instructions&quot;&gt;Implementation Instructions&lt;/h2&gt;

&lt;p&gt;This example illustrates a very common pitfall:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;User authenticates via Facebook login button
and we store username, avatar, and email in the
database.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is
&lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;micromanagement&lt;/a&gt;, and
it&amp;#39;s something a requirements analyst should never do to a programmer.
You shouldn&amp;#39;t tell me how to implement the functionality you desire.
You want to give a user the ability to login via Facebook?
Say so. Do you really care whether it&amp;#39;s going to happen through a button
click or somehow else? Do you really care what I store in the database?
What if I use files instead of a database? Is that important to you?&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t think so. Only in very rare cases will it matter. Most
of the time, it&amp;#39;s just micromanagement.&lt;/p&gt;

&lt;p&gt;The spec should only require what really matters for the business. Everything
else is up to us, the programmers. We decide what database to use, where the
button will be placed, and what information will be stored in the database.&lt;/p&gt;

&lt;aside class='quote'&gt;You shouldn't tell me how to implement the functionality you desire&lt;/aside&gt;

&lt;p&gt;If you really care about that because there are certain higher-level
limitations &amp;mdash; say so. But again, not as implementation instructions
to us programmers, but rather as non-functional requirements like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Login page must look like this (screenshot attached).
We must store user email locally for future needs.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The point is that I have nothing against requirements, but I&amp;#39;m
strongly against implementation instructions.&lt;/p&gt;

&lt;h2 id=&quot;lack-of-actor-perspective&quot;&gt;Lack of Actor Perspective&lt;/h2&gt;

&lt;p&gt;The text may look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PDF report is generated when required. It is
possible to download a report or save it
in the account.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem here is that there is no &amp;quot;actor&amp;quot; involved. This functionality
is more or less clear, but it&amp;#39;s not clear who is doing all this. Where
is the user? It is just a story of something happening somewhere. That&amp;#39;s not
really what programmers need in order to implement it.&lt;/p&gt;

&lt;aside class='quote'&gt;A good user story always has, guess what ... a user&lt;/aside&gt;

&lt;p&gt;The best way to explain functionality is through user stories. And a good
user story always has, guess what ... a user. It always starts with
&amp;quot;the user ...,&amp;quot; followed by a verb. The user downloads, the user saves,
the user clicks, prints, deletes, formats, etc.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not necessary for the user to be a human. It may be a system, a RESTful API
client, a database, anything. But always someone. &amp;quot;It is possible to download ...&amp;quot;
is not a user story. It&amp;#39;s possible for who?&lt;/p&gt;

&lt;h2 id=&quot;noise&quot;&gt;Noise&lt;/h2&gt;

&lt;p&gt;How about this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Our primary concern is performance and an attractive
user interface.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is noise. As the reader of this document, I&amp;#39;m neither an investor
nor a user. I&amp;#39;m a programmer. I don&amp;#39;t care what your &amp;quot;primary concern&amp;quot; is
in this project. My job is to implement the product so that it matches
the specs. If performance is your primary concern, create measurable
and testable requirements for me. I will make sure the product satisfies them.
If you can&amp;#39;t create a requirement, don&amp;#39;t spam me with this irrelevant
information.&lt;/p&gt;

&lt;aside class='quote'&gt;Good programmers should figure out what good performance means, right?&lt;/aside&gt;

&lt;p&gt;I don&amp;#39;t want to share your concerns, your beliefs, or your intentions. That&amp;#39;s your
business. And you&amp;#39;re paid to properly and unambiguously translate all that
into testable and measurable requirements. If you can&amp;#39;t do this, it&amp;#39;s
your problem and &lt;strong&gt;your fault&lt;/strong&gt;. Don&amp;#39;t try to make it mine.&lt;/p&gt;

&lt;p&gt;Very often ... wait. Very, very often. No. Almost always. Wrong again. Always!
That&amp;#39;s right, spec documents are always full of noise.
Some of them have a bit less; some have more. I believe this
is a symptom of &lt;strong&gt;lazy&lt;/strong&gt; and unprofessional document authors. In most cases,
just lazy.&lt;/p&gt;

&lt;p&gt;They don&amp;#39;t want to think and translate their concerns, ideas, thoughts,
intentions, and objectives into functional and non-functional requirements.
They just put them into the document and hope the programmers will
somehow find the right solution. Good programmers should figure out
what good performance means, right? Let&amp;#39;s just tell them that performance
is a concern for us, and they will figure something out.&lt;/p&gt;

&lt;p&gt;No! Don&amp;#39;t do that. Do your job right and let programmers do theirs.&lt;/p&gt;

&lt;p&gt;And we, programmers, should never accept such documents. We should just reject
them and ask requirements authors to re-work and remove noise. I would recommend not
even starting to work on a product if there is a lot of noise in its specs.&lt;/p&gt;

&lt;h2 id=&quot;will-work,-needs-to-work,-must-work&quot;&gt;Will Work, Needs to Work, Must Work&lt;/h2&gt;

&lt;p&gt;This is yet another very typical mistake:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The API will support JSON and XML. Both formats
must fully support all data items. XML needs to
be validated by XSD schema.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See how messy it sounds? There are three different points of view, and
none of them are suitable for a specification document. A spec
must describe a product as if it already exists. A spec must
sound like a manual, a tutorial, or a reference. This text must be
re-written like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The API supports JSON and XML. Both formats
fully support all data items. XML is validated
by XSD schema.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See the difference? All the &amp;quot;must,&amp;quot; &amp;quot;need,&amp;quot; and &amp;quot;will&amp;quot; words are just
adding doubt to the document. For a reader of this spec,
&amp;quot;&lt;em&gt;the API will support&lt;/em&gt;&amp;quot; sounds like &amp;quot;&lt;em&gt;some time in the future, maybe in
the next version, it will support&lt;/em&gt;.&amp;quot; This is not what the author
had in mind, right? There should be no doubt, no double meaning, no
maybe. The API supports. That&amp;#39;s it.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;I may have forgotten something important, but these issues are so obvious
and so annoying ... I&amp;#39;m going to use this post as a simple guide for our
system analysts. Feel free to share your experience with requirements
documents below in the comments.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/11/10/ten-mistakes-in-specs.html</guid>
      <dc:date>2015-11-10T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>A Chatbot Is Better Than a UI for a Microservice</title>
      <link>http://www.yegor256.com/2015/11/03/chatbot-better-than-ui-for-microservice.html</link>
      <description>&lt;p&gt;A chatbot (or &lt;a href=&quot;https://en.wikipedia.org/wiki/Chatterbot&quot;&gt;chatterbot&lt;/a&gt;, as Wikipedia says)
is a piece of software that talks to you in chat format.
&lt;a href=&quot;http://www.teamed.io&quot;&gt;We&lt;/a&gt; use chatbots in a few (micro)services, and they
fully &lt;strong&gt;replace&lt;/strong&gt; user interfaces. I don&amp;#39;t think there is any innovation
in this approach, but it has proved to be very effective over the last year or so.
That&amp;#39;s the impetus for this post.
Here is how the &lt;a href=&quot;http://www.rultor.com&quot;&gt;Rultor&lt;/a&gt; chatbot works for
us and what its benefits are.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let me give an example first. Look at the
&lt;a href=&quot;https://github.com/jcabi/jcabi-http/issues/115&quot;&gt;jcabi/jcabi-http#115&lt;/a&gt;
GitHub ticket:&lt;/p&gt;

&lt;figure class='unprintable'&gt;&lt;img src='/images/2015/10/chatbot-1.jpg' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;style&gt;
.bullet {
  display: inline-block;
  border-radius: 50%;
  color: #c22e12;
  font-size: 0.8em;
  background-color: #ffb800;
  padding: .2em;
  font-weight: bold;
  width: 1em;
  height: 1em;
  line-height: 1em;
  text-align: center;
  vertical-align: middle;
}
&lt;/style&gt;

&lt;p&gt;Let&amp;#39;s see what&amp;#39;s going on here, and then we&amp;#39;ll discuss
how it&amp;#39;s designed inside. Essentially, I&amp;#39;m &lt;strong&gt;talking&lt;/strong&gt; to a chatbot here.
The name of the chatbot is &lt;code&gt;@rultor&lt;/code&gt; (I wrote about it
&lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;last year&lt;/a&gt;).
At &lt;span class=&quot;bullet&quot;&gt;1&lt;/span&gt;, I&amp;#39;m asking the chatbot to release
a new version of the &lt;a href=&quot;https://github.com/jcabi/jcabi-http&quot;&gt;jcabi-http&lt;/a&gt; library.
At &lt;span class=&quot;bullet&quot;&gt;2&lt;/span&gt;, the chatbot responds, just confirming
that the task is clear and that it&amp;#39;s on it.
At &lt;span class=&quot;bullet&quot;&gt;3&lt;/span&gt;, the bot says the job is
completed and its completion took nine minutes. Our conversation is over.
That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;Now, what is so special about this?&lt;/p&gt;

&lt;p&gt;One thing: There is no user interface. Well, there is
no &lt;strong&gt;traditional&lt;/strong&gt; web-based HTML/CSS user interface. There is no
login, logout, profile, menu, or anything like this. Rultor is
a web service that has &lt;strong&gt;no web UI&lt;/strong&gt;. The only way to
communicate with it is by talking with its chatbot.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s so good about it? A few things.&lt;/p&gt;

&lt;h2 id=&quot;service-is-not-a-server&quot;&gt;Service Is Not a Server&lt;/h2&gt;

&lt;p&gt;This is how the traditional architecture of a web system would look:&lt;/p&gt;

&lt;p&gt;&lt;img src='/uml/eee0d1bcdb7b9318e937e99e04e39ff7.svg'
        alt='PlantUML diagram' class='plantuml'/&gt;&lt;/p&gt;

&lt;p&gt;A user gives instructions to a service and receives responses.
This communication happens through a &lt;strong&gt;user interface&lt;/strong&gt; (UI) &amp;mdash; a bunch
of HTTP entry points that receive requests from a browser and return
HTML+CSS responses. Or, if a user is on another service, requests may
contain some data, and responses will be in
&lt;a href=&quot;/2015/11/16/json-vs-xml.html&quot;&gt;XML or JSON&lt;/a&gt;. You get the idea;
a user is a client, and the service is a server.&lt;/p&gt;

&lt;p&gt;Like in a restaurant &amp;mdash; you say what you want, and a &lt;strong&gt;server&lt;/strong&gt; goes
to the kitchen, waits there, and in a few minutes, comes back with
spaghetti carbonara. You&amp;#39;re a client, and that cute lady is a server.&lt;/p&gt;

&lt;p&gt;In the case of a chatbot, that&amp;#39;s not the case anymore. Look at the
architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src='/uml/d103661ebf8494340e260442970bf4af.svg'
        alt='PlantUML diagram' class='plantuml'/&gt;&lt;/p&gt;

&lt;p&gt;First, a user posts a request to GitHub through a web user interface
provided by GitHub. It is a communication &lt;strong&gt;hub&lt;/strong&gt; for us. Then, the service
connects to GitHub through its RESTful API and checks whether there
are any new requests there. If something new is found, the service
does the job, prepares a response, and posts it there. The client receives
an email notification about a new response just posted to the ticket. The
client then checks GitHub and finds the response.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-3.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Here is how this would look in a restaurant: There would be a board with sticky notes.
First, you write the note, &amp;quot;I&amp;#39;d like spaghetti carbonara
with parmesan and fresh pepper on top&amp;quot; (Damn, I&amp;#39;m just too hungry now), and
pin it to the board at number 15. Then, you return to your table. A chef from
the kitchen checks that board and finds your sticky note. He makes that
spaghetti, tops it with parmesan, fresh pepper, some basil leaves, and
virgin olive oil ... yeah, he makes it right ... and puts it next to the board.
You hear an announcement that order number 15 is ready. You go there,
collect the food, return to your table, and enjoy.&lt;/p&gt;

&lt;p&gt;The point is that there is &lt;strong&gt;no cute lady&lt;/strong&gt; involved anymore. There is no
server. There are two parties communicating with the board &amp;mdash; you and
the kitchen. The kitchen is our microservice, but it&amp;#39;s not a server anymore.&lt;/p&gt;

&lt;p&gt;These two parties are perfectly &lt;strong&gt;decoupled&lt;/strong&gt; now. They never talk to each other. And
they both are &lt;strong&gt;clients&lt;/strong&gt; of the communication hub, which is GitHub or
a board in the restaurant.&lt;/p&gt;

&lt;p&gt;Again, the microservice is &lt;strong&gt;not a server&lt;/strong&gt; anymore.
Instead, it is a client of a communication hub. And the flip of its position
provides a lot of benefits to us, its developers.&lt;/p&gt;

&lt;h2 id=&quot;no-need-to-be-fast&quot;&gt;No Need to Be Fast&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-5.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;First of all, we don&amp;#39;t need to care much about the performance of our
UI. Well, we don&amp;#39;t care at all, since we don&amp;#39;t have a UI. Do we care
about the &lt;strong&gt;speed&lt;/strong&gt; of responses on GitHub? Not really. When a user posts
a message to GitHub, he or she doesn&amp;#39;t expect our chatbot to give an
immediate answer in less than 100 milliseconds. (That&amp;#39;s what any properly
designed web system must guarantee, I believe.)&lt;/p&gt;

&lt;p&gt;We put a note on the board, and we assume that the kitchen is probably
doing something else at the moment. We&amp;#39;ll wait for a few seconds or even minutes.
If, on the other hand, I give an order to the waitress and she waits five seconds
before replying back, I&amp;#39;ll be very surprised. If she keeps doing
that with every question, I&amp;#39;ll start to wonder to myself if everything is OK with her.&lt;/p&gt;

&lt;p&gt;I expect a user interface to be instant, while in a chat I have no problem
allowing some time for the bot to answer. This happens &lt;strong&gt;naturally&lt;/strong&gt;. We&amp;#39;re
used to delays in chats, when we&amp;#39;re talking with real people. They need some
time to process our information, to think, and to type something back.&lt;/p&gt;

&lt;p&gt;But a user interface doesn&amp;#39;t have that luxury. It has to be bullet-fast;
otherwise, I immediately get frustrated. The same thing happens to you, right?&lt;/p&gt;

&lt;h2 id=&quot;no-need-to-look-cute&quot;&gt;No Need to Look Cute&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-4.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Another advantage of this no-server design is that there is no need
to look pretty. There is no web interface, no HTML, no CSS,
&lt;strong&gt;no graphic design&lt;/strong&gt;. Perhaps not everybody really likes that.
Most non-professional users may still prefer to talk to a cute server
instead of sticking some paper notes to the board.
But if we&amp;#39;re dealing with professional
computer engineers, they&amp;#39;re not that demanding.&lt;/p&gt;

&lt;p&gt;Rultor doesn&amp;#39;t have any web UI, and its users simply don&amp;#39;t know how
it &amp;quot;looks.&amp;quot; It just &lt;strong&gt;talks&lt;/strong&gt; to you. The only thing you see is its
avatar in GitHub.&lt;/p&gt;

&lt;p&gt;This saves a lot of money and time on design efforts, which are usually
very expensive if you aim for high quality. If your
web service looks &lt;strong&gt;average&lt;/strong&gt;, most of its users will assume that it
also works average. Many good ideas have simply died because their
UI wasn&amp;#39;t as impressive as people were used to, thanks to all those
Pinterests and Instagrams.&lt;/p&gt;

&lt;p&gt;A good-looking server has a greater chance for &lt;strong&gt;bigger tips&lt;/strong&gt;, right?
If there is no server and we don&amp;#39;t see the chef, we judge him or her
only by the &lt;strong&gt;quality&lt;/strong&gt; of the food.&lt;/p&gt;

&lt;p&gt;Same here. By getting rid of a UI, we allow ourselves to focus on the
quality of the service we&amp;#39;re delivering. We don&amp;#39;t burn our time and money
on being &lt;strong&gt;nice&lt;/strong&gt;. We spend them on being &lt;strong&gt;useful&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;much-easier-to-scale&quot;&gt;Much Easier to Scale&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-6.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;If we have too many stickies on that board, we just hire more cooks,
or maybe even build another kitchen, and the problem is solved.
We can handle as many customers as necessary.
Well, as long as the board is powerful enough to handle multiple parallel users.&lt;/p&gt;

&lt;p&gt;GitHub is a pretty big platform, with hundreds of thousands of users
and projects. If we have too many requests coming in, we can just
add more processing nodes to Rultor. Remember, we&amp;#39;re not a server anymore;
we are a &lt;strong&gt;client of GitHub&lt;/strong&gt;. We decide when to connect to GitHub and when
to create responses to the requests submitted.&lt;/p&gt;

&lt;p&gt;It is much easier to create a scalable client than a scalable server, mostly
because there is nobody really waiting for us to respond quickly. The
load of requests we&amp;#39;re getting can be managed much easier, since the
decision of when to process them is made by us.&lt;/p&gt;

&lt;h2 id=&quot;mistakes-are-not-so-visible&quot;&gt;Mistakes Are Not So Visible&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-2.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;When you&amp;#39;re standing in front of a customer, most of your mistakes
are unforgivable, primarily because they are very visible. On the other
hand, when you&amp;#39;re cooking something in the kitchen, nobody can see
you and spot your faults. They will only spot them if the spaghetti
has too much salt. In other words, they will &lt;strong&gt;judge&lt;/strong&gt; you by your &lt;strong&gt;results&lt;/strong&gt;,
not by how you produce them.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s the same story with the microservice. When it works as a server, we expect
it to be seamless, respond immediately, and present everything in a
structured and organized way. If something goes wrong, it&amp;#39;s right here
on the web page. Your best case is a 404, while the worst one is that you
present some wrong information to the user. Even though the bug may not
be critical inside the microservice engine, the user doesn&amp;#39;t know that.
The user will judge you by your appearance and won&amp;#39;t forget even small
mistakes.&lt;/p&gt;

&lt;p&gt;However, when you both are clients of a message board, you don&amp;#39;t see
each other. The user communicates with GitHub, and the microservice
interacts with GitHub. Mistakes are less visible. Trust me, we have
had &lt;strong&gt;many of them&lt;/strong&gt; over the 18 months that Rultor has been in public use.
We&amp;#39;ve had downtimes, we&amp;#39;ve had serious logical mistakes, and we&amp;#39;ve had data corruption.
But very rarely have these problems become visible online. We merely saw them
in our server logs. Users didn&amp;#39;t see them. Well, mostly :)&lt;/p&gt;

&lt;h2 id=&quot;everything-is-traceable&quot;&gt;Everything Is Traceable&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-1.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Since there is a communication board between us, it&amp;#39;s very easy
to see the entire history of our discussion, which is very intuitive.
It&amp;#39;s like a Slack chat history. You see what we started from,
who said what, and which conclusions were made.&lt;/p&gt;

&lt;p&gt;Basically, you can&amp;#39;t have that visibility in a web UI. Well, you can
probably create a special page with the &amp;quot;history of operations,&amp;quot; but
who would check it? And how visible and simple would that information be?
And, what&amp;#39;s most important, how would that information match up
with the UI?&lt;/p&gt;

&lt;p&gt;In the log, you&amp;#39;ll state that &amp;quot;the build was started,&amp;quot; but
what&amp;#39;s the build and how was it started? How can I start it again?
Using which buttons and web controls? It&amp;#39;s not clear.&lt;/p&gt;

&lt;p&gt;Thus, the traceability of a &lt;strong&gt;chronological&lt;/strong&gt; chat is unbeatable.&lt;/p&gt;

&lt;h2 id=&quot;easy-to-integrate-with-other-services&quot;&gt;Easy to Integrate With Other Services&lt;/h2&gt;

&lt;p&gt;Yes, think about the future of this approach. If there is a centralized
message board where users talk to a chatbot, why can&amp;#39;t other chatbots
talk to each other too?&lt;/p&gt;

&lt;p&gt;Forget about RESTful APIs. Just a message board where chatbots post
their requests and collect responses. They are perfectly decoupled, replaceable,
and very scalable. Also, their communication protocol is visible and very
traceable. And they boast many other benefits, as was just explained above. It&amp;#39;s much
more convenient for us, both users and programmers, to monitor them and
create them.&lt;/p&gt;

&lt;p&gt;Well, maybe it&amp;#39;s too extreme to get rid of RESTful APIs entirely, but
to some extent, this approach is feasible, I believe.&lt;/p&gt;

&lt;p&gt;I didn&amp;#39;t go too far with this idea, but something was done. We have
a messaging platform that allows multiple chatbots to communicate
with users. It&amp;#39;s called &lt;a href=&quot;http://www.netbout.com&quot;&gt;Netbout&lt;/a&gt;. It&amp;#39;s a very
primitive web system with isolated discussions. Simply put, anyone
can create a new discussion, invite a few friends, and post messages there.
Both users and chatbots can do that.&lt;/p&gt;

&lt;p&gt;So, when a new candidate wants to join &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;,
we ask that person to fill out an &lt;a href=&quot;http://www.teamed.io/join.html&quot;&gt;online form&lt;/a&gt;. When
the candidate clicks the &amp;quot;Submit&amp;quot; button, a new discussion starts, and the first
chatbot decides who should interview that person. The decision is made
according to the skills listed in the form. The chatbot invites one of our
&lt;a href=&quot;http://www.teamed.io/#check-out-ourbest-developers&quot;&gt;best programmers&lt;/a&gt;
to conduct the interview. When the interview is done, another chatbot explains to
the candidate what the next steps are, registers him or her in our
database, and starts to show the progress of work.&lt;/p&gt;

&lt;p&gt;From a user perspective, it looks like he or she is talking to a few
people who understand just a few simple commands. It is very intuitive
and was easy to design.&lt;/p&gt;

&lt;p&gt;I think chatbots are a good approach for interacting with microservices.
Especially when users are more or less professional.&lt;/p&gt;

&lt;p&gt;PS. Illustrations by &lt;a href=&quot;https://www.behance.net/wheeat&quot;&gt;Kristina Wheat&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/11/03/chatbot-better-than-ui-for-microservice.html</guid>
      <dc:date>2015-11-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Why Software Outsourcing Doesn't Work ... Anymore</title>
      <link>http://www.yegor256.com/2015/10/27/outsourcing-doesnt-work.html</link>
      <description>&lt;p&gt;I want to create an iPhone app for my web service, but I don&amp;#39;t have
programmers. Well, I don&amp;#39;t have iOS programmers. And I don&amp;#39;t have money.
Sound familiar? What do I do? Right, I go to &lt;del&gt;Google&lt;/del&gt;
&lt;a href=&quot;http://www.upwork.com&quot;&gt;Upwork&lt;/a&gt; and find an awesome company in Bangalore
that is excited to work with me for &lt;del&gt;nothing&lt;/del&gt; reasonable money. In
a few months and after a few thousand dollars, I realize this is not exactly
what I expected. After yet another few months, I swear to God I&amp;#39;ll never outsource
any software development to anyone. Is it just me? Not really.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/the-godfather-ii.jpg' style='width:600px;' alt='The Godfather: Part II (1974) by Francis Ford Coppola'/&gt;&lt;figcaption&gt;The Godfather: Part II (1974) by Francis Ford Coppola&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This preamble is just a joke, but it&amp;#39;s not so far from
&lt;a href=&quot;/2015/05/21/avoid-software-outsourcing-disaster.html&quot;&gt;the truth&lt;/a&gt;. Of course,
in bigger companies and bigger projects, the story will be different. But the
outcome is almost always the same &amp;mdash; it is
&lt;a href=&quot;/2015/06/15/software-outsourcing-survival-guide.html&quot;&gt;a disaster&lt;/a&gt;.&lt;/p&gt;

&lt;aside class='quote'&gt;All these reasons merely explain the consequences but never even touch the real problem&lt;/aside&gt;

&lt;p&gt;I&amp;#39;m talking about outsourcing, not offshore development. The difference is
that in outsourcing, there are two companies involved: you the
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;client&lt;/a&gt;
and some WeCodeLikeNoOneElse Inc. from Loompaland.  In offshore
development, you just open an
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office&lt;/a&gt; in that same Loompaland with your own
management and employees. Again, I&amp;#39;m discussing &lt;strong&gt;outsourcing&lt;/strong&gt; here.&lt;/p&gt;

&lt;p&gt;Before writing this, I read
&lt;a href=&quot;https://www.google.com/search?q=why+outsourcing+fails&quot;&gt;a few dozen articles&lt;/a&gt;
about why outsourcing fails, and I&amp;#39;ve found a dozen &amp;quot;reasons&amp;quot; why. However, I think
they all miss the point, because they are looking at the problem from
a paying customer&amp;#39;s point of view. I try to look at it from both sides
and tell you the ugly truth. More on that in a few paragraphs. For now, let&amp;#39;s
explore what the usual reasons are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheapest Providers&lt;/strong&gt;.
Here is the argument: &amp;quot;So you&amp;#39;re outsourcing because you want to optimize
&lt;a href=&quot;/2015/06/02/how-to-estimate-software-cost.html&quot;&gt;costs&lt;/a&gt;?
You will end up with the cheapest software shop and sincerely regret
it very soon.&amp;quot; OK, what&amp;#39;s the solution, then? Just pay more?
I don&amp;#39;t think that&amp;#39;s going to solve the problem; I&amp;#39;ll
just burn
&lt;a href=&quot;/2015/06/02/how-to-estimate-software-cost.html&quot;&gt;more money&lt;/a&gt;.
Also, I don&amp;#39;t think this reason has anything to
do with outsourcing specifically. In any other business transaction, a
&amp;quot;win-lose&amp;quot; scenario is a straight path to failure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cultural Mismatch&lt;/strong&gt;.
&amp;quot;You&amp;#39;re in California, and they are in Brazil; you
won&amp;#39;t understand each other.&amp;quot; Is that why we have
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cost_overrun&quot;&gt;cost overruns&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Project_slippage&quot;&gt;schedule slippage&lt;/a&gt;,
and low quality of code? I don&amp;#39;t think so. Moreover, my experience
tells me the opposite. Our programmers at &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;
are from more than 15 countries, and we&amp;#39;ve never had cultural issues get
tangled up in any work conflict, which we have a lot of.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of Face-to-Face Talking&lt;/strong&gt;.
&amp;quot;They are far away somewhere in Poland, so you rarely really talk to them.
That&amp;#39;s why you misunderstand each other.&amp;quot; Look, have you ever met me and
had a face-to-face talk with me? I&amp;#39;m talking to you, the reader of this
post. That&amp;#39;s right, you haven&amp;#39;t met me, but you&amp;#39;re having no problem
understanding my point just by reading this text. That&amp;#39;s mostly because
I&amp;#39;ve made all possible efforts to ensure my point is clear to you. I&amp;#39;m
interested in delivering my thoughts to you, and it is happening. In outsourcing,
the problem is not with the channel but with the motivation. Read on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No Metrics to Measure Success&lt;/strong&gt;.
&amp;quot;You simply can&amp;#39;t define clear metrics of success for a team overseas.
That&amp;#39;s why your relationship eventually falls apart.&amp;quot; Or something like that.
I didn&amp;#39;t quite get what&amp;#39;s meant by &amp;quot;metrics of success,&amp;quot; but if it&amp;#39;s
what I think it is, they are right: Success for a software outsourcing
shop in Kiev is one thing. Success for you, a client of this shop, is something
very different. Read on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Poor Specs&lt;/strong&gt;.
&amp;quot;It&amp;#39;s just not possible to make good
&lt;a href=&quot;/2015/11/10/ten-mistakes-in-specs.html&quot;&gt;specifications&lt;/a&gt; for most projects, and a
poorly designed spec is a recipe for failure.&amp;quot; Yes, that&amp;#39;s very true,
but what does this have to do with outsourcing? Ah, right, they are so far
away in Argentina and we&amp;#39;re here in New York City &amp;mdash; how can we make
&lt;a href=&quot;/2014/10/20/how-we-write-product-vision.html&quot;&gt;a good spec&lt;/a&gt;?
I don&amp;#39;t buy it. An inability to clearly and explicitly
specify technical requirements is a flaw of the
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;architect&lt;/a&gt;. Learning, training,
and reading should fix this. Getting everybody together in the
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office&lt;/a&gt;
is &lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;not a solution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leakage of Talent&lt;/strong&gt;.
&amp;quot;Developers offshore are not your employees. They will never
be loyal to the project, and the best of them will quit once in a while.&amp;quot;
Yes, people may leave once in a while. But again, how is that related to their
location? If they don&amp;#39;t use the same coffee machine as their CEO, will they
be less loyal to the project? There are
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;many other&lt;/a&gt; more effective instruments
to boost motivation in a team than just co-locating everybody.&lt;/p&gt;

&lt;p&gt;There could be much more, but this is enough for us. As you see,
I don&amp;#39;t find these &amp;quot;reasons&amp;quot; logical. They merely explain the
consequences but never even touch the real problem, which I believe
sounds like this:&lt;/p&gt;

&lt;p&gt;You&amp;#39;re just a &lt;strong&gt;cash cow&lt;/strong&gt; for an outsourcing company.&lt;/p&gt;

&lt;p&gt;You&amp;#39;re neither a partner nor a friend, despite all your expectations.&lt;/p&gt;

&lt;p&gt;Your goals are opposite of their goals.&lt;/p&gt;

&lt;p&gt;All these &amp;quot;reasons&amp;quot; for outsourcing failures originate in this
fundamental confusion that exists in our heads: We think these
10 programmers sitting in Beijing are part of our business. We believe
they are our team. They are with us in the same boat, sharing
the same values and looking in the same direction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It&amp;#39;s just not true&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It can&amp;#39;t be true.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been in the shoes of an outsourcing company for almost 10 years
(and quit in 2010). The ugly truth is that for a CEO of an outsourcing
shop, the only problem is how to take care of the
next month&amp;#39;s payroll, and &lt;strong&gt;90 percent&lt;/strong&gt; of all expenses are salaries
for the programmers.&lt;/p&gt;

&lt;aside class='quote'&gt;Your business interests can't be aligned with the interests of your outsourcing partner&lt;/aside&gt;

&lt;p&gt;That&amp;#39;s why a good customer for them is a paying customer. Not a customer with
a successful project. Not a customer with a properly solved problem. Not
a customer with
&lt;a href=&quot;/2014/10/21/incremental-billing.html&quot;&gt;optimized costs&lt;/a&gt;.
Not a customer with the best possible
technology utilized. Not at all. The best customer is the one that pays,
pays a lot, and pays on time. Period.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s the root cause of all problems with outsourcing.&lt;/p&gt;

&lt;p&gt;The title of this article states that outsourcing doesn&amp;#39;t work &lt;strong&gt;anymore&lt;/strong&gt;. Why
anymore? Did it work before? Yes, it did, when salaries of programmers
were extremely lower in third-world (offshore) countries. For example, in 2001, we had
a team of very good senior Java developers in Ukraine. We paid them above
the market price, and it was &lt;strong&gt;$300 per month&lt;/strong&gt;. At the same time, we were
selling their time to U.S. customers for $15 per hour, which was $2,500 per month.
See the margin?&lt;/p&gt;

&lt;p&gt;With such a margin, outsourcing works fine. I was a CEO and had almost no
worries about payroll. I had enough money to pay my team, even if we
lost some customers eventually. Let me put it this way:
I had the &lt;strong&gt;luxury&lt;/strong&gt; to be
&lt;a href=&quot;/2015/01/05/how-to-be-honest-and-keep-customer.html&quot;&gt;honest&lt;/a&gt;
with my customers.&lt;/p&gt;

&lt;p&gt;Not anymore.&lt;/p&gt;

&lt;p&gt;Put yourself in their shoes. Today, a good Java developer in Ukraine
&lt;a href=&quot;http://www.payscale.com/research/UA/Job=Senior_Java_Developer/Salary&quot;&gt;earns&lt;/a&gt;
&lt;strong&gt;$4,000&lt;/strong&gt; a month. On top of that, this developer expects health
insurance, a free gym membership, free lunch, paid vacation, paid sick leave, etc. At the same
time, the price of Java time is not much higher on the market than it was years ago. Even
if you charge $40 per hour (which is very unlikely), your income would be $6,800.
Again, your income is $6.8K and your expenses are close to $5K. See the margin?&lt;/p&gt;

&lt;aside class='quote'&gt;Your lone motivation is to keep that cash flow coming. No matter what.&lt;/aside&gt;

&lt;p&gt;And don&amp;#39;t forget about office expenses, taxes, computers,
administrative staff, team building events, etc. Because of such a small
margin, you will literally be broke if you lose a key paying customer. You just
can&amp;#39;t afford to keep your programmers &amp;quot;on the &lt;strong&gt;bench&lt;/strong&gt;&amp;quot; for too long.&lt;/p&gt;

&lt;p&gt;Thus, your lone motivation is to keep that
cash flow coming. No matter what. The longer the project, the better.
The lower the quality of code, the better &amp;mdash; more money for maintenance.
The more phone calls, meetings and other time-wasting events, the better.
The more mess in specs, the better. Just do whatever it takes to suck
money from the customer.&lt;/p&gt;

&lt;p&gt;You have to do this, not because you&amp;#39;re evil but because you
have to feed your team. Your team. Yes, the team is &lt;strong&gt;yours&lt;/strong&gt;. You&amp;#39;re responsible
for their salaries, not the customer. In order to protect the team, you
have to go against the real interests of your customers.
You simply can&amp;#39;t be in the same boat with them.&lt;/p&gt;

&lt;p&gt;The point of all this is that outsourcing simply can&amp;#39;t work, because your business interests
can&amp;#39;t be aligned with the interests of your outsourcing &amp;quot;partner.&amp;quot;&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/27/outsourcing-doesnt-work.html</guid>
      <dc:date>2015-10-27T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>What Do You Do With InterruptedException?</title>
      <link>http://www.yegor256.com/2015/10/20/interrupted-exception.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/InterruptedException.html&quot;&gt;&lt;code&gt;InterruptedException&lt;/code&gt;&lt;/a&gt;
is a permanent source of pain in Java, for
junior developers especially. But it shouldn&amp;#39;t be. It&amp;#39;s a rather
simple and easy-to-understand idea. Let me try to describe and
simplify it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/crouching-tiger-hidden-dragon.jpg' style='width:600px;' alt='Crouching Tiger, Hidden Dragon (2000) by Ang Lee'/&gt;&lt;figcaption&gt;Crouching Tiger, Hidden Dragon (2000) by Ang Lee&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s start with this code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Nothing&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What does it do? Nothing, it just spins the CPU endlessly. Can we terminate it?
Not in Java. It will only stop when the entire JVM stops, when you hit
&lt;code&gt;Ctrl-C&lt;/code&gt;. There is no way in Java to terminate a thread unless the
thread exits by itself. That&amp;#39;s the principle we have to have in mind,
and everything else will just be obvious.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s put this endless loop into a thread:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Now how do we stop it?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, how do we stop a thread when we need it to stop?&lt;/p&gt;

&lt;p&gt;Here is how it is designed in Java.
There is a flag in every thread that we can set from the outside. And
the thread may check it occasionally and stop its execution. Voluntarily!
Here is how:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Continue to do nothing&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the only way to ask a thread to stop. There are two methods that
are used in this example. When I call &lt;code&gt;loop.interrupt()&lt;/code&gt;, a flag
is set to &lt;code&gt;true&lt;/code&gt; somewhere inside the thread &lt;code&gt;loop&lt;/code&gt;. When I call
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#interrupted%28%29&quot;&gt;&lt;code&gt;interrupted()&lt;/code&gt;&lt;/a&gt;,
the flag is returned and immediately set to &lt;code&gt;false&lt;/code&gt;. Yeah, that&amp;#39;s the design
of the method. It checks the flag, returns it, and sets it to &lt;code&gt;false&lt;/code&gt;. It&amp;#39;s ugly,
I know.&lt;/p&gt;

&lt;p&gt;Thus, if I never call &lt;code&gt;Thread.interrupted()&lt;/code&gt; inside the thread and don&amp;#39;t
exit when the flag is &lt;code&gt;true&lt;/code&gt;, nobody will be able to stop me. Literally,
I will just ignore their calls to &lt;code&gt;interrupt()&lt;/code&gt;. They will ask me to stop,
but I will ignore them. They won&amp;#39;t be able to interrupt me.&lt;/p&gt;

&lt;p&gt;Thus, to summarize what we&amp;#39;ve learned so far, a properly designed thread
will check that flag once in a while and stop gracefully. If the
code doesn&amp;#39;t check the flag and never calls &lt;code&gt;Thread.interrupted()&lt;/code&gt;, it
accepts the fact that sooner or later it will be terminated cold turkey,
by clicking &lt;code&gt;Ctrl-C&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sound logical so far? I hope so.&lt;/p&gt;

&lt;p&gt;Now, there are some methods in JDK that check the flag for us and throw
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/InterruptedException.html&quot;&gt;&lt;code&gt;InterruptedException&lt;/code&gt;&lt;/a&gt;
if it is set. For example, this is how the method
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#sleep%28long%29&quot;&gt;&lt;code&gt;Thread.sleep()&lt;/code&gt;&lt;/a&gt;
is designed (taking a very primitive approach):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* You still need to wait */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InterruptedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Keep waiting&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Why is it done this way? Why can&amp;#39;t it just wait and never check the flag?
Well, I believe it&amp;#39;s done for a good reason. And the reason is the following
(correct me if I&amp;#39;m wrong): The code should either be bullet-fast or
interruption-ready, nothing in between.&lt;/p&gt;

&lt;p&gt;If your code is fast, you never check the interruption flag, because you
don&amp;#39;t want to deal with any interruptions.
If your code is slow and may take seconds to execute, make it explicit
and handle interruptions somehow.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why &lt;code&gt;InterruptedException&lt;/code&gt; is a
&lt;a href=&quot;/2015/07/28/checked-vs-unchecked-exceptions.html&quot;&gt;checked&lt;/a&gt;
exception. Its design
tells you that if you want to pause for a few milliseconds, make your
code interruption-ready. This is how it looks in practice:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Stop immediately and go home&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well, you could let it float up to a higher level, where they will be
responsible for catching it. The point is that someone will have to
catch it and do something with the thread. Ideally, just stop it, since that&amp;#39;s
what the flag is about. If &lt;code&gt;InterruptedException&lt;/code&gt; is thrown, it means
someone checked the flag and our thread has to finish what it&amp;#39;s doing ASAP.&lt;/p&gt;

&lt;p&gt;The owner of the thread
&lt;a href=&quot;/2014/06/20/limit-method-execution-time.html&quot;&gt;doesn&amp;#39;t want to wait&lt;/a&gt;
any longer. And we must respect the decision of our owner.&lt;/p&gt;

&lt;p&gt;Thus, when you catch &lt;code&gt;InterruptedException&lt;/code&gt;, you have to do whatever
it takes to wrap up what you&amp;#39;re doing and exit.&lt;/p&gt;

&lt;p&gt;Now, look again at the code of &lt;code&gt;Thread.sleep()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InterruptedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember, &lt;code&gt;Thread.interrupted()&lt;/code&gt; not only returns the flag but also
sets it to &lt;code&gt;false&lt;/code&gt;. Thus, once &lt;code&gt;InterruptedException&lt;/code&gt; is thrown, the
flag is reset. The thread no longer knows anything about the
interruption request sent by the owner.&lt;/p&gt;

&lt;p&gt;The owner of the thread asked us to stop,
&lt;code&gt;Thread.sleep()&lt;/code&gt; detected that request,
removed it, and threw &lt;code&gt;InterruptedException&lt;/code&gt;. If you call &lt;code&gt;Thread.sleep()&lt;/code&gt;,
again, it will not know anything about that interruption request and will
not &lt;a href=&quot;/2015/12/01/rethrow-exceptions.html&quot;&gt;throw&lt;/a&gt; anything.&lt;/p&gt;

&lt;p&gt;See what I&amp;#39;m getting at? It&amp;#39;s very important not to lose that
&lt;code&gt;InterruptedException&lt;/code&gt;. We can&amp;#39;t just swallow it and move on. That would
be a severe violation of the entire Java multi-threading idea.
Our owner (the owner of our thread) is
asking us to stop, and we just ignore it. That&amp;#39;s a very bad idea.&lt;/p&gt;

&lt;p&gt;This is what most of us are doing with &lt;code&gt;InterruptedException&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It looks logical, but it doesn&amp;#39;t guarantee that the higher level will
actually stop everything and exit. They may just catch a runtime exception
there, and the thread will remain alive. The owner of the thread will be disappointed.&lt;/p&gt;

&lt;p&gt;We have to inform the higher level that we just caught an interruption
request. We can&amp;#39;t just throw a runtime exception. Such behavior would
be too &lt;a href=&quot;/2015/11/24/imprisonment-for-irresponsible-coding.html&quot;&gt;irresponsible&lt;/a&gt;.
The entire thread received an interruption request,
and we merely swallow it and convert it into a &lt;code&gt;RuntimeException&lt;/code&gt;.
We can&amp;#39;t treat such a serious situation so loosely.&lt;/p&gt;

&lt;p&gt;This is what we have to do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Here!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;re setting the flag back to &lt;code&gt;true&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Now, nobody will blame us for having an irresponsible attitude toward a valuable flag. We
found it in &lt;code&gt;true&lt;/code&gt; status, cleared it, set it back to &lt;code&gt;true&lt;/code&gt;, and threw
a runtime exception. What happens next, we don&amp;#39;t care.&lt;/p&gt;

&lt;p&gt;I think that&amp;#39;s it. You can find a more detailed and official description
of this problem here:
&lt;a href=&quot;http://www.ibm.com/developerworks/library/j-jtp05236/&quot;&gt;Java Theory and Practice: Dealing With InterruptedException&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/20/interrupted-exception.html</guid>
      <dc:date>2015-10-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Software Quality Award, 2016</title>
      <link>http://www.yegor256.com/2015/10/17/award-2016.html</link>
      <description>&lt;p&gt;This is the second year of the
&lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. The prize
is still the same &amp;mdash; &lt;strong&gt;$4,096&lt;/strong&gt;.
The rules were changed a bit. Read on.
BTW, 2015 is &lt;a href=&quot;/2015/04/16/award.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One person can submit &lt;strong&gt;only one&lt;/strong&gt; project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Submissions are accepted until the &lt;strong&gt;September 1, 2016&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Submissions must be sent via email to &lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;me@yegor256.com&lt;/a&gt;.
All I need is your GitHub login and repository name; I will check the commit
history to make sure you&amp;#39;re the main contributor to the project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Results will be announced &lt;strong&gt;October 15, 2016&lt;/strong&gt; on this page and by email.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The best project will receive &lt;strong&gt;$4,096&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Winners that received any cash prizes in previous years can&amp;#39;t submit again.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open source (in GitHub).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least 10,000 lines of code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least one year old.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object-oriented (that&amp;#39;s the only thing I understand).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best project is selected using this &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;criteria&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What doesn&amp;#39;t matter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don&amp;#39;t care about
popularity; quality is the key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it&amp;#39;s still eligible for the award. I don&amp;#39;t care about
your marketing position; quality is all.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/17/award-2016.html</guid>
      <dc:date>2015-10-17T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>What Is the Difference Between Ridley Scott and Joseph Goebbels?</title>
      <link>http://www.yegor256.com/2015/10/16/ridley-scott-and-joseph-goebbels.html</link>
      <description>&lt;p&gt;I saw &lt;a href=&quot;http://www.imdb.com/title/tt3659388/&quot;&gt;The Martian&lt;/a&gt;
this weekend, and it triggered a few thoughts. Of course, I didn&amp;#39;t like
the movie as a
&lt;a href=&quot;/2014/04/06/movies-for-thanasis.html&quot;&gt;piece of art&lt;/a&gt;.
It is total garbage, but this is not my point.
There is something bigger to discuss, aside from the bad acting, primitive
story-line, politically correct but absolutely unrealistic casting,
and tons of logical inconsistencies. It&amp;#39;s Hollywood; what
should I expect, right? Not just that. I think the problem is bigger.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/cossacks-of-the-kuban.jpg' style='width:600px;' alt='Cossacks of the Kuban (1950) by Ivan Pyryev'/&gt;&lt;figcaption&gt;Cossacks of the Kuban (1950) by Ivan Pyryev&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Have any of you seen this movie: &lt;a href=&quot;http://www.imdb.com/title/tt0041562/&quot;&gt;Cossacks of the Kuban&lt;/a&gt;?
It was shot in 1949, when &lt;a href=&quot;https://en.wikipedia.org/wiki/Joseph_Stalin&quot;&gt;Joseph Stalin&lt;/a&gt;
was in power, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Soviet_Union&quot;&gt;Soviet Union&lt;/a&gt;
was literally broke, and &lt;a href=&quot;https://en.wikipedia.org/wiki/World_War_II&quot;&gt;WWII&lt;/a&gt;
brought people to the point of &lt;strong&gt;starvation&lt;/strong&gt;.
However, the film showed something completely opposite &amp;mdash;
wealthy villages, rich peasants, and tables full of food.&lt;/p&gt;

&lt;p&gt;It was &lt;a href=&quot;https://en.wikipedia.org/wiki/Propaganda&quot;&gt;propaganda&lt;/a&gt; in 1949.&lt;/p&gt;

&lt;p&gt;But isn&amp;#39;t it quite similar to what I&amp;#39;ve just seen a few days ago,
produced and directed in 2015 by &lt;a href=&quot;http://www.imdb.com/name/nm0000631/&quot;&gt;Ridley Scott&lt;/a&gt;?&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='https://en.wikipedia.org/wiki/Soviet_Union'&gt;&lt;img src='/images/2015/10/ussr-symbol.jpg' style='width:128px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;In 1949, the goal of Soviet propaganda was to convince people that
their personal situations with a lack of food and lack of future were
just their local, personal &lt;strong&gt;exceptions&lt;/strong&gt; to a more general rule. And that
rule was that the country was full of food. The country was governed by
the principles of socialism, and they were working perfectly.&lt;/p&gt;

&lt;p&gt;In 2015, the goal of Hollywood propaganda is to convince us that the
organizational and motivational problems in our
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;offices&lt;/a&gt; are just local exceptions to
the general rule. The rule is simple: project management is not important
if we&amp;#39;re all good friends.&lt;/p&gt;

&lt;aside class='quote'&gt;The truth is that you are not going to get anywhere if you follow the spirit of this movie&lt;/aside&gt;

&lt;p&gt;Ridley Scott is telling us that in a perfect organization, such as
&lt;a href=&quot;https://www.nasa.gov/&quot;&gt;NASA&lt;/a&gt;,
everybody &lt;strong&gt;loves&lt;/strong&gt; everyone; that&amp;#39;s why they can get a man from Mars without
even a map. Do the same in your company and you will be fine. You don&amp;#39;t
need risk planning, you just need a hero. Actually, you&amp;#39;d be better off
with a couple of heroes who love each other.&lt;/p&gt;

&lt;p&gt;That doesn&amp;#39;t work for you? It must be a problem with implementation.
Keep trying and smiling.&lt;/p&gt;

&lt;p&gt;Make friends, don&amp;#39;t make plans.&lt;/p&gt;

&lt;p&gt;It is a lie, very similar to the lie we heard in 1949.&lt;/p&gt;

&lt;p&gt;The truth is that you are not going to get anywhere if you follow
the spirit of this movie. In reality, teamwork must look completely
different. There are conflicts, fights, politics, betrayals, back-stabbing,
leakage of information, and just primitive incompetence. To manage all
this, one can&amp;#39;t just be a &lt;strong&gt;nice guy&lt;/strong&gt; with a big heart. I would even say
that being a nice guy is a drawback for any management position in a modern
organization. Well, in any organization at any time and in any place.&lt;/p&gt;

&lt;p&gt;Project management is &lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;not&lt;/a&gt;
about compassion and sympathy. It is about
accurate and routine comparison of risks, probabilities, impacts, and
their mitigation plans. It is about
&lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;setting rules&lt;/a&gt;
and making &lt;strong&gt;decisions&lt;/strong&gt;. It is about making sure
these decisions are being executed, precisely and without mistakes.
It is about &lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;making sure&lt;/a&gt;
those who&amp;#39;ve made mistakes are &lt;strong&gt;punished&lt;/strong&gt; while those who&amp;#39;ve
done everything right are &lt;strong&gt;rewarded&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A team of six. In a multi-million-dollar spaceship.
Flying to another planet to save one person.
Against explicit instructions from upper management.
They come back as national heroes.
Are you serious?&lt;/p&gt;

&lt;p&gt;Have you tried to deploy a new feature on a production server against
the direct will of your boss? Try it. No spaceships, no Mars. Just
a piece of code and a simple server. Then try to convince your boss
that you&amp;#39;re a hero.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m sure you get the point.&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.popsci.com/sites/popsci.com/files/styles/large_1x_/public/psc1015_mt_088.jpg' style='width:600px;' alt='Shooting The Martian (by popsci.com)'/&gt;&lt;figcaption&gt;Shooting The Martian (by popsci.com)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;So, why is Ridley Scott &lt;strong&gt;lying&lt;/strong&gt; to us?
Why is he giving us a false picture of reality?
Intentionally &lt;strong&gt;false&lt;/strong&gt;. He knows better than I do how real management
works in real-life organizations. Hollywood is not much different
than Silicon Valley in this aspect. So, why is he lying?&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='https://en.wikipedia.org/wiki/Nazi_Germany'&gt;&lt;img src='/images/2015/10/third-reich-symbol.jpg' style='width:128px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Why was &lt;a href=&quot;https://en.wikipedia.org/wiki/Joseph_Goebbels&quot;&gt;Joseph Goebbels&lt;/a&gt;,
a minister of propaganda in the Third Reich,
lying to the German people?&lt;/p&gt;

&lt;p&gt;Because that&amp;#39;s what we like to hear, &lt;strong&gt;unfortunately&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It is sad, but we don&amp;#39;t want to know the truth. We didn&amp;#39;t want to know about
Nazi war crimes &amp;mdash; so Joseph Goebbels built a &lt;strong&gt;fake&lt;/strong&gt; reality for us.
We don&amp;#39;t want to know about the true principles of management &amp;mdash;
so Ridley Scott built fake ones for us.&lt;/p&gt;

&lt;p&gt;Think about it.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/16/ridley-scott-and-joseph-goebbels.html</guid>
      <dc:date>2015-10-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Competition Without Rules Is Destructive</title>
      <link>http://www.yegor256.com/2015/10/13/competition-without-rules.html</link>
      <description>&lt;p&gt;When your team has to choose which technical decision to make,
who has the final say? When one of your colleagues asks
for a raise, who decides, and what is his or her decision based on?
When it&amp;#39;s necessary to work overtime, how is it decided
who will stay in the &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office&lt;/a&gt;?
I&amp;#39;m expecting you to shrug your shoulders. You&amp;#39;re right, these questions never
have explicit answers in modern organizations. We are used to working
in a more &amp;quot;democratic&amp;quot; way, where such decisions are made
&lt;strong&gt;subjectively&lt;/strong&gt; by managers or more senior employees.
Is this how it should be?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/the-wrestler.jpg' style='width:600px;' alt='The Wrestler (2008) by Darren Aronofsky'/&gt;&lt;figcaption&gt;The Wrestler (2008) by Darren Aronofsky&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;We are trying to &lt;strong&gt;avoid explicitness&lt;/strong&gt; in these sensitive subjects. Indeed,
how can we tell Jeff that his salary is lower than
Monica&amp;#39;s because his performance is worse?
This will definitely lead to depression and negativity
within the team, right?&lt;/p&gt;

&lt;p&gt;What I&amp;#39;m trying to say is that &lt;strong&gt;we don&amp;#39;t set rules&lt;/strong&gt;. We think that
strict and explicit rules related to performance
offend creative people. Well, all people.&lt;/p&gt;

&lt;p&gt;We avoid explicitness in performance appraisals.&lt;/p&gt;

&lt;p&gt;And this is totally wrong!&lt;/p&gt;

&lt;p&gt;This is a &lt;strong&gt;mistake&lt;/strong&gt;, and it causes big problems!&lt;/p&gt;

&lt;aside class='quote'&gt;Competition is inevitable in a group, especially if the group consists of creative people&lt;/aside&gt;

&lt;p&gt;When a group doesn&amp;#39;t have explicitly defined principles of
survival and growth, it starts to create them &lt;strong&gt;naturally&lt;/strong&gt;. When
people don&amp;#39;t know what exactly needs to be done in order to get
a 15 percent raise, they find a way to get this information anyway. And guess what
this information will end up being? Right &amp;mdash; you have
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;to make your boss happy&lt;/a&gt;;
that&amp;#39;s how your chances for a raise improve.&lt;/p&gt;

&lt;p&gt;Instead of working toward the goals set by the organization,
we are fighting with each other for the attention of our boss.
Instead of focusing on the results and their quality, we
are reading the mood of our
&lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;manager&lt;/a&gt;. Our fear becomes a guide for us.&lt;/p&gt;

&lt;p&gt;Competition is &lt;strong&gt;inevitable&lt;/strong&gt; in a group, especially if the group consists
of creative people. Creativity is all about competition. Each of us
wants to be better than the others, and this is what drives &lt;strong&gt;innovation&lt;/strong&gt;.
But if the team has no rules, even a minor competition seriously
and negatively affects their motivation.&lt;/p&gt;

&lt;p&gt;If you want your team to be creative and productive, clearly and explicitly
define the rules of competition. Make sure everyone can get clear and
straightforward answers at any time to questions like these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Who is the best developer on our team?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why is my salary lower than Jeff&amp;#39;s?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do I need to do in order to get a raise?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under what conditions will I be fired?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can you ask these questions in your team and easily
get explicit answers?&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 13 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/13/competition-without-rules.html</guid>
      <dc:date>2015-10-13T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Be a Good Office Slave</title>
      <link>http://www.yegor256.com/2015/10/06/how-to-be-good-office-slave.html</link>
      <description>&lt;p&gt;This is a short manual for you, my friend. I assume you are sitting in the
office right now, reading this blog post. Maybe you don&amp;#39;t like
your office job, or maybe you enjoy it and feel excited to be
close to your office friends. It doesn&amp;#39;t matter. What matters is that
there is always an alternative to office slavery. I&amp;#39;m not talking about
starting your own business. There are people in this world who work
for someone without doing what is described below. They do exist,
as well as companies that don&amp;#39;t turn their employees into slaves. I really hope
you will eventually find one. In the meantime, this manual is for you :)&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/the-office.jpg' style='width:600px;' alt='The Office (2001–2003)'/&gt;&lt;figcaption&gt;The Office (2001–2003)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Help Others&lt;/strong&gt;.
Find the stupidest newbies and help them. Regardless of what exactly
you help them with, they should rely on you. Show them where the restroom is,
recommend a good restaurant nearby, assist in an IDE installation,
explain how the project works, and make standard jokes about the worst
class in it. They must become your best friends &amp;mdash; and not only them. Be
helpful to everybody. No matter what is happening, everyone must know
that you&amp;#39;re ready to help. Ideally, they all must depend on your
kindness and readiness to save them from the
&lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;chaos&lt;/a&gt; around.&lt;/p&gt;

&lt;aside class='quote'&gt;Important people don't write code; they attend meetings&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Be the Last to Leave the Office&lt;/strong&gt;.
Nothing annoys a manager more than an employee who leaves the office
at 5 p.m. sharp. It&amp;#39;s a sign of disrespect. Don&amp;#39;t you like it here? Is there
anything in this life more important to you than this job? There shouldn&amp;#39;t be.
Demonstrate that by staying late. Here is a simple trick:
just come later. The boss won&amp;#39;t blame you for that. But always stay there
after everybody else is gone. Ideally, you should leave right after the boss.
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;Overtime&lt;/a&gt;
is a clear sign of your loyalty to our mutual results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Nag&lt;/strong&gt;.
No matter what is happening, you should never criticize your direct manager. The
boss is &lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;always right&lt;/a&gt;.
Everything else may be wrong &amp;mdash; the situation,
colleagues, suppliers, computers, the CEO, investors, the market, or the weather,
but not the boss you directly report to.
The word of this person is the law. The boss is the god. Ideally, you should
be the prophet. No matter what the boss says, you deliver
it to others. And you must look like you sincerely believe that it&amp;#39;s right.&lt;/p&gt;

&lt;aside class='quote'&gt;Loyalty is what makes you a good slave; don't forget it!&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Attend All Meetings&lt;/strong&gt;.
No matter what they are about, you must be there. And don&amp;#39;t just be present;
actively participate. It&amp;#39;s not so difficult, and very soon you will
start to understand what they are talking about and will be able to say
something, even if you had no idea about the subject beforehand. Eventually,
everybody will start thinking they must ask your permission in order
to make some decision, because you were at that meeting. Important people
don&amp;#39;t write code; they attend
&lt;a href=&quot;/2015/07/13/meetings-are-legalized-robbery.html&quot;&gt;meetings&lt;/a&gt;. Remember that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Turn Down Recruiters, Publicly&lt;/strong&gt;.
Loyalty! That&amp;#39;s what matters to a real team. When a recruiter calls you,
raise your voice and explain that you&amp;#39;re happy in this company and don&amp;#39;t
want to move on, ever. The more people who hear you, the better. Also,
you can sometimes tell stories about offers you&amp;#39;re getting
and how you turn them down. Your boss should be the main
audience for these stories. Why do you turn them down? Not because they are
bad, but because your life belongs to this company.
Loyalty is what makes you a
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;good slave&lt;/a&gt;; don&amp;#39;t forget it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Take Sides&lt;/strong&gt;.
It&amp;#39;s just too risky. In any argument, you can always find pros and cons
for both sides, right? So why support one of them? You may be wrong and
lose respect in front of everybody. Why take that chance? Instead, always
say that there are drawbacks to both options. That&amp;#39;s what a wise man would
say, anyway. There is no absolute truth in this world. That&amp;#39;s why you should
always stay in the middle, where you will never be wrong. Well, until your boss
takes one of the sides. That&amp;#39;s the right moment to agree and follow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Never Ask for a Raise&lt;/strong&gt;.
It should be absolutely clear to everybody that you don&amp;#39;t work for money. You
work for &lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;the big idea&lt;/a&gt;.
Period.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attend All Social Events&lt;/strong&gt;.
Birthdays, corporate parties, Halloween, Friday beers &amp;mdash; you must be
there, always. Don&amp;#39;t worry about wasting your life; you will like
them eventually. It is very important to demonstrate that you truly live in the
office. You are not just writing code, taking money, and going home to your family.
Absolutely not! The office is your real family, and you truly enjoy eating
pizza with your boss and listening to his childhood stories. That&amp;#39;s how
you demonstrate your loyalty, which is the best quality of a
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;good slave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Point Fingers Privately&lt;/strong&gt;.
Don&amp;#39;t say anything bad about anyone in public. No matter who is doing what,
we&amp;#39;re always a team; we&amp;#39;re together. Together! This should be your main
keyword when talking about results, problems, and risks. Never blame anyone &amp;mdash;
publicly. However, when you&amp;#39;re talking in the kitchen with a few of your most trusted
colleagues, let yourself go. Tell them who you think is the weakest part
of the team and what you would do with him or her if you were the boss.
Don&amp;#39;t restrict yourself, but always make sure there are only a few people who can hear you.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;If you follow all these rules, you won&amp;#39;t be fired, ever. Well, until
the company is bankrupt, that is. If it&amp;#39;s a startup, it will go bankrupt for sure,
thanks to you and people like you. If it&amp;#39;s a big enterprise, it probably won&amp;#39;t, unfortunately.
You will be safe, and your resume will have an
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;impressive&lt;/a&gt;
&amp;quot;12 years at Oracle&amp;quot; statement. Well, that&amp;#39;s an achievement, isn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t think so.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/06/how-to-be-good-office-slave.html</guid>
      <dc:date>2015-10-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Vertical and Horizontal Decorating</title>
      <link>http://www.yegor256.com/2015/10/01/vertical-horizontal-decorating.html</link>
      <description>&lt;p&gt;A &lt;a href=&quot;http://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt;
is one of the best ways to add features to an object
without changing its interface. I use
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;composable decorators&lt;/a&gt;
quite often and always question myself as to how to design them right
when the list of features must be configurable.
I&amp;#39;m not sure I have the right answer, but here is
some food for thought.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/the-apartment.jpg' style='width:600px;' alt='The Apartment (1960) by Billy Wilder'/&gt;&lt;figcaption&gt;The Apartment (1960) by Billy Wilder&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s say I have a list of numbers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I want to create a list that will only have odd, unique, positive, and sorted numbers.
The first approach is &lt;strong&gt;vertical&lt;/strong&gt; (I just made this name up):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Numbers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Odds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArrayNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second approach is &lt;strong&gt;horizontal&lt;/strong&gt; (again, a name I made up):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Numbers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Modified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArrayNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Odds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See the difference? The first approach decorates &lt;code&gt;ArrayNumbers&lt;/code&gt; &amp;quot;vertically,&amp;quot;
adding functionality through the composable decorators &lt;code&gt;Positive&lt;/code&gt;, &lt;code&gt;Odds&lt;/code&gt;,
&lt;code&gt;Unique&lt;/code&gt;, and &lt;code&gt;Sorted&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second approach introduces the new interface &lt;code&gt;Diff&lt;/code&gt;, which implements
the core functionality of iterating numbers through instances of
&lt;code&gt;Positive&lt;/code&gt;, &lt;code&gt;Odds&lt;/code&gt;, &lt;code&gt;Unique&lt;/code&gt;, and &lt;code&gt;Sorted&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the user of &lt;code&gt;numbers&lt;/code&gt;, both approaches are the same. The difference is
only in the design. Which one is better and when? It seems that
vertical decorating is easier to implement and is more suitable for
smaller objects that expose just a few methods.&lt;/p&gt;

&lt;p&gt;As for my experience, I always tend to start with vertical decorating since it&amp;#39;s
easier to implement but eventually migrate to a horizontal one when the
number of decorators starts to grow.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/01/vertical-horizontal-decorating.html</guid>
      <dc:date>2015-10-01T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>