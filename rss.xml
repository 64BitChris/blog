<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014-2015</copyright>
    <lastBuildDate>Tue, 03 Nov 2015 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>A Chatbot Is Better Than a UI for a Microservice</title>
      <link>http://www.yegor256.com/2015/11/03/chatbot-better-than-ui-for-microservice.html</link>
      <description>&lt;p&gt;A chatbot (or &lt;a href=&quot;https://en.wikipedia.org/wiki/Chatterbot&quot;&gt;chatterbot&lt;/a&gt;, as Wikipedia says)
is a piece of software that talks to you in chat format.
&lt;a href=&quot;http://www.teamed.io&quot;&gt;We&lt;/a&gt; use chatbots in a few (micro)services, and they
fully &lt;strong&gt;replace&lt;/strong&gt; user interfaces. I don&amp;#39;t think there is any innovation
in this approach, but it has proved to be very effective over the last year or so.
That&amp;#39;s the impetus for this post.
Here is how the &lt;a href=&quot;http://www.rultor.com&quot;&gt;Rultor&lt;/a&gt; chatbot works for
us and what its benefits are.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let me give an example first. Look at the
&lt;a href=&quot;https://github.com/jcabi/jcabi-http/issues/115&quot;&gt;jcabi/jcabi-http#115&lt;/a&gt;
GitHub ticket:&lt;/p&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/chatbot-1.jpg' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;style&gt;
.bullet {
  display: inline-block;
  border-radius: 50%;
  color: #c22e12;
  font-size: 0.8em;
  background-color: #ffb800;
  padding: .2em;
  font-weight: bold;
  width: 1em;
  height: 1em;
  line-height: 1em;
  text-align: center;
  vertical-align: middle;
}
&lt;/style&gt;

&lt;p&gt;Let&amp;#39;s see what&amp;#39;s going on here, and then we&amp;#39;ll discuss
how it&amp;#39;s designed inside. Essentially, I&amp;#39;m &lt;strong&gt;talking&lt;/strong&gt; to a chatbot here.
The name of the chatbot is &lt;code&gt;@rultor&lt;/code&gt; (I wrote about it
&lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;last year&lt;/a&gt;).
At &lt;span class=&quot;bullet&quot;&gt;1&lt;/span&gt;, I&amp;#39;m asking the chatbot to release
a new version of the &lt;a href=&quot;https://github.com/jcabi/jcabi-http&quot;&gt;jcabi-http&lt;/a&gt; library.
At &lt;span class=&quot;bullet&quot;&gt;2&lt;/span&gt;, the chatbot responds, just confirming
that the task is clear and that it&amp;#39;s on it.
At &lt;span class=&quot;bullet&quot;&gt;3&lt;/span&gt;, the bot says the job is
completed and its completion took nine minutes. Our conversation is over.
That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;Now, what is so special about this?&lt;/p&gt;

&lt;p&gt;One thing: There is no user interface. Well, there is
no &lt;strong&gt;traditional&lt;/strong&gt; web-based HTML/CSS user interface. There is no
login, logout, profile, menu, or anything like this. Rultor is
a web service that has &lt;strong&gt;no web UI&lt;/strong&gt;. The only way to
communicate with it is by talking with its chatbot.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s so good about it? A few things.&lt;/p&gt;

&lt;h2 id=&quot;service-is-not-a-server&quot;&gt;Service Is Not a Server&lt;/h2&gt;

&lt;p&gt;This is how the traditional architecture of a web system would look:&lt;/p&gt;

&lt;p&gt;&lt;img src='/uml/eee0d1bcdb7b9318e937e99e04e39ff7.svg'
        alt='PlantUML diagram' class='plantuml'/&gt;&lt;/p&gt;

&lt;p&gt;A user gives instructions to a service and receives responses.
This communication happens through a &lt;strong&gt;user interface&lt;/strong&gt; (UI) &amp;mdash; a bunch
of HTTP entry points that receive requests from a browser and return
HTML+CSS responses. Or, if a user is on another service, requests may
contain some data, and responses will be in XML or JSON. You get the idea;
a user is a client, and the service is a server.&lt;/p&gt;

&lt;p&gt;Like in a restaurant &amp;mdash; you say what you want, and a &lt;strong&gt;server&lt;/strong&gt; goes
to the kitchen, waits there, and in a few minutes, comes back with
spaghetti carbonara. You&amp;#39;re a client, and that cute lady is a server.&lt;/p&gt;

&lt;p&gt;In the case of a chatbot, that&amp;#39;s not the case anymore. Look at the
architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src='/uml/d103661ebf8494340e260442970bf4af.svg'
        alt='PlantUML diagram' class='plantuml'/&gt;&lt;/p&gt;

&lt;p&gt;First, a user posts a request to GitHub through a web user interface
provided by GitHub. It is a communication &lt;strong&gt;hub&lt;/strong&gt; for us. Then, the service
connects to GitHub through its RESTful API and checks whether there
are any new requests there. If something new is found, the service
does the job, prepares a response, and posts it there. The client receives
an email notification about a new response just posted to the ticket. The
client then checks GitHub and finds the response.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-3.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Here is how this would look in a restaurant: There would be a board with sticky notes.
First, you write the note, &amp;quot;I&amp;#39;d like spaghetti carbonara
with parmesan and fresh pepper on top&amp;quot; (Damn, I&amp;#39;m just too hungry now), and
pin it to the board at number 15. Then, you return to your table. A chef from
the kitchen checks that board and finds your sticky note. He makes that
spaghetti, tops it with parmesan, fresh pepper, some basil leaves, and
virgin olive oil ... yeah, he makes it right ... and puts it next to the board.
You hear an announcement that order number 15 is ready. You go there,
collect the food, return to your table, and enjoy.&lt;/p&gt;

&lt;p&gt;The point is that there is &lt;strong&gt;no cute lady&lt;/strong&gt; involved anymore. There is no
server. There are two parties communicating with the board &amp;mdash; you and
the kitchen. The kitchen is our microservice, but it&amp;#39;s not a server anymore.&lt;/p&gt;

&lt;p&gt;These two parties are perfectly &lt;strong&gt;decoupled&lt;/strong&gt; now. They never talk to each other. And
they both are &lt;strong&gt;clients&lt;/strong&gt; of the communication hub, which is GitHub or
a board in the restaurant.&lt;/p&gt;

&lt;p&gt;Again, the microservice is &lt;strong&gt;not a server&lt;/strong&gt; anymore.
Instead, it is a client of a communication hub. And the flip of its position
provides a lot of benefits to us, its developers.&lt;/p&gt;

&lt;h2 id=&quot;no-need-to-be-fast&quot;&gt;No Need to Be Fast&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-5.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;First of all, we don&amp;#39;t need to care much about the performance of our
UI. Well, we don&amp;#39;t care at all, since we don&amp;#39;t have a UI. Do we care
about the &lt;strong&gt;speed&lt;/strong&gt; of responses on GitHub? Not really. When a user posts
a message to GitHub, he or she doesn&amp;#39;t expect our chatbot to give an
immediate answer in less than 100 milliseconds. (That&amp;#39;s what any properly
designed web system must guarantee, I believe.)&lt;/p&gt;

&lt;p&gt;We put a note on the board, and we assume that the kitchen is probably
doing something else at the moment. We&amp;#39;ll wait for a few seconds or even minutes.
If, on the other hand, I give an order to the waitress and she waits five seconds
before replying back, I&amp;#39;ll be very surprised. If she keeps doing
that with every question, I&amp;#39;ll start to wonder to myself if everything is OK with her.&lt;/p&gt;

&lt;p&gt;I expect a user interface to be instant, while in a chat I have no problem
allowing some time for the bot to answer. This happens &lt;strong&gt;naturally&lt;/strong&gt;. We&amp;#39;re
used to delays in chats, when we&amp;#39;re talking with real people. They need some
time to process our information, to think, and to type something back.&lt;/p&gt;

&lt;p&gt;But a user interface doesn&amp;#39;t have that luxury. It has to be bullet-fast;
otherwise, I immediately get frustrated. The same thing happens to you, right?&lt;/p&gt;

&lt;h2 id=&quot;no-need-to-look-cute&quot;&gt;No Need to Look Cute&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-4.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Another advantage of this no-server design is that there is no need
to look pretty. There is no web interface, no HTML, no CSS,
&lt;strong&gt;no graphic design&lt;/strong&gt;. Perhaps not everybody really likes that.
Most non-professional users may still prefer to talk to a cute server
instead of sticking some paper notes to the board.
But if we&amp;#39;re dealing with professional
computer engineers, they&amp;#39;re not that demanding.&lt;/p&gt;

&lt;p&gt;Rultor doesn&amp;#39;t have any web UI, and its users simply don&amp;#39;t know how
it &amp;quot;looks.&amp;quot; It just &lt;strong&gt;talks&lt;/strong&gt; to you. The only thing you see is its
avatar in GitHub.&lt;/p&gt;

&lt;p&gt;This saves a lot of money and time on design efforts, which are usually
very expensive if you aim for high quality. If your
web service looks &lt;strong&gt;average&lt;/strong&gt;, most of its users will assume that it
also works average. Many good ideas have simply died because their
UI wasn&amp;#39;t as impressive as people were used to, thanks to all those
Pinterests and Instagrams.&lt;/p&gt;

&lt;p&gt;A good-looking server has a greater chance for &lt;strong&gt;bigger tips&lt;/strong&gt;, right?
If there is no server and we don&amp;#39;t see the chef, we judge him or her
only by the &lt;strong&gt;quality&lt;/strong&gt; of the food.&lt;/p&gt;

&lt;p&gt;Same here. By getting rid of a UI, we allow ourselves to focus on the
quality of the service we&amp;#39;re delivering. We don&amp;#39;t burn our time and money
on being &lt;strong&gt;nice&lt;/strong&gt;. We spend them on being &lt;strong&gt;useful&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;much-easier-to-scale&quot;&gt;Much Easier to Scale&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-6.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;If we have too many stickies on that board, we just hire more cooks,
or maybe even build another kitchen, and the problem is solved.
We can handle as many customers as necessary.
Well, as long as the board is powerful enough to handle multiple parallel users.&lt;/p&gt;

&lt;p&gt;GitHub is a pretty big platform, with hundreds of thousands of users
and projects. If we have too many requests coming in, we can just
add more processing nodes to Rultor. Remember, we&amp;#39;re not a server anymore;
we are a &lt;strong&gt;client of GitHub&lt;/strong&gt;. We decide when to connect to GitHub and when
to create responses to the requests submitted.&lt;/p&gt;

&lt;p&gt;It is much easier to create a scalable client than a scalable server, mostly
because there is nobody really waiting for us to respond quickly. The
load of requests we&amp;#39;re getting can be managed much easier, since the
decision of when to process them is made by us.&lt;/p&gt;

&lt;h2 id=&quot;mistakes-are-not-so-visible&quot;&gt;Mistakes Are Not So Visible&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-2.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;When you&amp;#39;re standing in front of a customer, most of your mistakes
are unforgivable, primarily because they are very visible. On the other
hand, when you&amp;#39;re cooking something in the kitchen, nobody can see
you and spot your faults. They will only spot them if the spaghetti
has too much salt. In other words, they will &lt;strong&gt;judge&lt;/strong&gt; you by your &lt;strong&gt;results&lt;/strong&gt;,
not by how you produce them.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s the same story with the microservice. When it works as a server, we expect
it to be seamless, respond immediately, and present everything in a
structured and organized way. If something goes wrong, it&amp;#39;s right here
on the web page. Your best case is a 404, while the worst one is that you
present some wrong information to the user. Even though the bug may not
be critical inside the microservice engine, the user doesn&amp;#39;t know that.
The user will judge you by your appearance and won&amp;#39;t forget even small
mistakes.&lt;/p&gt;

&lt;p&gt;However, when you both are clients of a message board, you don&amp;#39;t see
each other. The user communicates with GitHub, and the microservice
interacts with GitHub. Mistakes are less visible. Trust me, we have
had &lt;strong&gt;many of them&lt;/strong&gt; over the 18 months that Rultor has been in public use.
We&amp;#39;ve had downtimes, we&amp;#39;ve had serious logical mistakes, and we&amp;#39;ve had data corruption.
But very rarely have these problems become visible online. We merely saw them
in our server logs. Users didn&amp;#39;t see them. Well, mostly :)&lt;/p&gt;

&lt;h2 id=&quot;everything-is-traceable&quot;&gt;Everything Is Traceable&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-1.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Since there is a communication board between us, it&amp;#39;s very easy
to see the entire history of our discussion, which is very intuitive.
It&amp;#39;s like a Slack chat history. You see what we started from,
who said what, and which conclusions were made.&lt;/p&gt;

&lt;p&gt;Basically, you can&amp;#39;t have that visibility in a web UI. Well, you can
probably create a special page with the &amp;quot;history of operations,&amp;quot; but
who would check it? And how visible and simple would that information be?
And, what&amp;#39;s most important, how would that information match up
with the UI?&lt;/p&gt;

&lt;p&gt;In the log, you&amp;#39;ll state that &amp;quot;the build was started,&amp;quot; but
what&amp;#39;s the build and how was it started? How can I start it again?
Using which buttons and web controls? It&amp;#39;s not clear.&lt;/p&gt;

&lt;p&gt;Thus, the traceability of a &lt;strong&gt;chronological&lt;/strong&gt; chat is unbeatable.&lt;/p&gt;

&lt;h2 id=&quot;easy-to-integrate-with-other-services&quot;&gt;Easy to Integrate With Other Services&lt;/h2&gt;

&lt;p&gt;Yes, think about the future of this approach. If there is a centralized
message board where users talk to a chatbot, why can&amp;#39;t other chatbots
talk to each other too?&lt;/p&gt;

&lt;p&gt;Forget about RESTful APIs. Just a message board where chatbots post
their requests and collect responses. They are perfectly decoupled, replaceable,
and very scalable. Also, their communication protocol is visible and very
traceable. And they boast many other benefits, as was just explained above. It&amp;#39;s much
more convenient for us, both users and programmers, to monitor them and
create them.&lt;/p&gt;

&lt;p&gt;Well, maybe it&amp;#39;s too extreme to get rid of RESTful APIs entirely, but
to some extent, this approach is feasible, I believe.&lt;/p&gt;

&lt;p&gt;I didn&amp;#39;t go too far with this idea, but something was done. We have
a messaging platform that allows multiple chatbots to communicate
with users. It&amp;#39;s called &lt;a href=&quot;http://www.netbout.com&quot;&gt;Netbout&lt;/a&gt;. It&amp;#39;s a very
primitive web system with isolated discussions. Simply put, anyone
can create a new discussion, invite a few friends, and post messages there.
Both users and chatbots can do that.&lt;/p&gt;

&lt;p&gt;So, when a new candidate wants to join &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;,
we ask that person to fill out an &lt;a href=&quot;http://www.teamed.io/join.html&quot;&gt;online form&lt;/a&gt;. When
the candidate clicks the &amp;quot;Submit&amp;quot; button, a new discussion starts, and the first
chatbot decides who should interview that person. The decision is made
according to the skills listed in the form. The chatbot invites one of our
&lt;a href=&quot;http://www.teamed.io/#check-out-ourbest-developers&quot;&gt;best programmers&lt;/a&gt;
to conduct the interview. When the interview is done, another chatbot explains to
the candidate what the next steps are, registers him or her in our
database, and starts to show the progress of work.&lt;/p&gt;

&lt;p&gt;From a user perspective, it looks like he or she is talking to a few
people who understand just a few simple commands. It is very intuitive
and was easy to design.&lt;/p&gt;

&lt;p&gt;I think chatbots are a good approach for interacting with microservices.
Especially when users are more or less professional.&lt;/p&gt;

&lt;p&gt;PS. Illustrations by &lt;a href=&quot;https://www.behance.net/wheeat&quot;&gt;Kristina Wheat&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/11/03/chatbot-better-than-ui-for-microservice.html</guid>
      <dc:date>2015-11-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Why Software Outsourcing Doesn't Work ... Anymore</title>
      <link>http://www.yegor256.com/2015/10/27/outsourcing-doesnt-work.html</link>
      <description>&lt;p&gt;I want to create an iPhone app for my web service, but I don&amp;#39;t have
programmers. Well, I don&amp;#39;t have iOS programmers. And I don&amp;#39;t have money.
Sound familiar? What do I do? Right, I go to &lt;del&gt;Google&lt;/del&gt;
&lt;a href=&quot;http://www.upwork.com&quot;&gt;Upwork&lt;/a&gt; and find an awesome company in Bangalore
that is excited to work with me for &lt;del&gt;nothing&lt;/del&gt; reasonable money. In
a few months and after a few thousand dollars, I realize this is not exactly
what I expected. After yet another few months, I swear to God I&amp;#39;ll never outsource
any software development to anyone. Is it just me? Not really.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/the-godfather-ii.jpg' style='width:600px;' alt='The Godfather: Part II (1974) by Francis Ford Coppola'/&gt;&lt;figcaption&gt;The Godfather: Part II (1974) by Francis Ford Coppola&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This preamble is just a joke, but it&amp;#39;s not so far from
&lt;a href=&quot;/2015/05/21/avoid-software-outsourcing-disaster.html&quot;&gt;the truth&lt;/a&gt;. Of course,
in bigger companies and bigger projects, the story will be different. But the
outcome is almost always the same &amp;mdash; it is
&lt;a href=&quot;/2015/06/15/software-outsourcing-survival-guide.html&quot;&gt;a disaster&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m talking about outsourcing, not offshore development. The difference is
that in outsourcing, there are two companies involved: you the
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;client&lt;/a&gt;
and some WeCodeLikeNoOneElse Inc. from Loompaland.  In offshore
development, you just open an office in that same Loompaland with your own
management and employees. Again, I&amp;#39;m discussing &lt;strong&gt;outsourcing&lt;/strong&gt; here.&lt;/p&gt;

&lt;p&gt;Before writing this, I read
&lt;a href=&quot;https://www.google.com/search?q=why+outsourcing+fails&quot;&gt;a few dozen articles&lt;/a&gt;
about why outsourcing fails, and I&amp;#39;ve found a dozen &amp;quot;reasons&amp;quot; why. However, I think
they all miss the point, because they are looking at the problem from
a paying customer&amp;#39;s point of view. I try to look at it from both sides
and tell you the ugly truth. More on that in a few paragraphs. For now, let&amp;#39;s
explore what the usual reasons are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheapest Providers&lt;/strong&gt;.
Here is the argument: &amp;quot;So you&amp;#39;re outsourcing because you want to optimize costs?
You will end up with the cheapest software shop and sincerely regret
it very soon.&amp;quot; OK, what&amp;#39;s the solution, then? Just pay more?
I don&amp;#39;t think that&amp;#39;s going to solve the problem; I&amp;#39;ll
just burn
&lt;a href=&quot;/2015/06/02/how-to-estimate-software-cost.html&quot;&gt;more money&lt;/a&gt;.
Also, I don&amp;#39;t think this reason has anything to
do with outsourcing specifically. In any other business transaction, a
&amp;quot;win-lose&amp;quot; scenario is a straight path to failure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cultural Mismatch&lt;/strong&gt;.
&amp;quot;You&amp;#39;re in California, and they are in Brazil; you
won&amp;#39;t understand each other.&amp;quot; Is that why we have
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cost_overrun&quot;&gt;cost overruns&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Project_slippage&quot;&gt;schedule slippage&lt;/a&gt;,
and low quality of code? I don&amp;#39;t think so. Moreover, my experience
tells me the opposite. Our programmers at &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;
are from more than 15 countries, and we&amp;#39;ve never had cultural issues get
tangled up in any work conflict, which we have a lot of.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of Face-to-Face Talking&lt;/strong&gt;.
&amp;quot;They are far away somewhere in Poland, so you rarely really talk to them.
That&amp;#39;s why you misunderstand each other.&amp;quot; Look, have you ever met me and
had a face-to-face talk with me? I&amp;#39;m talking to you, the reader of this
post. That&amp;#39;s right, you haven&amp;#39;t met me, but you&amp;#39;re having no problem
understanding my point just by reading this text. That&amp;#39;s mostly because
I&amp;#39;ve made all possible efforts to ensure my point is clear to you. I&amp;#39;m
interested in delivering my thoughts to you, and it is happening. In outsourcing,
the problem is not with the channel but with the motivation. Read on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No Metrics to Measure Success&lt;/strong&gt;.
&amp;quot;You simply can&amp;#39;t define clear metrics of success for a team overseas.
That&amp;#39;s why your relationship eventually falls apart.&amp;quot; Or something like that.
I didn&amp;#39;t quite get what&amp;#39;s meant by &amp;quot;metrics of success,&amp;quot; but if it&amp;#39;s
what I think it is, they are right: Success for a software outsourcing
shop in Kiev is one thing. Success for you, a client of this shop, is something
very different. Read on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Poor Specs&lt;/strong&gt;.
&amp;quot;It&amp;#39;s just not possible to make good specifications for most projects, and a
poorly designed spec is a recipe for failure.&amp;quot; Yes, that&amp;#39;s very true,
but what does this have to do with outsourcing? Ah, right, they are so far
away in Argentina and we&amp;#39;re here in New York City &amp;mdash; how can we make
&lt;a href=&quot;/2014/10/20/how-we-write-product-vision.html&quot;&gt;a good spec&lt;/a&gt;?
I don&amp;#39;t buy it. An inability to clearly and explicitly
specify technical requirements is a flaw of the
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;architect&lt;/a&gt;. Learning, training,
and reading should fix this. Getting everybody together in the office
is &lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;not a solution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leakage of Talent&lt;/strong&gt;.
&amp;quot;Developers offshore are not your employees. They will never
be loyal to the project, and the best of them will quit once in a while.&amp;quot;
Yes, people may leave once in a while. But again, how is that related to their
location? If they don&amp;#39;t use the same coffee machine as their CEO, will they
be less loyal to the project? There are
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;many other&lt;/a&gt; more effective instruments
to boost motivation in a team than just co-locating everybody.&lt;/p&gt;

&lt;p&gt;There could be much more, but this is enough for us. As you see,
I don&amp;#39;t find these &amp;quot;reasons&amp;quot; logical. They merely explain the
consequences but never even touch the real problem, which I believe
sounds like this:&lt;/p&gt;

&lt;p&gt;You&amp;#39;re just a cash cow for an outsourcing company.&lt;/p&gt;

&lt;p&gt;You&amp;#39;re neither a partner nor a friend, despite all your expectations.&lt;/p&gt;

&lt;p&gt;Your goals are opposite of their goals.&lt;/p&gt;

&lt;p&gt;All these &amp;quot;reasons&amp;quot; for outsourcing failures originate in this
fundamental confusion that exists in our heads: We think these
10 programmers sitting in Beijing are part of our business. We believe
they are our team. They are with us in the same boat, sharing
the same values and looking in the same direction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It&amp;#39;s just not true&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It can&amp;#39;t be true.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been in the shoes of an outsourcing company for almost 10 years
(and quit in 2010). The ugly truth is that for a CEO of an outsourcing
shop, the only problem is how to take care of the
next month&amp;#39;s payroll, and &lt;strong&gt;90 percent&lt;/strong&gt; of all expenses are salaries
for the programmers.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why a good customer for them is a paying customer. Not a customer with
a successful project. Not a customer with a properly solved problem. Not
a customer with
&lt;a href=&quot;/2014/10/21/incremental-billing.html&quot;&gt;optimized costs&lt;/a&gt;.
Not a customer with the best possible
technology utilized. Not at all. The best customer is the one that pays,
pays a lot, and pays on time. Period.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s the root cause of all problems with outsourcing.&lt;/p&gt;

&lt;p&gt;The title of this article states that outsourcing doesn&amp;#39;t work &lt;strong&gt;anymore&lt;/strong&gt;. Why
anymore? Did it work before? Yes, it did, when salaries of programmers
were extremely lower in third-world (offshore) countries. For example, in 2001, we had
a team of very good senior Java developers in Ukraine. We paid them above
the market price, and it was &lt;strong&gt;$300 per month&lt;/strong&gt;. At the same time, we were
selling their time to U.S. customers for $15 per hour, which was $2,500 per month.
See the margin?&lt;/p&gt;

&lt;p&gt;With such a margin, outsourcing works fine. I was a CEO and had almost no
worries about payroll. I had enough money to pay my team, even if we
lost some customers eventually. Let me put it this way:
I had the &lt;strong&gt;luxury&lt;/strong&gt; to be
&lt;a href=&quot;/2015/01/05/how-to-be-honest-and-keep-customer.html&quot;&gt;honest&lt;/a&gt;
with my customers.&lt;/p&gt;

&lt;p&gt;Not anymore.&lt;/p&gt;

&lt;p&gt;Put yourself in their shoes. Today, a good Java developer in Ukraine
&lt;a href=&quot;http://www.payscale.com/research/UA/Job=Senior_Java_Developer/Salary&quot;&gt;earns&lt;/a&gt;
&lt;strong&gt;$4,000&lt;/strong&gt; a month. On top of that, this developer expects health
insurance, a free gym membership, free lunch, paid vacation, paid sick leave, etc. At the same
time, the price of Java time is not much higher on the market than it was years ago. Even
if you charge $40 per hour (which is very unlikely), your income would be $6,800.
Again, your income is $6.8K and your expenses are close to $5K. See the margin?&lt;/p&gt;

&lt;p&gt;And don&amp;#39;t forget about office expenses, taxes, computers,
administrative staff, team building events, etc. Because of such a small
margin, you will literally be broke if you lose a key paying customer. You just
can&amp;#39;t afford to keep your programmers &amp;quot;on the &lt;strong&gt;bench&lt;/strong&gt;&amp;quot; for too long.&lt;/p&gt;

&lt;p&gt;Thus, your lone motivation is to keep that
cash flow coming. No matter what. The longer the project, the better.
The lower the quality of code, the better &amp;mdash; more money for maintenance.
The more phone calls, meetings and other time-wasting events, the better.
The more mess in specs, the better. Just do whatever it takes to suck
money from the customer.&lt;/p&gt;

&lt;p&gt;You have to do this, not because you&amp;#39;re evil but because you
have to feed your team. Your team. Yes, the team is &lt;strong&gt;yours&lt;/strong&gt;. You&amp;#39;re responsible
for their salaries, not the customer. In order to protect the team, you
have to go against the real interests of your customers.
You simply can&amp;#39;t be in the same boat with them.&lt;/p&gt;

&lt;p&gt;The point of all this is that outsourcing simply can&amp;#39;t work, because your business interests
can&amp;#39;t be aligned with the interests of your outsourcing &amp;quot;partner.&amp;quot;&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/27/outsourcing-doesnt-work.html</guid>
      <dc:date>2015-10-27T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>What Do You Do With InterruptedException?</title>
      <link>http://www.yegor256.com/2015/10/20/interrupted-exception.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/InterruptedException.html&quot;&gt;&lt;code&gt;InterruptedException&lt;/code&gt;&lt;/a&gt;
is a permanent source of pain in Java, for
junior developers especially. But it shouldn&amp;#39;t be. It&amp;#39;s a rather
simple and easy-to-understand idea. Let me try to describe and
simplify it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/crouching-tiger-hidden-dragon.jpg' style='width:600px;' alt='Crouching Tiger, Hidden Dragon (2000) by Ang Lee'/&gt;&lt;figcaption&gt;Crouching Tiger, Hidden Dragon (2000) by Ang Lee&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s start with this code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Nothing&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What does it do? Nothing, it just spins the CPU endlessly. Can we terminate it?
Not in Java. It will only stop when the entire JVM stops, when you hit
&lt;code&gt;Ctrl-C&lt;/code&gt;. There is no way in Java to terminate a thread unless the
thread exits by itself. That&amp;#39;s the principle we have to have in mind,
and everything else will just be obvious.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s put this endless loop into a thread:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Now how do we stop it?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, how do we stop a thread when we need it to stop?&lt;/p&gt;

&lt;p&gt;Here is how it is designed in Java.
There is a flag in every thread that we can set from the outside. And
the thread may check it occasionally and stop its execution. Voluntarily!
Here is how:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Continue to do nothing&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the only way to ask a thread to stop. There are two methods that
are used in this example. When I call &lt;code&gt;loop.interrupt()&lt;/code&gt;, a flag
is set to &lt;code&gt;true&lt;/code&gt; somewhere inside the thread &lt;code&gt;loop&lt;/code&gt;. When I call
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#interrupted%28%29&quot;&gt;&lt;code&gt;interrupted()&lt;/code&gt;&lt;/a&gt;,
the flag is returned and immediately set to &lt;code&gt;false&lt;/code&gt;. Yeah, that&amp;#39;s the design
of the method. It checks the flag, returns it, and sets it to &lt;code&gt;false&lt;/code&gt;. It&amp;#39;s ugly,
I know.&lt;/p&gt;

&lt;p&gt;Thus, if I never call &lt;code&gt;Thread.interrupted()&lt;/code&gt; inside the thread and don&amp;#39;t
exit when the flag is &lt;code&gt;true&lt;/code&gt;, nobody will be able to stop me. Literally,
I will just ignore their calls to &lt;code&gt;interrupt()&lt;/code&gt;. They will ask me to stop,
but I will ignore them. They won&amp;#39;t be able to interrupt me.&lt;/p&gt;

&lt;p&gt;Thus, to summarize what we&amp;#39;ve learned so far, a properly designed thread
will check that flag once in a while and stop gracefully. If the
code doesn&amp;#39;t check the flag and never calls &lt;code&gt;Thread.interrupted()&lt;/code&gt;, it
accepts the fact that sooner or later it will be terminated cold turkey,
by clicking &lt;code&gt;Ctrl-C&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sound logical so far? I hope so.&lt;/p&gt;

&lt;p&gt;Now, there are some methods in JDK that check the flag for us and throw
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/InterruptedException.html&quot;&gt;&lt;code&gt;InterruptedException&lt;/code&gt;&lt;/a&gt;
if it is set. For example, this is how the method
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#sleep%28long%29&quot;&gt;&lt;code&gt;Thread.sleep()&lt;/code&gt;&lt;/a&gt;
is designed (taking a very primitive approach):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* You still need to wait */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InterruptedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Keep waiting&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Why is it done this way? Why can&amp;#39;t it just wait and never check the flag?
Well, I believe it&amp;#39;s done for a good reason. And the reason is the following
(correct me if I&amp;#39;m wrong): The code should either be bullet-fast or
interruption-ready, nothing in between.&lt;/p&gt;

&lt;p&gt;If your code is fast, you never check the interruption flag, because you
don&amp;#39;t want to deal with any interruptions.
If your code is slow and may take seconds to execute, make it explicit
and handle interruptions somehow.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why &lt;code&gt;InterruptedException&lt;/code&gt; is a
&lt;a href=&quot;/2015/07/28/checked-vs-unchecked-exceptions.html&quot;&gt;checked&lt;/a&gt;
exception. Its design
tells you that if you want to pause for a few milliseconds, make your
code interruption-ready. This is how it looks in practice:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Stop immediately and go home&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well, you could let it float up to a higher level, where they will be
responsible for catching it. The point is that someone will have to
catch it and do something with the thread. Ideally, just stop it, since that&amp;#39;s
what the flag is about. If &lt;code&gt;InterruptedException&lt;/code&gt; is thrown, it means
someone checked the flag and our thread has to finish what it&amp;#39;s doing ASAP.&lt;/p&gt;

&lt;p&gt;The owner of the thread
&lt;a href=&quot;/2014/06/20/limit-method-execution-time.html&quot;&gt;doesn&amp;#39;t want to wait&lt;/a&gt;
any longer. And we must respect the decision of our owner.&lt;/p&gt;

&lt;p&gt;Thus, when you catch &lt;code&gt;InterruptedException&lt;/code&gt;, you have to do whatever
it takes to wrap up what you&amp;#39;re doing and exit.&lt;/p&gt;

&lt;p&gt;Now, look again at the code of &lt;code&gt;Thread.sleep()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InterruptedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember, &lt;code&gt;Thread.interrupted()&lt;/code&gt; not only returns the flag but also
sets it to &lt;code&gt;false&lt;/code&gt;. Thus, once &lt;code&gt;InterruptedException&lt;/code&gt; is thrown, the
flag is reset. The thread no longer knows anything about the
interruption request sent by the owner.&lt;/p&gt;

&lt;p&gt;The owner of the thread asked us to stop,
&lt;code&gt;Thread.sleep()&lt;/code&gt; detected that request,
removed it, and threw &lt;code&gt;InterruptedException&lt;/code&gt;. If you call &lt;code&gt;Thread.sleep()&lt;/code&gt;,
again, it will not know anything about that interruption request and will
not throw anything.&lt;/p&gt;

&lt;p&gt;See what I&amp;#39;m getting at? It&amp;#39;s very important not to lose that
&lt;code&gt;InterruptedException&lt;/code&gt;. We can&amp;#39;t just swallow it and move on. That would
be a severe violation of the entire Java multi-threading idea.
Our owner (the owner of our thread) is
asking us to stop, and we just ignore it. That&amp;#39;s a very bad idea.&lt;/p&gt;

&lt;p&gt;This is what most of us are doing with &lt;code&gt;InterruptedException&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It looks logical, but it doesn&amp;#39;t guarantee that the higher level will
actually stop everything and exit. They may just catch a runtime exception
there, and the thread will remain alive. The owner of the thread will be disappointed.&lt;/p&gt;

&lt;p&gt;We have to inform the higher level that we just caught an interruption
request. We can&amp;#39;t just throw a runtime exception. Such behavior would
be too irresponsible. The entire thread received an interruption request,
and we merely swallow it and convert it into a &lt;code&gt;RuntimeException&lt;/code&gt;.
We can&amp;#39;t treat such a serious situation so loosely.&lt;/p&gt;

&lt;p&gt;This is what we have to do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Here!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#39;re setting the flag back to &lt;code&gt;true&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Now, nobody will blame us for having an irresponsible attitude toward a valuable flag. We
found it in &lt;code&gt;true&lt;/code&gt; status, cleared it, set it back to &lt;code&gt;true&lt;/code&gt;, and threw
a runtime exception. What happens next, we don&amp;#39;t care.&lt;/p&gt;

&lt;p&gt;I think that&amp;#39;s it. You can find a more detailed and official description
of this problem here:
&lt;a href=&quot;http://www.ibm.com/developerworks/library/j-jtp05236/&quot;&gt;Java Theory and Practice: Dealing With InterruptedException&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/20/interrupted-exception.html</guid>
      <dc:date>2015-10-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Software Quality Award, 2016</title>
      <link>http://www.yegor256.com/2015/10/17/award-2016.html</link>
      <description>&lt;p&gt;This is the second year of the
&lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. The prize
is still the same &amp;mdash; &lt;strong&gt;$4,096&lt;/strong&gt;.
The rules were changed a bit. Read on.
BTW, 2015 is &lt;a href=&quot;/2015/04/16/award.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One person can submit &lt;strong&gt;only one&lt;/strong&gt; project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Submissions are accepted until the &lt;strong&gt;September 1, 2016&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Submissions must be sent via email to &lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;me@yegor256.com&lt;/a&gt;.
All I need is your GitHub login and repository name; I will check the commit
history to make sure you&amp;#39;re the main contributor to the project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Results will be announced &lt;strong&gt;October 15, 2016&lt;/strong&gt; on this page and by email.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The best project will receive &lt;strong&gt;$4,096&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Winners that received any cash prizes in previous years can&amp;#39;t submit again.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open source (in GitHub).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least 10,000 lines of code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least one year old.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object-oriented (that&amp;#39;s the only thing I understand).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best project is selected using this &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;criteria&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What doesn&amp;#39;t matter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don&amp;#39;t care about
popularity; quality is the key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it&amp;#39;s still eligible for the award. I don&amp;#39;t care about
your marketing position; quality is all.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/17/award-2016.html</guid>
      <dc:date>2015-10-17T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>What Is the Difference Between Ridley Scott and Joseph Goebbels?</title>
      <link>http://www.yegor256.com/2015/10/16/ridley-scott-and-joseph-goebbels.html</link>
      <description>&lt;p&gt;I saw &lt;a href=&quot;http://www.imdb.com/title/tt3659388/&quot;&gt;The Martian&lt;/a&gt;
this weekend, and it triggered a few thoughts. Of course, I didn&amp;#39;t like
the movie as a
&lt;a href=&quot;/2014/04/06/movies-for-thanasis.html&quot;&gt;piece of art&lt;/a&gt;.
It is total garbage, but this is not my point.
There is something bigger to discuss, aside from the bad acting, primitive
story-line, politically correct but absolutely unrealistic casting,
and tons of logical inconsistencies. It&amp;#39;s Hollywood; what
should I expect, right? Not just that. I think the problem is bigger.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/cossacks-of-the-kuban.jpg' style='width:600px;' alt='Cossacks of the Kuban (1950) by Ivan Pyryev'/&gt;&lt;figcaption&gt;Cossacks of the Kuban (1950) by Ivan Pyryev&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Have any of you seen this movie: &lt;a href=&quot;http://www.imdb.com/title/tt0041562/&quot;&gt;Cossacks of the Kuban&lt;/a&gt;?
It was shot in 1949, when &lt;a href=&quot;https://en.wikipedia.org/wiki/Joseph_Stalin&quot;&gt;Joseph Stalin&lt;/a&gt;
was in power, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Soviet_Union&quot;&gt;Soviet Union&lt;/a&gt;
was literally broke, and &lt;a href=&quot;https://en.wikipedia.org/wiki/World_War_II&quot;&gt;WWII&lt;/a&gt;
brought people to the point of &lt;strong&gt;starvation&lt;/strong&gt;.
However, the film showed something completely opposite &amp;mdash;
wealthy villages, rich peasants, and tables full of food.&lt;/p&gt;

&lt;p&gt;It was &lt;a href=&quot;https://en.wikipedia.org/wiki/Propaganda&quot;&gt;propaganda&lt;/a&gt; in 1949.&lt;/p&gt;

&lt;p&gt;But isn&amp;#39;t it quite similar to what I&amp;#39;ve just seen a few days ago,
produced and directed in 2015 by &lt;a href=&quot;http://www.imdb.com/name/nm0000631/&quot;&gt;Ridley Scott&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;In 1949, the goal of Soviet propaganda was to convince people that
their personal situations with a lack of food and lack of future were
just their local, personal &lt;strong&gt;exceptions&lt;/strong&gt; to a more general rule. And that
rule was that the country was full of food. The country was governed by
the principles of socialism, and they were working perfectly.&lt;/p&gt;

&lt;p&gt;In 2015, the goal of Hollywood propaganda is to convince us that the
organizational and motivational problems in our offices are just local exceptions to
the general rule. The rule is simple: project management is not important
if we&amp;#39;re all good friends.&lt;/p&gt;

&lt;p&gt;Ridley Scott is telling us that in a perfect organization, such as
&lt;a href=&quot;https://www.nasa.gov/&quot;&gt;NASA&lt;/a&gt;,
everybody &lt;strong&gt;loves&lt;/strong&gt; everyone; that&amp;#39;s why they can get a man from Mars without
even a map. Do the same in your company and you will be fine. You don&amp;#39;t
need risk planning, you just need a hero. Actually, you&amp;#39;d be better off
with a couple of heroes who love each other.&lt;/p&gt;

&lt;p&gt;That doesn&amp;#39;t work for you? It must be a problem with implementation.
Keep trying and smiling.&lt;/p&gt;

&lt;p&gt;Make friends, don&amp;#39;t make plans.&lt;/p&gt;

&lt;p&gt;It is a lie, very similar to the lie we heard in 1949.&lt;/p&gt;

&lt;p&gt;The truth is that you are not going to get anywhere if you follow
the spirit of this movie. In reality, teamwork must look completely
different. There are conflicts, fights, politics, betrayals, back-stabbing,
leakage of information, and just primitive incompetence. To manage all
this, one can&amp;#39;t just be a &lt;strong&gt;nice guy&lt;/strong&gt; with a big heart. I would even say
that being a nice guy is a drawback for any management position in a modern
organization. Well, in any organization at any time and in any place.&lt;/p&gt;

&lt;p&gt;Project management is &lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;not&lt;/a&gt;
about compassion and sympathy. It is about
accurate and routine comparison of risks, probabilities, impacts, and
their mitigation plans. It is about
&lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;setting rules&lt;/a&gt;
and making &lt;strong&gt;decisions&lt;/strong&gt;. It is about making sure
these decisions are being executed, precisely and without mistakes.
It is about &lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;making sure&lt;/a&gt;
those who&amp;#39;ve made mistakes are &lt;strong&gt;punished&lt;/strong&gt; while those who&amp;#39;ve
done everything right are &lt;strong&gt;rewarded&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A team of six. In a multi-million-dollar spaceship.
Flying to another planet to save one person.
Against explicit instructions from upper management.
They come back as national heroes.
Are you serious?&lt;/p&gt;

&lt;p&gt;Have you tried to deploy a new feature on a production server against
the direct will of your boss? Try it. No spaceships, no Mars. Just
a piece of code and a simple server. Then try to convince your boss
that you&amp;#39;re a hero.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m sure you get the point.&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.popsci.com/sites/popsci.com/files/styles/large_1x_/public/psc1015_mt_088.jpg' style='width:600px;' alt='Shooting The Martian (by popsci.com)'/&gt;&lt;figcaption&gt;Shooting The Martian (by popsci.com)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;So, why is Ridley Scott lying to us?
Why is he giving us a false picture of reality?
Intentionally false. He knows better than I do how real management
works in real-life organizations. Hollywood is not much different
than Silicon Valley in this aspect. So, why is he lying?&lt;/p&gt;

&lt;p&gt;Why was &lt;a href=&quot;https://en.wikipedia.org/wiki/Joseph_Goebbels&quot;&gt;Joseph Goebbels&lt;/a&gt;,
a minister of propaganda in the Third Reich,
lying to the German people?&lt;/p&gt;

&lt;p&gt;Because that&amp;#39;s what we like to hear.&lt;/p&gt;

&lt;p&gt;We don&amp;#39;t want to know the truth. We didn&amp;#39;t want to know about
Nazi war crimes &amp;mdash; so Joseph Goebbels built a fake reality for us.
We don&amp;#39;t want to know about the true principles of management &amp;mdash;
so Ridley Scott built fake ones for us.&lt;/p&gt;

&lt;p&gt;Think about it.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/16/ridley-scott-and-joseph-goebbels.html</guid>
      <dc:date>2015-10-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Competition Without Rules Is Destructive</title>
      <link>http://www.yegor256.com/2015/10/13/competition-without-rules.html</link>
      <description>&lt;p&gt;When your team has to choose which technical decision to make,
who has the final say? When one of your colleagues asks
for a raise, who decides, and what is his or her decision based on?
When it&amp;#39;s necessary to work overtime, how is it decided
who will stay in the office?
I&amp;#39;m expecting you to shrug your shoulders. You&amp;#39;re right, these questions never
have explicit answers in modern organizations. We are used to working
in a more &amp;quot;democratic&amp;quot; way, where such decisions are made
&lt;strong&gt;subjectively&lt;/strong&gt; by managers or more senior employees.
Is this how it should be?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/the-wrestler.jpg' style='width:600px;' alt='The Wrestler (2008) by Darren Aronofsky'/&gt;&lt;figcaption&gt;The Wrestler (2008) by Darren Aronofsky&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;We are trying to &lt;strong&gt;avoid explicitness&lt;/strong&gt; in these sensitive subjects. Indeed,
how can we tell Jeff that his salary is lower than
Monica&amp;#39;s because his performance is worse?
This will definitely lead to depression and negativity
within the team, right?&lt;/p&gt;

&lt;p&gt;What I&amp;#39;m trying to say is that &lt;strong&gt;we don&amp;#39;t set rules&lt;/strong&gt;. We think that
strict and explicit rules related to performance
offend creative people. Well, all people.&lt;/p&gt;

&lt;p&gt;We avoid explicitness in performance appraisals.&lt;/p&gt;

&lt;p&gt;And this is totally wrong!&lt;/p&gt;

&lt;p&gt;This is a &lt;strong&gt;mistake&lt;/strong&gt;, and it causes big problems!&lt;/p&gt;

&lt;p&gt;When a group doesn&amp;#39;t have explicitly defined principles of
survival and growth, it starts to create them &lt;strong&gt;naturally&lt;/strong&gt;. When
people don&amp;#39;t know what exactly needs to be done in order to get
a 15 percent raise, they find a way to get this information anyway. And guess what
this information will end up being? Right &amp;mdash; you have
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;to make your boss happy&lt;/a&gt;;
that&amp;#39;s how your chances for a raise improve.&lt;/p&gt;

&lt;p&gt;Instead of working toward the goals set by the organization,
we are fighting with each other for the attention of our boss.
Instead of focusing on the results and their quality, we
are reading the mood of our manager. Our fear becomes a guide for us.&lt;/p&gt;

&lt;p&gt;Competition is &lt;strong&gt;inevitable&lt;/strong&gt; in a group, especially if the group consists
of creative people. Creativity is all about competition. Each of us
wants to be better than the others, and this is what drives &lt;strong&gt;innovation&lt;/strong&gt;.
But if the team has no rules, even a minor competition seriously
and negatively affects their motivation.&lt;/p&gt;

&lt;p&gt;If you want your team to be creative and productive, clearly and explicitly
define the rules of competition. Make sure everyone can get clear and
straightforward answers at any time to questions like these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Who is the best developer on our team?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why is my salary lower than Jeff&amp;#39;s?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do I need to do in order to get a raise?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under what conditions will I be fired?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can you ask these questions in your team and easily
get explicit answers?&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 13 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/13/competition-without-rules.html</guid>
      <dc:date>2015-10-13T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Be a Good Office Slave</title>
      <link>http://www.yegor256.com/2015/10/06/how-to-be-good-office-slave.html</link>
      <description>&lt;p&gt;This is a short manual for you, my friend. I assume you are sitting in the
office right now, reading this blog post. Maybe you don&amp;#39;t like
your office job, or maybe you enjoy it and feel excited to be
close to your office friends. It doesn&amp;#39;t matter. What matters is that
there is always an alternative to office slavery. I&amp;#39;m not talking about
starting your own business. There are people in this world who work
for someone without doing what is described below. They do exist,
as well as companies that don&amp;#39;t turn their employees into slaves. I really hope
you will eventually find one. In the meantime, this manual is for you :)&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/the-office.jpg' style='width:600px;' alt='The Office (2001–2003)'/&gt;&lt;figcaption&gt;The Office (2001–2003)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Help Others&lt;/strong&gt;.
Find the stupidest newbies and help them. Regardless of what exactly
you help them with, they should rely on you. Show them where the restroom is,
recommend a good restaurant nearby, assist in an IDE installation,
explain how the project works, and make standard jokes about the worst
class in it. They must become your best friends &amp;mdash; and not only them. Be
helpful to everybody. No matter what is happening, everyone must know
that you&amp;#39;re ready to help. Ideally, they all must depend on your
kindness and readiness to save them from the
&lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;chaos&lt;/a&gt; around.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be the Last to Leave the Office&lt;/strong&gt;.
Nothing annoys a manager more than an employee who leaves the office
at 5 p.m. sharp. It&amp;#39;s a sign of disrespect. Don&amp;#39;t you like it here? Is there
anything in this life more important to you than this job? There shouldn&amp;#39;t be.
Demonstrate that by staying late. Here is a simple trick:
just come later. The boss won&amp;#39;t blame you for that. But always stay there
after everybody else is gone. Ideally, you should leave right after the boss.
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;Overtime&lt;/a&gt;
is a clear sign of your loyalty to our mutual results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Nag&lt;/strong&gt;.
No matter what is happening, you should never criticize your direct manager. The
boss is &lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;always right&lt;/a&gt;.
Everything else may be wrong &amp;mdash; the situation,
colleagues, suppliers, computers, the CEO, investors, the market, or the weather,
but not the boss you directly report to.
The word of this person is the law. The boss is the god. Ideally, you should
be the prophet. No matter what the boss says, you deliver
it to others. And you must look like you sincerely believe that it&amp;#39;s right.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attend All Meetings&lt;/strong&gt;.
No matter what they are about, you must be there. And don&amp;#39;t just be present;
actively participate. It&amp;#39;s not so difficult, and very soon you will
start to understand what they are talking about and will be able to say
something, even if you had no idea about the subject beforehand. Eventually,
everybody will start thinking they must ask your permission in order
to make some decision, because you were at that meeting. Important people
don&amp;#39;t write code; they attend
&lt;a href=&quot;/2015/07/13/meetings-are-legalized-robbery.html&quot;&gt;meetings&lt;/a&gt;. Remember that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Turn Down Recruiters, Publicly&lt;/strong&gt;.
Loyalty! That&amp;#39;s what matters to a real team. When a recruiter calls you,
raise your voice and explain that you&amp;#39;re happy in this company and don&amp;#39;t
want to move on, ever. The more people who hear you, the better. Also,
you can sometimes tell stories about offers you&amp;#39;re getting
and how you turn them down. Your boss should be the main
audience for these stories. Why do you turn them down? Not because they are
bad, but because your life belongs to this company.
Loyalty is what makes you a
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;good slave&lt;/a&gt;; don&amp;#39;t forget it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Take Sides&lt;/strong&gt;.
It&amp;#39;s just too risky. In any argument, you can always find pros and cons
for both sides, right? So why support one of them? You may be wrong and
lose respect in front of everybody. Why take that chance? Instead, always
say that there are drawbacks to both options. That&amp;#39;s what a wise man would
say, anyway. There is no absolute truth in this world. That&amp;#39;s why you should
always stay in the middle, where you will never be wrong. Well, until your boss
takes one of the sides. That&amp;#39;s the right moment to agree and follow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Never Ask for a Raise&lt;/strong&gt;.
It should be absolutely clear to everybody that you don&amp;#39;t work for money. You
work for &lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;the big idea&lt;/a&gt;.
Period.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attend All Social Events&lt;/strong&gt;.
Birthdays, corporate parties, Halloween, Friday beers &amp;mdash; you must be
there, always. Don&amp;#39;t worry about wasting your life; you will like
them eventually. It is very important to demonstrate that you truly live in the
office. You are not just writing code, taking money, and going home to your family.
Absolutely not! The office is your real family, and you truly enjoy eating
pizza with your boss and listening to his childhood stories. That&amp;#39;s how
you demonstrate your loyalty, which is the best quality of a
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;good slave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Point Fingers Privately&lt;/strong&gt;.
Don&amp;#39;t say anything bad about anyone in public. No matter who is doing what,
we&amp;#39;re always a team; we&amp;#39;re together. Together! This should be your main
keyword when talking about results, problems, and risks. Never blame anyone &amp;mdash;
publicly. However, when you&amp;#39;re talking in the kitchen with a few of your most trusted
colleagues, let yourself go. Tell them who you think is the weakest part
of the team and what you would do with him or her if you were the boss.
Don&amp;#39;t restrict yourself, but always make sure there are only a few people who can hear you.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;If you follow all these rules, you won&amp;#39;t be fired, ever. Well, until
the company is bankrupt, that is. If it&amp;#39;s a startup, it will go bankrupt for sure,
thanks to you and people like you. If it&amp;#39;s a big enterprise, it probably won&amp;#39;t, unfortunately.
You will be safe, and your resume will have an
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;impressive&lt;/a&gt;
&amp;quot;12 years at Oracle&amp;quot; statement. Well, that&amp;#39;s an achievement, isn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t think so.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/06/how-to-be-good-office-slave.html</guid>
      <dc:date>2015-10-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Vertical and Horizontal Decorating</title>
      <link>http://www.yegor256.com/2015/10/01/vertical-horizontal-decorating.html</link>
      <description>&lt;p&gt;A &lt;a href=&quot;http://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt;
is one of the best ways to add features to an object
without changing its interface. I use
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;composable decorators&lt;/a&gt;
quite often and always question myself as to how to design them right
when the list of features must be configurable.
I&amp;#39;m not sure I have the right answer, but here is
some food for thought.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/10/the-apartment.jpg' style='width:600px;' alt='The Apartment (1960) by Billy Wilder'/&gt;&lt;figcaption&gt;The Apartment (1960) by Billy Wilder&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s say I have a list of numbers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I want to create a list that will only have odd, unique, positive, and sorted numbers.
The first approach is &lt;strong&gt;vertical&lt;/strong&gt; (I just made this name up):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Numbers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Odds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArrayNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second approach is &lt;strong&gt;horizontal&lt;/strong&gt; (again, a name I made up):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Numbers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Modified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArrayNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Odds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See the difference? The first approach decorates &lt;code&gt;ArrayNumbers&lt;/code&gt; &amp;quot;vertically,&amp;quot;
adding functionality through the composable decorators &lt;code&gt;Positive&lt;/code&gt;, &lt;code&gt;Odds&lt;/code&gt;,
&lt;code&gt;Unique&lt;/code&gt;, and &lt;code&gt;Sorted&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second approach introduces the new interface &lt;code&gt;Diff&lt;/code&gt;, which implements
the core functionality of iterating numbers through instances of
&lt;code&gt;Positive&lt;/code&gt;, &lt;code&gt;Odds&lt;/code&gt;, &lt;code&gt;Unique&lt;/code&gt;, and &lt;code&gt;Sorted&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the user of &lt;code&gt;numbers&lt;/code&gt;, both approaches are the same. The difference is
only in the design. Which one is better and when? It seems that
vertical decorating is easier to implement and is more suitable for
smaller objects that expose just a few methods.&lt;/p&gt;

&lt;p&gt;As for my experience, I always tend to start with vertical decorating since it&amp;#39;s
easier to implement but eventually migrate to a horizontal one when the
number of decorators starts to grow.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/01/vertical-horizontal-decorating.html</guid>
      <dc:date>2015-10-01T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>You're Just the Mayonnaise in a Bad Sandwich</title>
      <link>http://www.yegor256.com/2015/09/29/mayonnaise.html</link>
      <description>&lt;p&gt;That&amp;#39;s what a character played by actor Bruce Willis said to Robert DeNiro&amp;#39;s
movie producer character in Barry Levinson&amp;#39;s brilliant film
&lt;a href=&quot;http://www.imdb.com/title/tt0486674/&quot;&gt;What Just Happened&lt;/a&gt;. I second that.
Producers, recruiters, managers, real estate agents,
sales agents, lawyers, and &lt;a href=&quot;http://english.stackexchange.com/questions/103448/is-outstaffing-a-real-word&quot;&gt;outstaffers&lt;/a&gt;
&amp;mdash; what do they all have in common?
They are middlemen standing between money and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Proletariat&quot;&gt;proletariat&lt;/a&gt;, taking a huge percentage
for themselves but &lt;strong&gt;adding no value&lt;/strong&gt;. Their very existence is our mutual
misfortune. We are too weak to get rid of them now, but sooner
or later every supply chain will be &lt;strong&gt;mayonnaise-free&lt;/strong&gt;. Look at
Uber &amp;mdash; taxi companies are dead already, and we now have only drivers
and passengers with a computer system in between. The same will happen
everywhere else.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/09/what-just-happened.jpg' style='width:600px;' alt='What Just Happened (2008) by Barry Levinson'/&gt;&lt;figcaption&gt;What Just Happened (2008) by Barry Levinson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Seriously, look at &lt;strong&gt;IT recruiters&lt;/strong&gt;, for example. To find a programmer, one has to pay
about $30K (in Silicon Valley, if a programmer&amp;#39;s salary is, say, $120K a year)
to a recruiter. $30,000! What will this money be spent on? Or let me put it this way:
How much software will I get for this money? Let me put it even better:
Why don&amp;#39;t I give this money to the programmer directly as a bonus for
switching companies? Why do &lt;strong&gt;we&lt;/strong&gt; need this recruiter between us &amp;mdash;
me and the programmer I&amp;#39;m going to hire? Can&amp;#39;t we use this $30,000 more effectively?&lt;/p&gt;

&lt;p&gt;Because software systems are not powerful enough yet? Because I can&amp;#39;t
find a programmer with a few clicks and I have to delegate this
search function to someone for $30K?&lt;/p&gt;

&lt;p&gt;Well, yes and no.&lt;/p&gt;

&lt;p&gt;On one hand, there are plenty of job sites and rather powerful
technologies for finding the right person.
There is &lt;a href=&quot;https://careers.stackoverflow.com/&quot;&gt;StackOverflow Careers&lt;/a&gt;,
which not only allows me to find a programmer but also see what he or she talks about and
the quality of his or her questions and answers. There is
&lt;a href=&quot;http://www.github.com&quot;&gt;GitHub&lt;/a&gt; that demonstrates the code written
by a programmer, helping me easily understand its quality.
There are professional certifications that show how strong
a candidate&amp;#39;s skills are. And there are plenty of other avenues.&lt;/p&gt;

&lt;p&gt;On the other hand, these tools are not actively used by
the majority of programmers and software companies &amp;mdash;
mostly because IT recruiters stay between us, &lt;strong&gt;stealing&lt;/strong&gt; our money
and protecting that position for themselves.
Just like taxi companies remain between passengers and drivers,
or real estate agents get in between house owners and house buyers,
or outstaffing companies squeeze in the middle of project sponsors and engineers.&lt;/p&gt;

&lt;p&gt;Imagine if there was no Google and you had to hire a &amp;quot;researcher&amp;quot; every
time you needed to find some information. That&amp;#39;s how it worked 50 years
ago. Not anymore. Google solved the problem of information discovery. It is
fast, it is accurate, and it is free. The researchers are out of business.
Are we sorry about it? Well, maybe, but that&amp;#39;s the way it should be.
The same will happen with IT recruiters and all those &amp;quot;agents.&amp;quot; They will
eventually be out of business and will start doing something that
actually adds &lt;strong&gt;some value&lt;/strong&gt; for all of us.&lt;/p&gt;

&lt;p&gt;At the moment, they are simply taking away our money, &lt;strong&gt;exploiting&lt;/strong&gt; the
fact that we&amp;#39;re lazy, or stupid, or shy, or you name it. For example, it was not obvious
in the beginning how to use Google. I know a few people who still don&amp;#39;t
know how to do it. I&amp;#39;m sure you know a few, too. They would
rather call a friend when they need information than pull up
Google.&lt;/p&gt;

&lt;p&gt;Say I&amp;#39;m a good friend and Jeff calls me to ask what the weather will
be like tomorrow in California. I&amp;#39;ll advise him to Google it, now and
every time in the future. I will teach him how to do it. But if I was a lousy
friend and wanted Jeff to depend on me forever, I would just
browse over to Google, check the weather, and tell Jeff it&amp;#39;ll be cloudy.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s exactly what recruiters are doing.
Their entire business is based on the fact that we&amp;#39;re &lt;strong&gt;not smart&lt;/strong&gt; enough
to use existing software systems, publicly available and in most cases
very cheap or simply free. Or we&amp;#39;re &lt;strong&gt;too shy&lt;/strong&gt; to apply for a new job ourselves.
Or we just &lt;strong&gt;don&amp;#39;t know&lt;/strong&gt; how to write a good resume and emphasize
our skills properly. They are exploiting our weaknesses to make money.&lt;/p&gt;

&lt;p&gt;A friend of mine was looking for a house in San Francisco a few months ago. He
actually found the house on &lt;a href=&quot;http://www.zillow.com&quot;&gt;Zillow&lt;/a&gt; but paid $70,000
to two real estate agents to help him close the deal
(the price of the house was close to $1.4 million,
with 2.5 percent to each agent). What did these &amp;quot;hard-working&amp;quot; people do to earn his $70,000?
They prepared the necessary paperwork and, of course,
talked to him for a few weeks.&lt;/p&gt;

&lt;p&gt;Can&amp;#39;t we get rid of these two good-for-nothings and delegate their
operations to a computer system? Well, we have Zillow, but how much
of my friend&amp;#39;s $70,000 found its way to Zillow? Almost nothing
(I assume one of the agents paid a few pennies to publish an ad there).
Is that fair? Let&amp;#39;s instead give $5,000 out of every real estate transaction
to Zillow and let it handle everything, automatically. Without any &amp;quot;agents&amp;quot;
involved. Can we? I&amp;#39;m sure we can, and that&amp;#39;s the future.&lt;/p&gt;

&lt;p&gt;What will the army of real estate agents do? Well, maybe something useful,
like &lt;strong&gt;cleaning streets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The very existence of this mayonnaise in our modern business environment
is a very negative thing. Money is simply not working the way it should.
Also, since this mayonnaise is rather expensive, its existence creates
a very de-motivating effect on those who are actually delivering value while
making a much smaller income. It obviously demonstrates that the entire
system is defective and simply not fair.&lt;/p&gt;

&lt;p&gt;The same is true about &lt;strong&gt;outstaffing&lt;/strong&gt; companies, which we contract with to
gain access to programmers sitting somewhere overseas or much closer.
They find developers, hire them full-time, and resell their skills with a 150 percent
or greater margin on a part-time or short-term basis. I&amp;#39;ve been getting a few offers
from such companies every day.&lt;/p&gt;

&lt;p&gt;They want me to pay, say, $40 for each hour while a developer
sitting in their office gets like $2,500 per month. This means
$25 out of my $40 will be spent &lt;strong&gt;not writing code&lt;/strong&gt; but rather on something else.
Also, a programmer will be motivated for the $2,500, not for $7,000.
So I will be paying $7K per month and getting software worth $2,500 a month.&lt;/p&gt;

&lt;p&gt;I will be paying for a Mercedes-Benz S-Class but getting a Ford Focus.
I&amp;#39;m not greedy; I just want my every dollar to be converted into some value.
In this scenario, $4,500 will be simply wasted.&lt;/p&gt;

&lt;p&gt;The same is true about every single middleman in the market. They
make business processes less effective, take away significant
amounts of money, and slow down optimizations and innovations.
A truly modern and innovative way of doing business is by &lt;strong&gt;directly connecting
money and people&lt;/strong&gt; who add value. There should be no one in
between except computer systems.&lt;/p&gt;

&lt;p&gt;Sometimes I hear the comment that people love to work with people, not computers. That&amp;#39;s
why we need all that mayonnaise &amp;mdash; to make our life &lt;strong&gt;happier&lt;/strong&gt;? It&amp;#39;s true that
people love to deal with people &amp;mdash; people we really need, people who
speak the same language, and people who deliver &lt;strong&gt;real value&lt;/strong&gt;. Not with
producers, recruiters, real estate agents, sales agents, outstaffers, lawyers,
travel agents, investment brokers, executive officers, or taxi dispatchers.&lt;/p&gt;

&lt;p&gt;The point of Bruce Willis&amp;#39;s character is that when the sandwich is bad
you don&amp;#39;t fix it with a mayonnaise. It won&amp;#39;t help, but only make things worse.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/29/mayonnaise.html</guid>
      <dc:date>2015-09-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Are You a Micromanager?</title>
      <link>http://www.yegor256.com/2015/09/22/micromanagement.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Micromanagement&quot;&gt;Micromanagement&lt;/a&gt;,
according to Wikipedia at the time of this writing, is &amp;quot;a management style
whereby a manager closely &lt;strong&gt;observes&lt;/strong&gt; or &lt;strong&gt;controls&lt;/strong&gt; the work of subordinates
or employees.&amp;quot; Everyone knows micromanagement is evil, but what
could be wrong with closely observing or controlling people&amp;#39;s work? Nothing.
Observing and controlling is not what&amp;#39;s so bad about micromanagement. It
is something completely different.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/09/office-space.jpg' style='width:600px;' alt='Office Space (1999) by Mike Judge'/&gt;&lt;figcaption&gt;Office Space (1999) by Mike Judge&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are &lt;a href=&quot;https://www.google.com/search?q=micromanagement&quot;&gt;tons of articles&lt;/a&gt;
about micromanagement. Most of them emphasize that the &amp;quot;micro&amp;quot; prefix prescribes
the size of the tasks being managed, meaning a good manager doesn&amp;#39;t care
about the small stuff while a micromanager employs
&amp;quot;excessive control or attention to details&amp;quot;, as
&lt;a href=&quot;http://www.merriam-webster.com/dictionary/micromanage&quot;&gt;Merriam-Webster&lt;/a&gt; says.&lt;/p&gt;

&lt;p&gt;It seems that in order to become a good manager, one should just
stop paying attention to details. Huh?
What could be worse than a manager who doesn&amp;#39;t pay attention to details?&lt;/p&gt;

&lt;p&gt;Micromanagement has nothing to do with the details observed or the amount
of control a manager exerts over subordinates. Instead, it is all about
&lt;strong&gt;how&lt;/strong&gt; the details are observed and control is exercised. A micromanager
gives instructions while a good manager defines goals and rules.&lt;/p&gt;

&lt;p&gt;A micromanager defines &lt;strong&gt;algorithms&lt;/strong&gt; for achieving results and insists
on them being implemented according to his or her will. This is what
a micromanager would sound like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- Could you please stop what you&amp;#39;re doing now
  and install Nginx on a new server? I beg you,
  don&amp;#39;t do anything else until it&amp;#39;s done.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how a good manager would delegate a similar task:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- Hey, the server with Nginx configured must
  be up and running by 6 p.m. I&amp;#39;m counting on you.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pay attention to how polite our micromanager is and how rude the good manager is.
However, it&amp;#39;s obvious that the first one is extremely annoying while
the second doesn&amp;#39;t irritate us at all. Because it&amp;#39;s all about how
the task is defined &amp;mdash; as an &lt;strong&gt;algorithm&lt;/strong&gt; or as a &lt;strong&gt;goal with rules&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A micromanager treats me as a dumb executor of his or her will. A micromanager
is &lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot;&gt;&lt;strong&gt;imperative&lt;/strong&gt;&lt;/a&gt;.
A good manager, on the other hand, is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;&lt;strong&gt;declarative&lt;/strong&gt;&lt;/a&gt;. A good manager
declares what needs to be done, never telling me how I must achieve it.&lt;/p&gt;

&lt;p&gt;By the way, there is &amp;mdash; surprisingly &amp;mdash; a lot in common between management and
object-oriented programming :) Good object-oriented programming is
&lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;also declarative&lt;/a&gt;,
not imperative.&lt;/p&gt;

&lt;p&gt;Thus, this &amp;quot;micro&amp;quot; prefix is not really about the size of the tasks a manager
keeps under control. It is about what a manager wants to see inside them &amp;mdash;
a black box or a glass box under a &lt;strong&gt;microscope&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A good manager doesn&amp;#39;t care about what I&amp;#39;m doing now, what tasks I&amp;#39;m working on,
or what my plans, problems, and risks are. Instead, a good manager cares about my
&lt;strong&gt;results&lt;/strong&gt;, to a very specific level of details. A good manager pays extreme
attention to defining quality standards for my work, clearly explaining
expectations to me, and explicitly defining the rules of failure and success. A good
manager makes the path ahead of me very clear. With a good manager, I know
exactly what results are expected and what will happen if I fail or
succeed.&lt;/p&gt;

&lt;p&gt;Thus, to be a good manager, you should never tell your subordinates &lt;strong&gt;how&lt;/strong&gt;
to complete their tasks. Instead, you should define &lt;strong&gt;what&lt;/strong&gt; solutions and results
are expected. And, of course, what will happen in the case of success or failure.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/22/micromanagement.html</guid>
      <dc:date>2015-09-22T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Fire Someone Right</title>
      <link>http://www.yegor256.com/2015/09/16/how-to-fire-someone-right.html</link>
      <description>&lt;p&gt;A friend of mine asked me today, &amp;quot;How should I fire
someone the right way? What are the tricks to do it nicely,
gracefully, and professionally?&amp;quot; I responded by saying that if you question yourself
about how to do it right, you&amp;#39;re doing it wrong in the first place.
If firing is a painful and unpleasant process for you, there is
a problem with your management model. Firing must be an &lt;strong&gt;easy&lt;/strong&gt;
and &lt;strong&gt;open&lt;/strong&gt; procedure, &lt;strong&gt;visible&lt;/strong&gt; and &lt;strong&gt;understood&lt;/strong&gt; by the entire team.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/09/up-in-the-air.jpg' style='width:600px;' alt='Up in the Air (2009) by Jason Reitman'/&gt;&lt;figcaption&gt;Up in the Air (2009) by Jason Reitman&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I mentioned this problem before in
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;my post&lt;/a&gt; about team morale.
I said that firing someone should not be done behind &lt;strong&gt;closed doors&lt;/strong&gt;.
Instead, the assessment of individual performance should
occur openly and be visible to the entire team. If you need to close
the door in order to talk &amp;quot;privately&amp;quot; to express your concerns and
eventually to fire someone, you are a bad manager.&lt;/p&gt;

&lt;p&gt;I also explained &lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;some time ago&lt;/a&gt;
that a perfectly managed team is working for the project, not for you, the boss.
The team must share the same goal and work towards it. The boss (or CEO,
CTO, project manager, Scrum master, team lead, etc.) is there in order
to enforce the &lt;strong&gt;rules&lt;/strong&gt; accepted by the team. The team agrees to the rules,
so the boss is just making sure they are &lt;strong&gt;enforced&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If firing is unpleasant for you, the rules are not clear.&lt;/p&gt;

&lt;p&gt;If the rules are not clear, you&amp;#39;re a bad manager.&lt;/p&gt;

&lt;p&gt;The firing is unpleasant only when your decision is not supported by the team.
You feel you&amp;#39;re doing something wrong to the person you are firing and
to the people who stay on the team. You feel it only because you don&amp;#39;t have
enough support from your team. You&amp;#39;re acting as a dictator, not a true leader.&lt;/p&gt;

&lt;p&gt;The firing decision should not be your decision. It should be derived
from the rules your team agreed to work with. You should not fire when
you don&amp;#39;t like the person. Instead, you should fire when the person doesn&amp;#39;t
comply with the rules, like when there&amp;#39;s a lack of performance.&lt;/p&gt;

&lt;p&gt;When the rules are clear, everybody understands them, and reconciliation of
performance is done regularly and openly, everybody will understand
your firing decision and support it &amp;mdash; including the person you&amp;#39;re firing!
Because it won&amp;#39;t be your decision, but rather a decision logically derived
from the rules. You will work for the project, not for your emotions or
personal feelings.&lt;/p&gt;

&lt;p&gt;By firing a person who is causing problems for the project,
you will be doing a good thing for everybody &amp;mdash; the project, the team, and the
person who will go and find another place for his or her skills and talents.&lt;/p&gt;

&lt;p&gt;Let me reiterate: If firing is unpleasant, there is a problem
with the manager and the management.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/16/how-to-fire-someone-right.html</guid>
      <dc:date>2015-09-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>When Do You Stop Testing?</title>
      <link>http://www.yegor256.com/2015/09/10/testing-exit-criteria.html</link>
      <description>&lt;p&gt;There is a software to be tested. There is a team of testers. There is
some money in the budget. There is some time in the schedule. We start
right now. Testers are trying to break the product, finding bugs,
reporting bugs, communicating with programmers when necessary, doing
their best to find what&amp;#39;s wrong. Eventually they stop and say
&amp;quot;we&amp;#39;re done&amp;quot;. How do they know when to stop? When there is enough
testing? It&amp;#39;s obvious &amp;mdash; when there are &lt;strong&gt;no more bugs left&lt;/strong&gt; and the
product can be shipped! If you think like this, I have bad news for you.
You&amp;#39;re &lt;strong&gt;fundamentally wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/09/la-fille-sur-le-pont.jpg' style='width:600px;' alt='La fille sur le pont (1999) by Patrice Leconte'/&gt;&lt;figcaption&gt;La fille sur le pont (1999) by Patrice Leconte&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;All this is perfectly explained by Glenford Myers in his great book
&lt;a href=&quot;/2014/08/22/art-of-software-testing.html&quot;&gt;The Art of Software Testing&lt;/a&gt;.
I will just summarize it here again.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1118031962/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1118031962&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=ZSPUL4X4IBFT6ZVJ'&gt;&lt;img src='/images/2015/04/book-art-of-testing.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;First, &amp;quot;testing is the process of executing a program with the
intent of &lt;strong&gt;finding errors&lt;/strong&gt;&amp;quot; (page 6). Pay attention, the intent is to find errors.
Not to prove that the product works fine, but to prove that it &lt;strong&gt;doesn&amp;#39;t work&lt;/strong&gt;
as intended. The goal of any tester is to show how the product can be
broken, how it fails on different inputs, how it crashes under stress,
how it misunderstands the user, how it doesn&amp;#39;t satisfy the requirements.
This is why Dr. Myers is calling testing &amp;quot;a destructive, even sadistic, process&amp;quot;
(page 6). This is what most testers don&amp;#39;t understand.&lt;/p&gt;

&lt;p&gt;Second, any software has an &lt;strong&gt;unlimited amount of bugs&lt;/strong&gt;. Dr. Myers says that
&amp;quot;you cannot test a program to guarantee that it is error free&amp;quot; (page 10)
and that &amp;quot;it is impractical, often impossible, to find all the errors in
a program&amp;quot; (page 8). This is also what most testers don&amp;#39;t understand. They
believe that there is a
&lt;a href=&quot;/2015/06/18/good-programmers-bug-free.html&quot;&gt;limited number&lt;/a&gt;
of bugs, which they have to find
and call it a day. There literally no limit! The amount of bugs is unlimited,
in any software product. No matter how small or big, complex or simple,
new or old is the product.&lt;/p&gt;

&lt;p&gt;Having these axioms in mind, let&amp;#39;s try to decide when testers have to stop.
According to Dr. Meyers, &amp;quot;one of the most difficult questions
to answer when testing a program is determining when to stop,
since there is no way of knowing if the error just detected is the
last remaining error&amp;quot; (page 135).&lt;/p&gt;

&lt;p&gt;They can&amp;#39;t find all bugs, no matter how much time we give them. And they
are motivated to find more and more of them. But at some point of time we
must make a decision and release the product. Looks like we will release
it with bugs inside? Yes, indeed! We will release a product &lt;strong&gt;full of bugs&lt;/strong&gt;.
The only question is how many of them were found already and how critical
they were.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s put it all together. There are too many bugs to be able to find
all of them in a reasonable amount of time. However, we have to release a new
version, sooner or later. At the same time, testers will always tell us
that there are more bugs there and they can find more, just need more
time. What to do?&lt;/p&gt;

&lt;p&gt;Dr. Meyers says that &amp;quot;since the goal of testing is to find errors,
why not make the completion criterion the detection of some predefined
number of errors?&amp;quot; (page 136). Indeed, we should predict how many bugs
are just enough to find, in order to have a desirable level of &lt;strong&gt;confidence&lt;/strong&gt;
that the product is ready to be shipped. Then, ship it, consciously
understanding that it still has an unlimited amount of not yet discovered
bugs.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=T5AHAWGQIY5ZZK2Z'&gt;&lt;img src='/images/2015/04/book-object-thinking.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;David West in
&lt;a href=&quot;http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=T5AHAWGQIY5ZZK2Z&quot;&gt;Object Thinking&lt;/a&gt;
says that &amp;quot;software is released for use,
not when it is known to be correct, but when the rate of discovering
errors slows down to one that management considers acceptable&amp;quot; (page 13).&lt;/p&gt;

&lt;p&gt;Thus, the only valid criteria for exiting a testing process is the
discovery of a &lt;strong&gt;forecasted&lt;/strong&gt; amount of bugs.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 10 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/10/testing-exit-criteria.html</guid>
      <dc:date>2015-09-10T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Set Up a Private Maven Repository in Amazon S3</title>
      <link>http://www.yegor256.com/2015/09/07/maven-repository-amazon-s3.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;Amazon S3&lt;/a&gt;
is a perfect place for keeping private &lt;a href=&quot;https://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; artifacts.
I assume you keep public artifacts in
&lt;a href=&quot;/2014/08/19/how-to-release-to-maven-central.html&quot;&gt;Maven Central&lt;/a&gt; because
you want them to be available to everybody. Private artifacts
are those you don&amp;#39;t want visible to anyone except members
of your team. Thus, you want to deploy your &lt;code&gt;.jar&lt;/code&gt; files there
and make sure they are visible only by your team. Here is how we do
this in all &lt;a href=&quot;http://www.teamed.io&quot;&gt;our&lt;/a&gt; Java projects.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;create-an-s3-bucket&quot;&gt;Create an S3 Bucket&lt;/h2&gt;

&lt;p&gt;First, you create a new S3 bucket. I would recommend you name it using
your project domain and a prefix. For example, with &lt;code&gt;repo.teamed.io&lt;/code&gt;,
&lt;code&gt;repo&lt;/code&gt; is a prefix and &lt;code&gt;teamed.io&lt;/code&gt; is the domain.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s no need to configure any permissions for this bucket. Just create it
through the &lt;a href=&quot;https://console.aws.amazon.com/console/home&quot;&gt;Amazon S3 console&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;create-an-iam-user&quot;&gt;Create an IAM User&lt;/h2&gt;

&lt;p&gt;Create a new IAM user. I recommend you name it like &lt;code&gt;teamed-maven&lt;/code&gt;
if your project name is &lt;code&gt;teamed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add a new &amp;quot;inline policy&amp;quot; to the user:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;Statement&amp;quot;: [
    {
      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
      &amp;quot;Action&amp;quot;: &amp;quot;s3:*&amp;quot;,
      &amp;quot;Resource&amp;quot;: [
        &amp;quot;arn:aws:s3:::repo.teamed.io&amp;quot;,
        &amp;quot;arn:aws:s3:::repo.teamed.io/*&amp;quot;
      ]
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;repo.teamed.io&lt;/code&gt; is the name of the S3 bucket you
created a minute ago.&lt;/p&gt;

&lt;p&gt;Make sure you have an &amp;quot;access key&amp;quot; for this new user. It must look similar
to this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;key: AKIAI9NNNJD5D7X4TUVA
secret: t5tZQCwuaRhmlOXfbGE5aTBMFw34iFyxfCEr32av&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key is 20 characters (all caps), and the secret is 40 characters.&lt;/p&gt;

&lt;h2 id=&quot;extend-settings.xml&quot;&gt;Extend &lt;code&gt;settings.xml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Add this configuration to your &lt;code&gt;~/.m2/settings.xml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servers&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;server&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;username&amp;gt;&lt;/span&gt;AKIAI9NNNJD5D7X4TUVA&lt;span class=&quot;nt&quot;&gt;&amp;lt;/username&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;password&amp;gt;&lt;/span&gt;t5tZQCwuaRhmlOXfbGE5aTBMFw34iFyxfCEr32av&lt;span class=&quot;nt&quot;&gt;&amp;lt;/password&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
    [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/servers&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-pom.xml&quot;&gt;Configure &lt;code&gt;pom.xml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Add this configuration to &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;distributionManagement&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;snapshotRepository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;s3://repo.teamed.io/snapshot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/snapshotRepository&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;s3://repo.teamed.io/release&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/distributionManagement&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;s3://repo.teamed.io/release&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, configure &lt;a href=&quot;https://github.com/jcaddel/maven-s3-wagon&quot;&gt;S3 Wagon&lt;/a&gt;,
also in &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;extension&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.kuali.maven.wagons&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-s3-wagon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extension&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt;
    [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;#39;re ready to go. You can deploy your artifacts just by running
Maven from the command line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mvn clean deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-s3auth.com&quot;&gt;Configure &lt;code&gt;s3auth.com&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Now you want to see these artifacts in your browser, in a secure mode, by
providing secure credentials. I recommend you use
&lt;a href=&quot;http://www.s3auth.com&quot;&gt;s3auth.com&lt;/a&gt;, as explained in
&lt;a href=&quot;/2014/04/21/s3-http-basic-auth.html&quot;&gt;Basic HTTP Auth for S3 Buckets&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configure-rultor&quot;&gt;Configure Rultor&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Another recommendation is to configure rultor.com for deployment of your
artifacts to S3 automatically.&lt;/p&gt;

&lt;p&gt;First, encrypt your &lt;code&gt;settings.xml&lt;/code&gt; with this
&lt;a href=&quot;https://github.com/yegor256/rultor-remote&quot;&gt;Rultor remote&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;$ gem install rultor
$ rultor encrypt -p me/test settings.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of &lt;code&gt;me/test&lt;/code&gt;, you should use the name of your GitHub project.&lt;/p&gt;

&lt;p&gt;As a result, you will get a new file named &lt;code&gt;settings.xml.asc&lt;/code&gt;. Add it to the root directory
of your project, then commit and push. The file contains your secret information,
but only the Rultor server can decrypt it.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;.rultor.yml&lt;/code&gt; file in the root directory of your project
(The Rultor &lt;a href=&quot;http://doc.rultor.com/reference.html&quot;&gt;reference page&lt;/a&gt;
explains this format in greater detail):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;settings.xml&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;repo/settings.xml.asc&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;mvn clean deploy --settings ../settings.xml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now it&amp;#39;s time to see how it all works together. Create a new ticket in the
GitHub issue tracker and post something like this into it
(read more about &lt;a href=&quot;http://doc.rultor.com/basics.html&quot;&gt;Rultor commands&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@rultor deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will get a response in a few seconds. The rest will be done by Rultor.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/07/maven-repository-amazon-s3.html</guid>
      <dc:date>2015-09-07T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Redundant Variables Are Pure Evil</title>
      <link>http://www.yegor256.com/2015/09/01/redundant-variables-are-evil.html</link>
      <description>&lt;p&gt;A redundant variable is one that exists exclusively
to &lt;strong&gt;explain&lt;/strong&gt; its value. I strongly believe that such a variable is
not only pure noise but also &lt;strong&gt;evil&lt;/strong&gt;, with a very negative effect
on code readability. When we introduce a redundant variable, we intend to make our code
cleaner and easier to read. In reality, though, we make it more verbose
and difficult to understand. Without exception, any variable used only
once is redundant and must be replaced with a value.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/09/y-tu-mama-tambien.jpg' style='width:600px;' alt='Y Tu Mamá También (2001) by Alfonso Cuarón'/&gt;&lt;figcaption&gt;Y Tu Mamá También (2001) by Alfonso Cuarón&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here, variable &lt;code&gt;fileName&lt;/code&gt; is redundant:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Length is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code must look differently:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Length is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example is very primitive, but I&amp;#39;m sure you&amp;#39;ve seen these
redundant variables many times. We use them to &amp;quot;explain&amp;quot; the code &amp;mdash;
it&amp;#39;s not just a string literal &lt;code&gt;&amp;quot;test.txt&amp;quot;&lt;/code&gt; anymore but a &lt;code&gt;fileName&lt;/code&gt;.
The code looks easier to understand, right? Not really.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s dig into what &amp;quot;readability&amp;quot; of code is in the first place. I think this
quality can be measured by the number of seconds I need to understand the
code I&amp;#39;m looking at. The longer the timeframe, the lower the readability.
Ideally, I want to understand any piece of code in a &lt;strong&gt;few seconds&lt;/strong&gt;. If I can&amp;#39;t,
that&amp;#39;s a failure of its &lt;strong&gt;author&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2015/06/29/simple-diagrams.html&quot;&gt;Remember&lt;/a&gt;,
if I don&amp;#39;t understand you, it&amp;#39;s your fault.&lt;/p&gt;

&lt;p&gt;An increasing length of code degrades readability. So the more variable
names I have to remember while reading through it, the longer
it takes to digest the code and come to a conclusion about
its purpose and effects. I think &lt;strong&gt;four&lt;/strong&gt; is the maximum number
of variables I can comfortably keep in my head without thinking
about quitting the job.&lt;/p&gt;

&lt;p&gt;New variables make the code longer because they need extra lines to
be declared. And they make the code more complex because its reader
has to remember more names.&lt;/p&gt;

&lt;p&gt;Thus, when you want to introduce a new variable to explain what your code is
doing, stop and think. Your code is too complex and long in the first place!
Refactor it using new objects or methods but not variables. Make your
code shorter by moving pieces of it into new classes or private methods.&lt;/p&gt;

&lt;p&gt;Moreover, I think that in &lt;a href=&quot;/2015/08/18/multiple-return-statements-in-oop.html&quot;&gt;perfectly designed methods&lt;/a&gt;,
you won&amp;#39;t need &lt;strong&gt;any&lt;/strong&gt; variables aside from method arguments.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/01/redundant-variables-are-evil.html</guid>
      <dc:date>2015-09-01T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Need Robust Software? Make It Fragile</title>
      <link>http://www.yegor256.com/2015/08/25/fail-fast.html</link>
      <description>&lt;p&gt;In any software project, the goal is to create something stable. We don&amp;#39;t want it
to break in front of a user. We also don&amp;#39;t want our website to show an
&amp;quot;internal application error&amp;quot; instead of a web page. We want our software
to work, not fail. That&amp;#39;s a perfectly valid and logical desire,
but in order to achieve that, we have to make our software as fragile
as possible. This may sound counter-intuitive, but that&amp;#39;s the way it is.
The more &lt;strong&gt;fragile&lt;/strong&gt; your app is in development, the more &lt;strong&gt;robust&lt;/strong&gt; it is
in production.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/08/black-cat-white-cat.jpg' style='width:600px;' alt='Black Cat, White Cat (1998) by Emir Kusturica'/&gt;&lt;figcaption&gt;Black Cat, White Cat (1998) by Emir Kusturica&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;By fragile, I&amp;#39;m referring to the &lt;a href=&quot;http://martinfowler.com/ieeeSoftware/failFast.pdf&quot;&gt;Fail Fast&lt;/a&gt;
philosophy, which is the opposite of
Fail Safe. I believe you know the difference, but let me remind you anyway,
by example. This is Fail Safe:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method is supposed to calculate and return a file size. It first checks
whether the file exists. If it doesn&amp;#39;t exist, the method returns zero. Indeed,
the file is absent, so there is no size. We could complain that the file is
absent, but what for? Why make noise? Let&amp;#39;s keep it quiet and return zero.
We don&amp;#39;t fail because we&amp;#39;re trying to keep the app running. This is called Fail Safe.&lt;/p&gt;

&lt;p&gt;To the contrary, this is how Fail Fast looks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;There is no such file; I can&amp;#39;t get its length.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can&amp;#39;t find a file? We don&amp;#39;t hide this fact. We make this situation
public and visible. We scream and cry. We throw an exception. We &lt;strong&gt;want&lt;/strong&gt; the
app to crash, break, and fail, because someone gave us a file that doesn&amp;#39;t
exist. We complain and protest. This is called Fail Fast.&lt;/p&gt;

&lt;p&gt;Which philosophy, if we follow it everywhere, will make our software
robust and failure-resilient? Only the second one &amp;mdash; the Fail Fast.&lt;/p&gt;

&lt;p&gt;Why? Because the quicker and easier the failure is, the faster it will
be fixed. And the fix will be simpler and also more visible. Fail Fast
is a much better approach for maintainability. The code becomes cleaner.
It is much easier to track a failure. All methods are ready to break and throw
an exception on even the tiniest problem.&lt;/p&gt;

&lt;p&gt;In this example, if the method returns zero, it&amp;#39;s not obvious
whether the file exists and its size is actually zero or if its name is wrong
and it is just not found. The Fail Safe approach &lt;strong&gt;conceals&lt;/strong&gt; problems and makes
code less maintainable, and that&amp;#39;s why it&amp;#39;s difficult to stabilize.&lt;/p&gt;

&lt;p&gt;In the beginning, during production, we will have many crashes and errors. But
all of them will be visible and easy to understand. We will fix them and
cover them with unit tests. Each fix will make our software more &lt;strong&gt;stable&lt;/strong&gt;
and better covered by tests.&lt;/p&gt;

&lt;p&gt;Software designed with the Fail Safe approach in mind will look more stable
at the beginning, but it will degrade quickly and inevitably turn into
an unmaintainable mess.&lt;/p&gt;

&lt;p&gt;Software designed with the Fail Fast approach in mind will crash frequently
at the beginning but will improve its stability with every fix and eventually
become very stable and robust.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why fragility is the key success factor for robustness.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/08/25/fail-fast.html</guid>
      <dc:date>2015-08-25T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>