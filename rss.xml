<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014-2015</copyright>
    <lastBuildDate>Wed, 03 Feb 2016 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>Design Patterns and Anti-Patterns, Love and Hate</title>
      <link>http://www.yegor256.com/2016/02/03/design-patterns-and-anti-patterns.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;Design Patterns&lt;/a&gt; are ...
Come on, you know what they are. They are
something we &lt;strong&gt;love&lt;/strong&gt; and &lt;strong&gt;hate&lt;/strong&gt;. We love them because they let us
write code without thinking. We hate them when we see the code
of someone who is used to writing code without thinking. Am I wrong?
Now, let me try to go through all of them and show you how much
I love or hate each one. Follow me, in alphabetic order.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2016/02/the-shining.jpg' style='width:600px;' alt='The Shining (1980) by Stanley Kubrick'/&gt;&lt;figcaption&gt;The Shining (1980) by Stanley Kubrick&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_factory_pattern&quot;&gt;&lt;span class='green'&gt;Abstract Factory&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Adapter_pattern&quot;&gt;&lt;span class='green'&gt;Adapter&lt;/span&gt;&lt;/a&gt;.
Good one!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bridge_pattern&quot;&gt;&lt;span class='green'&gt;Bridge&lt;/span&gt;&lt;/a&gt;.
Good one!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Builder_pattern&quot;&gt;&lt;span class='red'&gt;Builder&lt;/span&gt;&lt;/a&gt;.
Terrible concept, since it encourages us to create and
use big, complex objects. If you need a builder, there
is already something wrong in your code. Refactor it so
any object is easy to create through its constructors.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chain_of_responsibility_pattern&quot;&gt;&lt;span class='green'&gt;Chain of Responsibility&lt;/span&gt;&lt;/a&gt;.
Seems fine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Command_pattern&quot;&gt;&lt;span class='green'&gt;Command&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Composite_pattern&quot;&gt;&lt;span class='green'&gt;Composite&lt;/span&gt;&lt;/a&gt;.
Good one; check out &lt;a href=&quot;/2015/10/01/vertical-horizontal-decorating.html&quot;&gt;this&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;&lt;span class='green'&gt;Decorator&lt;/span&gt;&lt;/a&gt;.
My &lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;favorite&lt;/a&gt; one.
I highly recommend you use it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Facade_pattern&quot;&gt;&lt;span class='red'&gt;Facade&lt;/span&gt;&lt;/a&gt;.
Bad idea. In OOP, we need objects and only objects,
not facades for them. This design pattern is very procedural
in its spirit, since a facade is nothing more than a collection
of &lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;procedures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;&lt;span class='orange'&gt;Factory Method&lt;/span&gt;&lt;/a&gt;.
This one seems OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Flyweight_pattern&quot;&gt;&lt;span class='red'&gt;Flyweight&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s a workaround, as I see it, so it&amp;#39;s not a good design pattern. I would
recommend you not use it unless there is a really critical performance
issue. But calling it a design pattern ... no way. A fix for a
performance problem in Java? Yes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Front_controller&quot;&gt;&lt;span class='red'&gt;Front Controller&lt;/span&gt;&lt;/a&gt;.
Terrible idea, as well as the entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt;.
It&amp;#39;s very &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;procedural&lt;/a&gt;, that&amp;#39;s why.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interpreter_pattern&quot;&gt;&lt;span class='orange'&gt;Interpreter&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK, but I &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;don&amp;#39;t like&lt;/a&gt;
the name. &amp;quot;Expression&amp;quot; would be a much better alternative.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Iterator_pattern&quot;&gt;&lt;span class='red'&gt;Iterator&lt;/span&gt;&lt;/a&gt;.
Bad idea, since it is mutable. It would be much better
to have &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutable&lt;/a&gt; &amp;quot;cursors&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lazy_initialization&quot;&gt;&lt;span class='green'&gt;Lazy Initialization&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Marker_interface_pattern&quot;&gt;&lt;span class='red'&gt;Marker&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s a terrible idea, along with reflection and
&lt;a href=&quot;/2015/04/02/class-casting-is-anti-pattern.html&quot;&gt;type casting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;&lt;span class='red'&gt;MVC&lt;/span&gt;&lt;/a&gt;.
Bad idea, since it&amp;#39;s very procedural. &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;Controllers&lt;/a&gt;
are the key broken element in this
concept. We need real objects, not procedural controllers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mediator_pattern&quot;&gt;&lt;span class='red'&gt;Mediator&lt;/span&gt;&lt;/a&gt;.
I don&amp;#39;t like it. Even though it sounds like a technique
for decreasing complexity and coupling, it is not really object-oriented.
Who is this mediator? Just a &amp;quot;channel&amp;quot; between objects? Why shouldn&amp;#39;t objects
communicate directly? Because they are too complex? Make
them smaller and simpler, rather than inventing these mediators.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memento_pattern&quot;&gt;&lt;span class='red'&gt;Memento&lt;/span&gt;&lt;/a&gt;.
This idea implies that objects are &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;mutable&lt;/a&gt;,
which I&amp;#39;m against in general.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Module_pattern&quot;&gt;&lt;span class='red'&gt;Module&lt;/span&gt;&lt;/a&gt;.
If Wikipedia is right about this pattern, it&amp;#39;s something
even more terrible than the Singleton.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiton_pattern&quot;&gt;&lt;span class='red'&gt;Multiton&lt;/span&gt;&lt;/a&gt;.
Really bad idea. Same as Singleton.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Null_Object_pattern&quot;&gt;&lt;span class='green'&gt;Null Object&lt;/span&gt;&lt;/a&gt;.
Good one. By the way, see
&lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;Why NULL Is Bad&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_pattern_object_library&quot;&gt;&lt;span class='green'&gt;Object Library&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s good.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_pool_pattern&quot;&gt;&lt;span class='green'&gt;Object Pool&lt;/span&gt;&lt;/a&gt;.
Good one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;&lt;span class='orange'&gt;Observer&lt;/span&gt;&lt;/a&gt;.
The idea is good, but the name is bad, since it
&lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;ends with -ER&lt;/a&gt;.
A much better one would be &amp;quot;Source&amp;quot; and &amp;quot;Target&amp;quot;. The Source
generates events and the Target listens to them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;&lt;span class='red'&gt;ORM&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s terrible and &amp;quot;offensive&amp;quot;; check
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;this&lt;/a&gt; out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Prototype_pattern&quot;&gt;&lt;span class='orange'&gt;Prototype&lt;/span&gt;&lt;/a&gt;.
Good idea, but what does it have to do with OOP?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy_pattern&quot;&gt;&lt;span class='green'&gt;Proxy&lt;/span&gt;&lt;/a&gt;.
Good one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot;&gt;&lt;span class='green'&gt;RAII&lt;/span&gt;&lt;/a&gt;.
This is a really good one, and I highly recommend you use it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_pattern_Servant&quot;&gt;&lt;span class='red'&gt;Servant&lt;/span&gt;&lt;/a&gt;.
A very bad idea, because it&amp;#39;s highly
&lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;procedural&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;&lt;span class='red'&gt;Singleton&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s the king of all anti-patterns. Stay away from it at all costs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Specification_pattern&quot;&gt;&lt;span class='green'&gt;Specification&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/State_pattern&quot;&gt;&lt;span class='orange'&gt;State&lt;/span&gt;&lt;/a&gt;.
Although it&amp;#39;s not implied, I feel that in most cases
the use of this pattern results in mutability, a code characteristic that
I&amp;#39;m generally &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;against&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Strategy_pattern&quot;&gt;&lt;span class='green'&gt;Strategy&lt;/span&gt;&lt;/a&gt;.
A good one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;&lt;span class='green'&gt;Template Method&lt;/span&gt;&lt;/a&gt;.
Seems fine, as long as you keep classes
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;&lt;span class='red'&gt;Visitor&lt;/span&gt;&lt;/a&gt;.
A rather &lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;procedural&lt;/a&gt;
concept that treats objects as
data structures, which we can manipulate.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;I have nothing against &lt;a href=&quot;https://en.wikipedia.org/wiki/Concurrency_pattern&quot;&gt;concurrency patterns&lt;/a&gt; either;
they are all &lt;span class=&quot;green&quot;&gt;good&lt;/span&gt;, since they
have almost nothing to do with object-oriented programming.&lt;/p&gt;

&lt;p&gt;If you know some other design (anti-)patterns, let me know
in the comments below. I&amp;#39;ll add them here.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2016/02/03/design-patterns-and-anti-patterns.html</guid>
      <dc:date>2016-02-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Defensive Programming via Validating Decorators</title>
      <link>http://www.yegor256.com/2016/01/26/defensive-programming.html</link>
      <description>&lt;p&gt;Do you check the input parameters of your methods for validity?
I don&amp;#39;t. I used to, but not anymore.
I just let my methods crash with a null pointer and other exceptions
when parameters are not valid.
This may sound illogical, but only in the beginning.
I&amp;#39;m suggesting you use &lt;strong&gt;validating decorators&lt;/strong&gt; instead.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2016/01/shi-mian-mai-fu.jpg' style='width:600px;' alt='Shi mian mai fu (2004) by Yimou Zhang'/&gt;&lt;figcaption&gt;Shi mian mai fu (2004) by Yimou Zhang&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s take a look at this rather typical Java example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;File is NULL; can&amp;#39;t export.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;File already exists.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Export the report to the file&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty &lt;a href=&quot;https://en.wikipedia.org/wiki/Defensive_programming&quot;&gt;defensive&lt;/a&gt;, right?
If we remove these validations, the code
will be much shorter, but it will crash with rather confusing messages
if &lt;code&gt;NULL&lt;/code&gt; is provided by the client. Moreover, if the file already exists,
our &lt;code&gt;Report&lt;/code&gt; will silently overwrite it. Pretty dangerous, right?&lt;/p&gt;

&lt;p&gt;Yes, we must protect ourselves, and we must be defensive.&lt;/p&gt;

&lt;p&gt;But not this way, not by bloating the class with validations that
have nothing to do with its core functionality. Instead, we should
use decorators to do the validation. Here is how. First,
there must be an interface &lt;code&gt;Report&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, a class that implements the core functionality:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultReport&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Export the report to the file&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And, finally, a number of decorators that will protect us:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoWriteOverReport&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NoWriteOverReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;File already exists.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, the client has the flexibility of composing a complex object
from decorators that perform their specific tasks. The core object
will do the reporting, while the decorators will validate parameters:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoNullReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoWriteOverReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DefaultReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What do we achieve with this approach?
First and foremost: smaller objects.
And smaller objects always mean higher &lt;strong&gt;maintainability&lt;/strong&gt;.
Our &lt;code&gt;DefaultReport&lt;/code&gt; class will always remain small, no matter
how many validations we may invent in the future. The
more things we need to validate, the more validating decorators
we will create. All of them will be small and cohesive. And we&amp;#39;ll
be able to put them together in different variations.&lt;/p&gt;

&lt;p&gt;Besides that, this approach makes our code much more
&lt;strong&gt;reusable&lt;/strong&gt;, as classes perform very few operations
and don&amp;#39;t defend themselves by default. While being defensive
is an important feature, we&amp;#39;ll use validating decorators. But
this will not always be the case. Sometimes validation is just
too expensive in terms of time and memory, and we may want to work
directly with objects that don&amp;#39;t defend themselves.&lt;/p&gt;

&lt;p&gt;I also decided not to use the Java Validation API anymore for the
same reason. Its annotations make classes much more verbose
and less cohesive. I&amp;#39;m using validating decorators instead.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2016/01/26/defensive-programming.html</guid>
      <dc:date>2016-01-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Expensive Is Your Outsourcing Team?</title>
      <link>http://www.yegor256.com/2016/01/19/how-expensive-is-outsourcing.html</link>
      <description>&lt;p&gt;Let me put it this way: $15 per hour for a senior Java developer &amp;mdash;
is that cheap or expensive? It&amp;#39;s cheap, right? Right. What would you
say if I told you this cheap Java developer hardly writes two
primitive lines of code per day? You&amp;#39;re paying $600 every week but
rarely getting anything back. How cheap is this Java guy now?
My point is that using hourly rate as a cost indicator is a very bad idea,
whether with &lt;a href=&quot;/2015/10/27/outsourcing-doesnt-work.html&quot;&gt;outsourcing&lt;/a&gt;
or in-house teams.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2016/01/the-fan.jpg' style='width:600px;' alt='The Fan (1996) by Tony Scott'/&gt;&lt;figcaption&gt;The Fan (1996) by Tony Scott&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I actually decided to write this after a short sales meeting recently
with a prospect from Illinois. He wanted to hire &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt; for his
Java project and seemed to like our approach. I explained how we work,
how we control &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality&lt;/a&gt;,
and why and how we&amp;#39;re &lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;different&lt;/a&gt;
from everybody else. He seemed to be impressed.
Then, he asked, &amp;quot;&lt;strong&gt;How much&lt;/strong&gt; do you charge?&amp;quot;&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.teamed.io'&gt;&lt;img src='http://img.teamed.io/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I told him that we are also different in the way we bill for our work,
because we don&amp;#39;t charge for the time spent by our programmers sitting
in front of monitors. Instead, we bill for &lt;strong&gt;results&lt;/strong&gt; produced, merged,
and delivered. I showed him this article about
&lt;a href=&quot;/2014/10/21/incremental-billing.html&quot;&gt;incremental billing&lt;/a&gt;.
He seemed to understand the advantages of our approach, compared to the
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;hourly salaries&lt;/a&gt;
being paid by &lt;del&gt;almost&lt;/del&gt; everybody else in the market.&lt;/p&gt;

&lt;p&gt;Still, the question remained &amp;mdash; how much?&lt;/p&gt;

&lt;p&gt;What could I do? I had to give him an answer.&lt;/p&gt;

&lt;aside class='quote'&gt;Under different management, programmers deliver very different results in the same 60 minutes&lt;/aside&gt;

&lt;p&gt;I told him that our best Java programmers earn $30 to $50 per hour and
we add our margin on top of that, in the amount of 100 percent, for management.
In the end, &amp;quot;one hour&amp;quot; will cost him $60 to $100. He ran away.&lt;/p&gt;

&lt;p&gt;What did I do wrong? I think I know what it was.
I didn&amp;#39;t explain to him that, under different management,
programmers deliver very different results in the same
60 minutes. By &amp;quot;very different&amp;quot;, I mean &lt;strong&gt;dramatically&lt;/strong&gt; different. Let
me demonstrate the numbers (I actually did that already almost two
years ago, in my &lt;a href=&quot;/2014/04/11/cost-of-loc.html&quot;&gt;How Much Do You Pay Per Line of Code?&lt;/a&gt;
post, but will try again from a different perspective).&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href=&quot;https://github.com/yegor256/takes/issues/430&quot;&gt;yegor256/takes#430&lt;/a&gt;,
a feature request in the &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes Framework&lt;/a&gt;,
one of the projects we&amp;#39;re managing.
Let&amp;#39;s see how much the project paid for the work done in this ticket:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;15 minutes to me for creating a new ticket&lt;/li&gt;
&lt;li&gt;30 minutes to &lt;a href=&quot;https://github.com/hdouss&quot;&gt;@hdous&lt;/a&gt; for fixing it&lt;/li&gt;
&lt;li&gt;52 minutes to &lt;a href=&quot;https://github.com/pinaf&quot;&gt;@pinaf&lt;/a&gt; for code review&lt;/li&gt;
&lt;li&gt;20 minutes to &lt;a href=&quot;https://github.com/ypshenychka&quot;&gt;@ypshenychka&lt;/a&gt; for QA review&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming that an average price &amp;quot;per hour&amp;quot; is $50
($25 for developers and $25 for our management),
the total cost of this new feature was $97.50 (117 minutes).&lt;/p&gt;

&lt;p&gt;Look at these two tickets again.
&lt;a href=&quot;https://github.com/yegor256/takes/issues/430&quot;&gt;#430&lt;/a&gt; is the feature
request and &lt;a href=&quot;https://github.com/yegor256/takes/issues/493&quot;&gt;#493&lt;/a&gt; is
the pull request with two new Java files and code review comments.&lt;/p&gt;

&lt;p&gt;Four people worked on this feature. If you put them all together
in an office, full-time, with the same hourly rate, they will cost
$800 per day (I&amp;#39;m not adding any management costs!).
Now the question is whether they will be able to
create &lt;strong&gt;eight&lt;/strong&gt; new features &lt;strong&gt;every day&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re a manager, you know the velocity of your programmers.
If you&amp;#39;re a programmer, you know how much code you can write in a day.
Now, honestly tell me if you find and solve eight bugs per day with that
level of complexity, detailed code review, and precision of
documentation? I seriously doubt it.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.xdsd.org'&gt;&lt;img src='http://img.xdsd.org/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;In that &lt;a href=&quot;/2014/04/11/cost-of-loc.html&quot;&gt;How Much Do You Pay Per Line of Code?&lt;/a&gt;
post, I actually did a comparison of a co-located project, where I was an architect,
with a distributed one, where I also was an architect. My numbers tell
me that a traditionally managed team is at least 10 times less
productive than a team managed by &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt; under
&lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt; principles.&lt;/p&gt;

&lt;p&gt;My point is that asking &amp;quot;What is your hourly rate?&amp;quot; is just as wrong as
asking &lt;a href=&quot;/2015/06/02/how-to-estimate-software-cost.html&quot;&gt;How Much for This Software?&lt;/a&gt;
if we&amp;#39;re talking about software developers motivated by results,
not &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office slaves&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead, we should ask: How much can you do for $100?&lt;/p&gt;

&lt;p&gt;As you can see, we can easily demonstrate how much we are capable
of delivering for $100. Can you and your team do the same?&lt;/p&gt;

&lt;p&gt;Thus, your &lt;a href=&quot;https://en.wikipedia.org/wiki/Return_on_investment&quot;&gt;ROI&lt;/a&gt;
while working with an &lt;a href=&quot;/2015/05/21/avoid-software-outsourcing-disaster.html&quot;&gt;outsourced team&lt;/a&gt; mostly
depends on their &lt;strong&gt;results per dollar&lt;/strong&gt;, not dollars per hour. The first
metric is difficult to calculate, and only the best teams will be able
to do so. The second metric is absolutely misleading, but anyone
will give it to you.&lt;/p&gt;

&lt;p&gt;An &lt;a href=&quot;/2015/06/15/software-outsourcing-survival-guide.html&quot;&gt;outsourced team&lt;/a&gt;
is expensive when its results per dollar are low,
no matter how big or small its dollars-per-hour rate is. To the contrary,
a team is financially very efficient if its results per dollar is high.
It doesn&amp;#39;t really matter what the value of the second metric is.&lt;/p&gt;

&lt;p&gt;P.S. I&amp;#39;m going to show this article to that prospect who ran away. Maybe
he will come back :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 19 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2016/01/19/how-expensive-is-outsourcing.html</guid>
      <dc:date>2016-01-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Good Programmers Don't Work for Equity</title>
      <link>http://www.yegor256.com/2016/01/12/good-programmers-dont-work-for-equity.html</link>
      <description>&lt;p&gt;&amp;quot;You&amp;#39;re a good programmer. I&amp;#39;m a great entrepreneur. This is a
breakthrough idea. Help me build it. I don&amp;#39;t have cash, but I will
give you equity. Deal?&amp;quot; I hear this at least once a month, and
I always say no. Not because I don&amp;#39;t like your idea. Indeed, it
is really interesting. And not because I&amp;#39;m too busy. I would
definitely find time for a good idea. It&amp;#39;s not that. I say no because
I don&amp;#39;t think you&amp;#39;re a good entrepreneur.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2016/01/how-much-do-you-love-me.jpg' style='width:600px;' alt='Combien tu m&amp;amp;apos;aimes? (2005) by Bertrand Blier'/&gt;&lt;figcaption&gt;Combien tu m'aimes? (2005) by Bertrand Blier&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;So you want a good programmer to build your product. Or maybe a group
of good programmers. And you are ready to give me some equity
in exchange. That&amp;#39;s reasonable.&lt;/p&gt;

&lt;aside class='quote'&gt;You're a good entrepreneur, right? How come you don't have money, then?&lt;/aside&gt;

&lt;p&gt;But what is your part of the deal?&lt;/p&gt;

&lt;p&gt;How much are you putting on the table?&lt;/p&gt;

&lt;p&gt;You say that you&amp;#39;re a good entrepreneur, right? How come
you don&amp;#39;t have money, then? How come you can&amp;#39;t find someone to pay
for the work of a good programmer?&lt;/p&gt;

&lt;p&gt;I will create a product for you, but you will most certainly
fail. You &lt;strong&gt;already&lt;/strong&gt; failed. You failed to find initial
investment to cover the startup expenses of the business.
Why do you think you will succeed after the product is ready?&lt;/p&gt;

&lt;p&gt;The point is that a good programmer will &lt;strong&gt;never&lt;/strong&gt;
work for equity. Not because a good programmer is greedy,
or doesn&amp;#39;t want to risk, or doesn&amp;#39;t believe
in new ideas. Not at all.&lt;/p&gt;

&lt;p&gt;A good programmer wants to work with a &lt;strong&gt;good&lt;/strong&gt; entrepreneur. And
a good entrepreneur knows how to find money. That&amp;#39;s the definition
of a decent entrepreneur.&lt;/p&gt;

&lt;p&gt;Period.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2016/01/12/good-programmers-dont-work-for-equity.html</guid>
      <dc:date>2016-01-12T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Do You Punish Your Employees?</title>
      <link>http://www.yegor256.com/2016/01/05/how-to-punish-employees.html</link>
      <description>&lt;p&gt;Punishment ... how do you prefer to do it? There are many ways to punish
employees; some are rather effective, while others simply don&amp;#39;t work. This is
not an exact science. Actually, I would say it&amp;#39;s an &lt;strong&gt;art&lt;/strong&gt;. You must be creative,
innovative, and very open-minded. You never know which method of
punishment will work with whom. Some people respond to one method,
while others may completely ignore it. The overarching goal, of course, is
to make employees &lt;strong&gt;scared&lt;/strong&gt; of &lt;strong&gt;you&lt;/strong&gt;, their boss, so they will obey enthusiastically.
Here is a list of the most effective methods :)&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2016/01/office-space.jpg' style='width:600px;' alt='Office Space (1999) by Mike Judge'/&gt;&lt;figcaption&gt;Office Space (1999) by Mike Judge&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Disclaimer: I&amp;#39;m using the pronoun &amp;quot;he&amp;quot; merely for simplicity of speech. The
same exact rules apply to both males and females.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use Your Voice&lt;/strong&gt;.
This, of course, is your best instrument of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Punishment&quot;&gt;punishment&lt;/a&gt;. Make sure he is scared
of you. He must know who he works for &amp;mdash; you, his boss. The rule
of thumb is that the one with the strongest voice is the boss. Thus, you
must be heard, you must &lt;strong&gt;rule&lt;/strong&gt; with your voice, and he must physically
feel your presence in the room. Even if it&amp;#39;s just a Skype call,
your voice must sound stronger than all others.
Moreover, don&amp;#39;t let him speak if he is trying to argue back.
You&amp;#39;re the boss!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Play Hard to Get&lt;/strong&gt;.
Is he feeling &lt;a href=&quot;https://en.wikipedia.org/wiki/Guilt_%28emotion%29&quot;&gt;guilty&lt;/a&gt; for
an error? Simply ignore him. Or, even better, schedule
meetings and don&amp;#39;t show up. Or reschedule many times. That will demonstrate
that you&amp;#39;re not interested in him anymore. His frustration
will grow. You&amp;#39;ll still be in the office, having meetings with other employees,
eating lunch, laughing, walking, and talking. You exist, but not for him.
He is dead to you, because of his mistake. He is nothing and is getting
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Silent_treatment&quot;&gt;silent treatment&lt;/a&gt;.
Then, suddenly, you attend a meeting! Oh, how happy he will be.
He will literally kiss your hands, and you will love that feeling!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Fun of Him&lt;/strong&gt;.
We inherit this technique from good, old-school
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bullying&quot;&gt;bullying&lt;/a&gt;. We all know how it
works. Select the person who messed up and make him the target of your jokes.
In the office, this method works even better than in school, because
you&amp;#39;re the boss and he basically can&amp;#39;t do anything to you. He will first try
to laugh alongside everybody else, but this won&amp;#39;t last for the long term. In the
end, everybody will laugh at him, and he will do whatever it takes just to stop it.
He will obey any order you give!&lt;/p&gt;

&lt;aside class='quote'&gt;Having a personal life outside the office is not for everybody; it is a luxury&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Mistakes Must be Visible&lt;/strong&gt;.
Is he wrong? Did he miss a deadline? Did he deploy a broken version to production?
Did he forget something? Don&amp;#39;t resolve this face to face. Always make such things
public, simply to let others punish him. This approach is known as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Peer_pressure&quot;&gt;peer pressure&lt;/a&gt;, a very
useful technique. His coworkers must keep up the momentum and punish
him using &lt;a href=&quot;https://en.wikipedia.org/wiki/Social_rejection&quot;&gt;social rejection&lt;/a&gt;.
That&amp;#39;s why, by all means, you as a leader must encourage back-stabbing.
You will rise to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_and_control_in_abusive_relationships&quot;&gt;power&lt;/a&gt;
much faster if your employees are not only afraid of
you but also of each other. Use their fear wisely!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Late-Night Phone Calls&lt;/strong&gt;.
Having a &lt;a href=&quot;https://en.wikipedia.org/wiki/Personal_life&quot;&gt;personal life&lt;/a&gt;
outside the office is not for everybody. It is a luxury, and
you are not just going to give it away. He must earn it, and if he is guilty of
not completing a task on time, his private life will be ruined by your
late-night phone calls. He must remember that. It doesn&amp;#39;t really matter
what exactly the calls are about. Just make them somewhere around 11 p.m.
Your key message is this: &amp;quot;I&amp;#39;m worrying about the project while you&amp;#39;re
enjoying your family time!&amp;quot; Guilt is what you&amp;#39;re planting with this.
He won&amp;#39;t be able to ask you not to call him after work; he is not that brave.
He will instead try to please you somehow so that you stop calling him.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Check Results&lt;/strong&gt;.
This technique is close to playing hard to get, but here you don&amp;#39;t ignore him.
You communicate with the guilty employee, but you don&amp;#39;t talk about his
results. You discuss his uncle&amp;#39;s wedding, his snowboarding weekend, his
new bicycle, etc. But you don&amp;#39;t ask about the migration to PostgreSQL he
has been working on for the last three weeks. You are &lt;strong&gt;not interested&lt;/strong&gt;. This is
a perfect method for demonstrating that you don&amp;#39;t see him as a valuable
team member anymore. The team doesn&amp;#39;t need his results. The team can live
without them. You will see how soon he realizes who the boss is and
what it means when the boss is not happy!&lt;/p&gt;

&lt;aside class='quote'&gt;Obviously, the best desk is the one at which nobody can see your monitor&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;A Bad Office Spot Is a Great De-Motivator&lt;/strong&gt;.
This is a classic instrument of punishment: The worst desks go to
those who forget who the boss is around here. Obviously, the best desk is the
one at which nobody can see your monitor. Give those to good people who
obey your orders and don&amp;#39;t argue with you. They are your core team. They
support you as a leader, and they help you rise to power. Others must
sit closer to the door, and their monitors must be seen by everybody.
As with all other techniques, &lt;a href=&quot;https://en.wikipedia.org/wiki/Psychological_manipulation&quot;&gt;conceal&lt;/a&gt;
your intentions &amp;mdash; you
locate people in the office due to their job descriptions in order to help
them communicate effectively. Everybody will understand what&amp;#39;s really going on,
but you must look like a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Leadership_style#Laissez-faire&quot;&gt;laissez-faire leader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy Tasks Are Rewards&lt;/strong&gt;.
You decide who does what, and you distribute tasks and projects &amp;mdash; that&amp;#39;s your
instrument of power. Easy-to-do tasks are how you reward those who are loyal
and supportive. They complete such tasks, hardly expending any effort. Complex
and risky projects, on the other hand, are assigned to the underperforming employee. He will most likely
fail, and there won&amp;#39;t be anyone to blame &amp;mdash; it&amp;#39;s just a project, like
all others. Boring, ambiguous, unfocused, unnecessary, under-funded, and routine
tasks all go to the employee who deserves punishment. Of course,
you must look unbiased &amp;mdash; be very polite and supportive, acting as if you&amp;#39;re
a good friend!&lt;/p&gt;

&lt;aside class='quote'&gt;Leaving the office at 5 p.m. is a privilege; only the best employees can afford it&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Spread Rumors&lt;/strong&gt;.
Simply show your annoyance of his poor results, but not to his face. Talk
about his performance with his coworkers. They must know that you&amp;#39;re not
happy. Furthermore, they must suspect that you&amp;#39;re thinking about
terminating his contract. Don&amp;#39;t say it straight away, but don&amp;#39;t deny it if they
ask. I doubt they will ask, though. Very soon, these rumors will
reach his ear, and he will do whatever it takes just to hear that you&amp;#39;re
not thinking about termination anymore. He will likely be scared to ask you directly,
but even if he does ask, deny it. He will be afraid of you anyway. That will
make him much more manageable!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overtime&lt;/strong&gt;.
Leaving the office at 5 p.m. is a privilege. Only the best employees can afford it.
Ideally, everybody must ask you before they leave. The one who feels
guilty won&amp;#39;t be comfortable asking you whether he can leave at 5 p.m. He will
stay longer just because he is afraid to ask. That&amp;#39;s exactly what you need!
Just to earn the ability to ask whether it&amp;#39;s possible to leave the office,
he will work harder. The question is how to make employees ask for your permission
to go home in the first place. I recommend you stay late and schedule
interesting meetings at 6 p.m. Of course, you will come to work at 1 p.m., while
everybody else must be there at 9 a.m. sharp. The point is that you must be
in the office when they leave, and you must do something important. They will
be afraid to disappoint you by showing ignorance, so they will ask for permission.
That&amp;#39;s what you need!&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;This list is definitely not exhaustive. I&amp;#39;m sure there are many
more &lt;a href=&quot;https://en.wikipedia.org/wiki/Psychopathy&quot;&gt;interesting&lt;/a&gt;
methods and technologies. Don&amp;#39;t hesitate to
share them below in the comments. As I said above, I believe this is
an art, not a science.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0749464763/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0749464763&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=JVXRPNAEJBMNGINR'&gt;&lt;img src='/images/2016/01/management-stripped-bare.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;PS. If you like this article, you will certainly enjoy this
&lt;a href=&quot;http://www.amazon.com/gp/product/0749464763/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0749464763&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=JVXRPNAEJBMNGINR&quot;&gt;Management Stripped Bare: What They Don&amp;#39;t Teach You at Business School&lt;/a&gt;
book by Jo Owen. I actually borrowed some ideas from that book.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2016/01/05/how-to-punish-employees.html</guid>
      <dc:date>2016-01-05T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Employee Turnover Is Good for the Maintainability of Your Code Base</title>
      <link>http://www.yegor256.com/2015/12/29/turnover-is-good-for-maintainability.html</link>
      <description>&lt;p&gt;This is what Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/Turnover_%28employment%29&quot;&gt;says&lt;/a&gt; about this:
&amp;quot;High turnover may be harmful to a company&amp;#39;s
productivity if skilled workers are often leaving,
and the worker population contains a high percentage of novices.&amp;quot;
I agree. However, I believe that low turnover may also
be very harmful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/12/commando.jpg' style='width:600px;' alt='Commando (1985) by Mark L. Lester'/&gt;&lt;figcaption&gt;Commando (1985) by Mark L. Lester&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;ve found this
&lt;a href=&quot;http://www.eremedia.com/ere/a-low-turnover-rate-could-mean-that-you-have-ugly-employees/&quot;&gt;good article&lt;/a&gt;
where John Sullivan explains why low turnover could be a troubling
symptom. It&amp;#39;s a really good read, but rather generic. It is not specifically about software
teams. My experience is mostly focused on programmers and their
turnover. I&amp;#39;ve learned that low turnover negatively affects code maintainability
and encourages &lt;strong&gt;hero-driven development&lt;/strong&gt; and &lt;strong&gt;strong code ownership&lt;/strong&gt;
(both of which are bad practices).&lt;/p&gt;

&lt;aside class='quote'&gt;If you consider programmers to be a valuable long-term asset, you're wrong&lt;/aside&gt;

&lt;p&gt;&amp;quot;Turnover&amp;quot; is basically the act of replacing an employee
with a new employee for any reason, including termination,
retirement, resignation, or any other. Simply put, the more
people your team loses every year, the higher your turnover.
If there are 20 programmers on your team, and five of them
walk away every year, your turnover is 25 percent.&lt;/p&gt;

&lt;p&gt;I can&amp;#39;t pinpoint what number you should aim for, but I strongly believe
that if you consider &lt;strong&gt;programmers&lt;/strong&gt; to be a &lt;strong&gt;valuable long-term asset&lt;/strong&gt;,
and try to retain them at all cost, you&amp;#39;re doing it wrong.&lt;/p&gt;

&lt;p&gt;My point is that a healthy software team must
&lt;strong&gt;replace&lt;/strong&gt; programmers &lt;strong&gt;regularly&lt;/strong&gt;. I would say having one
person on board for longer than a year is asking for trouble.&lt;/p&gt;

&lt;p&gt;By replacing, I don&amp;#39;t necessarily mean
&lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;firing&lt;/a&gt;.
Not at all. I mean moving them
&lt;strong&gt;away&lt;/strong&gt; from the code base. Obviously, if you have a single code
base, replacing will mean firing.&lt;/p&gt;

&lt;p&gt;When programmers stay together for a long time, working on the
same code base, they inevitably become subject matter &lt;strong&gt;experts&lt;/strong&gt;. First of
all, this leads to strong code ownership. Naturally, each of them
becomes a specialist in his or her own part of the code, mostly because
it&amp;#39;s easier to work with something you&amp;#39;re familiar with instead of jumping
from module to module. Needless to say, strong code ownership is
a bad practice. Collective code ownership is a much better alternative,
as &lt;a href=&quot;http://martinfowler.com/bliki/CodeOwnership.html&quot;&gt;explained&lt;/a&gt; by Martin Fowler.&lt;/p&gt;

&lt;aside class='quote'&gt;Having strong experts on the team inevitably leads to hero-driven development&lt;/aside&gt;

&lt;p&gt;Then, having strong experts on the team inevitably leads to
hero-driven development, where firefighting is very much appreciated.
An expert doesn&amp;#39;t want to lose his or her position, and always tries to demonstrate
how valuable he or she is for the team. The best way to do this is to
solve a problem that nobody else can solve. That&amp;#39;s how one gets &amp;quot;job security&amp;quot;.
And that&amp;#39;s how the team starts to degrade.
This &lt;a href=&quot;http://highlevelbits.com/2014/08/hero-driven-development.html&quot;&gt;blog post&lt;/a&gt;
by Fredrik Rubensson is right about this problem.&lt;/p&gt;

&lt;p&gt;Thus, to achieve higher maintainability of the source code and
robustness of the product, we must &lt;strong&gt;rotate&lt;/strong&gt; programmers, preventing
them from becoming subject matter experts.&lt;/p&gt;

&lt;p&gt;I realize this idea sounds counter-intuitive, but think about it.
By keeping people together, working on the same problem for a long time,
we put a lot of knowledge into their heads, not our source code.
These people become the &lt;strong&gt;asset&lt;/strong&gt;. They become smarter, they know the
solution very well, and they solve all issues rather quickly.
But the code base degrades.&lt;/p&gt;

&lt;p&gt;When the time comes to change someone (for any reason), the loss will be
damaging. We may lose significant knowledge, and the code base left
behind will be unmaintainable. In most cases, we will have to re-write it.
That&amp;#39;s why in most software teams, management is &lt;strong&gt;afraid&lt;/strong&gt; of programmers.
They are scared to lose key software developers, because the
consequences may be fatal.&lt;/p&gt;

&lt;p&gt;In the end, programmers control management, not the other way around.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;It&amp;#39;s Not a School!&lt;/a&gt; &amp;mdash;
This earlier post explains how this problem can be solved without
&lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;firing&lt;/a&gt;
or rotating programmers, but few teams, especially co-located ones,
can afford it. If your team can&amp;#39;t, just try to keep your turnover high
enough to prevent the appearance of &lt;strong&gt;heros&lt;/strong&gt; (a.k.a. subject matter experts).&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/12/29/turnover-is-good-for-maintainability.html</guid>
      <dc:date>2015-12-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Why Don't You Contribute to Open Source?</title>
      <link>http://www.yegor256.com/2015/12/22/why-dont-you-contribute-to-open-source.html</link>
      <description>&lt;p&gt;In my &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;How Much Do You Cost?&lt;/a&gt;
post last year, I said open-source contribution is a very
important factor in defining who is good and who isn&amp;#39;t, as far as programmers go.
I was saying that if you&amp;#39;re not contributing to open source, if your
GitHub profile is not full of projects and commits, your &amp;quot;value&amp;quot; as a
software developer is low, simply because this lack of open-source
activity tells everybody that you&amp;#39;re &lt;strong&gt;not passionate&lt;/strong&gt; about software
development and are simply working for money. I keep getting angry comments
about that every week. Let me answer them all here.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/12/kung-fu-hustle.jpg' style='width:600px;' alt='Kung Fu Hustle (2004) by Stephen Chow'/&gt;&lt;figcaption&gt;Kung Fu Hustle (2004) by Stephen Chow&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The gist of all those comments is this: &amp;quot;I don&amp;#39;t contribute to open source,
but I&amp;#39;m still very passionate about software development&amp;quot;. Then, there is
a list of &lt;strong&gt;reasons&lt;/strong&gt; why the author of the comment doesn&amp;#39;t contribute:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I spend my free time with my family.&lt;/li&gt;
&lt;li&gt;I&amp;#39;m already busy in the office; why should I do extra work?&lt;/li&gt;
&lt;li&gt;I&amp;#39;m well-paid; why should I do anything for free?&lt;/li&gt;
&lt;li&gt;My employer doesn&amp;#39;t allow me to contribute to open source.&lt;/li&gt;
&lt;li&gt;My company won&amp;#39;t pay me for writing open-source code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good excuses, but let&amp;#39;s try to look at it from a different perspective.&lt;/p&gt;

&lt;p&gt;Today, it&amp;#39;s &lt;strong&gt;not possible&lt;/strong&gt; at all to create software without using
open-source components. I&amp;#39;m sure nobody will argue with this. Only something
very basic and simple can be created without code reuse. Nah, I&amp;#39;m wrong. Even
super small pieces of software can&amp;#39;t be created without open-source
&amp;quot;neighbors&amp;quot;. You need at the very least an operating system and a programming language.
In most cases, they are open source (Microsoft is an exception, and it must die).&lt;/p&gt;

&lt;p&gt;Thus, no matter what software you&amp;#39;re creating, you&amp;#39;re using modules
created for you by &lt;strong&gt;others&lt;/strong&gt;. Someone else spent his or her time to help you.&lt;/p&gt;

&lt;aside class='quote'&gt;Just admit that you don't care; it's not a crime, after all&lt;/aside&gt;

&lt;p&gt;Now, you&amp;#39;re not giving anything back. I&amp;#39;m curious, why is that?&lt;/p&gt;

&lt;p&gt;There could be two reasons. The first one is that you just don&amp;#39;t care.
They give you something, and you&amp;#39;re not giving anything back. You simply
don&amp;#39;t feel like being a player in this market. You take their libraries,
reuse them in your product, collect a
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;paycheck&lt;/a&gt;, and go home. You don&amp;#39;t care
what will happen with the industry, with those programmers, with the language
you&amp;#39;re writing in, with the platform, etc. You don&amp;#39;t want to improve the
libraries, you don&amp;#39;t want to create and share new ones, you don&amp;#39;t want to
report bugs and feature requests, and you don&amp;#39;t want to send patches and pull
requests to them.&lt;/p&gt;

&lt;p&gt;I do understand that. Millions of programmers are like that; you&amp;#39;re not alone.
But please, don&amp;#39;t tell me that you&amp;#39;re passionate about software development.
Just admit that you don&amp;#39;t care. It&amp;#39;s &lt;strong&gt;not a crime&lt;/strong&gt;, after all. You&amp;#39;re not stealing
anything (although I actually think you are, but that&amp;#39;s a different story).&lt;/p&gt;

&lt;p&gt;That was the first reason why you may not contribute.
However, in most cases, my typical opponent tells me he or she does care,
but just can&amp;#39;t. There are &lt;strong&gt;obstacles&lt;/strong&gt;, right? Your family is taking
all your free time, and in the office, you simply are not allowed to
work on something that is outside of your business scope. I can imagine that,
but let&amp;#39;s see what&amp;#39;s happening behind the scenes.&lt;/p&gt;

&lt;p&gt;You&amp;#39;re telling me that your company doesn&amp;#39;t care about the software industry,
right? They don&amp;#39;t allow you to give anything back to the open-source community.
They want you to use those free libraries and give nothing back. And it is their
corporate strategy. I doubt that&amp;#39;s the case.
Did you ask your CTO about it?&lt;/p&gt;

&lt;p&gt;I strongly believe that in 95 percent of cases, when you explain that your software
seriously depends on a few open-source libraries that may need some
improvements, your boss will have nothing against you becoming a contributor.
Try it.&lt;/p&gt;

&lt;p&gt;Sometimes, the boss says he or she doesn&amp;#39;t care about any open source
and wants you to focus on your product. Maybe this happens rather often;
I don&amp;#39;t know.&lt;/p&gt;

&lt;aside class='quote'&gt;If you don't walk away, you accept this attitude; you're part of it&lt;/aside&gt;

&lt;p&gt;In that case, my next question is philosophical. You&amp;#39;re working for such a person and
such a company. You&amp;#39;re accepting their
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;paychecks&lt;/a&gt;. Aren&amp;#39;t you a part
of this team and this mentality? If you don&amp;#39;t walk away, you &lt;strong&gt;accept&lt;/strong&gt; this
attitude. You&amp;#39;re part of it. It&amp;#39;s &lt;strong&gt;you&lt;/strong&gt; who doesn&amp;#39;t care, not just them.
Because of your existence, they have an ability to not care.&lt;/p&gt;

&lt;p&gt;Tomorrow if they ask you to use stolen software, you may say
you had no choice: &amp;quot;My boss asked me to do this. I did care about
copyright and strongly believed that software authors must be paid, but
I had to steal, because that&amp;#39;s what my company asked me to do&amp;quot;.
Does it sound like a good excuse?&lt;/p&gt;

&lt;p&gt;The same story goes for open source. If you do care and you&amp;#39;re passionate
about software development, you will either &lt;strong&gt;contribute&lt;/strong&gt; actively
or &lt;strong&gt;walk away&lt;/strong&gt; from the company that doesn&amp;#39;t share your passion. What, you can&amp;#39;t
walk away because of some reasons? Then don&amp;#39;t tell me about your passion.
Simply admit that you&amp;#39;re too weak to follow your passion.&lt;/p&gt;

&lt;p&gt;Again, it&amp;#39;s not a crime. It&amp;#39;s just who you are.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/12/22/why-dont-you-contribute-to-open-source.html</guid>
      <dc:date>2015-12-22T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Investors Are Too Scared</title>
      <link>http://www.yegor256.com/2015/12/16/investors-are-too-scared.html</link>
      <description>&lt;p&gt;We&amp;#39;re starting a new thing, a seed fund. Its name is
&lt;a href=&quot;http://www.seedramp.com&quot;&gt;SeedRamp&lt;/a&gt;. The formula is simple: You schedule
an interview, we have a one-hour conversation, you present me your
startup idea, and we either give you cash right away or explain why we don&amp;#39;t
feel like it. We don&amp;#39;t do any due diligence or background checks. The decision
is made right there. It&amp;#39;s something similar to angel investment, but the
amount is smaller &amp;mdash; less than &lt;strong&gt;$20K&lt;/strong&gt;, and decisions are faster.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/12/the-game.jpg' style='width:600px;' alt='The Game (1997) by David Fincher'/&gt;&lt;figcaption&gt;The Game (1997) by David Fincher&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are basically three problems we&amp;#39;re trying to solve with this
new idea: 1) Investors are &lt;strong&gt;cowards&lt;/strong&gt;, 2) investors are &lt;strong&gt;cowards&lt;/strong&gt;, and
3) investors are &lt;strong&gt;cowards&lt;/strong&gt;. Here is why.&lt;/p&gt;

&lt;h2 id=&quot;they-are-afraid-of-strangers&quot;&gt;They Are Afraid of Strangers&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s no secret that Silicon Valley is very &amp;quot;&lt;strong&gt;corrupted&lt;/strong&gt;&amp;quot; territory,
where in order to get access to money people, you must know some other
money people or someone who knows someone, etc. You must be &lt;strong&gt;well-connected&lt;/strong&gt;
in order to be successful. You simply can&amp;#39;t raise money just by having an
awesome idea or even a great implementation. You need connections.&lt;/p&gt;

&lt;p&gt;I think that&amp;#39;s disgusting.&lt;/p&gt;

&lt;p&gt;I am, in general, a big fan of &lt;strong&gt;meritocracy&lt;/strong&gt;, where those who are smarter
or stronger win the most. This is the principle we,
at &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, apply to software developers who come to us.
I explained it last year in this rather popular and provocative post:
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;How Much Do You Cost?&lt;/a&gt;.
We simply don&amp;#39;t care how many years of experience you have,
how much time you&amp;#39;ve spent with your previous employer,
or how many programming languages you know. We only care about your
objective achievements, which are validated by the market. And, of course,
we don&amp;#39;t pay attention to any references or any previous relationships.&lt;/p&gt;

&lt;p&gt;I strongly believe this is how it should be.&lt;/p&gt;

&lt;p&gt;Unfortunately, this is not how it is in Silicon Valley when a young
startup is looking for $100K to $150K of seed money. Angel investors are difficult
to reach. They are afraid of you, if you come out of nowhere. They only want
to talk to someone they can &lt;strong&gt;complain&lt;/strong&gt; about to their friends. This
basically encourages startup founders to spend their time on friend-making
activities instead of business-making ones. Very often, good teams simply
&lt;strong&gt;miss&lt;/strong&gt; their chance.&lt;/p&gt;

&lt;h2 id=&quot;they-are-afraid-of-telling-the-truth&quot;&gt;They Are Afraid of Telling the Truth&lt;/h2&gt;

&lt;p&gt;Have you ever talked to a venture capital firm? To angel investors? To
any investors, basically? If you have, you&amp;#39;d know they all
are very &lt;strong&gt;polite&lt;/strong&gt;, nodding their heads and smiling while listening
to your pitch. They usually are &amp;quot;very excited&amp;quot; to meet you and
&amp;quot;learn more&amp;quot; about your business.&lt;/p&gt;

&lt;p&gt;In the end, they don&amp;#39;t give you the money.&lt;/p&gt;

&lt;p&gt;Why? Who knows. They won&amp;#39;t tell you. They are cowards, and they are afraid
of telling you that your idea sucks and your business plan is totally wrong.
They are afraid of being &lt;strong&gt;honest&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is an almost identical situation with recruitment. You send your resume
to Facebook, they interview you, and you spend a few hours with them, answering
their questions. In the end, they email you, saying &amp;quot;We decided not to proceed
any further; good luck in your job search&amp;quot;. They are afraid of telling you
the &lt;strong&gt;truth&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And it&amp;#39;s disgusting.&lt;/p&gt;

&lt;p&gt;In our recruitment process at &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, we do
exactly the opposite. You apply to us, we ask one of our programmers to
interview you, and then, when finished, we make a decision about whether you&amp;#39;re
a good candidate or not. We discuss your profile right in front of you. We
don&amp;#39;t have any discussions without you. We make our decision fully disclosing
our reasoning to you. This is how it should be everywhere, I believe.
Especially with regard to investments.&lt;/p&gt;

&lt;h2 id=&quot;they-are-afraid-of-losses&quot;&gt;They are Afraid of Losses&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s a very infamous problem, mentioned everywhere there&amp;#39;s a list
of &amp;quot;top 10 reasons for startup failures&amp;quot;. Investors simply turn you
into an &lt;strong&gt;employee&lt;/strong&gt;. Before you get their money, you&amp;#39;re on your own. You make
your own decisions, you manage your business, you&amp;#39;re in charge.&lt;/p&gt;

&lt;p&gt;Then, you get the money. It doesn&amp;#39;t mean you&amp;#39;re &lt;strong&gt;rich&lt;/strong&gt;. Not at all. It means
that, from now on, you&amp;#39;re their employee. They decide what your salary is.
They decide whether you can rent this office or not. They decide what
car you can afford.&lt;/p&gt;

&lt;p&gt;Keep in mind that your salary is lower than your friends are getting,
working somewhere on Facebook. Your salary is low, and you can&amp;#39;t change it.
All your expenses have to be approved. You&amp;#39;re simply under the full control
of your &lt;strong&gt;board&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Why is that? Because they are afraid of you being &lt;strong&gt;free&lt;/strong&gt;. They are afraid
of losing their money. That&amp;#39;s why they are doing everything they can
to keep a close eye on you.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s disgusting and very counter-productive.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s similar to trying to win in poker by always making small bets. In most
cases, they lose their money, you lose your time, and the market loses the opportunity
to get a new product.&lt;/p&gt;

&lt;h2 id=&quot;we-are-not-cowards&quot;&gt;We Are Not Cowards&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.seedramp.com'&gt;&lt;img src='http://www.seedramp.com/logo-256x256.png' style='width:128px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.seedramp.com&quot;&gt;SeedRamp&lt;/a&gt; is going to solve all of these three problems.&lt;/p&gt;

&lt;p&gt;First of all, we completely remove the necessity to have any connections
in order to reach us. You need money? Just &lt;strong&gt;schedule&lt;/strong&gt; an appointment online.
We don&amp;#39;t care who you are, where you&amp;#39;re coming from, or who you know. We
give you one hour of our time, and if we reject your idea, you can apply again in
a month. Thus, any young startup without any friends or connections is
&lt;strong&gt;welcome&lt;/strong&gt;. Just bring your strategy, your existing results, and your passion, and
we&amp;#39;ll talk.&lt;/p&gt;

&lt;p&gt;Second, we don&amp;#39;t say, &amp;quot;We will call you back&amp;quot;. We give you our reasons right
away, and we always tell the truth. Moreover, we record our interview and
publish it on &lt;strong&gt;YouTube&lt;/strong&gt;. Yes, that&amp;#39;s not a joke; we will publish all interviews
online, and you can see how we talk about other startups. We are not afraid of
telling the truth; it&amp;#39;s part of our marketing strategy.&lt;/p&gt;

&lt;p&gt;Third, we don&amp;#39;t sit on your board after the investment is made. We simply
give you a check, and you can fly to Vegas the next day and spend all of that
money there. We don&amp;#39;t care. When our decision is made, we don&amp;#39;t tell you
what to do with the money. If we gave you the money, we believed in you
and your judgment. If you think that the best use of this money would
be a new &lt;strong&gt;Kawasaki&lt;/strong&gt;, do it.&lt;/p&gt;

&lt;h2 id=&quot;instant-micro-investments&quot;&gt;Instant Micro Investments&lt;/h2&gt;

&lt;p&gt;To make it all happen, we have a few principles and limitations.&lt;/p&gt;

&lt;p&gt;First, we expect you to ask for enough cash for one calendar month. You simply
have to explain to us how much you need for one month and how you&amp;#39;re planning
to spend this money, approximately. One calendar month. We expect you
to come back to us in a month, demonstrate your progress, and ask for one
more month. Of course, we may say no.&lt;/p&gt;

&lt;p&gt;Second, the maximum we can give you is $20,000. Maybe, in the future,
we will raise this limit. For now, it is $20K.&lt;/p&gt;

&lt;p&gt;And one last thing. We will ask you to give us some stock in your
startup. You decide how much, but it has to be enough to make us
interested. It all depends on your situation. A few percent, I&amp;#39;d guess.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re planning to host our first interviews in the middle of January 2016.
You can schedule them &lt;a href=&quot;https://calendly.com/yegor256/seedramp&quot;&gt;right here&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/12/16/investors-are-too-scared.html</guid>
      <dc:date>2015-12-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Temporal Coupling Between Method Calls</title>
      <link>http://www.yegor256.com/2015/12/08/temporal-coupling-between-method-calls.html</link>
      <description>&lt;p&gt;Temporal coupling happens between sequential method calls
when they must stay in a particular order. This is inevitable
in imperative programming, but we can reduce the negative effect
of it just by turning those static procedures into functions. Take
a look at this example.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/12/blueberry.jpg' style='width:600px;' alt='Blueberry (2004) by Jan Kounen'/&gt;&lt;figcaption&gt;Blueberry (2004) by Jan Kounen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What do you think about that? I believe it&amp;#39;s clear what &lt;code&gt;names()&lt;/code&gt; is doing &amp;mdash;
creating a list of names. In order to avoid duplication, there is a supplementary
&lt;em&gt;procedure&lt;/em&gt;, &lt;code&gt;append()&lt;/code&gt;, which converts an item to lowercase and adds it to the
list.&lt;/p&gt;

&lt;p&gt;This is poor design.&lt;/p&gt;

&lt;p&gt;It is a &lt;strong&gt;procedural&lt;/strong&gt; design, and there is &lt;strong&gt;temporal coupling&lt;/strong&gt; between
lines in method &lt;code&gt;names()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let me first show you a better (though not the best!) design,
then I will try to explain its benefits:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An ideal design for method &lt;code&gt;with()&lt;/code&gt; would create a new instance of
&lt;code&gt;List&lt;/code&gt;, populate it through &lt;code&gt;addAll(list)&lt;/code&gt;, then &lt;code&gt;add(item)&lt;/code&gt; to it, and
finally return. That would be perfectly
&lt;a href=&quot;http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutable&lt;/a&gt;,
but slow.&lt;/p&gt;

&lt;p&gt;So, what is wrong with this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It looks perfectly clean, doesn&amp;#39;t it? Instantiate a list, append two items to it, and
return it. Yes, it is clean &amp;mdash; for now. Because we remember what &lt;code&gt;append()&lt;/code&gt; is
doing. In a few months, we&amp;#39;ll get back to this code, and it will look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Is it so clear now that &lt;code&gt;append()&lt;/code&gt; is actually adding &lt;code&gt;&amp;quot;Jeff&amp;quot;&lt;/code&gt; to &lt;code&gt;list&lt;/code&gt;? What
will happen if I remove that line? Will it affect the result being
returned in the last line? I don&amp;#39;t know. I need to &lt;strong&gt;check&lt;/strong&gt; the body of method
&lt;code&gt;append()&lt;/code&gt; to make sure.&lt;/p&gt;

&lt;p&gt;Also, how about returning &lt;code&gt;list&lt;/code&gt; first and calling &lt;code&gt;append()&lt;/code&gt; afterwards? This
is what possible &amp;quot;refactoring&amp;quot; may do to our code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* something */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 more lines here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First of all, we return &lt;code&gt;list&lt;/code&gt; too early, when it is not ready. But did anyone
tell me that these two calls to &lt;code&gt;append()&lt;/code&gt; must happen before &lt;code&gt;return list&lt;/code&gt;?
Second, we changed the order of &lt;code&gt;append()&lt;/code&gt; calls. Again, did anyone tell me
that it&amp;#39;s important to call them in that particular order?&lt;/p&gt;

&lt;p&gt;Nobody. Nowhere. This is called &lt;strong&gt;temporal coupling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Our lines are &lt;strong&gt;coupled&lt;/strong&gt; together. They must stay in this particular order, but the
knowledge about that order is hidden. It&amp;#39;s easy to destroy
the order, and our compiler won&amp;#39;t be able to catch us.&lt;/p&gt;

&lt;p&gt;To the contrary, this design doesn&amp;#39;t have any &amp;quot;order&amp;quot;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It just &lt;strong&gt;returns&lt;/strong&gt; a list, which is constructed by a few calls to the &lt;code&gt;with()&lt;/code&gt;
method. It is a single line instead of four.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/2015/08/18/multiple-return-statements-in-oop.html&quot;&gt;discussed before&lt;/a&gt;,
an ideal method in OOP must have just a single statement, and this statement is
&lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The same is true about validation. For example, this code is bad:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkIfListStillHasSpace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this one is much better:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withEnoughSpace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Walter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;And, of course, an ideal approach would be to use
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;composable decorators&lt;/a&gt;
instead of these ugly static methods. But if it&amp;#39;s not possible for
some reason, just don&amp;#39;t make those static methods look like procedures.
Make sure they always return results, which become arguments to
further calls.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/12/08/temporal-coupling-between-method-calls.html</guid>
      <dc:date>2015-12-08T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Throwing an Exception Without Proper Context Is a Bad Habit</title>
      <link>http://www.yegor256.com/2015/12/01/rethrow-exceptions.html</link>
      <description>&lt;p&gt;I keep repeating the same mistake again and again. So it&amp;#39;s time to
stop and make a rule to prevent this from happening anymore. The mistake
is not fatal, but it&amp;#39;s very annoying. When I look at production logs, I often see
something like &lt;code&gt;&amp;quot;File doesn&amp;#39;t exist&amp;quot;&lt;/code&gt;, and I ask myself:
What file? Where is it supposed to exist? What did the server try to do with it?
What was going on a second before it crashed?
There is no answer in the log, and it&amp;#39;s totally my fault.
I either 1) don&amp;#39;t re-throw or 2) re-throw without providing context.
Both are wrong.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/12/four-rooms.jpg' style='width:600px;' alt='Four Rooms (1995) by Allison Anders et al.'/&gt;&lt;figcaption&gt;Four Rooms (1995) by Allison Anders et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This is how the code may look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;File doesn&amp;#39;t exist&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It may also look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Both examples demonstrate an inadequate style of handling situations that
involve exceptions and reporting them. What&amp;#39;s wrong here? The exception messages
are not thorough enough. They simply don&amp;#39;t contain any information
from the place where they originated from.&lt;/p&gt;

&lt;p&gt;This is how they should look instead:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;User profile file %s doesn&amp;#39;t exist&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the second example should look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;Can&amp;#39;t delete user profile data file %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See the difference? This may look like redundant code, but it&amp;#39;s not.
Of course, when I&amp;#39;m writing all this, I don&amp;#39;t really care about
logs and exceptions. I&amp;#39;m not really expecting this file
to be absent.&lt;/p&gt;

&lt;p&gt;But I should.&lt;/p&gt;

&lt;p&gt;There should be a rule: Every time we throw or re-throw, an
exception message must describe the problem with as much
detail as possible.&lt;/p&gt;

&lt;p&gt;Of course, we can&amp;#39;t forget about security and risk putting any
sensitive information into the exception message, like passwords,
credit card numbers, etc. Besides that, as much as possible
must be exposed to the exception catcher at a higher level.&lt;/p&gt;

&lt;p&gt;Throwing an exception is literally an escalation of a problem
to a higher level of management. Imagine that my boss is asking
me to install a new server. I come back to him in a few hours
and say, &amp;quot;I failed; sorry.&amp;quot; That would sound strange. He
would ask for more details. Why did I fail? What exactly went wrong?
Is it possible to do it differently? Etc.&lt;/p&gt;

&lt;p&gt;Such code is literally a sign of disrespect to the client:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;File doesn&amp;#39;t exist&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have to be more verbose and give more details.&lt;/p&gt;

&lt;p&gt;And I&amp;#39;m not alone in this mistake. I see it everywhere, and it really
makes debugging difficult, especially in production, where it&amp;#39;s
almost impossible to reproduce the problem right away.&lt;/p&gt;

&lt;p&gt;Thus, please be more verbose in your exception messages. I will do the same
in my code :)&lt;/p&gt;

&lt;p&gt;And one more thing before you go. In most OOP languages, exceptions
are unchecked, which means that catching them is not a mandatory
operation, &lt;a href=&quot;/2015/07/28/checked-vs-unchecked-exceptions.html&quot;&gt;unfortunately&lt;/a&gt;.
Nevertheless, I recommend you catch, add context, and
re-throw them all, &lt;strong&gt;always&lt;/strong&gt;. This may seem like pure noise, but it&amp;#39;s not!
Just make your methods smaller and ensure all exceptions
sent out of them have enough information about their origins.
You will do yourself and everybody else a big favor.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 01 Dec 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/12/01/rethrow-exceptions.html</guid>
      <dc:date>2015-12-01T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Imprisonment for Irresponsible Coding!</title>
      <link>http://www.yegor256.com/2015/11/24/imprisonment-for-irresponsible-coding.html</link>
      <description>&lt;p&gt;If I drive too fast and I get caught, I may get a ticket. If I drive
under the influence and get caught, I may go to jail. If I turn my
radio up too loud in the middle of the night and my neighbors call the police,
I may get into trouble if I don&amp;#39;t stop it. The law basically protects
us from causing trouble with each other. Why don&amp;#39;t we have a law
against &lt;strong&gt;irresponsible coding&lt;/strong&gt;?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/11/thursday.jpg' style='width:600px;' alt='Thursday (1998) by Skip Woods'/&gt;&lt;figcaption&gt;Thursday (1998) by Skip Woods&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Software is part of my life. It actually &lt;strong&gt;is&lt;/strong&gt; my &lt;strong&gt;life&lt;/strong&gt;, not just part of it. I stare
at this MacBook for much more time every day than I drive, talk, or listen
to the radio.&lt;/p&gt;

&lt;p&gt;Code is the &lt;strong&gt;territory&lt;/strong&gt; where I
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;interfere&lt;/a&gt;
with others, and this is where
we may bother each other. Irresponsible coding is precisely how one
of us can really disturb the other. So why don&amp;#39;t the &lt;strong&gt;police&lt;/strong&gt; protect
me against, say, authors of Apache Hadoop?&lt;/p&gt;

&lt;p&gt;They created something that turns part of my life into a nightmare &amp;mdash; much
faster and much more severely than drunk drivers. So, where is
the police? Why aren&amp;#39;t they protecting me, for my tax dollars? Why
aren&amp;#39;t those Java guys in &lt;strong&gt;jail&lt;/strong&gt; yet? :)&lt;/p&gt;

&lt;p&gt;We need a law against irresponsible coding!&lt;/p&gt;

&lt;p&gt;How about two months of imprisonment for a
&lt;a href=&quot;http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons&quot;&gt;Singleton&lt;/a&gt;?&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 24 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/11/24/imprisonment-for-irresponsible-coding.html</guid>
      <dc:date>2015-11-24T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Ringelmann Effect vs. Agile</title>
      <link>http://www.yegor256.com/2015/11/21/ringelmann-effect-vs-agile.html</link>
      <description>&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Ringelmann_effect&quot;&gt;Ringelmann Effect&lt;/a&gt;
(a.k.a. &lt;a href=&quot;https://en.wikipedia.org/wiki/Social_loafing&quot;&gt;social loafing&lt;/a&gt;)
is basically about people experiencing &lt;strong&gt;decreasing&lt;/strong&gt; productivity
when working in groups. We&amp;#39;re basically more productive when
we work individually to achieve personal goals rather than being
teamed up. That was discovered by Prof. &lt;a href=&quot;https://en.wikipedia.org/wiki/Max_Ringelmann&quot;&gt;Max Ringelmann&lt;/a&gt; a hundred
years ago in 1913. Today, during my workshop in Berlin at
&lt;a href=&quot;http://distributed-agile-teams.org/workshops/&quot;&gt;DATFlock 2015&lt;/a&gt;, we tried
to reproduce that experiment. It seems the French professor was right.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class='badge'&gt;&lt;a href='https://en.wikipedia.org/wiki/Max_Ringelmann'&gt;&lt;img src='https://www.socialpsychology.org/images/socialfigures/ringelmann.jpg' style='width:72px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Here is what we did. We created two groups with four people in each of them,
all non-native English speakers. Then, both groups received the same
task &amp;mdash; to create as many words as possible using the letters in a single given word.
It&amp;#39;s a pretty simple task that just requires some time and creativity.&lt;/p&gt;

&lt;p&gt;The first group worked as a team. They had just one piece of paper
and one pen to write down the words they found. We called them a
&lt;strong&gt;co-located&lt;/strong&gt; team.&lt;/p&gt;

&lt;p&gt;The second group of four people worked in a &lt;strong&gt;distributed&lt;/strong&gt; mode &amp;mdash;
they had four pieces of paper and four pens. They didn&amp;#39;t communicate with
each other and just created words. They knew that the best performer
would receive a prize (a bar of organic chocolate).&lt;/p&gt;

&lt;p&gt;I promised a prize to the co-located team too. A very similar chocolate bar.&lt;/p&gt;

&lt;p&gt;We gave them both just 5 minutes.&lt;/p&gt;

&lt;p&gt;Our result was this: &lt;strong&gt;38 words&lt;/strong&gt; found by a co-located team and &lt;strong&gt;41 words&lt;/strong&gt;
found by a distributed team. Of course, we removed duplicates and non-English
words.&lt;/p&gt;

&lt;p&gt;The distributed team was &lt;strong&gt;8 percent&lt;/strong&gt; more productive than the co-located one.&lt;/p&gt;

&lt;p&gt;Of course, this may not be a clear experiment, and we can&amp;#39;t use these numbers
to really prove anything, but it was interesting to see how groups work and what
actually motivates us to achieve results. We had an hour-long discussion afterward
in an attempt to find out what each group member felt while working in a group
or individually.&lt;/p&gt;

&lt;p&gt;You can try to repeat this (or a similar experiment) in your team and check
the results. Post them below in the comments; it would be interesting to see whether
it does or doesn&amp;#39;t work in your case.&lt;/p&gt;

&lt;p&gt;Now, my main question. If I understand it right, Agile promotes group
responsibility and discourages &lt;strong&gt;individualism&lt;/strong&gt;. How does it go along
with the Ringelmann Effect? Any thoughts?&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sat, 21 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/11/21/ringelmann-effect-vs-agile.html</guid>
      <dc:date>2015-11-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Stop Comparing JSON and XML</title>
      <link>http://www.yegor256.com/2015/11/16/json-vs-xml.html</link>
      <description>&lt;p&gt;JSON or XML? Which one is better? Which one is faster? Which
one should I use in my next project? Stop it! These things are not comparable.
It&amp;#39;s similar to comparing a bicycle and an
&lt;a href=&quot;http://www.mbusa.com/mercedes/vehicles/model/class-S/model-S65V&quot;&gt;AMG S65&lt;/a&gt;. Seriously,
which one is better? They both can take you from home to the office, right?
In some cases, a bicycle will do it better. But does that mean
they can be compared to each other? The same applies here with JSON and XML.
They are very different things with their own areas of applicability.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/11/the-man-who-stare-at-goats.jpg' style='width:600px;' alt='The Men Who Stare at Goats (2009) by Grant Heslov'/&gt;&lt;figcaption&gt;The Men Who Stare at Goats (2009) by Grant Heslov&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is how a simple JSON piece of data may look
(140 characters):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Object Thinking&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;David West&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;published&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;by&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Microsoft Press&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2004&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A similar document would look like this in XML
(167 characters):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;?xml&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;book&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;title&amp;gt;Object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Thinking&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;author&amp;gt;David&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;West&amp;lt;/author&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;published&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&amp;lt;by&amp;gt;Microsoft&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Press&amp;lt;/by&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&amp;lt;year&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2004&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;/year&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;/published&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;/book&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;aside class='quote'&gt;JSON is a good data format, and it is just a data format&lt;/aside&gt;

&lt;p&gt;Looks easy to compare, right? The first example is a bit shorter,
is easier to understand since it&amp;#39;s less &amp;quot;cryptic,&amp;quot; and is also
perfectly parseable in JavaScript. That&amp;#39;s it, then; let&amp;#39;s use JSON
and manifest the death of XML! Who needs this heavyweight 15-year-old
XML in the first place?&lt;/p&gt;

&lt;p&gt;Well, I need it, and I love it. Let me explain why.&lt;/p&gt;

&lt;p&gt;And don&amp;#39;t get me wrong; I&amp;#39;m not against JSON. Not at all.
It&amp;#39;s a good &lt;strong&gt;data format&lt;/strong&gt;. But it&amp;#39;s just a data format.
We&amp;#39;re using it &lt;strong&gt;temporarily&lt;/strong&gt; to transfer a piece
of data from point A to point B. Indeed, it is shorter than XML and
more readable. That&amp;#39;s it.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0596007647/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0596007647&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=MWLP356M3CQZSBS7'&gt;&lt;img src='/images/2015/04/book-xml-nutshell.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;XML is not a data format; it is a &lt;strong&gt;language&lt;/strong&gt;. A very powerful one. Let me
show you what it&amp;#39;s capable of. Let me basically explain why I love it. And I would
strongly recommend you read
&lt;a href=&quot;http://www.amazon.com/gp/product/0596007647/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0596007647&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=MWLP356M3CQZSBS7&quot;&gt;&lt;strong&gt;XML in a Nutshell, Third Edition&lt;/strong&gt;&lt;/a&gt;
by Elliotte Rusty Harold and W. Scott Means.&lt;/p&gt;

&lt;p&gt;I believe there are four features XML has that seriously set it apart from
JSON or any other simple data format, like
&lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;YAML&lt;/a&gt; for example.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;XPath&lt;/strong&gt;.
To get data like the year of publication from the document above, I just
send an &lt;a href=&quot;http://www.w3.org/TR/xpath20/&quot;&gt;XPath&lt;/a&gt;
query: &lt;code&gt;/book/published/year/text()&lt;/code&gt;. However, there has to be
an XPath processor that understands my request and returns &lt;code&gt;2004&lt;/code&gt;.
The beauty of this is that XPath &lt;a href=&quot;http://www.xml.com/pub/a/2002/03/20/xpath2.html&quot;&gt;2.0&lt;/a&gt;
is a very powerful query engine
with its own functions, predicates, axes, etc. You can literally put
any logic into your XPath request without writing any traversing logic
in Java, for example. You may ask &amp;quot;How many books were published by David West in 2004?&amp;quot;
and get an answer, just via XPath. JSON is not even close to this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Attributes and Namespaces&lt;/strong&gt;.
You can attach metadata to your data, just like it&amp;#39;s done above
with the &lt;code&gt;id&lt;/code&gt; attribute. The data stays inside elements, just like the
name of the book author, for example, while metadata (data about data)
can and should be placed into attributes. This significantly helps in organizing
and structuring information. On top of that, both elements and attributes
can be marked as belonging to certain &lt;a href=&quot;http://www.w3.org/TR/REC-xml-names/&quot;&gt;namespaces&lt;/a&gt;.
This is a very useful technique during times
when a few applications are working with the same XML document.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;XML Schema&lt;/strong&gt;.
When you create an XML document in one place, modify it a few times somewhere
else, and then transfer it to yet another place, you want to make sure its
structure is not broken by any of these actions. One of them may
use &lt;code&gt;&amp;lt;year&amp;gt;&lt;/code&gt; to store the publication date while another uses
&lt;code&gt;&amp;lt;date&amp;gt;&lt;/code&gt; with ISO-8601. To avoid that mess in structure, create a supplementary
document, which is called &lt;a href=&quot;http://www.w3.org/XML/Schema&quot;&gt;XML Schema&lt;/a&gt;,
and ship it together with the main document.
Everyone who wants to work with the main document will first &lt;strong&gt;validate&lt;/strong&gt;
its correctness using the schema supplied. This is a sort of integration testing
in production. &lt;a href=&quot;http://relaxng.org/&quot;&gt;RelaxNG&lt;/a&gt;
is a similar but simpler mechanism; give it a try if you find XML Schema too complex.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;XSL&lt;/strong&gt;.
You can make modifications to your XML document without any Java/Ruby/etc. code
at all. Just create an
&lt;a href=&quot;http://www.w3.org/TR/xslt20/&quot;&gt;XSL transformation&lt;/a&gt; document and &amp;quot;apply&amp;quot; it to your
original XML. As an output, you will get a new XML. The
&lt;a href=&quot;http://www.w3.org/Style/XSL/&quot;&gt;XSL&lt;/a&gt; language
(it is purely functional, by the way) is designed for hierarchical data
manipulations. It is much more suitable for this task than Java or any other
OOP/procedural approach. You can transform an XML document into anything, including
plain text and
&lt;a href=&quot;/2014/06/25/xml-and-xslt-in-browser.html&quot;&gt;HTML&lt;/a&gt;.
Some complain about XSL&amp;#39;s complexity, but please
give it a try. You won&amp;#39;t need all of it, while its core functionality is
pretty straight-forward.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not a full list, but these four features really mean a lot to me.
They give my document the ability to be &amp;quot;self-sufficient.&amp;quot; It can validate
itself (XML Schema), it knows how to modify itself (XSL), and
it gives me very convenient access to anything inside it (XPath).&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;http://users.jyu.fi/%7Eairi/xmlfamily.html&quot;&gt;many more&lt;/a&gt;
languages, standards, and applications developed around XML, including
&lt;a href=&quot;http://www.w3.org/MarkUp/Forms/&quot;&gt;XForms&lt;/a&gt;,
&lt;a href=&quot;http://www.w3.org/Graphics/SVG/&quot;&gt;SVG&lt;/a&gt;,
&lt;a href=&quot;http://www.w3.org/Math/&quot;&gt;MathML&lt;/a&gt;,
&lt;a href=&quot;http://www.w3.org/RDF/&quot;&gt;RDF&lt;/a&gt;,
&lt;a href=&quot;http://www.w3.org/2001/sw/wiki/OWL&quot;&gt;OWL&lt;/a&gt;,
&lt;a href=&quot;http://www.w3.org/TR/wsdl&quot;&gt;WSDL&lt;/a&gt;, etc.
But you are less likely to use them
in a mainstream project, as they are rather &amp;quot;niche.&amp;quot;&lt;/p&gt;

&lt;p&gt;JSON was not designed to have such features, even though some of them
are now trying to find their places in the JSON world, including
&lt;a href=&quot;http://goessner.net/articles/JsonPath/&quot;&gt;JSONPath&lt;/a&gt; for querying,
&lt;a href=&quot;http://stackoverflow.com/questions/1618038&quot;&gt;some tools&lt;/a&gt; for transformations, and
&lt;a href=&quot;http://json-schema.org/&quot;&gt;json-schema&lt;/a&gt; for validation. But they are just
weak parodies compared to what XML offers, and I don&amp;#39;t think they have any future. Or
let&amp;#39;s put it this way: I wish they would disappear sooner or later. They just
turn a good, simple format into something &lt;strong&gt;clumsy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thus, to conclude, JSON is a simple data format with no additional
functionality. Its best-use case is &lt;a href=&quot;https://en.wikipedia.org/wiki/Ajax_%28programming%29&quot;&gt;AJAX&lt;/a&gt;.
In all other cases, I strongly recommend you use XML.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/11/16/json-vs-xml.html</guid>
      <dc:date>2015-11-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>10 Typical Mistakes in Specs</title>
      <link>http://www.yegor256.com/2015/11/10/ten-mistakes-in-specs.html</link>
      <description>&lt;p&gt;There is a great book called
&lt;a href=&quot;http://www.amazon.com/gp/product/B00JDMPMOA/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00JDMPMOA&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=PRSWJK34HNP355LK&quot;&gt;Software Requirements&lt;/a&gt;
written by Karl Wiegers about, well, software requirements.
It&amp;#39;s a must read for every software engineer, in my opinion. There&amp;#39;s
no need for me to repeat what it says, but there are a few very
simple and very typical mistakes we keep making in our
specs. I see them in our documents again and again,
which is why I&amp;#39;ve decided to summarize them. So here they are,
the ten most critical and typical of them,
from the point of view of a programmer reading a specification document.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='/images/2015/11/reservoir-dogs.jpg' style='width:600px;' alt='Reservoir Dogs (1992) by Quentin Tarantino'/&gt;&lt;figcaption&gt;Reservoir Dogs (1992) by Quentin Tarantino&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Chapter 4.3 of a famous standard
&lt;a href=&quot;https://standards.ieee.org/findstds/standard/830-1998.html&quot;&gt;IEEE 830-1998&lt;/a&gt;
says that a good
&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_requirements_specification&quot;&gt;specification&lt;/a&gt;
should be &lt;strong&gt;correct&lt;/strong&gt;, &lt;strong&gt;unambiguous&lt;/strong&gt;, &lt;strong&gt;complete&lt;/strong&gt;, &lt;strong&gt;consistent&lt;/strong&gt;,
&lt;strong&gt;ranked&lt;/strong&gt;, &lt;strong&gt;verifiable&lt;/strong&gt;, &lt;strong&gt;modifiable&lt;/strong&gt;, and &lt;strong&gt;traceable&lt;/strong&gt;.
Eight qualities in total. Then, the standard explains them one by one
in pretty simple English. But do we have time to read those boring standards?
They are for university professors and certification boards.
We are practitioners, for goodness sake! ... Hold on, I&amp;#39;m joking.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='https://standards.ieee.org/findstds/standard/830-1998.html'&gt;&lt;img src='/images/2015/11/ieee-830.jpg' style='width:128px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;No matter how small the project is and how practical we are, there
is always a document that explains what needs to be done, and it
may be called the &amp;quot;software requirements specification,&amp;quot; or &amp;quot;specification,&amp;quot;
or just &amp;quot;spec.&amp;quot; Of course, there is a lot of space for creativity, but
we&amp;#39;re &lt;strong&gt;engineers&lt;/strong&gt;, not artists. We must follow rules and standards,
mostly because they make our communication easier.&lt;/p&gt;

&lt;p&gt;Now, I&amp;#39;m getting to my point. The specs I usually see violate pretty much
&lt;strong&gt;all&lt;/strong&gt; eight principles mentioned earlier. Below is a summary of how exactly
they do it. By the way, all examples are taken from real documents in
real commercial software projects.&lt;/p&gt;

&lt;h2 id=&quot;no-glossary-or-a-messy-one&quot;&gt;No Glossary or a Messy One&lt;/h2&gt;

&lt;p&gt;How about this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;UUID is set incrementally to make sure there
are no two users with the same account number.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What is the difference between UUID and account number? Is it the
same thing? It seems so, right? Or maybe they are different ... it would
be great to know what UUID stands for. Is it &amp;quot;unique user ID&amp;quot; or maybe
&amp;quot;unified user identity descriptor&amp;quot;? I have no idea. I&amp;#39;m lost, and I want
to find the author of this text and do something bad to him ... or her.&lt;/p&gt;

&lt;aside class='quote'&gt;We're writing in order to be understood, not to impress the reader&lt;/aside&gt;

&lt;p&gt;I&amp;#39;ve written already that the
&lt;a href=&quot;/2015/03/16/technical-glossaries.html&quot;&gt;worst technical specifications have no glossaries&lt;/a&gt;.
In my experience, this is the biggest problem in all requirement
documents. It&amp;#39;s not prose! It&amp;#39;s not a love letter! It&amp;#39;s technical
documentation. We can&amp;#39;t juggle words for the sake of fun. We should
not use product specs just to express ourselves. We&amp;#39;re writing in order
to be understood, not to impress the reader. And the rule is the
same here as with
&lt;a href=&quot;/2015/06/29/simple-diagrams.html&quot;&gt;diagrams&lt;/a&gt;:
if I don&amp;#39;t understand you, it&amp;#39;s your fault.&lt;/p&gt;

&lt;p&gt;Here is how that text would look after a proper re-writing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;UUID is user unique ID, a positive 4-bytes integer.
UUID is set incrementally to make sure there
are no two users with the same UUID.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Better now?&lt;/p&gt;

&lt;p&gt;Thus, the first and biggest problem is a frivolous
use of terms and just words, without having them pre-defined in a glossary.&lt;/p&gt;

&lt;h2 id=&quot;questions,-discussions,-suggestions,-opinions&quot;&gt;Questions, Discussions, Suggestions, Opinions&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve seen this very recently in a product spec:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;I believe that multiple versions of the API
must be supported. What options do we have? I&amp;#39;d
suggest we go with versioned URLs. Feel free to
post your thoughts here.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, this text exists verbatim in a requirements document. First, the
author expresses his personal opinion about the subject. Then,
the author asks me what possible options are out there. Then,
he suggests I consider something, and after that,
he invites me for a talk.&lt;/p&gt;

&lt;aside class='quote'&gt;Find all your answers before writing the document, that's what you're paid for&lt;/aside&gt;

&lt;p&gt;Impressive, right? Obviously, the author has a very creative personality.
But we should keep this person as far away from project documentation as possible.
This is not what a requirements document appreciates. Well, we appreciate
creativity, but these four things are strictly prohibited:
questions, discussions, suggestions, and opinions.&lt;/p&gt;

&lt;p&gt;Specifications can&amp;#39;t have any &lt;strong&gt;questions&lt;/strong&gt; in them. Who are these questions
addressed to? Me, a programmer? Am I supposed to implement the
software or answer your questions? I&amp;#39;m not interested in brainstorming
with you. I expect you, a requirements author, to tell me
what needs to be done. Find all your answers before writing the document. That&amp;#39;s
what you&amp;#39;re paid for. If you don&amp;#39;t have the answers, put something like
TBD (&amp;quot;to be determined&amp;quot;) there. But don&amp;#39;t ask questions. It&amp;#39;s annoying.&lt;/p&gt;

&lt;p&gt;A requirements document is not a &lt;strong&gt;discussion&lt;/strong&gt; board. As a reader of the
spec, I expect to see exactly what needs to be done without any &amp;quot;maybe&amp;quot; or
&amp;quot;we could do it differently.&amp;quot; Of course you need to discuss these issues,
but do it before documenting it. Do it somewhere else, like in Skype, on Slack,
or by email. If you really want to discuss in the document, use Google Docs or
Word with version tracking. But when the discussion is over, remove its history
from the document. Its presence only confuses me, a programmer.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s no need to format requirements as &lt;strong&gt;suggestions&lt;/strong&gt; either. Just say what
needs to be done and how the software has to work without fear of being wrong.
Usually, people resort to suggestion when they are afraid to say it straight. Instead
of saying &amp;quot;the app must work on Android 3.x and higher,&amp;quot; they say
&amp;quot;I would suggest making the app compatible with Android 3.x and higher.&amp;quot;
See the difference? In the second sentence, the author is trying to avoid
personal responsibility. He&amp;#39;s not saying &amp;quot;exactly Android 3.x;&amp;quot; he&amp;#39;s just
suggesting. Don&amp;#39;t be a coward; say it straight. If you make a mistake,
we&amp;#39;ll correct you.&lt;/p&gt;

&lt;p&gt;And, of course, &lt;strong&gt;opinions&lt;/strong&gt; are not appreciated at all. It&amp;#39;s not a letter
to a friend; it&amp;#39;s a formal document that belongs to the project. In a few
months or weeks, you may leave the project, and somebody else will work with
your document. The spec is a contract between the project sponsor and project
team. The opinion of a document author doesn&amp;#39;t make any difference here.
Instead of noting &amp;quot;it seems Java would be faster&amp;quot; and suggesting &amp;quot;we should use it,&amp;quot;
say &amp;quot;Java is faster, so we must use it.&amp;quot; Obviously you put it there because you
thought so. But once it&amp;#39;s there, we don&amp;#39;t care who it came from and what
you thought about this problem. The information would just
confuse us more, so skip it. Just facts, no opinions.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t get me wrong, I&amp;#39;m not against creativity. Programmers are not robots,
quietly implementing what the document says. But a messy document has
nothing to do with creativity. If you want me to create, define
the limits of that creativity and let me experiment within them; for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Multiple versions of the API must be supported. How exactly
that is done doesn&amp;#39;t really matter.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how you invite me to be creative. I realize that the user
of the product doesn&amp;#39;t really have any justifications or expectations
for the versioning mechanisms in the API. I&amp;#39;m free to do whatever
I can. Great, I&amp;#39;ll do it my way.&lt;/p&gt;

&lt;p&gt;But again, let me reiterate: A specification is not a discussion board.&lt;/p&gt;

&lt;h2 id=&quot;mixing-functional-and-quality-requirements&quot;&gt;Mixing Functional and Quality Requirements&lt;/h2&gt;

&lt;p&gt;This is how it looks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;User must be able to scroll down through
the list of images in the profile smoothly and fast.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s a typical mistake in almost every spec I&amp;#39;ve seen. Here, we mix
together a functional requirement (&amp;quot;to scroll images&amp;quot;) and
and a non-functional one (&amp;quot;scrolling is smooth and fast&amp;quot;). Why is it
bad? Well, there is no specific reason, but it exhibits a lack
of discipline.&lt;/p&gt;

&lt;p&gt;Such a requirement is difficult to verify or test, difficult to trace,
and difficult to implement. As a programmer, I don&amp;#39;t know what is more
important: to scroll or to make sure the scrolling is fast.&lt;/p&gt;

&lt;p&gt;Also, it is difficult to modify such a statement. If tomorrow we add
another functional requirement &amp;mdash; scrolling a list
of friends, for example &amp;mdash; we&amp;#39;ll want to require this scrolling to also be smooth and fast.
Then, a few days later, we&amp;#39;ll want to say that &amp;quot;fast&amp;quot; means less than
10 milliseconds of reaction time. We&amp;#39;ll then have to duplicate this information
in two places. See how messy our document may become eventually?&lt;/p&gt;

&lt;p&gt;Thus, I would strongly recommend you always document functional and non-functional
requirements separately.&lt;/p&gt;

&lt;h2 id=&quot;mixing-requirements-and-supplementary-docs&quot;&gt;Mixing Requirements and Supplementary Docs&lt;/h2&gt;

&lt;p&gt;This is similar to a previous problem and may look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;User can download a PDF report that includes a full
list of transactions. Each transaction has ID,
date, description, account, and full amount. The report
also contains a summary and a link to the user account.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s obvious there are two things described in this
paragraph. First is that a user can download a PDF report. Second is
how this report should look. The first thing is a functional
requirement, and the second one must be described in a supplementary
document (or appendix).&lt;/p&gt;

&lt;p&gt;In general, functional requirements must be very short:
&amp;quot;user downloads,&amp;quot; &amp;quot;user saves,&amp;quot; &amp;quot;client requests and receives,&amp;quot; etc.
If your text gets any longer, there is something wrong.
Try to move part of it to a supplementary document.&lt;/p&gt;

&lt;h2 id=&quot;un-measurable-quality-requirements&quot;&gt;Un-measurable Quality Requirements&lt;/h2&gt;

&lt;p&gt;This is what I&amp;#39;m talking about:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Credit card numbers must be encrypted.
The app should launch in less than 2 seconds.
Each web page must open in less than 500 milliseconds.
User interface must be responsive.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I can find many more examples just by opening requirement specs in
many projects I&amp;#39;ve seen over the past few years. They all look the same.
And the problem is always the same: It is very difficult
to define a truly testable and measurable non-functional requirement.&lt;/p&gt;

&lt;p&gt;Yes, it&amp;#39;s difficult. Mostly because there are many factors. Take this
line, for example: &amp;quot;The app must launch in 2 seconds.&amp;quot; On what equipment?
With what amount of data in the user profile? What does &amp;quot;launch&amp;quot; mean; does it include
profile loading time? What if there are launching problems? Do they count?
There are a lot of questions like that.&lt;/p&gt;

&lt;p&gt;If we answer &lt;strong&gt;all&lt;/strong&gt; of them, the requirement text will fill an entire
page. Nobody wants that, but having un-measurable requirements
is a greater evil.&lt;/p&gt;

&lt;p&gt;Again, it&amp;#39;s not easy, but it&amp;#39;s necessary. Try to make sure all
quality requirements are complete and without ambiguity.&lt;/p&gt;

&lt;h2 id=&quot;implementation-instructions&quot;&gt;Implementation Instructions&lt;/h2&gt;

&lt;p&gt;This example illustrates a very common pitfall:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;User authenticates via Facebook login button
and we store username, avatar, and email in the
database.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is
&lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;micromanagement&lt;/a&gt;, and
it&amp;#39;s something a requirements analyst should never do to a programmer.
You shouldn&amp;#39;t tell me how to implement the functionality you desire.
You want to give a user the ability to login via Facebook?
Say so. Do you really care whether it&amp;#39;s going to happen through a button
click or somehow else? Do you really care what I store in the database?
What if I use files instead of a database? Is that important to you?&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t think so. Only in very rare cases will it matter. Most
of the time, it&amp;#39;s just micromanagement.&lt;/p&gt;

&lt;p&gt;The spec should only require what really matters for the business. Everything
else is up to us, the programmers. We decide what database to use, where the
button will be placed, and what information will be stored in the database.&lt;/p&gt;

&lt;aside class='quote'&gt;You shouldn't tell me how to implement the functionality you desire&lt;/aside&gt;

&lt;p&gt;If you really care about that because there are certain higher-level
limitations &amp;mdash; say so. But again, not as implementation instructions
to us programmers, but rather as non-functional requirements like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Login page must look like this (screenshot attached).
We must store user email locally for future needs.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The point is that I have nothing against requirements, but I&amp;#39;m
strongly against implementation instructions.&lt;/p&gt;

&lt;h2 id=&quot;lack-of-actor-perspective&quot;&gt;Lack of Actor Perspective&lt;/h2&gt;

&lt;p&gt;The text may look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PDF report is generated when required. It is
possible to download a report or save it
in the account.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem here is that there is no &amp;quot;actor&amp;quot; involved. This functionality
is more or less clear, but it&amp;#39;s not clear who is doing all this. Where
is the user? It is just a story of something happening somewhere. That&amp;#39;s not
really what programmers need in order to implement it.&lt;/p&gt;

&lt;aside class='quote'&gt;A good user story always has, guess what ... a user&lt;/aside&gt;

&lt;p&gt;The best way to explain functionality is through user stories. And a good
user story always has, guess what ... a user. It always starts with
&amp;quot;the user ...,&amp;quot; followed by a verb. The user downloads, the user saves,
the user clicks, prints, deletes, formats, etc.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not necessary for the user to be a human. It may be a system, a RESTful API
client, a database, anything. But always someone. &amp;quot;It is possible to download ...&amp;quot;
is not a user story. It&amp;#39;s possible for who?&lt;/p&gt;

&lt;h2 id=&quot;noise&quot;&gt;Noise&lt;/h2&gt;

&lt;p&gt;How about this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Our primary concern is performance and an attractive
user interface.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is noise. As the reader of this document, I&amp;#39;m neither an investor
nor a user. I&amp;#39;m a programmer. I don&amp;#39;t care what your &amp;quot;primary concern&amp;quot; is
in this project. My job is to implement the product so that it matches
the specs. If performance is your primary concern, create measurable
and testable requirements for me. I will make sure the product satisfies them.
If you can&amp;#39;t create a requirement, don&amp;#39;t spam me with this irrelevant
information.&lt;/p&gt;

&lt;aside class='quote'&gt;Good programmers should figure out what good performance means, right?&lt;/aside&gt;

&lt;p&gt;I don&amp;#39;t want to share your concerns, your beliefs, or your intentions. That&amp;#39;s your
business. And you&amp;#39;re paid to properly and unambiguously translate all that
into testable and measurable requirements. If you can&amp;#39;t do this, it&amp;#39;s
your problem and &lt;strong&gt;your fault&lt;/strong&gt;. Don&amp;#39;t try to make it mine.&lt;/p&gt;

&lt;p&gt;Very often ... wait. Very, very often. No. Almost always. Wrong again. Always!
That&amp;#39;s right, spec documents are always full of noise.
Some of them have a bit less; some have more. I believe this
is a symptom of &lt;strong&gt;lazy&lt;/strong&gt; and unprofessional document authors. In most cases,
just lazy.&lt;/p&gt;

&lt;p&gt;They don&amp;#39;t want to think and translate their concerns, ideas, thoughts,
intentions, and objectives into functional and non-functional requirements.
They just put them into the document and hope the programmers will
somehow find the right solution. Good programmers should figure out
what good performance means, right? Let&amp;#39;s just tell them that performance
is a concern for us, and they will figure something out.&lt;/p&gt;

&lt;p&gt;No! Don&amp;#39;t do that. Do your job right and let programmers do theirs.&lt;/p&gt;

&lt;p&gt;And we, programmers, should never accept such documents. We should just reject
them and ask requirements authors to re-work and remove noise. I would recommend not
even starting to work on a product if there is a lot of noise in its specs.&lt;/p&gt;

&lt;h2 id=&quot;will-work,-needs-to-work,-must-work&quot;&gt;Will Work, Needs to Work, Must Work&lt;/h2&gt;

&lt;p&gt;This is yet another very typical mistake:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The API will support JSON and XML. Both formats
must fully support all data items. XML needs to
be validated by XSD schema.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See how messy it sounds? There are three different points of view, and
none of them are suitable for a specification document. A spec
must describe a product as if it already exists. A spec must
sound like a manual, a tutorial, or a reference. This text must be
re-written like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The API supports JSON and XML. Both formats
fully support all data items. XML is validated
by XSD schema.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See the difference? All the &amp;quot;must,&amp;quot; &amp;quot;need,&amp;quot; and &amp;quot;will&amp;quot; words are just
adding doubt to the document. For a reader of this spec,
&amp;quot;&lt;em&gt;the API will support&lt;/em&gt;&amp;quot; sounds like &amp;quot;&lt;em&gt;some time in the future, maybe in
the next version, it will support&lt;/em&gt;.&amp;quot; This is not what the author
had in mind, right? There should be no doubt, no double meaning, no
maybe. The API supports. That&amp;#39;s it.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;I may have forgotten something important, but these issues are so obvious
and so annoying ... I&amp;#39;m going to use this post as a simple guide for our
system analysts. Feel free to share your experience with requirements
documents below in the comments.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/11/10/ten-mistakes-in-specs.html</guid>
      <dc:date>2015-11-10T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>A Chatbot Is Better Than a UI for a Microservice</title>
      <link>http://www.yegor256.com/2015/11/03/chatbot-better-than-ui-for-microservice.html</link>
      <description>&lt;p&gt;A chatbot (or &lt;a href=&quot;https://en.wikipedia.org/wiki/Chatterbot&quot;&gt;chatterbot&lt;/a&gt;, as Wikipedia says)
is a piece of software that talks to you in chat format.
&lt;a href=&quot;http://www.teamed.io&quot;&gt;We&lt;/a&gt; use chatbots in a few (micro)services, and they
fully &lt;strong&gt;replace&lt;/strong&gt; user interfaces. I don&amp;#39;t think there is any innovation
in this approach, but it has proved to be very effective over the last year or so.
That&amp;#39;s the impetus for this post.
Here is how the &lt;a href=&quot;http://www.rultor.com&quot;&gt;Rultor&lt;/a&gt; chatbot works for
us and what its benefits are.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let me give an example first. Look at the
&lt;a href=&quot;https://github.com/jcabi/jcabi-http/issues/115&quot;&gt;jcabi/jcabi-http#115&lt;/a&gt;
GitHub ticket:&lt;/p&gt;

&lt;figure class='unprintable'&gt;&lt;img src='/images/2015/10/chatbot-1.jpg' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;style&gt;
.bullet {
  display: inline-block;
  border-radius: 50%;
  color: #c22e12;
  font-size: 0.8em;
  background-color: #ffb800;
  padding: .2em;
  font-weight: bold;
  width: 1em;
  height: 1em;
  line-height: 1em;
  text-align: center;
  vertical-align: middle;
}
&lt;/style&gt;

&lt;p&gt;Let&amp;#39;s see what&amp;#39;s going on here, and then we&amp;#39;ll discuss
how it&amp;#39;s designed inside. Essentially, I&amp;#39;m &lt;strong&gt;talking&lt;/strong&gt; to a chatbot here.
The name of the chatbot is &lt;code&gt;@rultor&lt;/code&gt; (I wrote about it
&lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;last year&lt;/a&gt;).
At &lt;span class=&quot;bullet&quot;&gt;1&lt;/span&gt;, I&amp;#39;m asking the chatbot to release
a new version of the &lt;a href=&quot;https://github.com/jcabi/jcabi-http&quot;&gt;jcabi-http&lt;/a&gt; library.
At &lt;span class=&quot;bullet&quot;&gt;2&lt;/span&gt;, the chatbot responds, just confirming
that the task is clear and that it&amp;#39;s on it.
At &lt;span class=&quot;bullet&quot;&gt;3&lt;/span&gt;, the bot says the job is
completed and its completion took nine minutes. Our conversation is over.
That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;Now, what is so special about this?&lt;/p&gt;

&lt;p&gt;One thing: There is no user interface. Well, there is
no &lt;strong&gt;traditional&lt;/strong&gt; web-based HTML/CSS user interface. There is no
login, logout, profile, menu, or anything like this. Rultor is
a web service that has &lt;strong&gt;no web UI&lt;/strong&gt;. The only way to
communicate with it is by talking with its chatbot.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s so good about it? A few things.&lt;/p&gt;

&lt;h2 id=&quot;service-is-not-a-server&quot;&gt;Service Is Not a Server&lt;/h2&gt;

&lt;p&gt;This is how the traditional architecture of a web system would look:&lt;/p&gt;

&lt;p&gt;&lt;img src='/uml/eee0d1bcdb7b9318e937e99e04e39ff7.svg'
        alt='PlantUML diagram' class='plantuml'/&gt;&lt;/p&gt;

&lt;p&gt;A user gives instructions to a service and receives responses.
This communication happens through a &lt;strong&gt;user interface&lt;/strong&gt; (UI) &amp;mdash; a bunch
of HTTP entry points that receive requests from a browser and return
HTML+CSS responses. Or, if a user is on another service, requests may
contain some data, and responses will be in
&lt;a href=&quot;/2015/11/16/json-vs-xml.html&quot;&gt;XML or JSON&lt;/a&gt;. You get the idea;
a user is a client, and the service is a server.&lt;/p&gt;

&lt;p&gt;Like in a restaurant &amp;mdash; you say what you want, and a &lt;strong&gt;server&lt;/strong&gt; goes
to the kitchen, waits there, and in a few minutes, comes back with
spaghetti carbonara. You&amp;#39;re a client, and that cute lady is a server.&lt;/p&gt;

&lt;p&gt;In the case of a chatbot, that&amp;#39;s not the case anymore. Look at the
architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src='/uml/d103661ebf8494340e260442970bf4af.svg'
        alt='PlantUML diagram' class='plantuml'/&gt;&lt;/p&gt;

&lt;p&gt;First, a user posts a request to GitHub through a web user interface
provided by GitHub. It is a communication &lt;strong&gt;hub&lt;/strong&gt; for us. Then, the service
connects to GitHub through its RESTful API and checks whether there
are any new requests there. If something new is found, the service
does the job, prepares a response, and posts it there. The client receives
an email notification about a new response just posted to the ticket. The
client then checks GitHub and finds the response.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-3.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Here is how this would look in a restaurant: There would be a board with sticky notes.
First, you write the note, &amp;quot;I&amp;#39;d like spaghetti carbonara
with parmesan and fresh pepper on top&amp;quot; (Damn, I&amp;#39;m just too hungry now), and
pin it to the board at number 15. Then, you return to your table. A chef from
the kitchen checks that board and finds your sticky note. He makes that
spaghetti, tops it with parmesan, fresh pepper, some basil leaves, and
virgin olive oil ... yeah, he makes it right ... and puts it next to the board.
You hear an announcement that order number 15 is ready. You go there,
collect the food, return to your table, and enjoy.&lt;/p&gt;

&lt;p&gt;The point is that there is &lt;strong&gt;no cute lady&lt;/strong&gt; involved anymore. There is no
server. There are two parties communicating with the board &amp;mdash; you and
the kitchen. The kitchen is our microservice, but it&amp;#39;s not a server anymore.&lt;/p&gt;

&lt;p&gt;These two parties are perfectly &lt;strong&gt;decoupled&lt;/strong&gt; now. They never talk to each other. And
they both are &lt;strong&gt;clients&lt;/strong&gt; of the communication hub, which is GitHub or
a board in the restaurant.&lt;/p&gt;

&lt;p&gt;Again, the microservice is &lt;strong&gt;not a server&lt;/strong&gt; anymore.
Instead, it is a client of a communication hub. And the flip of its position
provides a lot of benefits to us, its developers.&lt;/p&gt;

&lt;h2 id=&quot;no-need-to-be-fast&quot;&gt;No Need to Be Fast&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-5.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;First of all, we don&amp;#39;t need to care much about the performance of our
UI. Well, we don&amp;#39;t care at all, since we don&amp;#39;t have a UI. Do we care
about the &lt;strong&gt;speed&lt;/strong&gt; of responses on GitHub? Not really. When a user posts
a message to GitHub, he or she doesn&amp;#39;t expect our chatbot to give an
immediate answer in less than 100 milliseconds. (That&amp;#39;s what any properly
designed web system must guarantee, I believe.)&lt;/p&gt;

&lt;p&gt;We put a note on the board, and we assume that the kitchen is probably
doing something else at the moment. We&amp;#39;ll wait for a few seconds or even minutes.
If, on the other hand, I give an order to the waitress and she waits five seconds
before replying back, I&amp;#39;ll be very surprised. If she keeps doing
that with every question, I&amp;#39;ll start to wonder to myself if everything is OK with her.&lt;/p&gt;

&lt;p&gt;I expect a user interface to be instant, while in a chat I have no problem
allowing some time for the bot to answer. This happens &lt;strong&gt;naturally&lt;/strong&gt;. We&amp;#39;re
used to delays in chats, when we&amp;#39;re talking with real people. They need some
time to process our information, to think, and to type something back.&lt;/p&gt;

&lt;p&gt;But a user interface doesn&amp;#39;t have that luxury. It has to be bullet-fast;
otherwise, I immediately get frustrated. The same thing happens to you, right?&lt;/p&gt;

&lt;h2 id=&quot;no-need-to-look-cute&quot;&gt;No Need to Look Cute&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-4.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Another advantage of this no-server design is that there is no need
to look pretty. There is no web interface, no HTML, no CSS,
&lt;strong&gt;no graphic design&lt;/strong&gt;. Perhaps not everybody really likes that.
Most non-professional users may still prefer to talk to a cute server
instead of sticking some paper notes to the board.
But if we&amp;#39;re dealing with professional
computer engineers, they&amp;#39;re not that demanding.&lt;/p&gt;

&lt;p&gt;Rultor doesn&amp;#39;t have any web UI, and its users simply don&amp;#39;t know how
it &amp;quot;looks.&amp;quot; It just &lt;strong&gt;talks&lt;/strong&gt; to you. The only thing you see is its
avatar in GitHub.&lt;/p&gt;

&lt;p&gt;This saves a lot of money and time on design efforts, which are usually
very expensive if you aim for high quality. If your
web service looks &lt;strong&gt;average&lt;/strong&gt;, most of its users will assume that it
also works average. Many good ideas have simply died because their
UI wasn&amp;#39;t as impressive as people were used to, thanks to all those
Pinterests and Instagrams.&lt;/p&gt;

&lt;p&gt;A good-looking server has a greater chance for &lt;strong&gt;bigger tips&lt;/strong&gt;, right?
If there is no server and we don&amp;#39;t see the chef, we judge him or her
only by the &lt;strong&gt;quality&lt;/strong&gt; of the food.&lt;/p&gt;

&lt;p&gt;Same here. By getting rid of a UI, we allow ourselves to focus on the
quality of the service we&amp;#39;re delivering. We don&amp;#39;t burn our time and money
on being &lt;strong&gt;nice&lt;/strong&gt;. We spend them on being &lt;strong&gt;useful&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;much-easier-to-scale&quot;&gt;Much Easier to Scale&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-6.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;If we have too many stickies on that board, we just hire more cooks,
or maybe even build another kitchen, and the problem is solved.
We can handle as many customers as necessary.
Well, as long as the board is powerful enough to handle multiple parallel users.&lt;/p&gt;

&lt;p&gt;GitHub is a pretty big platform, with hundreds of thousands of users
and projects. If we have too many requests coming in, we can just
add more processing nodes to Rultor. Remember, we&amp;#39;re not a server anymore;
we are a &lt;strong&gt;client of GitHub&lt;/strong&gt;. We decide when to connect to GitHub and when
to create responses to the requests submitted.&lt;/p&gt;

&lt;p&gt;It is much easier to create a scalable client than a scalable server, mostly
because there is nobody really waiting for us to respond quickly. The
load of requests we&amp;#39;re getting can be managed much easier, since the
decision of when to process them is made by us.&lt;/p&gt;

&lt;h2 id=&quot;mistakes-are-not-so-visible&quot;&gt;Mistakes Are Not So Visible&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-2.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;When you&amp;#39;re standing in front of a customer, most of your mistakes
are unforgivable, primarily because they are very visible. On the other
hand, when you&amp;#39;re cooking something in the kitchen, nobody can see
you and spot your faults. They will only spot them if the spaghetti
has too much salt. In other words, they will &lt;strong&gt;judge&lt;/strong&gt; you by your &lt;strong&gt;results&lt;/strong&gt;,
not by how you produce them.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s the same story with the microservice. When it works as a server, we expect
it to be seamless, respond immediately, and present everything in a
structured and organized way. If something goes wrong, it&amp;#39;s right here
on the web page. Your best case is a 404, while the worst one is that you
present some wrong information to the user. Even though the bug may not
be critical inside the microservice engine, the user doesn&amp;#39;t know that.
The user will judge you by your appearance and won&amp;#39;t forget even small
mistakes.&lt;/p&gt;

&lt;p&gt;However, when you both are clients of a message board, you don&amp;#39;t see
each other. The user communicates with GitHub, and the microservice
interacts with GitHub. Mistakes are less visible. Trust me, we have
had &lt;strong&gt;many of them&lt;/strong&gt; over the 18 months that Rultor has been in public use.
We&amp;#39;ve had downtimes, we&amp;#39;ve had serious logical mistakes, and we&amp;#39;ve had data corruption.
But very rarely have these problems become visible online. We merely saw them
in our server logs. Users didn&amp;#39;t see them. Well, mostly :)&lt;/p&gt;

&lt;h2 id=&quot;everything-is-traceable&quot;&gt;Everything Is Traceable&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='/images/2015/11/bot-1.jpg' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Since there is a communication board between us, it&amp;#39;s very easy
to see the entire history of our discussion, which is very intuitive.
It&amp;#39;s like a Slack chat history. You see what we started from,
who said what, and which conclusions were made.&lt;/p&gt;

&lt;p&gt;Basically, you can&amp;#39;t have that visibility in a web UI. Well, you can
probably create a special page with the &amp;quot;history of operations,&amp;quot; but
who would check it? And how visible and simple would that information be?
And, what&amp;#39;s most important, how would that information match up
with the UI?&lt;/p&gt;

&lt;p&gt;In the log, you&amp;#39;ll state that &amp;quot;the build was started,&amp;quot; but
what&amp;#39;s the build and how was it started? How can I start it again?
Using which buttons and web controls? It&amp;#39;s not clear.&lt;/p&gt;

&lt;p&gt;Thus, the traceability of a &lt;strong&gt;chronological&lt;/strong&gt; chat is unbeatable.&lt;/p&gt;

&lt;h2 id=&quot;easy-to-integrate-with-other-services&quot;&gt;Easy to Integrate With Other Services&lt;/h2&gt;

&lt;p&gt;Yes, think about the future of this approach. If there is a centralized
message board where users talk to a chatbot, why can&amp;#39;t other chatbots
talk to each other too?&lt;/p&gt;

&lt;p&gt;Forget about RESTful APIs. Just a message board where chatbots post
their requests and collect responses. They are perfectly decoupled, replaceable,
and very scalable. Also, their communication protocol is visible and very
traceable. And they boast many other benefits, as was just explained above. It&amp;#39;s much
more convenient for us, both users and programmers, to monitor them and
create them.&lt;/p&gt;

&lt;p&gt;Well, maybe it&amp;#39;s too extreme to get rid of RESTful APIs entirely, but
to some extent, this approach is feasible, I believe.&lt;/p&gt;

&lt;p&gt;I didn&amp;#39;t go too far with this idea, but something was done. We have
a messaging platform that allows multiple chatbots to communicate
with users. It&amp;#39;s called &lt;a href=&quot;http://www.netbout.com&quot;&gt;Netbout&lt;/a&gt;. It&amp;#39;s a very
primitive web system with isolated discussions. Simply put, anyone
can create a new discussion, invite a few friends, and post messages there.
Both users and chatbots can do that.&lt;/p&gt;

&lt;p&gt;So, when a new candidate wants to join &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;,
we ask that person to fill out an &lt;a href=&quot;http://at.teamed.io/join.html&quot;&gt;online form&lt;/a&gt;. When
the candidate clicks the &amp;quot;Submit&amp;quot; button, a new discussion starts, and the first
chatbot decides who should interview that person. The decision is made
according to the skills listed in the form. The chatbot invites one of our
&lt;a href=&quot;http://www.teamed.io/#check-out-ourbest-developers&quot;&gt;best programmers&lt;/a&gt;
to conduct the interview. When the interview is done, another chatbot explains to
the candidate what the next steps are, registers him or her in our
database, and starts to show the progress of work.&lt;/p&gt;

&lt;p&gt;From a user perspective, it looks like he or she is talking to a few
people who understand just a few simple commands. It is very intuitive
and was easy to design.&lt;/p&gt;

&lt;p&gt;I think chatbots are a good approach for interacting with microservices.
Especially when users are more or less professional.&lt;/p&gt;

&lt;p&gt;PS. Illustrations by &lt;a href=&quot;https://www.behance.net/wheeat&quot;&gt;Kristina Wheat&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/11/03/chatbot-better-than-ui-for-microservice.html</guid>
      <dc:date>2015-11-03T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>