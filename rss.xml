<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2016-03-18T00:19:26+00:00</updated><id>http://www.yegor256.com/</id><title>Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><entry><title>Wring.io, a Dispatcher of GitHub Notifications</title><link href="http://www.yegor256.com/2016/03/15/wring-dispatcher-github-notifications.html" rel="alternate" type="text/html" title="Wring.io, a Dispatcher of GitHub Notifications" /><published>2016-03-15T00:00:00+00:00</published><updated>2016-03-15T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/03/15/wring-dispatcher-github-notifications</id><content type="html" xml:base="http://www.yegor256.com/2016/03/15/wring-dispatcher-github-notifications.html">&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.wring.io&#39;&gt;&lt;img src=&#39;http://www.wring.io/images/logo.svg&#39; style=&#39;width:92px;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m taking participation in over 50 repositories in GitHub. &lt;a href=&quot;http://www.teamed.io&quot;&gt;We&lt;/a&gt;
manage all of our projects there. GitHub is sending me hundreds of emails
every day. I&amp;#39;m serious. Hundreds! I tried to filter them somehow in Gmail,
but it&amp;#39;s not really possible. Gmail filters are not powerful enough to
understand the difference between different types of notifications, and there
are many other problems.
I decided to create my own simple filtering machine. It&amp;#39;s called
&lt;a href=&quot;http://www.wring.io&quot;&gt;wring.io&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The idea of wring.io is simple. First, I&amp;#39;m registering my sources
of notifications (called &amp;quot;pipes&amp;quot;), such as GitHub. Then I&amp;#39;m giving
&lt;a href=&quot;http://www.wring.io&quot;&gt;wring.io&lt;/a&gt; permission
to connect to GitHub on my behalf and fetch whatever is new there.&lt;/p&gt;

&lt;p&gt;Then I&amp;#39;m configuring what should be filtered out, using text matching and/or
regular expressions. Right after a new pipe is created,
&lt;a href=&quot;http://www.wring.io&quot;&gt;wring.io&lt;/a&gt; starts pulling all my sources and updating my inbox.
All I need to do is delete new messages from my inbox when I&amp;#39;m done with them.
That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s see an example. First I&amp;#39;m creating a new pipe:&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F03%2Fwring-1.png&#39; style=&#39;width:600px;&#39; alt=&#39;figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#39;s a JSON object. Property &lt;code&gt;class&lt;/code&gt; must be set to
&lt;code&gt;io.wring.agents.github.AgGithub&lt;/code&gt;. This is the name of the Java
class that will be pulling my notifications from GitHub. The project is
open source, so you can see how the class actually works:
&lt;a href=&quot;https://github.com/yegor256/wring/blob/0.8.5/src/main/java/io/wring/agents/github/AgGithub.java&quot;&gt;&lt;code&gt;AgGithub&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Property &lt;code&gt;token&lt;/code&gt; must be set to the &lt;a href=&quot;https://github.com/settings/tokens/new&quot;&gt;personal access token&lt;/a&gt;
that I should create first in GitHub. The server will connect to GitHub
on my behalf and under my credentials:&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F03%2Fwring-2.png&#39; style=&#39;width:600px;&#39; alt=&#39;figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;Property &lt;code&gt;ignore&lt;/code&gt; must have an array of strings. Each item is a matching
pattern. I can use a text or a regular expression. By default, it&amp;#39;s
a text. If exactly the same text is found in a notification, it
will be ignored. To use a regular expression, I need to wrap it in slashes (for example &lt;code&gt;/[a-z]+/&lt;/code&gt;).
You may skip that property and just specify this JSON:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;io.wring.agents.github.AgGithub&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;your-personal-access-token&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then I go to my inbox and read what&amp;#39;s there.&lt;/p&gt;

&lt;p&gt;This solution literally saves me hours of time now. Feel free to use
it, it&amp;#39;s absolutely free. Moreover, it&amp;#39;s open source, so feel free to
contribute.&lt;/p&gt;</content><category term="github" /><summary>I&amp;#39;m taking participation in over 50 repositories in GitHub. We
manage all of our projects there. GitHub is sending me hundreds of emails
every day. I&amp;#39;m serious. Hundreds! I tried to filter them somehow in Gmail,
but it&amp;#39;s not really possible. Gmail filters are not powerful enough to
understand the difference between different types of notifications, and there
are many other problems.
I decided to create my own simple filtering machine. It&amp;#39;s called
wring.io.</summary></entry><entry><title>Pimp Up Your Resume</title><link href="http://www.yegor256.com/2016/03/08/pimp-up-your-resume.html" rel="alternate" type="text/html" title="Pimp Up Your Resume" /><published>2016-03-08T00:00:00+00:00</published><updated>2016-03-08T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/03/08/pimp-up-your-resume</id><content type="html" xml:base="http://www.yegor256.com/2016/03/08/pimp-up-your-resume.html">&lt;p&gt;There are tons of articles about resume writing. Literally,
&lt;a href=&quot;https://www.google.com/search?q=how+to+write+resume&quot;&gt;tons of them&lt;/a&gt;.
And here&amp;#39;s yet another one? Well, maybe ... but I don&amp;#39;t think so. I&amp;#39;ll try to
give you a few &lt;strong&gt;practical&lt;/strong&gt; hints for how to make your resume look
&amp;quot;sexier&amp;quot;, and how to position yourself beyond the &amp;quot;good programmer&amp;quot; category and into
the superstar zone. It may take a few years to truly pimp up your CV, but
when it&amp;#39;s done, you will charge $100-plus per hour and face no hesitation
from your clients in paying.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F03%2Fdelicatessen.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Delicatessen (1991) by Jean-Pierre Jeunet&#39;/&gt;&lt;figcaption&gt;Delicatessen (1991) by Jean-Pierre Jeunet&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;one-page-no-exceptions&quot;&gt;One Page, No Exceptions&lt;/h2&gt;

&lt;p&gt;I think it&amp;#39;s obvious, but only one out of 10 resumes I&amp;#39;ve been getting
each day fits onto one page. All the others take three or more pages, and this looks
very &lt;strong&gt;unprofessional&lt;/strong&gt;. If you can&amp;#39;t explain yourself in one page, there will be doubts
about your skills in scope management, which are very important for a software engineer.
It shows you simply can&amp;#39;t filter out what&amp;#39;s non-important and focus
on what really matters. Besides, it&amp;#39;s just boring to read three pages.&lt;/p&gt;

&lt;p&gt;Thus, strictly limit yourself to one page, &lt;strong&gt;no exceptions&lt;/strong&gt;. Your resume is an &amp;quot;executive summary&amp;quot;
of the product you&amp;#39;re trying to sell. It&amp;#39;s a marketing brochure. A sales
flyer. A sticker on my refrigerator, if you wish. It has to be short
and straightforward. Employers will either buy it or throw it away. They don&amp;#39;t want to read it;
they want to buy you. Or throw your brochure away.
Four-page brochures have far fewer chances than one-pagers.&lt;/p&gt;

&lt;h2 id=&quot;don-39-t-lie&quot;&gt;Don&amp;#39;t Lie&lt;/h2&gt;

&lt;p&gt;No matter what you do with your resume, never lie about a single word. You
can tell half of the truth, you can hide some information, and you can rephrase
the truth, but never lie. You don&amp;#39;t know who is reading your CV and which
desk it will end up on. Be ready to answer for every word you have on it.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re saying that you&amp;#39;re an &amp;quot;expert in JavaScript&amp;quot;,
be ready to explain what the key new features of
ECMAScript version 6 are. If you can&amp;#39;t, don&amp;#39;t use the word &amp;quot;expert&amp;quot;. The point
is that you have to be ready to prove every word.&lt;/p&gt;

&lt;h2 id=&quot;sexy-photo-on-the-top&quot;&gt;Sexy Photo on the Top&lt;/h2&gt;

&lt;p&gt;You want them to work with you, right? They want to see you. So a photo is a mandatory
component of a CV. And try to make it look artistic. Ask your
graphic designer friend to style it. Maybe even pay for this work.
Just pay attention to the photo; it&amp;#39;s very important.&lt;/p&gt;

&lt;p&gt;Do I have to say that you must smile on that photo? Well, yes, you must.
And make it casual, with a T-shirt and funny background. You must look
relaxed and successful. You don&amp;#39;t want to get hired; they want to hire you &amp;mdash;
this is the message your photo should send, just like in online &lt;strong&gt;dating&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;skip-quot-objective-quot-and-quot-title-quot&quot;&gt;Skip &amp;quot;Objective&amp;quot; and &amp;quot;Title&amp;quot;&lt;/h2&gt;

&lt;p&gt;&amp;quot;Senior Software Developer&amp;quot;, &amp;quot;Seasoned Java Programmer&amp;quot;,
&amp;quot;Talented IT Professional&amp;quot;, etc. It&amp;#39;s boring and doesn&amp;#39;t sell you at all.
They know what you are, because they are reading your resume.&lt;/p&gt;

&lt;p&gt;Besides that, you&amp;#39;re limiting yourself with that title. Maybe they are looking
for a VP of engineering while your resume says &amp;quot;Software Architect&amp;quot;. That&amp;#39;s
immediately a mismatch for them. It&amp;#39;s a strike against you. Your &lt;strong&gt;name&lt;/strong&gt; is the title
of your resume. That&amp;#39;s it.&lt;/p&gt;

&lt;h2 id=&quot;a-dozen-skills&quot;&gt;A Dozen Skills&lt;/h2&gt;

&lt;p&gt;This section of your resume actually tells them about your &amp;quot;tech focus&amp;quot;.
It must have a very short list of skills, definitely &lt;strong&gt;under 12&lt;/strong&gt;. You simply
can&amp;#39;t be an expert in MySQL, PostgreSQL, Oracle, and MS SQL at the same time.
If there are too many skills, it&amp;#39;s a sign of a &amp;quot;jack of all trades&amp;quot; who is
almost always a &amp;quot;master of none&amp;quot;. Don&amp;#39;t do that.&lt;/p&gt;

&lt;p&gt;Find the most important skills in your profile and put them there.
Just a few. And make sure the skills are all on the same level of abstraction.
Java and AngularJS must not be present together. Java is a few levels higher
than AngularJS. Thus, it&amp;#39;s either &amp;quot;Java, SQL, and HTTP&amp;quot; or &amp;quot;AngularJS, Spring Framework,
and Web Sockets&amp;quot;. I would recommend you stay at the lowest level you can until
you become a serious market figure. For example, &amp;quot;Java&amp;quot; as a skill would look good
in &lt;a href=&quot;http://stackoverflow.com/users/22656/jon-skeet&quot;&gt;John Skeet&lt;/a&gt;&amp;#39;s resume,
because he definitely knows the entire Java world, and the
market has recognized that. But if you&amp;#39;re a programmer with just three years of experience,
how can you &amp;quot;know Java&amp;quot;? You barely know a few hundred classes from it.
That&amp;#39;s why it&amp;#39;s better to state specifically which parts of Java you definitely know.
Like I said, be as low-level and specific in your skills as possible.&lt;/p&gt;

&lt;h2 id=&quot;stackoverflow-profile&quot;&gt;StackOverflow Profile&lt;/h2&gt;

&lt;p&gt;No matter what anyone &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;says&lt;/a&gt;,
&lt;a href=&quot;http://www.stackoverflow.com&quot;&gt;StackOverflow&lt;/a&gt;
is the de-facto standard platform for asking and answering technical questions.
Your presence there and your high rating send a clear message to your
potential employer that you&amp;#39;re a superstar (or a rising one). No so many
people have 100K or more reputation points there. You must be one of them.&lt;/p&gt;

&lt;p&gt;So even if you don&amp;#39;t have a StackOverflow profile now, create one.
Spend one hour on it every day for a few months, answering
&lt;a href=&quot;http://stackoverflow.com/?tab=interesting&quot;&gt;new questions&lt;/a&gt;.
You will earn 1,000 or more reputation points. Well, provided you have something to say.
That&amp;#39;s enough for a start. Post a link to your profile right in your resume.&lt;/p&gt;

&lt;p&gt;Even if you don&amp;#39;t have much to say, be there. Read answers made by others,
comment on them, try to help them, and correct them. Become an active
part of the community.&lt;/p&gt;

&lt;h2 id=&quot;github-profile&quot;&gt;GitHub Profile&lt;/h2&gt;

&lt;p&gt;GitHub is the de-facto standard platform for open-source code. There are others
like BitBucket, but &amp;mdash; I hope &amp;mdash; they will die sooner or later. As a modern
software developer, you must be on GitHub. You
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;have to contribute&lt;/a&gt;
to some open source. You have to be visible in the open-source world if you
want to sell yourself high.&lt;/p&gt;

&lt;p&gt;Your potential employer wants to see what the &lt;strong&gt;market&lt;/strong&gt; is thinking about
your code and about you. They are afraid of making a mistake by hiring you.
Your presence in the open-source world is a &lt;strong&gt;guarantee&lt;/strong&gt; for them. Someone has already
seen your code, and someone has already given some kudos to your projects. Someone virtually
vouches for you. As a result, they will feel more comfortable in hiring you.&lt;/p&gt;

&lt;p&gt;To be in the &amp;quot;elite&amp;quot;, you don&amp;#39;t have to spend all your time on open-source
projects. Just contribute to the ones you&amp;#39;re using already. You&amp;#39;re using
Sinatra at work? Check its source code. You will find a lot of places that
need improvement. Offer them your help and simply submit small pull requests
here and there. Besides that, create your own products and market them. You will
be surprised by how many users and followers you will attract in just a few years
of such activity.&lt;/p&gt;

&lt;h2 id=&quot;certificates&quot;&gt;Certificates&lt;/h2&gt;

&lt;p&gt;Some may say they are not important. Maybe so. But your resume must have
them. Some of them are not so difficult to get. With just a few weeks of study
and a few hundred dollars, you are not just a Java programmer but
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Oracle_Certification_Program&quot;&gt;certified&lt;/a&gt; one.
And there are not so many of those out there. There are millions of Java coders
in the world, but only a few percent of them are certified. Regardless of whether
you think it&amp;#39;s important or not, get those certifications.&lt;/p&gt;

&lt;p&gt;As many as you like. But stay away from
&lt;a href=&quot;https://www.brainbench.com/&quot;&gt;BrainBench&lt;/a&gt; and similar sites. Well,
you can get certified there, but don&amp;#39;t put them into your resume. That will
only demonstrate that you are proud of a very questionable achievement. It&amp;#39;s not
a good sign.&lt;/p&gt;

&lt;h2 id=&quot;sound-names-and-numbers&quot;&gt;Sound Names and Numbers&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s a dangerous trick, so be careful. Here is how it works. You have to go through
your entire professional history and find well-known names or big numbers.
For example, 10 years ago I was helping a startup create software that
had IBM as a subscriber. They managed to get some tracking, and in
two months, IBM decided not to use them anymore. It&amp;#39;s a true (and sad) story, but I can
put something like this into my resume: &amp;quot;wrote software for IBM&amp;quot;. Am I lying? Not really.
If they ask me what exactly I did for IBM, I will explain. In most cases, they
won&amp;#39;t ask. They will just buy this big name and put my resume on top of
others.&lt;/p&gt;

&lt;p&gt;You can do the same with numbers. Here is another true story. A few years ago,
I was helping a company configure a continuous integration pipeline. It was not a big
deal, but the company was serving more than 5 million hits per day on its website.
That&amp;#39;s a big number. I had nothing to do with this substantial web traffic, but I was
in that company for a few months. So I may say in my resume:
&amp;quot;configured the delivery pipeline for a 5M-hits-per-day web store&amp;quot;. If they
ask me for details, I will be able to give them. I&amp;#39;m not lying.&lt;/p&gt;

&lt;p&gt;Use this technique carefully, and never lie. But do it. Don&amp;#39;t be scared.
Your resume needs big names and numbers.&lt;/p&gt;

&lt;h2 id=&quot;blog&quot;&gt;Blog&lt;/h2&gt;

&lt;p&gt;Create your own blog. Start writing. About what? About your everyday
achievements. About the code you write and read.
About what you observe in the office. About your thoughts
and your plans. About the books you read. You absolutely need to have
a blog if you want to position yourself as an expensive software engineer.&lt;/p&gt;

&lt;p&gt;It doesn&amp;#39;t need to be a very popular blog; don&amp;#39;t focus on numbers. But
it has to be properly created, designed, and hosted. Don&amp;#39;t use
&lt;a href=&quot;http://www.wordpress.com&quot;&gt;WordPress&lt;/a&gt;, &lt;a href=&quot;http://www.blogger.com&quot;&gt;Blogger&lt;/a&gt;,
or &lt;a href=&quot;http://www.tumblr.com&quot;&gt;Tumblr&lt;/a&gt;. Instead,
I would recommend you think about static site generators like
&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and host
it all on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. That&amp;#39;s what I&amp;#39;m doing.&lt;/p&gt;

&lt;p&gt;Besides being a valuable addition to your resume,
systematic and regular writing will help you structure
your thoughts, plans, and decisions. Well, that&amp;#39;s what I&amp;#39;m getting
from my blog.&lt;/p&gt;

&lt;h2 id=&quot;education&quot;&gt;Education&lt;/h2&gt;

&lt;p&gt;I would limit yourself to a few letters in this area. Just &amp;quot;MSc&amp;quot; or &amp;quot;BSc&amp;quot; is
enough. There&amp;#39;s no need to say when you graduated and from which school. You can
give those details later. Well, there are just two exceptions to this rule.&lt;/p&gt;

&lt;p&gt;First, if you&amp;#39;re a PhD, put that on top of your CV. It&amp;#39;s important, and
it&amp;#39;s valuable, simply because there are not so many of them among programmers.
Second is if your school is Stanford, MIT, or something similar. If that&amp;#39;s the case,
also put it on top of your CV.&lt;/p&gt;

&lt;p&gt;In all other situations, just write &amp;quot;BSc&amp;quot; and that&amp;#39;s it.&lt;/p&gt;

&lt;h2 id=&quot;conferences&quot;&gt;Conferences&lt;/h2&gt;

&lt;p&gt;Every year, you must give a few presentations at &lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt;.
I&amp;#39;m kidding.
About the JavaOne part, anyway. But the &amp;quot;every year&amp;quot; part is very true. You must
regularly make some speeches somewhere, preferably at JavaOne. But until
you get there, speak where you can. Well, where they accept you. Create
a profile at &lt;a href=&quot;http://www.lanyrd.com&quot;&gt;lanyrd&lt;/a&gt; (or something similar) and
regularly check which conferences are looking for speakers. Submit there
and you will be surprised to see that a few of them will actually accept
some of your ideas.&lt;/p&gt;

&lt;p&gt;The easiest subjects to start with are stories about your practical
experience with some modern technologies and tools, something like
&amp;quot;How Docker Helps Us Optimize Delivery&amp;quot; or
&amp;quot;Five Apache Spark Installation Issues&amp;quot;. Just describe what you&amp;#39;ve done
on a recent project. It doesn&amp;#39;t really matter what you talk about.
What matters is that you&amp;#39;re visible. If the market accepts you,
the employer will trust you more. That&amp;#39;s exactly what you need in order
to request a higher rate.&lt;/p&gt;

&lt;h2 id=&quot;career-history&quot;&gt;Career History&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ll be speaking for myself here. As an employer, I don&amp;#39;t really care
about your history at all. Moreover, if you have never worked anywhere
full-time, I would probably be more interested in working with you. But that&amp;#39;s just
me, because I truly believe that modern offices and full-time jobs
turn programmers into
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;slaves&lt;/a&gt; (and not only programmers).&lt;/p&gt;

&lt;p&gt;Other employers may think differently. Well, they most likely think differently.
That&amp;#39;s why you have to demonstrate with which offices you&amp;#39;ve spent 10 recent
years of your life. I would recommend you keep this list short. Even if you&amp;#39;ve
changed eight companies over the last two years, don&amp;#39;t say that. Just three
places is enough. That will show them you&amp;#39;re a good slave &amp;mdash;
very loyal to previous masters. That&amp;#39;s what they want to see, because they
are planning to buy you and become your next master. Right? Sounds harsh?
Isn&amp;#39;t &lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;it true&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;acm-ieee-jug-and-other-memberships&quot;&gt;ACM, IEEE, JUG, and Other Memberships&lt;/h2&gt;

&lt;p&gt;These memberships mean literally nothing but will demonstrate that you are
part of those communities. Just like with most other things mentioned above,
employers will trust you more if the market already trusts you. These
memberships don&amp;#39;t really mean that anyone has recognized you, since you get them
just by paying annual fees. But still, you&amp;#39;re paying those fees, and most
other applicants aren&amp;#39;t. You&amp;#39;re definitely more reliable than many others.&lt;/p&gt;

&lt;h2 id=&quot;mention-hobbies&quot;&gt;Mention Hobbies&lt;/h2&gt;

&lt;p&gt;I think information about hobbies is important. Some say it&amp;#39;s not, but I believe
that a personal &amp;quot;click&amp;quot; between you and your potential employer plays
an important role. There is a human on that side. He or she is reading
your CV, and he or she wants to like you &amp;mdash; mostly in order to be comfortable
making a hiring decision. Help him or her like you faster. Mention that
you enjoy skiing, monkey-feeding in the zoo, and Jimmy Kimmel. Be creative,
not boring. Just like you do in online dating.&lt;/p&gt;

&lt;h2 id=&quot;layout-graphics&quot;&gt;Layout/Graphics&lt;/h2&gt;

&lt;p&gt;How should your one page look? Stand out! It must express your personality.
Don&amp;#39;t use the &amp;quot;resume templates&amp;quot; downloadable for free. Create your own
layout and design. If you&amp;#39;re not a designer, ask your Photoshop friend
to do it for you. Actually, there is not much to do; just select the right font
and add a few colors here and there.&lt;/p&gt;

&lt;p&gt;This CV is your product. You made it. It&amp;#39;s your baby. If it&amp;#39;s just a Word
document in a standard template, they will feel you didn&amp;#39;t pay
attention to it. You didn&amp;#39;t even care to create that small but very
important product nicely. How will you create their software? With the
same attitude. Don&amp;#39;t ruin the whole show with a careless design. That&amp;#39;s the
key word here &amp;mdash; &amp;quot;careless&amp;quot;. It doesn&amp;#39;t need to be complex. It may be
very simple. But it must be &lt;strong&gt;yours&lt;/strong&gt;, made with care and love.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;Want free advice on your resume? Send it to
&lt;a href=&quot;cv@yegor256.com&quot;&gt;mailto:cv@yegor256.com&lt;/a&gt;, and I&amp;#39;ll let you know
what I think. I will reply to all emails, but be ready to hear
mostly what&amp;#39;s wrong. What&amp;#39;s right you will know without me, when
they pay you $200 per hour.&lt;/p&gt;</content><category term="career" /><summary>There are tons of articles about resume writing. Literally,
tons of them.
And here&amp;#39;s yet another one? Well, maybe ... but I don&amp;#39;t think so. I&amp;#39;ll try to
give you a few practical hints for how to make your resume look
&amp;quot;sexier&amp;quot;, and how to position yourself beyond the &amp;quot;good programmer&amp;quot; category and into
the superstar zone. It may take a few years to truly pimp up your CV, but
when it&amp;#39;s done, you will charge $100-plus per hour and face no hesitation
from your clients in paying.</summary></entry><entry><title>How We Interview Programmers</title><link href="http://www.yegor256.com/2016/03/01/how-we-interview-programmers.html" rel="alternate" type="text/html" title="How We Interview Programmers" /><published>2016-03-01T00:00:00+00:00</published><updated>2016-03-01T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/03/01/how-we-interview-programmers</id><content type="html" xml:base="http://www.yegor256.com/2016/03/01/how-we-interview-programmers.html">&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.teamed.io&#39;&gt;&lt;img src=&#39;http://img.teamed.io/logo.svg&#39; style=&#39;width:120px;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;At &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, we&amp;#39;ve been getting
about 10 &lt;a href=&quot;/2016/03/08/pimp-up-your-resume.html&quot;&gt;resumes&lt;/a&gt; every day from programmers who want to work
with us. We don&amp;#39;t do video or online coding interviews. We don&amp;#39;t
ask you to solve any puzzles or demonstrate your
algorithm-writing abilities. Moreover, when we decide not to
hire you, we honestly and openly explain why. And we almost
never offend anyone. So how exactly does it work?
There are a few basic principles I would like to share.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F03%2Fwall-street.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Wall Street (1987) by Oliver Stone&#39;/&gt;&lt;figcaption&gt;Wall Street (1987) by Oliver Stone&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-market-interviews-you-not-us&quot;&gt;The Market Interviews You, Not Us&lt;/h2&gt;

&lt;p&gt;We believe that the market is a much better interviewer than
any one of us. &amp;quot;&lt;em&gt;Instead of demonstrating to us how great your
code is, show it to the market and see what it says&lt;/em&gt;&amp;quot; &amp;mdash; that&amp;#39;s what
we&amp;#39;re saying to you, our candidate.&lt;/p&gt;

&lt;p&gt;How does the market validate that code?
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;Open source&lt;/a&gt; &amp;mdash;
that&amp;#39;s what is the most convincing to us.
We ask you to show us which open-source products you have and how
popular they are.&lt;/p&gt;

&lt;p&gt;Then show us your blog, your conference talks, your hackathon
gold medals, your certifications, and any other awards the market
has given you. Don&amp;#39;t convince us that you&amp;#39;re cool; convince them. If they
will be convinced, we will be glad to hire you. Isn&amp;#39;t that objective?
I believe it is.&lt;/p&gt;

&lt;h2 id=&quot;quiz&quot;&gt;Quiz&lt;/h2&gt;

&lt;p&gt;The way we understand quality of code is
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;very different&lt;/a&gt;
than what you might
expect. Simply put, our quality bar is much higher. Besides that, the
way we understand object-oriented programming is also
&lt;a href=&quot;/2016/02/03/design-patterns-and-anti-patterns.html&quot;&gt;very different&lt;/a&gt;.
So occasionally we&amp;#39;ll find that we simply don&amp;#39;t trust the market as our only
source of information, especially when the market has almost nothing to say about you.
Some programmers come to us with zero
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;open-source&lt;/a&gt; experience, no certificates,
and no public work. Still, they claim they are
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;the best&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To put them to the test, we provide a piece of code and ask them to refactor it &amp;mdash; just make
it better. I think this approach perfectly demonstrates who is in front of me:
&lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;a hacker or a designer&lt;/a&gt;.
In this way, we filter out a lot of people who pay attention to
minor implementation tricks but miss the bigger design issues.&lt;/p&gt;

&lt;p&gt;The quiz is &lt;a href=&quot;https://github.com/teamed/quiz&quot;&gt;here&lt;/a&gt;.
You can see how many pull requests there are already &amp;mdash;
all of them are from our candidates.&lt;/p&gt;

&lt;h2 id=&quot;no-phone-or-video-calls&quot;&gt;No Phone or Video Calls&lt;/h2&gt;

&lt;p&gt;Most companies talk a lot about diversity and equality, yet most of them
will also require a Skype video call or at least a phone call before
getting you on board. How does this really jive with the equality emphasis? A face-to-face
interview is a very stressful process even for experienced and extroverted
people. We can imagine how difficult it is for some programmers who are
anti-social introverts just like me.&lt;/p&gt;

&lt;p&gt;Video interviewing is a terrible practice unless you&amp;#39;re hiring a
stand-up comedian or a flight attendant. Programmers are not supposed
to achieve their goals by interacting with people face to face. Well, at
least not in our &lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;remote work&lt;/a&gt;
mode. We expect you to write code
and communicate via GitHub. Why on earth would we need to call you? We
just don&amp;#39;t do it, and I think that&amp;#39;s how everybody else should operate. That&amp;#39;s
what true equality and diversity is &amp;mdash; no phone or video calls.&lt;/p&gt;

&lt;h2 id=&quot;we-explain-when-we-reject&quot;&gt;We Explain When We Reject&lt;/h2&gt;

&lt;p&gt;You apply to us and spend time presenting yourself, talking to us,
and demonstrating to us your skills and profile. We feel that we have
to give something back, especially if we don&amp;#39;t hire you. That&amp;#39;s why
we always explain what&amp;#39;s wrong with your application. We are not
hiding anything, and sometimes our responses may sound rather
disturbing. You may hear something like this:
&amp;quot;Your quiz solution is not what I would expect from an experienced developer&amp;quot;
(I&amp;#39;m quoting one of our interviewers).&lt;/p&gt;

&lt;p&gt;Unlike many other companies, we will never say something like,
&amp;quot;Thanks for applying, but we decided not to proceed further. Wish you
luck!&amp;quot; That&amp;#39;s shallow and ignorant. But that&amp;#39;s what most big companies
do, including Google, Facebook, and other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_be_evil&quot;&gt;&amp;quot;no evils&amp;quot;&lt;/a&gt;. Try to
apply there, and you will see for yourself.&lt;/p&gt;

&lt;p&gt;Instead, we believe that an honest and straightforward negative answer is exactly what
our candidates are looking for in the case of a rejection. We understand
that it&amp;#39;s not the end of the world for you &amp;mdash; you&amp;#39;re going to continue
learning and improving. Our feedback will help you. So why should we
hide it behind that polite &amp;quot;good luck&amp;quot; answer? We won&amp;#39;t. You will
know exactly why you are not good enough for us.&lt;/p&gt;

&lt;p&gt;Moreover, we are always trying to suggest a direction for improvement. We will
recommend what to learn, what to do, and how to grow before coming back to us.
I haven&amp;#39;t seen a single company do that in my personal job searches from the
past.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;Try to apply; the form is &lt;a href=&quot;http://at.teamed.io/join.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="management" /><summary>At Teamed.io, we&amp;#39;ve been getting
about 10 resumes every day from programmers who want to work
with us. We don&amp;#39;t do video or online coding interviews. We don&amp;#39;t
ask you to solve any puzzles or demonstrate your
algorithm-writing abilities. Moreover, when we decide not to
hire you, we honestly and openly explain why. And we almost
never offend anyone. So how exactly does it work?
There are a few basic principles I would like to share.</summary></entry><entry><title>Holacracy or Autocracy? Both!</title><link href="http://www.yegor256.com/2016/02/18/holacracy-autocracy.html" rel="alternate" type="text/html" title="Holacracy or Autocracy? Both!" /><published>2016-02-18T00:00:00+00:00</published><updated>2016-02-18T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/02/18/holacracy-autocracy</id><content type="html" xml:base="http://www.yegor256.com/2016/02/18/holacracy-autocracy.html">&lt;p&gt;I strongly believe that while it is very effective to structure
an organization in a democratic and sociocratic way, a project
should be managed completely different.
A project should resemble a dictatorship, authoritarian or military hierarchy
with a single strong, result-oriented leader who gives explicit orders
that are never doubted by subordinates and an explicitly defined hierarchy.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F02%2Fapocalypse-now.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Apocalypse Now (1979) by Francis Ford Coppola&#39;/&gt;&lt;figcaption&gt;Apocalypse Now (1979) by Francis Ford Coppola&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;According to Wikipedia at the time of writing, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Holacracy&quot;&gt;&lt;strong&gt;holacracy&lt;/strong&gt;&lt;/a&gt; exists when
&amp;quot;authority and decision-making are distributed&amp;quot; while,
on the other hand,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Autocracy&quot;&gt;&lt;strong&gt;autocracy&lt;/strong&gt;&lt;/a&gt; exists when
&amp;quot;supreme power is concentrated in the hands of one person&amp;quot;.&lt;/p&gt;

&lt;p&gt;When I say organization, I mean a team, a startup, a company, that
sort of thing. It&amp;#39;s something with a brand, an office, a business entity
and a bank account. The role of an organization is very similar
to the role of a country or a government: to provide security
in exchange for freedom. Democracy in a country, as well as in a team,
guarantees &lt;strong&gt;equality&lt;/strong&gt; to its members,
which is the most important component of security.&lt;/p&gt;

&lt;p&gt;A holacracy, also known as a &amp;quot;flat organization&amp;quot;, technically refers to the absence
of bureaucracy, special privileges, expensive furniture and private parties
for top management. In a flat team, the distance between the CEO and
a junior programmer is very small. They sit together in the same room,
eat in the same cafe, and discuss team strategy like friends. There
are no &amp;quot;bosses&amp;quot; on a flat team, only &amp;quot;&lt;strong&gt;leaders&lt;/strong&gt;&amp;quot;. They don&amp;#39;t give orders, they
&lt;strong&gt;inspire&lt;/strong&gt;. They don&amp;#39;t punish, they celebrate success and mourn failure
together with everybody. Well, that&amp;#39;s the idea of a holacracy.
And it actually works. I&amp;#39;ve seen it many times.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;The key objective of a project is to end, while an organization&amp;#39;s objective is to survive&lt;/aside&gt;

&lt;p&gt;However, when we&amp;#39;re talking about &lt;strong&gt;project&lt;/strong&gt; management, this very same approach will
have catastrophic consequences. A project is something very different
than a team. A project is a &amp;quot;temporary endeavor
undertaken to create a unique product, service, or result&amp;quot;, according to
&lt;a href=&quot;http://www.pmi.org/PMBOK-Guide-and-Standards.aspx&quot;&gt;PMBOK&lt;/a&gt;.
A project is something that starts and ends. The key objective of a project
is to &lt;strong&gt;end&lt;/strong&gt;, while an organization&amp;#39;s objective is to &lt;strong&gt;survive&lt;/strong&gt;. See the
difference? A new mobile app, a conference, a new release, a round of
investments &amp;mdash; these are examples of projects. They start, and they end. We
don&amp;#39;t want any of them to live forever; we want them to finish as soon as
possible, and obviously with a positive outcome.&lt;/p&gt;

&lt;p&gt;Because of this fundamental difference, a project must be managed by
an authoritative person who gives orders and
has enough guts to ensure those orders are obeyed. That person is
called a &lt;strong&gt;project manager&lt;/strong&gt; (PM). And the project will be successful only if
its management structure is strictly hierarchical, just like in a military operation.
A project cannot be flat, or it will fall apart.&lt;/p&gt;

&lt;p&gt;Since a project is a temporary endeavor, it doesn&amp;#39;t give security to its
participants. And it doesn&amp;#39;t take away our freedom. The arrangement is
different: A project gives us &lt;strong&gt;money&lt;/strong&gt; and takes our &lt;strong&gt;time&lt;/strong&gt;. The project
basically says to all of us, its participants: &amp;quot;Let&amp;#39;s get it done and go
our own ways&amp;quot;. Having this philosophy in mind and understanding the motivation
of everybody involved, the PM must use instruments that have nothing to do
with what keeps the organization alive.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;A project will finish successfully if we value discipline, subordination, awards, punishments, and rules&lt;/aside&gt;

&lt;p&gt;An organization/team/company/family will stay together for a long time if
we value things like tolerance, respect, patience, equality, and appreciation.&lt;/p&gt;

&lt;p&gt;To the contrary, a project will finish successfully if we value completely
different things: discipline, subordination, awards, punishments, and rules.&lt;/p&gt;

&lt;p&gt;To summarize my thoughts, I would say that a successful company combines
these two approaches by being a &lt;a href=&quot;https://en.wikipedia.org/wiki/Matrix_management&quot;&gt;matrix&lt;/a&gt;
organization that promotes holacracy in the team and autocracy in
the projects it is working on.&lt;/p&gt;</content><category term="management" /><summary>I strongly believe that while it is very effective to structure
an organization in a democratic and sociocratic way, a project
should be managed completely different.
A project should resemble a dictatorship, authoritarian or military hierarchy
with a single strong, result-oriented leader who gives explicit orders
that are never doubted by subordinates and an explicitly defined hierarchy.</summary></entry><entry><title>Are You Still Debugging?</title><link href="http://www.yegor256.com/2016/02/09/are-you-still-debugging.html" rel="alternate" type="text/html" title="Are You Still Debugging?" /><published>2016-02-09T00:00:00+00:00</published><updated>2016-02-09T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/02/09/are-you-still-debugging</id><content type="html" xml:base="http://www.yegor256.com/2016/02/09/are-you-still-debugging.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Debugging&quot;&gt;Debugging&lt;/a&gt;
is &amp;quot;a process of running a program/method interactively,
breaking execution flow after each statement and showing...&amp;quot; In a nutshell, it is
a very useful technique ... for a bad programmer. Or an old programmer
who is still writing procedural code in C. Object-oriented programmers
never debug their code &amp;mdash; they write unit tests. My point here
is that unit testing is a technique that completely replaces debugging.
If debugging is required, the &lt;strong&gt;design is bad&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F02%2Fthe-revenant.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;The Revenant (2015) by Alejandro G. Iñárritu&#39;/&gt;&lt;figcaption&gt;The Revenant (2015) by Alejandro G. Iñárritu&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s say I&amp;#39;m a &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;bad&lt;/a&gt;
imperative procedural programmer, and this is my Java code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileUtils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readWords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAllBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This static &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;utility&lt;/a&gt;
method reads file content and then
finds all the unique words in it. Pretty simple. However, if
it doesn&amp;#39;t work, what do we do? Let&amp;#39;s say this is the file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;We know what we are,
but know not what we may be.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From it, we get this list of words:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;We&amp;quot;
&amp;quot;know&amp;quot;
&amp;quot;what&amp;quot;
&amp;quot;we&amp;quot;
&amp;quot;are,\n&amp;quot;
&amp;quot;but&amp;quot;
&amp;quot;not&amp;quot;
&amp;quot;may&amp;quot;
&amp;quot;be\n&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that doesn&amp;#39;t look right to me ... so what is the next step? Either the file
reading doesn&amp;#39;t work correctly or the split is broken. Let&amp;#39;s &lt;strong&gt;debug&lt;/strong&gt;, right?
Let&amp;#39;s give it a file through an input and go step by step, tracing and watching
the variables. We&amp;#39;ll find the bug and fix it. But when a similar
problem shows up, we&amp;#39;ll have to debug again! And that&amp;#39;s what unit testing
is supposed to &lt;strong&gt;prevent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re supposed to create a unit test once, in which the problem is reproduced.
Then we fix the problem and make sure the test passes. That&amp;#39;s how we save
our investments in problem solving. We won&amp;#39;t fix it again, because it won&amp;#39;t
happen again. Our &lt;strong&gt;test&lt;/strong&gt; will prevent it from happening.&lt;/p&gt;

&lt;p&gt;However, all this will work only if it&amp;#39;s easy to create a unit test. If it&amp;#39;s
difficult, I&amp;#39;ll be too lazy to do it. I will just debug and fix the problem.
In this particular example, creating a test is a rather expensive procedure.
What I mean is the complexity of the unit test will be rather high. We have to
create a temporary file, fill it with data, run the method, and check the results.
To find out what&amp;#39;s going on and where the bug is, I&amp;#39;ll have to create a number
of tests. To avoid code duplication, I&amp;#39;ll also have to create some supplementary
utilities to help me create that temporary file and fill it with data.
That&amp;#39;s a lot of work. Well, maybe not &amp;quot;a lot&amp;quot;, but way more than a few minutes
of debugging.&lt;/p&gt;

&lt;p&gt;Thus, if you perceive debugging to be faster and easier, think about the quality
of your code. I bet it has a lot of opportunities for refactoring, just like
the code from the example above. Here is how I would modify it. First of all,
I would turn it into a class, because utility static methods are a
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;bad practice&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Words&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAllBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks better already, but the complexity is still there. Next, I would
break it down into smaller classes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAllBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Words&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What do you think now? Writing a test for the &lt;code&gt;Words&lt;/code&gt; class is a pretty
trivial task:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hamcrest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hamcrest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WordsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parsesSimpleText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;are&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;you&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How much time did that take? Less than a minute. We don&amp;#39;t need to create
a temporary file and load it with data, because class &lt;code&gt;Words&lt;/code&gt; doesn&amp;#39;t do
anything with files. It just parses the incoming string and finds the unique
words in it. Now it&amp;#39;s easy to fix, since the test is small and we can
easily create more tests; for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hamcrest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hamcrest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WordsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parsesSimpleText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;are&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;you&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parsesMultipleLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;first line\nsecond line\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hasItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;line&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My point is that debugging is necessary when the amount of time
to write a unit test is significantly more than the time it takes to click
those Trace-In/Trace-Out buttons. And it&amp;#39;s logical. We all are lazy and
want fast and easy solutions. But debugging burns time and wastes
energy. It helps us find problems but doesn&amp;#39;t help prevent
them from reappearing.&lt;/p&gt;

&lt;p&gt;Debugging is needed when our code is
&lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;procedural&lt;/a&gt;
and algorithmic &amp;mdash; when the code is all
about &lt;strong&gt;how&lt;/strong&gt; the goal should be achieved instead of &lt;strong&gt;what&lt;/strong&gt; the goal is.
See the examples above again. The first static method is all about
how we read the file, parse it, and find words. It&amp;#39;s even named &lt;code&gt;readWords()&lt;/code&gt; (a &lt;strong&gt;verb&lt;/strong&gt;).
To the contrary, the second example is about what will be achieved. It&amp;#39;s either
the &lt;code&gt;Text&lt;/code&gt; of the file or &lt;code&gt;Words&lt;/code&gt; of the text (both are &lt;strong&gt;nouns&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;I believe there is no place for debugging in clean object-oriented
programming. Only unit testing!&lt;/p&gt;</content><category term="jcg" /><category term="tdd" /><summary>Debugging
is &amp;quot;a process of running a program/method interactively,
breaking execution flow after each statement and showing...&amp;quot; In a nutshell, it is
a very useful technique ... for a bad programmer. Or an old programmer
who is still writing procedural code in C. Object-oriented programmers
never debug their code &amp;mdash; they write unit tests. My point here
is that unit testing is a technique that completely replaces debugging.
If debugging is required, the design is bad.</summary></entry><entry><title>Design Patterns and Anti-Patterns, Love and Hate</title><link href="http://www.yegor256.com/2016/02/03/design-patterns-and-anti-patterns.html" rel="alternate" type="text/html" title="Design Patterns and Anti-Patterns, Love and Hate" /><published>2016-02-03T00:00:00+00:00</published><updated>2016-02-03T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/02/03/design-patterns-and-anti-patterns</id><content type="html" xml:base="http://www.yegor256.com/2016/02/03/design-patterns-and-anti-patterns.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;Design Patterns&lt;/a&gt; are ...
Come on, you know what they are. They are
something we &lt;strong&gt;love&lt;/strong&gt; and &lt;strong&gt;hate&lt;/strong&gt;. We love them because they let us
write code without thinking. We hate them when we see the code
of someone who is used to writing code without thinking. Am I wrong?
Now, let me try to go through all of them and show you how much
I love or hate each one. Follow me, in alphabetic order.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F02%2Fthe-shining.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;The Shining (1980) by Stanley Kubrick&#39;/&gt;&lt;figcaption&gt;The Shining (1980) by Stanley Kubrick&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_factory_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Abstract Factory&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Adapter_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Adapter&lt;/span&gt;&lt;/a&gt;.
Good one!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bridge_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Bridge&lt;/span&gt;&lt;/a&gt;.
Good one!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Builder_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Builder&lt;/span&gt;&lt;/a&gt;.
Terrible concept, since it encourages us to create and
use big, complex objects. If you need a builder, there
is already something wrong in your code. Refactor it so
any object is easy to create through its constructors.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chain_of_responsibility_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Chain of Responsibility&lt;/span&gt;&lt;/a&gt;.
Seems fine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Command_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Command&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Composite_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Composite&lt;/span&gt;&lt;/a&gt;.
Good one; check out &lt;a href=&quot;/2015/10/01/vertical-horizontal-decorating.html&quot;&gt;this&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Decorator&lt;/span&gt;&lt;/a&gt;.
My &lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;favorite&lt;/a&gt; one.
I highly recommend you use it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Facade_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Facade&lt;/span&gt;&lt;/a&gt;.
Bad idea. In OOP, we need objects and only objects,
not facades for them. This design pattern is very procedural
in its spirit, since a facade is nothing more than a collection
of &lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;procedures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;&lt;span class=&#39;orange&#39;&gt;Factory Method&lt;/span&gt;&lt;/a&gt;.
This one seems OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Flyweight_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Flyweight&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s a workaround, as I see it, so it&amp;#39;s not a good design pattern. I would
recommend you not use it unless there is a really critical performance
issue. But calling it a design pattern ... no way. A fix for a
performance problem in Java? Yes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Front_controller&quot;&gt;&lt;span class=&#39;red&#39;&gt;Front Controller&lt;/span&gt;&lt;/a&gt;.
Terrible idea, as well as the entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt;.
It&amp;#39;s very &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;procedural&lt;/a&gt;, that&amp;#39;s why.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interpreter_pattern&quot;&gt;&lt;span class=&#39;orange&#39;&gt;Interpreter&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK, but I &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;don&amp;#39;t like&lt;/a&gt;
the name. &amp;quot;Expression&amp;quot; would be a much better alternative.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Iterator_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Iterator&lt;/span&gt;&lt;/a&gt;.
Bad idea, since it is mutable. It would be much better
to have &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutable&lt;/a&gt; &amp;quot;cursors&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lazy_initialization&quot;&gt;&lt;span class=&#39;green&#39;&gt;Lazy Initialization&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Marker_interface_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Marker&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s a terrible idea, along with reflection and
&lt;a href=&quot;/2015/04/02/class-casting-is-anti-pattern.html&quot;&gt;type casting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;&lt;span class=&#39;red&#39;&gt;MVC&lt;/span&gt;&lt;/a&gt;.
Bad idea, since it&amp;#39;s very procedural. &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;Controllers&lt;/a&gt;
are the key broken element in this
concept. We need real objects, not procedural controllers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mediator_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Mediator&lt;/span&gt;&lt;/a&gt;.
I don&amp;#39;t like it. Even though it sounds like a technique
for decreasing complexity and coupling, it is not really object-oriented.
Who is this mediator? Just a &amp;quot;channel&amp;quot; between objects? Why shouldn&amp;#39;t objects
communicate directly? Because they are too complex? Make
them smaller and simpler, rather than inventing these mediators.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memento_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Memento&lt;/span&gt;&lt;/a&gt;.
This idea implies that objects are &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;mutable&lt;/a&gt;,
which I&amp;#39;m against in general.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Module_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Module&lt;/span&gt;&lt;/a&gt;.
If Wikipedia is right about this pattern, it&amp;#39;s something
even more terrible than the Singleton.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiton_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Multiton&lt;/span&gt;&lt;/a&gt;.
Really bad idea. Same as Singleton.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Null_Object_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Null Object&lt;/span&gt;&lt;/a&gt;.
Good one. By the way, see
&lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;Why NULL Is Bad&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_pattern_object_library&quot;&gt;&lt;span class=&#39;green&#39;&gt;Object Library&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s good.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_pool_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Object Pool&lt;/span&gt;&lt;/a&gt;.
Good one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;&lt;span class=&#39;orange&#39;&gt;Observer&lt;/span&gt;&lt;/a&gt;.
The idea is good, but the name is bad, since it
&lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;ends with -ER&lt;/a&gt;.
A much better one would be &amp;quot;Source&amp;quot; and &amp;quot;Target&amp;quot;. The Source
generates events and the Target listens to them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;&lt;span class=&#39;red&#39;&gt;ORM&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s terrible and &amp;quot;offensive&amp;quot;; check
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;this&lt;/a&gt; out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Prototype_pattern&quot;&gt;&lt;span class=&#39;orange&#39;&gt;Prototype&lt;/span&gt;&lt;/a&gt;.
Good idea, but what does it have to do with OOP?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Proxy&lt;/span&gt;&lt;/a&gt;.
Good one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot;&gt;&lt;span class=&#39;green&#39;&gt;RAII&lt;/span&gt;&lt;/a&gt;.
This is a really good one, and I highly recommend you use it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_pattern_Servant&quot;&gt;&lt;span class=&#39;red&#39;&gt;Servant&lt;/span&gt;&lt;/a&gt;.
A very bad idea, because it&amp;#39;s highly
&lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;procedural&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Singleton&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s the king of all anti-patterns. Stay away from it at all costs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Specification_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Specification&lt;/span&gt;&lt;/a&gt;.
It&amp;#39;s OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/State_pattern&quot;&gt;&lt;span class=&#39;orange&#39;&gt;State&lt;/span&gt;&lt;/a&gt;.
Although it&amp;#39;s not implied, I feel that in most cases
the use of this pattern results in mutability, a code characteristic that
I&amp;#39;m generally &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;against&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Strategy_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Strategy&lt;/span&gt;&lt;/a&gt;.
A good one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;&lt;span class=&#39;green&#39;&gt;Template Method&lt;/span&gt;&lt;/a&gt;.
Seems fine, as long as you keep classes
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;&lt;span class=&#39;red&#39;&gt;Visitor&lt;/span&gt;&lt;/a&gt;.
A rather &lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;procedural&lt;/a&gt;
concept that treats objects as
data structures, which we can manipulate.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;I have nothing against &lt;a href=&quot;https://en.wikipedia.org/wiki/Concurrency_pattern&quot;&gt;concurrency patterns&lt;/a&gt; either;
they are all &lt;span class=&quot;green&quot;&gt;good&lt;/span&gt;, since they
have almost nothing to do with object-oriented programming.&lt;/p&gt;

&lt;p&gt;If you know some other design (anti-)patterns, let me know
in the comments below. I&amp;#39;ll add them here.&lt;/p&gt;</content><category term="jcg" /><category term="oop" /><summary>Design Patterns are ...
Come on, you know what they are. They are
something we love and hate. We love them because they let us
write code without thinking. We hate them when we see the code
of someone who is used to writing code without thinking. Am I wrong?
Now, let me try to go through all of them and show you how much
I love or hate each one. Follow me, in alphabetic order.</summary></entry><entry><title>Defensive Programming via Validating Decorators</title><link href="http://www.yegor256.com/2016/01/26/defensive-programming.html" rel="alternate" type="text/html" title="Defensive Programming via Validating Decorators" /><published>2016-01-26T00:00:00+00:00</published><updated>2016-01-26T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/01/26/defensive-programming</id><content type="html" xml:base="http://www.yegor256.com/2016/01/26/defensive-programming.html">&lt;p&gt;Do you check the input parameters of your methods for validity?
I don&amp;#39;t. I used to, but not anymore.
I just let my methods crash with a null pointer and other exceptions
when parameters are not valid.
This may sound illogical, but only in the beginning.
I&amp;#39;m suggesting you use &lt;strong&gt;validating decorators&lt;/strong&gt; instead.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F01%2Fshi-mian-mai-fu.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Shi mian mai fu (2004) by Yimou Zhang&#39;/&gt;&lt;figcaption&gt;Shi mian mai fu (2004) by Yimou Zhang&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s take a look at this rather typical Java example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;File is NULL; can&amp;#39;t export.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;File already exists.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Export the report to the file&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pretty &lt;a href=&quot;https://en.wikipedia.org/wiki/Defensive_programming&quot;&gt;defensive&lt;/a&gt;, right?
If we remove these validations, the code
will be much shorter, but it will crash with rather confusing messages
if &lt;code&gt;NULL&lt;/code&gt; is provided by the client. Moreover, if the file already exists,
our &lt;code&gt;Report&lt;/code&gt; will silently overwrite it. Pretty dangerous, right?&lt;/p&gt;

&lt;p&gt;Yes, we must protect ourselves, and we must be defensive.&lt;/p&gt;

&lt;p&gt;But not this way, not by bloating the class with validations that
have nothing to do with its core functionality. Instead, we should
use decorators to do the validation. Here is how. First,
there must be an interface &lt;code&gt;Report&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, a class that implements the core functionality:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultReport&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Export the report to the file&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And, finally, a number of decorators that will protect us:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoWriteOverReport&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NoWriteOverReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;File already exists.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, the client has the flexibility of composing a complex object
from decorators that perform their specific tasks. The core object
will do the reporting, while the decorators will validate parameters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Report&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoNullReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoWriteOverReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DefaultReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What do we achieve with this approach?
First and foremost: smaller objects.
And smaller objects always mean higher &lt;strong&gt;maintainability&lt;/strong&gt;.
Our &lt;code&gt;DefaultReport&lt;/code&gt; class will always remain small, no matter
how many validations we may invent in the future. The
more things we need to validate, the more validating decorators
we will create. All of them will be small and cohesive. And we&amp;#39;ll
be able to put them together in different variations.&lt;/p&gt;

&lt;p&gt;Besides that, this approach makes our code much more
&lt;strong&gt;reusable&lt;/strong&gt;, as classes perform very few operations
and don&amp;#39;t defend themselves by default. While being defensive
is an important feature, we&amp;#39;ll use validating decorators. But
this will not always be the case. Sometimes validation is just
too expensive in terms of time and memory, and we may want to work
directly with objects that don&amp;#39;t defend themselves.&lt;/p&gt;

&lt;p&gt;I also decided not to use the Java Validation API anymore for the
same reason. Its annotations make classes much more verbose
and less cohesive. I&amp;#39;m using validating decorators instead.&lt;/p&gt;</content><category term="jcg" /><category term="oop" /><summary>Do you check the input parameters of your methods for validity?
I don&amp;#39;t. I used to, but not anymore.
I just let my methods crash with a null pointer and other exceptions
when parameters are not valid.
This may sound illogical, but only in the beginning.
I&amp;#39;m suggesting you use validating decorators instead.</summary></entry><entry><title>How Expensive Is Your Outsourcing Team?</title><link href="http://www.yegor256.com/2016/01/19/how-expensive-is-outsourcing.html" rel="alternate" type="text/html" title="How Expensive Is Your Outsourcing Team?" /><published>2016-01-19T00:00:00+00:00</published><updated>2016-01-19T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/01/19/how-expensive-is-outsourcing</id><content type="html" xml:base="http://www.yegor256.com/2016/01/19/how-expensive-is-outsourcing.html">&lt;p&gt;Let me put it this way: $15 per hour for a senior Java developer &amp;mdash;
is that cheap or expensive? It&amp;#39;s cheap, right? Right. What would you
say if I told you this cheap Java developer hardly writes two
primitive lines of code per day? You&amp;#39;re paying $600 every week but
rarely getting anything back. How cheap is this Java guy now?
My point is that using hourly rate as a cost indicator is a very bad idea,
whether with &lt;a href=&quot;/2015/10/27/outsourcing-doesnt-work.html&quot;&gt;outsourcing&lt;/a&gt;
or in-house teams.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F01%2Fthe-fan.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;The Fan (1996) by Tony Scott&#39;/&gt;&lt;figcaption&gt;The Fan (1996) by Tony Scott&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I actually decided to write this after a short sales meeting recently
with a prospect from Illinois. He wanted to hire &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt; for his
Java project and seemed to like our approach. I explained how we work,
how we control &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality&lt;/a&gt;,
and why and how we&amp;#39;re &lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;different&lt;/a&gt;
from everybody else. He seemed to be impressed.
Then, he asked, &amp;quot;&lt;strong&gt;How much&lt;/strong&gt; do you charge?&amp;quot;&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.teamed.io&#39;&gt;&lt;img src=&#39;http://img.teamed.io/logo.svg&#39; style=&#39;width:100px;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I told him that we are also different in the way we bill for our work,
because we don&amp;#39;t charge for the time spent by our programmers sitting
in front of monitors. Instead, we bill for &lt;strong&gt;results&lt;/strong&gt; produced, merged,
and delivered. I showed him this article about
&lt;a href=&quot;/2014/10/21/incremental-billing.html&quot;&gt;incremental billing&lt;/a&gt;.
He seemed to understand the advantages of our approach, compared to the
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;hourly salaries&lt;/a&gt;
being paid by &lt;del&gt;almost&lt;/del&gt; everybody else in the market.&lt;/p&gt;

&lt;p&gt;Still, the question remained &amp;mdash; how much?&lt;/p&gt;

&lt;p&gt;What could I do? I had to give him an answer.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Under different management, programmers deliver very different results in the same 60 minutes&lt;/aside&gt;

&lt;p&gt;I told him that our best Java programmers earn $30 to $50 per hour and
we add our margin on top of that, in the amount of 100 percent, for management.
In the end, &amp;quot;one hour&amp;quot; will cost him $60 to $100. He ran away.&lt;/p&gt;

&lt;p&gt;What did I do wrong? I think I know what it was.
I didn&amp;#39;t explain to him that, under different management,
programmers deliver very different results in the same
60 minutes. By &amp;quot;very different&amp;quot;, I mean &lt;strong&gt;dramatically&lt;/strong&gt; different. Let
me demonstrate the numbers (I actually did that already almost two
years ago, in my &lt;a href=&quot;/2014/04/11/cost-of-loc.html&quot;&gt;How Much Do You Pay Per Line of Code?&lt;/a&gt;
post, but will try again from a different perspective).&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href=&quot;https://github.com/yegor256/takes/issues/430&quot;&gt;yegor256/takes#430&lt;/a&gt;,
a feature request in the &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes Framework&lt;/a&gt;,
one of the projects we&amp;#39;re managing.
Let&amp;#39;s see how much the project paid for the work done in this ticket:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;15 minutes to me for creating a new ticket&lt;/li&gt;
&lt;li&gt;30 minutes to &lt;a href=&quot;https://github.com/hdouss&quot;&gt;@hdous&lt;/a&gt; for fixing it&lt;/li&gt;
&lt;li&gt;52 minutes to &lt;a href=&quot;https://github.com/pinaf&quot;&gt;@pinaf&lt;/a&gt; for code review&lt;/li&gt;
&lt;li&gt;20 minutes to &lt;a href=&quot;https://github.com/ypshenychka&quot;&gt;@ypshenychka&lt;/a&gt; for QA review&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming that an average price &amp;quot;per hour&amp;quot; is $50
($25 for developers and $25 for our management),
the total cost of this new feature was $97.50 (117 minutes).&lt;/p&gt;

&lt;p&gt;Look at these two tickets again.
&lt;a href=&quot;https://github.com/yegor256/takes/issues/430&quot;&gt;#430&lt;/a&gt; is the feature
request and &lt;a href=&quot;https://github.com/yegor256/takes/issues/493&quot;&gt;#493&lt;/a&gt; is
the pull request with two new Java files and code review comments.&lt;/p&gt;

&lt;p&gt;Four people worked on this feature. If you put them all together
in an office, full-time, with the same hourly rate, they will cost
$800 per day (I&amp;#39;m not adding any management costs!).
Now the question is whether they will be able to
create &lt;strong&gt;eight&lt;/strong&gt; new features &lt;strong&gt;every day&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re a manager, you know the velocity of your programmers.
If you&amp;#39;re a programmer, you know how much code you can write in a day.
Now, honestly tell me if you find and solve eight bugs per day with that
level of complexity, detailed code review, and precision of
documentation? I seriously doubt it.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.xdsd.org&#39;&gt;&lt;img src=&#39;http://www.xdsd.org/images/logo.svg&#39; style=&#39;width:100px;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;In that &lt;a href=&quot;/2014/04/11/cost-of-loc.html&quot;&gt;How Much Do You Pay Per Line of Code?&lt;/a&gt;
post, I actually did a comparison of a co-located project, where I was an architect,
with a distributed one, where I also was an architect. My numbers tell
me that a traditionally managed team is at least 10 times less
productive than a team managed by &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt; under
&lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt; principles.&lt;/p&gt;

&lt;p&gt;My point is that asking &amp;quot;What is your hourly rate?&amp;quot; is just as wrong as
asking &lt;a href=&quot;/2015/06/02/how-to-estimate-software-cost.html&quot;&gt;How Much for This Software?&lt;/a&gt;
if we&amp;#39;re talking about software developers motivated by results,
not &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office slaves&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead, we should ask: How much can you do for $100?&lt;/p&gt;

&lt;p&gt;As you can see, we can easily demonstrate how much we are capable
of delivering for $100. Can you and your team do the same?&lt;/p&gt;

&lt;p&gt;Thus, your &lt;a href=&quot;https://en.wikipedia.org/wiki/Return_on_investment&quot;&gt;ROI&lt;/a&gt;
while working with an &lt;a href=&quot;/2015/05/21/avoid-software-outsourcing-disaster.html&quot;&gt;outsourced team&lt;/a&gt; mostly
depends on their &lt;strong&gt;results per dollar&lt;/strong&gt;, not dollars per hour. The first
metric is difficult to calculate, and only the best teams will be able
to do so. The second metric is absolutely misleading, but anyone
will give it to you.&lt;/p&gt;

&lt;p&gt;An &lt;a href=&quot;/2015/06/15/software-outsourcing-survival-guide.html&quot;&gt;outsourced team&lt;/a&gt;
is expensive when its results per dollar are low,
no matter how big or small its dollars-per-hour rate is. To the contrary,
a team is financially very efficient if its results per dollar is high.
It doesn&amp;#39;t really matter what the value of the second metric is.&lt;/p&gt;

&lt;p&gt;P.S. I&amp;#39;m going to show this article to that prospect who ran away. Maybe
he will come back :)&lt;/p&gt;</content><category term="outsourcing" /><summary>Let me put it this way: $15 per hour for a senior Java developer &amp;mdash;
is that cheap or expensive? It&amp;#39;s cheap, right? Right. What would you
say if I told you this cheap Java developer hardly writes two
primitive lines of code per day? You&amp;#39;re paying $600 every week but
rarely getting anything back. How cheap is this Java guy now?
My point is that using hourly rate as a cost indicator is a very bad idea,
whether with outsourcing
or in-house teams.</summary></entry><entry><title>Good Programmers Don&amp;#39;t Work for Equity</title><link href="http://www.yegor256.com/2016/01/12/good-programmers-dont-work-for-equity.html" rel="alternate" type="text/html" title="Good Programmers Don&#39;t Work for Equity" /><published>2016-01-12T00:00:00+00:00</published><updated>2016-01-12T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/01/12/good-programmers-dont-work-for-equity</id><content type="html" xml:base="http://www.yegor256.com/2016/01/12/good-programmers-dont-work-for-equity.html">&lt;p&gt;&amp;quot;You&amp;#39;re a good programmer. I&amp;#39;m a great entrepreneur. This is a
breakthrough idea. Help me build it. I don&amp;#39;t have cash, but I will
give you equity. Deal?&amp;quot; I hear this at least once a month, and
I always say no. Not because I don&amp;#39;t like your idea. Indeed, it
is really interesting. And not because I&amp;#39;m too busy. I would
definitely find time for a good idea. It&amp;#39;s not that. I say no because
I don&amp;#39;t think you&amp;#39;re a good entrepreneur.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F01%2Fhow-much-do-you-love-me.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Combien tu m&amp;amp;apos;aimes? (2005) by Bertrand Blier&#39;/&gt;&lt;figcaption&gt;Combien tu m&amp;#39;aimes? (2005) by Bertrand Blier&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;So you want a good programmer to build your product. Or maybe a group
of good programmers. And you are ready to give me some equity
in exchange. That&amp;#39;s reasonable.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;You&amp;#39;re a good entrepreneur, right? How come you don&amp;#39;t have money, then?&lt;/aside&gt;

&lt;p&gt;But what is your part of the deal?&lt;/p&gt;

&lt;p&gt;How much are you putting on the table?&lt;/p&gt;

&lt;p&gt;You say that you&amp;#39;re a good entrepreneur, right? How come
you don&amp;#39;t have money, then? How come you can&amp;#39;t find someone to pay
for the work of a good programmer?&lt;/p&gt;

&lt;p&gt;I will create a product for you, but you will most certainly
fail. You &lt;strong&gt;already&lt;/strong&gt; failed. You failed to find initial
investment to cover the startup expenses of the business.
Why do you think you will succeed after the product is ready?&lt;/p&gt;

&lt;p&gt;The point is that a good programmer will &lt;strong&gt;never&lt;/strong&gt;
work for equity. Not because a good programmer is greedy,
or doesn&amp;#39;t want to risk, or doesn&amp;#39;t believe
in new ideas. Not at all.&lt;/p&gt;

&lt;p&gt;A good programmer wants to work with a &lt;strong&gt;good&lt;/strong&gt; entrepreneur. And
a good entrepreneur knows how to find money. That&amp;#39;s the definition
of a decent entrepreneur.&lt;/p&gt;

&lt;p&gt;Period.&lt;/p&gt;</content><category term="jcg" /><category term="startup" /><summary>&amp;quot;You&amp;#39;re a good programmer. I&amp;#39;m a great entrepreneur. This is a
breakthrough idea. Help me build it. I don&amp;#39;t have cash, but I will
give you equity. Deal?&amp;quot; I hear this at least once a month, and
I always say no. Not because I don&amp;#39;t like your idea. Indeed, it
is really interesting. And not because I&amp;#39;m too busy. I would
definitely find time for a good idea. It&amp;#39;s not that. I say no because
I don&amp;#39;t think you&amp;#39;re a good entrepreneur.</summary></entry><entry><title>How Do You Punish Your Employees?</title><link href="http://www.yegor256.com/2016/01/05/how-to-punish-employees.html" rel="alternate" type="text/html" title="How Do You Punish Your Employees?" /><published>2016-01-05T00:00:00+00:00</published><updated>2016-01-05T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/01/05/how-to-punish-employees</id><content type="html" xml:base="http://www.yegor256.com/2016/01/05/how-to-punish-employees.html">&lt;p&gt;Punishment ... how do you prefer to do it? There are many ways to punish
employees; some are rather effective, while others simply don&amp;#39;t work. This is
not an exact science. Actually, I would say it&amp;#39;s an &lt;strong&gt;art&lt;/strong&gt;. You must be creative,
innovative, and very open-minded. You never know which method of
punishment will work with whom. Some people respond to one method,
while others may completely ignore it. The overarching goal, of course, is
to make employees &lt;strong&gt;scared&lt;/strong&gt; of &lt;strong&gt;you&lt;/strong&gt;, their boss, so they will obey enthusiastically.
Here is a list of the most effective methods :)&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F01%2Foffice-space.jpg&#39; style=&#39;width:600px;&#39; alt=&#39;Office Space (1999) by Mike Judge&#39;/&gt;&lt;figcaption&gt;Office Space (1999) by Mike Judge&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Disclaimer: I&amp;#39;m using the pronoun &amp;quot;he&amp;quot; merely for simplicity of speech. The
same exact rules apply to both males and females.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use Your Voice&lt;/strong&gt;.
This, of course, is your best instrument of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Punishment&quot;&gt;punishment&lt;/a&gt;. Make sure he is scared
of you. He must know who he works for &amp;mdash; you, his boss. The rule
of thumb is that the one with the strongest voice is the boss. Thus, you
must be heard, you must &lt;strong&gt;rule&lt;/strong&gt; with your voice, and he must physically
feel your presence in the room. Even if it&amp;#39;s just a Skype call,
your voice must sound stronger than all others.
Moreover, don&amp;#39;t let him speak if he is trying to argue back.
You&amp;#39;re the boss!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Play Hard to Get&lt;/strong&gt;.
Is he feeling &lt;a href=&quot;https://en.wikipedia.org/wiki/Guilt_%28emotion%29&quot;&gt;guilty&lt;/a&gt; for
an error? Simply ignore him. Or, even better, schedule
meetings and don&amp;#39;t show up. Or reschedule many times. That will demonstrate
that you&amp;#39;re not interested in him anymore. His frustration
will grow. You&amp;#39;ll still be in the office, having meetings with other employees,
eating lunch, laughing, walking, and talking. You exist, but not for him.
He is dead to you, because of his mistake. He is nothing and is getting
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Silent_treatment&quot;&gt;silent treatment&lt;/a&gt;.
Then, suddenly, you attend a meeting! Oh, how happy he will be.
He will literally kiss your hands, and you will love that feeling!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Fun of Him&lt;/strong&gt;.
We inherit this technique from good, old-school
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bullying&quot;&gt;bullying&lt;/a&gt;. We all know how it
works. Select the person who messed up and make him the target of your jokes.
In the office, this method works even better than in school, because
you&amp;#39;re the boss and he basically can&amp;#39;t do anything to you. He will first try
to laugh alongside everybody else, but this won&amp;#39;t last for the long term. In the
end, everybody will laugh at him, and he will do whatever it takes just to stop it.
He will obey any order you give!&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Having a personal life outside the office is not for everybody; it is a luxury&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Mistakes Must be Visible&lt;/strong&gt;.
Is he wrong? Did he miss a deadline? Did he deploy a broken version to production?
Did he forget something? Don&amp;#39;t resolve this face to face. Always make such things
public, simply to let others punish him. This approach is known as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Peer_pressure&quot;&gt;peer pressure&lt;/a&gt;, a very
useful technique. His coworkers must keep up the momentum and punish
him using &lt;a href=&quot;https://en.wikipedia.org/wiki/Social_rejection&quot;&gt;social rejection&lt;/a&gt;.
That&amp;#39;s why, by all means, you as a leader must encourage back-stabbing.
You will rise to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Power_and_control_in_abusive_relationships&quot;&gt;power&lt;/a&gt;
much faster if your employees are not only afraid of
you but also of each other. Use their fear wisely!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Late-Night Phone Calls&lt;/strong&gt;.
Having a &lt;a href=&quot;https://en.wikipedia.org/wiki/Personal_life&quot;&gt;personal life&lt;/a&gt;
outside the office is not for everybody. It is a luxury, and
you are not just going to give it away. He must earn it, and if he is guilty of
not completing a task on time, his private life will be ruined by your
late-night phone calls. He must remember that. It doesn&amp;#39;t really matter
what exactly the calls are about. Just make them somewhere around 11 p.m.
Your key message is this: &amp;quot;I&amp;#39;m worrying about the project while you&amp;#39;re
enjoying your family time!&amp;quot; Guilt is what you&amp;#39;re planting with this.
He won&amp;#39;t be able to ask you not to call him after work; he is not that brave.
He will instead try to please you somehow so that you stop calling him.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Check Results&lt;/strong&gt;.
This technique is close to playing hard to get, but here you don&amp;#39;t ignore him.
You communicate with the guilty employee, but you don&amp;#39;t talk about his
results. You discuss his uncle&amp;#39;s wedding, his snowboarding weekend, his
new bicycle, etc. But you don&amp;#39;t ask about the migration to PostgreSQL he
has been working on for the last three weeks. You are &lt;strong&gt;not interested&lt;/strong&gt;. This is
a perfect method for demonstrating that you don&amp;#39;t see him as a valuable
team member anymore. The team doesn&amp;#39;t need his results. The team can live
without them. You will see how soon he realizes who the boss is and
what it means when the boss is not happy!&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Obviously, the best desk is the one at which nobody can see your monitor&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;A Bad Office Spot Is a Great De-Motivator&lt;/strong&gt;.
This is a classic instrument of punishment: The worst desks go to
those who forget who the boss is around here. Obviously, the best desk is the
one at which nobody can see your monitor. Give those to good people who
obey your orders and don&amp;#39;t argue with you. They are your core team. They
support you as a leader, and they help you rise to power. Others must
sit closer to the door, and their monitors must be seen by everybody.
As with all other techniques, &lt;a href=&quot;https://en.wikipedia.org/wiki/Psychological_manipulation&quot;&gt;conceal&lt;/a&gt;
your intentions &amp;mdash; you
locate people in the office due to their job descriptions in order to help
them communicate effectively. Everybody will understand what&amp;#39;s really going on,
but you must look like a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Leadership_style#Laissez-faire&quot;&gt;laissez-faire leader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy Tasks Are Rewards&lt;/strong&gt;.
You decide who does what, and you distribute tasks and projects &amp;mdash; that&amp;#39;s your
instrument of power. Easy-to-do tasks are how you reward those who are loyal
and supportive. They complete such tasks, hardly expending any effort. Complex
and risky projects, on the other hand, are assigned to the under-performing employee. He will most likely
fail, and there won&amp;#39;t be anyone to blame &amp;mdash; it&amp;#39;s just a project, like
all others. Boring, ambiguous, unfocused, unnecessary, under-funded, and routine
tasks all go to the employee who deserves punishment. Of course,
you must look unbiased &amp;mdash; be very polite and supportive, acting as if you&amp;#39;re
a good friend!&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Leaving the office at 5 p.m. is a privilege; only the best employees can afford it&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Spread Rumors&lt;/strong&gt;.
Simply show your annoyance of his poor results, but not to his face. Talk
about his performance with his coworkers. They must know that you&amp;#39;re not
happy. Furthermore, they must suspect that you&amp;#39;re thinking about
terminating his contract. Don&amp;#39;t say it straight away, but don&amp;#39;t deny it if they
ask. I doubt they will ask, though. Very soon, these rumors will
reach his ear, and he will do whatever it takes just to hear that you&amp;#39;re
not thinking about termination anymore. He will likely be scared to ask you directly,
but even if he does ask, deny it. He will be afraid of you anyway. That will
make him much more manageable!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overtime&lt;/strong&gt;.
Leaving the office at 5 p.m. is a privilege. Only the best employees can afford it.
Ideally, everybody must ask you before they leave. The one who feels
guilty won&amp;#39;t be comfortable asking you whether he can leave at 5 p.m. He will
stay longer just because he is afraid to ask. That&amp;#39;s exactly what you need!
Just to earn the ability to ask whether it&amp;#39;s possible to leave the office,
he will work harder. The question is how to make employees ask for your permission
to go home in the first place. I recommend you stay late and schedule
interesting meetings at 6 p.m. Of course, you will come to work at 1 p.m., while
everybody else must be there at 9 a.m. sharp. The point is that you must be
in the office when they leave, and you must do something important. They will
be afraid to disappoint you by showing ignorance, so they will ask for permission.
That&amp;#39;s what you need!&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;This list is definitely not exhaustive. I&amp;#39;m sure there are many
more &lt;a href=&quot;https://en.wikipedia.org/wiki/Psychopathy&quot;&gt;interesting&lt;/a&gt;
methods and technologies. Don&amp;#39;t hesitate to
share them below in the comments. As I said above, I believe this is
an art, not a science.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.amazon.com/gp/product/0749464763/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0749464763&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=JVXRPNAEJBMNGINR&#39;&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F01%2Fmanagement-stripped-bare.jpg&#39; style=&#39;width:96px;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;PS. If you like this article, you will certainly enjoy this
&lt;a href=&quot;http://www.amazon.com/gp/product/0749464763/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0749464763&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=JVXRPNAEJBMNGINR&quot;&gt;Management Stripped Bare: What They Don&amp;#39;t Teach You at Business School&lt;/a&gt;
book by Jo Owen. I actually borrowed some ideas from that book.&lt;/p&gt;</content><category term="management" /><summary>Punishment ... how do you prefer to do it? There are many ways to punish
employees; some are rather effective, while others simply don&amp;#39;t work. This is
not an exact science. Actually, I would say it&amp;#39;s an art. You must be creative,
innovative, and very open-minded. You never know which method of
punishment will work with whom. Some people respond to one method,
while others may completely ignore it. The overarching goal, of course, is
to make employees scared of you, their boss, so they will obey enthusiastically.
Here is a list of the most effective methods :)</summary></entry></feed>
