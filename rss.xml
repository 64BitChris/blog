<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014-2015</copyright>
    <lastBuildDate>Thu, 09 Jul 2015 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>Catch Me If You ... Can't Do Otherwise</title>
      <link>http://www.yegor256.com/2015/07/09/catch-if-cant-otherwise.html</link>
      <description>&lt;p&gt;I don&amp;#39;t know whether it&amp;#39;s an anti-pattern or just a common and very popular
mistake, but I see it everywhere and simply must write about it. I&amp;#39;m talking
about exception catching without re-throwing. I&amp;#39;m talking about something like
this Java code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;Pay attention: I don&amp;#39;t have anything against this code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Exception_chaining&quot;&gt;&lt;em&gt;exception chaining&lt;/em&gt;&lt;/a&gt;
and is a perfectly valid construct.&lt;/p&gt;

&lt;p&gt;So what is wrong with catching an exception and logging it? Let&amp;#39;s try to
look at the bigger picture first. We&amp;#39;re talking about object-oriented
programming &amp;mdash; this means we&amp;#39;re dealing with objects. Here is
how an object (its class, to be exact) would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Wire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how I&amp;#39;m using this class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks nice, right? I don&amp;#39;t need to worry about that &lt;code&gt;IOException&lt;/code&gt; when I&amp;#39;m
calling &lt;code&gt;send(1)&lt;/code&gt;. It will be handled internally, and if it occurs, the stacktrace
will be logged. But this is a totally wrong way of thinking, and it&amp;#39;s inherited
from languages without exceptions, like C.&lt;/p&gt;

&lt;p&gt;Exceptions were invented to simplify our design by moving the entire
error handling code away from the main logic. Moreover, we&amp;#39;re not just moving it away but
also concentrating it in one place &amp;mdash; in the &lt;code&gt;main()&lt;/code&gt; method, the entry
point of the entire app.&lt;/p&gt;

&lt;p&gt;The primary purpose of an exception is to collect as much information as possible
about the error and float it up to the highest level, where the user
is capable of doing something about it. Exception chaining helps even
further by allowing us to extend that information on its way up. We are basically
putting our bubble (the exception) into a bigger bubble every time we
catch it and re-throw. When it hits the surface, there are many bubbles, each remaining
inside another like a Russian doll. The original exception is the
smallest bubble.&lt;/p&gt;

&lt;p&gt;When you catch an exception without re-throwing it, you basically pop the bubble.
Everything inside it, including the original exception and all other bubbles
with the information inside them, are in your hands.
You don&amp;#39;t let me see them. You use them somehow, but I don&amp;#39;t know how. You&amp;#39;re
doing something behind the scenes, hiding potentially important information.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re hiding that from me, I can&amp;#39;t promise my user that I will be honest
with him and openly report a problem when it occurs. I simply can&amp;#39;t
trust your &lt;code&gt;send()&lt;/code&gt; method anymore, and my user will not trust me.&lt;/p&gt;

&lt;p&gt;By catching exceptions without re-throwing them, you&amp;#39;re basically breaking the
chain of trust between objects.&lt;/p&gt;

&lt;p&gt;My suggestion is to catch exceptions as seldomly as possible, and every time
you catch them, re-throw.&lt;/p&gt;

&lt;p&gt;Unfortunately, the design of Java goes against this principle in many places.
For example, Java has checked and un-checked exceptions, while there should only
be checked ones in my opinion (the ones you must catch or declare
as throwable). Also, Java allows multiple exception types to be declared
as throwable in a single method &amp;mdash; yet another mistake; stick to declaring just
one type. Also, there is a generic &lt;code&gt;Exception&lt;/code&gt; class at the top of the hierarchy,
which is also wrong in my opinion. Besides that, some built-in classes don&amp;#39;t
allow any checked exceptions to be thrown, like &lt;code&gt;Runnable.run()&lt;/code&gt;. There
are many other problems with exceptions in Java.&lt;/p&gt;

&lt;p&gt;But try to keep this principle in mind and your code will be cleaner: &lt;code&gt;catch&lt;/code&gt; only if you have no other choice.&lt;/p&gt;

&lt;p&gt;P.S. Here is how the class should look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Wire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/07/09/catch-if-cant-otherwise.html</guid>
      <dc:date>2015-07-09T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Public Static Literals ... Are Not a Solution for Data Duplication</title>
      <link>http://www.yegor256.com/2015/07/06/public-static-literals.html</link>
      <description>&lt;p&gt;I have a &lt;code&gt;new String(array,&amp;quot;UTF-8&amp;quot;)&lt;/code&gt; in one place and exactly
the same code in another place in my app. Actually, I may have
it in many places. And every time, I have to use that &lt;code&gt;&amp;quot;UTF-8&amp;quot;&lt;/code&gt; constant
in order to create a &lt;code&gt;String&lt;/code&gt; from a byte array. It would be very
convenient to define it once somewhere and reuse it, just like Apache Commons
is doing; see &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/CharEncoding.html#UTF_8&quot;&gt;&lt;code&gt;CharEncoding.UTF_8&lt;/code&gt;&lt;/a&gt;
(There are many other static literals there).
These guys are setting a bad example! &lt;code&gt;public&lt;/code&gt; &lt;code&gt;static&lt;/code&gt;
&amp;quot;properties&amp;quot; are as bad as
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;utility classes&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/07/the-shining.jpg' style='width:600px;' alt='The Shining (1980) by Stanley Kubrick'/&gt;&lt;figcaption&gt;The Shining (1980) by Stanley Kubrick&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is what I&amp;#39;m talking about, specifically:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharEncoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UTF_8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// some other methods and properties&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, when I need to create a &lt;code&gt;String&lt;/code&gt; from a byte array, I use this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.lang3.CharEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#39;s say I want to convert a &lt;code&gt;String&lt;/code&gt; into a byte array:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.lang3.CharEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks convenient, right? This is what the designers of Apache Commons think
(one of the most popular but simply &lt;em&gt;terrible&lt;/em&gt; libraries
in the Java world). I encourage you to think differently.
I can&amp;#39;t tell you to stop using Apache Commons, because we just don&amp;#39;t have
a better alternative (yet!). But in your own code, don&amp;#39;t use public
static properties &amp;mdash; ever. Even if this code may look convenient to you,
it&amp;#39;s a very bad design.&lt;/p&gt;

&lt;p&gt;The reason why is very similar to
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;utility classes&lt;/a&gt;
with public static
methods &amp;mdash; they are unbreakable hard-coded dependencies. Once you
use that &lt;code&gt;CharEncoding.UTF_8&lt;/code&gt;, your object starts to depend on this
data, and its user (the user of your object) can&amp;#39;t break this dependency. You may say that
this is your intention, in the case of a &lt;code&gt;&amp;quot;UTF-8&amp;quot;&lt;/code&gt; constant &amp;mdash; to make
sure that Unicode is specifically and exclusively being used. In this particular
example, this may be true, but look at it from a more global perspective.&lt;/p&gt;

&lt;p&gt;Let me show you the alternative I have in mind before we continue.
Here is what I&amp;#39;m suggesting instead to convert a byte array
into a &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UTF8String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s pseudo-code, since Java designers made class &lt;code&gt;String&lt;/code&gt; final and we
can&amp;#39;t really extend it and create &lt;code&gt;UTF8String&lt;/code&gt;, but you get the idea. In the real
world, this would look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UTF8String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, we encapsulate the &amp;quot;UTF-8&amp;quot; constant somewhere inside the class
&lt;code&gt;UTF8String&lt;/code&gt;, and its users have no idea how exactly this &amp;quot;byte array to string&amp;quot;
conversion is happening.&lt;/p&gt;

&lt;p&gt;By introducing &lt;code&gt;UTF8String&lt;/code&gt;, we solved the problem of &amp;quot;UTF-8&amp;quot;
literal duplication. But we did it in a proper object-oriented way &amp;mdash;
we encapsulated the functionality inside a class and let everybody
instantiate its objects and use them. We resolved the problem of functionality
duplication, not just data duplication.&lt;/p&gt;

&lt;p&gt;Placing data into one shared place (&lt;code&gt;CharEncoding.UTF_8&lt;/code&gt;)
doesn&amp;#39;t really solve the duplication problem; it actually makes it worse, mostly
because it encourages everybody to duplicate functionality using the same
piece of shared data.&lt;/p&gt;

&lt;p&gt;My point here is that every time you see that you have some data duplication
in your application, start thinking about the functionality you&amp;#39;re duplicating.
You will easily find the code that is repeated again and again. Make a new
class for this code and place the data there, as a &lt;code&gt;private&lt;/code&gt; property (or private
&lt;code&gt;static&lt;/code&gt; property). That&amp;#39;s how you will improve your design and truly get rid
of duplication.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/07/06/public-static-literals.html</guid>
      <dc:date>2015-07-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>The Better Architect You Are, The Simpler Your Diagrams</title>
      <link>http://www.yegor256.com/2015/06/29/simple-diagrams.html</link>
      <description>&lt;p&gt;I don&amp;#39;t even know where to start. Let&amp;#39;s begin with this:
&lt;strong&gt;If I don&amp;#39;t understand you, it&amp;#39;s your fault&lt;/strong&gt;. This has to be
the most basic, fundamental principle of a good software architect (well,
of any engineer), but most of the architects I&amp;#39;ve met so far, in many
companies, don&amp;#39;t seem to believe in it. They don&amp;#39;t understand that
the job of a software architect is &lt;em&gt;to make complex things simple&lt;/em&gt;,
not the other way around. They use diagrams, which are the most
popular instruments of an architect, to explain to us, programmers,
what he or she has in mind. But the diagrams are usually very cryptic
and hard to digest. What&amp;#39;s worse is that the complexity goes up
in line with their salaries &amp;mdash;
it&amp;#39;s disgusting.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/06/a-beautiful-mind.jpg' style='width:600px;' alt='A Beautiful Mind (2001) by Ron Howard'/&gt;&lt;figcaption&gt;A Beautiful Mind (2001) by Ron Howard&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Why is this happening? Why are their diagrams complex and difficult to read?
I&amp;#39;m sure you know what I&amp;#39;m talking about; you probably have your own examples
of such diagrams from projects and architects you&amp;#39;ve worked with. So why do we have them?&lt;/p&gt;

&lt;p&gt;Architects are &lt;strong&gt;proud of complexity&lt;/strong&gt;, that&amp;#39;s why. They think that
the more complex the problem they&amp;#39;re working with, the better an engineer
they are. I&amp;#39;ve had this dialog many times:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- You know, your diagram looks so complex ...
- Oh yeah, we&amp;#39;re solving complex problems here!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Usually, after that, the architect smiles with an obvious feeling of satisfaction.
Indeed, someone actually noticed how difficult his job is and appreciated
his efforts. Someone is stupid, and he is smart. He can understand this
multi-tier architecture, and I can&amp;#39;t. He definitely earns my respect, right?&lt;/p&gt;

&lt;p&gt;Wrong! A good architect knows his main role is to decompose a complex problem
into less complex components and let programmers solve them one by one. Just as
a good project manager has to decompose a complex task into smaller ones.
When the problem is properly decomposed (broken down into smaller, isolated
and properly decoupled pieces), the complexity &lt;em&gt;decreases&lt;/em&gt;, and it becomes
easier for everybody to understand and resolve.&lt;/p&gt;

&lt;p&gt;The main virtue of an architect is the ability to &lt;em&gt;reduce&lt;/em&gt; complexity. Thus,
a good architect would never be proud of a complex diagram. Instead, he would
be proud of a simple and easy-to-understand drawing with a few rectangles that
perfectly explain an entire multi-tier application. That is what
is really difficult to do. That&amp;#39;s where a true architectural mind shines.&lt;/p&gt;

&lt;p&gt;There are not many architects like that. I can&amp;#39;t say I&amp;#39;m one of them yet,
but I have a few recommendations for your diagrams. Read on and remember
that the main goal of all this is to &lt;strong&gt;reduce complexity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No More Than Five Rectangles&lt;/strong&gt;.
If you have more, there is something wrong. Try to explain yourself
in less than five. Just group some of them together and give it a name.
You don&amp;#39;t want me to spend more than a few seconds trying to understand who
is participating in the show you&amp;#39;re presenting. I want to see them
all at one glance and immediately understand who is who. I just made up
the number five, but you get the idea &amp;mdash; make sure all diagram participants
are easy to count. I&amp;#39;ve seen diagrams with 25 or more rectangles ... that&amp;#39;s unacceptable.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0321193687/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321193687&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=OAN3SZQEKQYKPSZX'&gt;&lt;img src='http://www.yegor256.com/images/2015/06/uml-distilled-book.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Use UML&lt;/strong&gt;.
Well, use whatever notation you feel comfortable with, but many years ago
people agreed that instead of using different notations, it would be easier
to learn one for all; that&amp;#39;s &lt;a href=&quot;http://www.uml.org/&quot;&gt;UML&lt;/a&gt;.
It&amp;#39;s a huge format/standard/language,
but you don&amp;#39;t need to know all of it. Just learn the basics; that will be
enough to express almost any idea you have. I would recommend
&lt;a href=&quot;http://www.amazon.com/gp/product/0321193687/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321193687&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=OAN3SZQEKQYKPSZX&quot;&gt;UML Distilled: A Brief Guide to the Standard Object Modeling Language (3rd Edition)&lt;/a&gt;
by Martin Fowler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Direct and Annotate Lines&lt;/strong&gt;.
There is nothing more annoying on a diagram than a line connecting two
rectangles without any text on it and without any direction. Is it a flow
of data? Is it a compile-time dependency? There are many possible meanings.
Always use arrows, and always annotate them &amp;mdash; this will help me
understand you much faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Use Colors&lt;/strong&gt;.
Or let me put it this way: Don&amp;#39;t abuse colors. And in order to avoid abusing
them, you be better off staying away from colors in the first place. If you need
to use colors, there must be something wrong with your diagram. It&amp;#39;s probably
too complex; that&amp;#39;s why you need to use colors. Simplify it by grouping elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Creative&lt;/strong&gt;.
It&amp;#39;s not art; it&amp;#39;s engineering. You don&amp;#39;t need to impress me; you need
to deliver the message. Your goal is not to show how sophisticated your mind is.
Moreover, your diagram style should not be personal. A diagram from you and
a diagram from another architect should look almost exactly the same if they
deliver the same message. It&amp;#39;s call uniformity. That&amp;#39;s how you make them
easier for me to understand. I don&amp;#39;t want to have to learn your personality
in order to understand your diagram. If it&amp;#39;s a server, draw a
rectangle. There&amp;#39;s no need to put a 3D picture of an HP server there.
A rectangle is enough. Also, please no shades, no fonts, and no styles.
Again, it&amp;#39;s not an artistic contest. I will understand your rectangle
pretty well without that &amp;quot;nice&amp;quot; shadow you&amp;#39;re tempted to drop. I will also
understand an arrow with a default width; no need to make it wider just
because your diagram editor allows you to. Don&amp;#39;t waste your time and my
time on all this styling. Just focus on those simple lines, rectangles, text,
and arrows.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;As I mentioned above, the goal of all this is to reduce complexity
and help me, a programmer, understand you, an architect. Remember,
if I can&amp;#39;t understand you, it&amp;#39;s your fault. You&amp;#39;re a bad architect
if you can&amp;#39;t deliver your ideas in a plain, simple form.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 29 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/06/29/simple-diagrams.html</guid>
      <dc:date>2015-06-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>XML Data and XSL Views in Takes Framework</title>
      <link>http://www.yegor256.com/2015/06/25/xml-data-xsl-views-takes-framework.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.takes.org'&gt;&lt;img src='http://www.takes.org/logo.png' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;A year ago, I &lt;a href=&quot;/2014/06/25/xml-and-xslt-in-browser.html&quot;&gt;tried to explain&lt;/a&gt;
how effectively data and its presentation can be separated
in a web applicatoin with the help of XML and XSL. In a few words,
instead of using &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_web_template_engines&quot;&gt;templating&lt;/a&gt;
(like JSP, Velocity, FreeMarker, etc.) and injection of data into HTML,
we compose them in the form of an XML document and then let
the XSL stylesheet transform them into HTML. Here is a brief example
of how all this can be used together with the &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes framework&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, let&amp;#39;s agree that templating is a bad idea in the first place. Yes, I mean
it. The entire design of JSP is wrong, with all due respect to its creators.
Here is how it works: Let&amp;#39;s say my website has to fetch the current exchange rate of
the euro from a database and show it on the home page. Here&amp;#39;s how my &lt;code&gt;index.jsp&lt;/code&gt;
would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsp&quot; data-lang=&quot;jsp&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;EUR/USD: &lt;span class=&quot;k&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to create HTML, the JSP engine will have to call &lt;code&gt;get()&lt;/code&gt; on object
&lt;code&gt;rates&lt;/code&gt; and render what&amp;#39;s returned through &lt;code&gt;toString()&lt;/code&gt;. It&amp;#39;s a terrible
design for a few reasons. First, the view is tightly coupled with the model.
Second, the flexibility of rendering is very limited. Third, the result of
rendering is not reusable, and views are not stackable. There are many other
reasons ... more about them in one of the next articles.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s see how this should be done right. First, we let our model generate
the output in XML format, for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.1&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;page&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;rate&amp;gt;&lt;/span&gt;1.1324&lt;span class=&quot;nt&quot;&gt;&amp;lt;/rate&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/page&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is what the model will produce, having no knowledge of the view. Then,
we create the view as an XSL stylesheet, which will transform XML into HTML:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns:xsl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;EUR/USD: &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rate&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, the view doesn&amp;#39;t know anything about the model in terms of
implementation. All it knows is the format of XML data output produced
by the model. Here is how you design it in the &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes framework&lt;/a&gt;.
Let&amp;#39;s start with a simple example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.http.Exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.http.FtCLI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FtCLI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NEVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s a simple web application that starts a web server
and never ends (it waits for connections in daemon mode). To make it work,
we should create a simple &amp;quot;take&amp;quot; named &lt;code&gt;TkApp&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.Take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.tk.TkWrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TkWrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;page&amp;gt;&amp;lt;rate&amp;gt;1.1324&amp;lt;/rate&amp;gt;&amp;lt;/page&amp;gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;application/xml&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &amp;quot;take&amp;quot; always returns the same XML response, but it doesn&amp;#39;t
do any XSL transformation yet. We need to add the &lt;code&gt;RsXSLT&lt;/code&gt; class to the picture:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsXSLT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;?xml-stylesheet type=&amp;#39;text/xsl&amp;#39; href=&amp;#39;/xsl/index.xsl&amp;#39;?&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;page&amp;gt;&amp;lt;rate&amp;gt;1.1324&amp;lt;/rate&amp;gt;&amp;lt;/page&amp;gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;application/xml&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Excuse me for using string concatenation, which is a
&lt;a href=&quot;/2014/06/19/avoid-string-concatenation.html&quot;&gt;bad practice&lt;/a&gt;;
it&amp;#39;s merely for the simplicity of the example.&lt;/p&gt;

&lt;p&gt;As you see, I also added an XML stylesheet processing instruction to
the XML. RsXSLT will understand it and try to find the &lt;code&gt;/xsl/index.xsl&lt;/code&gt;
resource on classpath. You see the content of that file above.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;Well, not really. Building XML from strings is not a good idea. We
have a better instrument in the Takes framework. We use &lt;a href=&quot;http://www.xembly.org&quot;&gt;Xembly&lt;/a&gt;,
which is a simple imperative language for building and modifying
XML documents. More about it here:
&lt;a href=&quot;/2014/04/09/xembly-intro.html&quot;&gt;Xembly, an Assembly for XML&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is how our &lt;code&gt;TkApp&lt;/code&gt; would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsXSLT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsXembly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XeChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XeStylesheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/xsl/index.xsl&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XeAppend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XeDirectives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Directives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rate&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.1324&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;application/xml&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The most important class here is
&lt;a href=&quot;http://www.takes.org/apidocs-0.16.9/org/takes/rs/xe/RsXembly.html&quot;&gt;&lt;code&gt;RsXembly&lt;/code&gt;&lt;/a&gt;.
The idea is to let
model classes expose their data through Xembly &amp;quot;directives,&amp;quot; which
will later be applied to a DOM structure by &lt;code&gt;RsXembly&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;XeChain&lt;/code&gt;, &lt;code&gt;XeStylesheet&lt;/code&gt;, &lt;code&gt;XeAppend&lt;/code&gt;, and &lt;code&gt;XeDirectives&lt;/code&gt; expose
directives but with different meanings
(they are all instances of an &lt;code&gt;XeSource&lt;/code&gt; interface).
Their names describe their
intentions rather well.
&lt;a href=&quot;http://www.takes.org/apidocs-0.16.9/org/takes/rs/xe/XeChain.html&quot;&gt;&lt;code&gt;XeChain&lt;/code&gt;&lt;/a&gt;
just chains everything that is
delivered by encapsulated &amp;quot;directive sources.&amp;quot;
&lt;a href=&quot;http://www.takes.org/apidocs-0.16.9/org/takes/rs/xe/XeStylesheet.html&quot;&gt;&lt;code&gt;XeStylesheet&lt;/code&gt;&lt;/a&gt;
returns directives that create a single XML processing instruction.
&lt;a href=&quot;http://www.takes.org/apidocs-0.16.9/org/takes/rs/xe/XeAppend.html&quot;&gt;&lt;code&gt;XeAppend&lt;/code&gt;&lt;/a&gt;
creates an XML node and adds encapsulated directives to it.
&lt;a href=&quot;http://www.takes.org/apidocs-0.16.9/org/takes/rs/xe/XeDirectives.html&quot;&gt;&lt;code&gt;XeDirectives&lt;/code&gt;&lt;/a&gt;
simply returns what&amp;#39;s inside.&lt;/p&gt;

&lt;p&gt;In the end, this code will create exactly the same XML document
as I created above with string concatenation.&lt;/p&gt;

&lt;p&gt;The beauty of this approach is in the perfect decoupling of data generation
and XML building and translation between XML and HTML. It is perfectly reusable
and &amp;quot;stackable.&amp;quot; We can transform the data in XML format multiple times,
applying different XSL stylesheets to each one. We can even transform them into
JSON without changing a line of code in model classes.&lt;/p&gt;

&lt;p&gt;Moreover, we can format them differently, using rather powerful XSLT 2.0
instruments. XSLT by itself is a powerful and purely functional language that
enables any possible data manipulations. No templating engine is even close
to it.&lt;/p&gt;

&lt;p&gt;Take a look at how it works in the
&lt;a href=&quot;https://github.com/yegor256/rultor/blob/1.55/src/main/java/com/rultor/web/RsPage.java&quot;&gt;&lt;code&gt;RsPage&lt;/code&gt;&lt;/a&gt;
class in Rultor, for example.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/06/25/xml-data-xsl-views-takes-framework.html</guid>
      <dc:date>2015-06-25T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>A Few Valid Reasons to Reject a Bug Fix</title>
      <link>http://www.yegor256.com/2015/06/22/valid-reasons-to-reject-bug-fix.html</link>
      <description>&lt;p&gt;A bug exists when something doesn&amp;#39;t work as expected. A &lt;em&gt;bug
fix&lt;/em&gt; is basically a patch (a pull request) to the existing code base that
is supposed to solve the problem and make sure that &amp;quot;something&amp;quot;
works as expected. Very often, such a patch fixes one thing
and breaks many others. I believe that sometimes it&amp;#39;s necessary to &lt;strong&gt;reject&lt;/strong&gt;
a bug fix and ask its author to re-do the patch in order to
protect the project from bigger problems. There are a few
valid reasons for such a rejection, according to my experience.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/06/crimen-ferpecto.jpg' style='width:600px;' alt='El Crimen Perfecto (2004) by Álex de la Iglesia'/&gt;&lt;figcaption&gt;El Crimen Perfecto (2004) by Álex de la Iglesia&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;it-degrades-code-coverage&quot;&gt;It Degrades Code Coverage&lt;/h2&gt;

&lt;p&gt;This is a very common situation: After the changes are made in one place,
unit tests fail in some other place. The bug is fixed, but some possibly
unrelated unit tests start to report failure. Under pressure or simply because
we&amp;#39;re lazy, we don&amp;#39;t fix them; we simply remove the tests or mark them
as temporarily &amp;quot;skipped.&amp;quot; The problem is solved, the build is clean, so let&amp;#39;s
merge the patch and call it a day, right? Wrong!&lt;/p&gt;

&lt;p&gt;Even though I&amp;#39;m in favor of &lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;cutting corners&lt;/a&gt;
as much as possible, this is the corner I don&amp;#39;t recommend you cut.&lt;/p&gt;

&lt;p&gt;The unit tests are there precisely to prevent us from breaking the
product when under pressure.&lt;/p&gt;

&lt;p&gt;Obviously, there are situations when the unit tests are wrong and
we have to delete them. In those cases, don&amp;#39;t forget to create new ones.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=D2WNVUW64RHDRGSC'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-legacy.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;There are also situations when the bug must be fixed in a few minutes
to put the system back online and fixing all unit tests will take an hour.
Such a situation is a strong indicator that you&amp;#39;ve got a terrible underlying
situation with test coverage in the product. There&amp;#39;s no doubt that we have to make
a fix and ask our tests to shut up for some time. But in this case, make sure
the next task your team is working on after the bug fix is released is
correcting those disabled unit tests. I would recommend reading
&lt;a href=&quot;http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=D2WNVUW64RHDRGSC&quot;&gt;Working Effectively With Legacy Code&lt;/a&gt;
by Michael Feathers, which tackles this very subject.&lt;/p&gt;

&lt;h2 id=&quot;it-doesn&amp;#39;t-reproduce-the-issue&quot;&gt;It Doesn&amp;#39;t Reproduce the Issue&lt;/h2&gt;

&lt;p&gt;Sometimes the entire system may be down simply because of a small
typo in one line of code. An obvious bug fix is to remove the typo, but
that&amp;#39;s not what a good project is expecting from us if we care about its
quality. The problem is not the typo but rather the absence of unit tests
that would catch the typo at the deployment phase.&lt;/p&gt;

&lt;p&gt;The real problem is the lack of test code coverage in this particular
section of the code. By removing the typo, we&amp;#39;re not helping the project
in any way. Moreover, we&amp;#39;re doing it a disservice &amp;mdash; we&amp;#39;re &lt;em&gt;concealing&lt;/em&gt;
the real problem.&lt;/p&gt;

&lt;p&gt;Thus, no matter how small or cosmetic the issue is, its bug fix
must contain an extra test that first reproduces the bug. Without such
a test, a bug fix is a waste of the project&amp;#39;s money.&lt;/p&gt;

&lt;p&gt;Furthermore, without a unit test reproducing the issue, there is no
guarantee that our bug fix doesn&amp;#39;t introduce more bugs. I would even say that
the more bug fixes we have, the higher the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Entropy_%28information_theory%29&quot;&gt;entropy&lt;/a&gt;.
And the only way to decrease this uncertainty is by covering the
code with unit tests. Without a test, a bug fix brings more disorder
to the code base.&lt;/p&gt;

&lt;h2 id=&quot;it-is-too-big&quot;&gt;It Is Too Big&lt;/h2&gt;

&lt;p&gt;Bug fixes are &lt;em&gt;not features&lt;/em&gt;; they must be small and focused. It&amp;#39;s a very
typical mistake for programmers to get carried away while fixing a
bug and introduce some refactoring together with a fix. The result is that the
patch gets rather big and difficult to understand. I&amp;#39;m not against refactoring; it&amp;#39;s
a very important and positive thing for a project, but do it separately
&lt;em&gt;after&lt;/em&gt; the bug is fixed and merged.&lt;/p&gt;

&lt;p&gt;No refactoring while fixing a bug!&lt;/p&gt;

&lt;p&gt;Create a new unit test, reproduce the bug, and commit it. Fix the bug
in the existing code base, no matter how ugly it is. Create new
bugs, asking the team to improve the situation with the ugly code base.
If interested, assign those bugs to yourself. Or maybe somebody else
will be interested in fixing them and refactoring the code. But all that
will happen later in other pull requests with new code reviews
and new merges.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not about being lazy and unwilling to fix what looks bad. It&amp;#39;s about
a discipline, which is &lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;much more important&lt;/a&gt;
than good intentions.&lt;/p&gt;

&lt;h2 id=&quot;it-solves-more-than-one-issue&quot;&gt;It Solves More Than One Issue&lt;/h2&gt;

&lt;p&gt;Always fix one issue at a time &amp;mdash; simple as that. No exceptions. When
a bug fix patch contains code changes that fix multiple issues, it is
very difficult to understand which issue is tested, which one is reproduced,
and how they relate to each other. Combining several bug fixes into a single
pull request is a very bad practice.&lt;/p&gt;

&lt;p&gt;No matter how simple the fix is, keep it separate from others.
Review, test, and merge it individually. This will also increase the
traceability of changes. It will always be easy to understand who made
that fix, who reviewed the code, and when it was merged (and deployed).&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/06/22/valid-reasons-to-reject-bug-fix.html</guid>
      <dc:date>2015-06-22T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Good Programmers Write Bug-Free Code, Don't They?</title>
      <link>http://www.yegor256.com/2015/06/18/good-programmers-bug-free.html</link>
      <description>&lt;p&gt;Good programmers create fewer bugs while bad programmers cause more. Sounds
logical, doesn&amp;#39;t it? However, there is a lot of criticism of this way of
thinking. Take this one, for example: Bugs are inevitable, and
instead of expecting fewer bugs from us, let us focus on the right design
and let testers find and report bugs; then we&amp;#39;ll fix them. Or this one:
Being afraid to make a mistake makes me write slower and experiment less,
which translates into lower-quality software. Read more about that
&lt;a href=&quot;http://programmers.stackexchange.com/questions/41248&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;http://www.joelonsoftware.com/articles/fog0000000067.html&quot;&gt;here&lt;/a&gt;.
But allow me to look at this from a different perspective and assert
that yes, indeed, good programmers create &lt;em&gt;fewer&lt;/em&gt; bugs.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/06/sabotage.jpg' style='width:600px;' alt='Sabotage! (2000) by Esteban and Jose Miguel Ibarretxe'/&gt;&lt;figcaption&gt;Sabotage! (2000) by Esteban and Jose Miguel Ibarretxe&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I think this is all about how we define &lt;em&gt;quality&lt;/em&gt; and what a &lt;em&gt;bug&lt;/em&gt; is.&lt;/p&gt;

&lt;p&gt;If we look at a traditional and very &amp;quot;intuitive&amp;quot; definition of a bug,
it is something that causes our software to produce an incorrect
or unexpected result. However, if we think more about how the
software is actually used and by whom, we&amp;#39;ll see that there are many other
types of bugs, including scalability, reliability, and even
maintainability ones.&lt;/p&gt;

&lt;p&gt;If we put all those &amp;quot;-ilities&amp;quot; in a list and prioritize them by
their severity and importance to the business, we&amp;#39;ll see that
functionality-related bugs are rather far from the top.
I would actually put &lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;maintainability&lt;/a&gt;
at the top.&lt;/p&gt;

&lt;p&gt;My point is that mistakes are not all equal. If I&amp;#39;m writing a PDF report
generated by a piece of Java code and my report misses the footer, that&amp;#39;s one
type of bug, and its fix will cost the business X dollars.
On the other hand, if my PDF generation code is so difficult to modify that
in order to change its format from &lt;a href=&quot;http://en.wikipedia.org/wiki/Paper_size&quot;&gt;A4&lt;/a&gt; to
&lt;a href=&quot;http://en.wikipedia.org/wiki/Letter_%28paper_size%29&quot;&gt;US Letter&lt;/a&gt; we have
to rewrite it from scratch, that&amp;#39;s a completely different type of bug.
Needless to say, its fixing will be many times more expensive.&lt;/p&gt;

&lt;p&gt;So yes, mistakes are inevitable. We should not be afraid of them and
be ready to make them. However, good programmers make &lt;strong&gt;cheaper&lt;/strong&gt; mistakes
in order to avoid making more expensive ones.&lt;/p&gt;

&lt;p&gt;Good programmers understand that in the limited amount of time we usually
have to implement the software, we have to sacrifice functionality
in order to gain maintainability. Ideally, you want to achieve both, but
in reality, it&amp;#39;s next to impossible.&lt;/p&gt;

&lt;p&gt;We all work under pressure, and we have time and money constraints. Within these
constraints, good programmers prefer to make functionality buggy and incomplete
while keeping the design clean and easy to maintain. There are exceptions, of
course, where the business prioritizes functionality above everything else,
but such situations happen very rarely (if the business is smart).&lt;/p&gt;

&lt;p&gt;To summarize, I think that a good programmer makes more
functional bugs than a bad programmer, though the bugs made by a bad programmer
are more expensive than bugs made by a good programmer.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/06/18/good-programmers-bug-free.html</guid>
      <dc:date>2015-06-18T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Software Outsourcing Survival Guide</title>
      <link>http://www.yegor256.com/2015/06/15/software-outsourcing-survival-guide.html</link>
      <description>&lt;p&gt;Software outsourcing is what you go for when you want to create
a software product but software engineering is not your core
competence. It&amp;#39;s a smart business practice being employed by everyone
from $1,000 personal website owners to Fortune 100 monsters.
And all of them fail, to some extent. Actually, it&amp;#39;s very difficult
not to fail. Here is my list of simple hints to everyone who
decides to outsource software development (the most important ones are
at the bottom). I wish someone would have given it to me 15 years ago.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/06/u-turn.jpg' style='width:600px;' alt='U Turn (1997) by Oliver Stone'/&gt;&lt;figcaption&gt;U Turn (1997) by Oliver Stone&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Have a &amp;quot;Work for Hire&amp;quot; Agreement&lt;/strong&gt;.
Make sure the contract you have with the software outsourcing team
includes something like this: &amp;quot;Parties shall deem all deliverables created by
the developer as &lt;em&gt;works made for hire&lt;/em&gt; as is defined under the
&lt;a href=&quot;http://www.copyright.gov/title17/&quot;&gt;Copyright Law of the United States&lt;/a&gt;&amp;quot;.
This is the shortest and easiest definition of &amp;quot;whatever you create
for me is mine&amp;quot;. Put this into the contract and the outsourcing company
won&amp;#39;t be able to claim that the software it created belongs to it,
which happens here and there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Own Your Source Code Repository&lt;/strong&gt;.
Make sure the source code repository is under your control. The best
way to do this is to create a private GitHub repository for
&lt;a href=&quot;https://github.com/pricing&quot;&gt;$7 per month&lt;/a&gt;. The repository will be visible and
accessible only by you and your outsourcing team. Moreover, make sure
the team has read-only access and can&amp;#39;t change the code directly except
through pull requests. In Git, it&amp;#39;s possible to destroy the entire history
with a single &amp;quot;forced&amp;quot; push to the &lt;code&gt;master&lt;/code&gt; branch. So it would be much better
for you to be the only person with write access. To make life simpler,
I would recommend you use &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;Rultor&lt;/a&gt;
as a tool for merging those pull requests semi-automatically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regularly Collect Metrics&lt;/strong&gt;.
Ask your outsourcing team members to regularly collect metrics from the software
they create and send you them somehow (by email, maybe). I would recommend using
&lt;a href=&quot;/2014/11/14/hits-of-code.html&quot;&gt;Hits-of-Code&lt;/a&gt;,
unit test coverage (or just the total number of unit tests), tickets opened and closed,
and build duration. I&amp;#39;m talking here about process metrics. This is not what
you&amp;#39;re already getting from NewRelic. These metrics will measure the
performance of the team, not of the product under development. I&amp;#39;m not saying
you should manage the team by the metrics, but you have to keep
an eye on these numbers and their dynamics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conduct Independent Technical Reviews&lt;/strong&gt;.
I wrote about these already in my
&lt;a href=&quot;/2014/12/18/independent-technical-reviews.html&quot;&gt;You Do Need Independent Technical Reviews!&lt;/a&gt;
post a few months ago. The importance of such reviews is difficult
to overrate. In software outsourcing, they are especially crucial.
Actually, this is the best and likely only way of collecting
objective information about the software you&amp;#39;re getting from the outsourcer.
Don&amp;#39;t rely on reports, promises, guarantees, and extensive documentation.
Instead, hire someone else on an hourly basis and ask that person
to review what your outsourcing partner is developing. Do such reviews
regularly and systematically. Don&amp;#39;t be afraid to offend your programmers.
Honestly explain the reviewer&amp;#39;s concerns to them. If they are professionals, they
will understand and respect your business objectives.
You can also show them this article :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automate and Control Deployment&lt;/strong&gt;.
Ask your outsourcing team to automate the entire deployment pipeline and
keep it under your control. I would recommend you do this during the first
days of the project. This means the product should be compiled, tested,
packaged, installed, and deployed to a production repository (or server/s) by
a single click. Some script should be created to automate this chain
of operations. That&amp;#39;s what your outsourcing partner has to create for you.
Then, when development starts, every time a new change is made to the
repository that has to be deployed to production, the same script has
to be executed. What is important here is that you should know how
this script works and how to run it. You should be able to build and deploy your
product by yourself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demand Weekly Releases&lt;/strong&gt;.
Don&amp;#39;t wait for the final version. Ask your outsourcing team to release
a new version every week. No matter how intensive the development is and
how many features are &amp;quot;in progress&amp;quot;, it&amp;#39;s always possible to package
a new version and release it. If the development is really intensive,
ask your team to use GitFlow or something similar to isolate a stable
production branch from development branches. But don&amp;#39;t wait! Make sure
you see your software packaged and deployed every single week, no exceptions
and no excuses. If your outsourcing team can&amp;#39;t give that to you, start worrying
and change something.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hire an Independent CTO&lt;/strong&gt;.
This advice is mostly for small companies or individuals who outsource
software development and rely on their expertise while staying focused
on their own business development. That&amp;#39;s unwise; you should have an independent
chief technical officer (CTO) who reports to you and controls how the
outsourcing team works. This person must be on a different payment
schedule with different goals, terms, and objectives. You should talk to
the CTO and the CTO should control the offshore team. Very often,
business owners try to become software savvy and control the software
team directly, learning their software jargon, principles of DevOps,
and even Java syntax (I&amp;#39;ve seen that). This is a route to failure.
Be smart &amp;mdash; you do the business development, the CTO reports to you,
and the software team reports to the CTO.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Define Rewards and Punishments&lt;/strong&gt;.
There is no management without these two key components. You&amp;#39;re not supposed
to manage all programmers in the outsourcing shop, but you have to manage
the entire shop as a single unit of control. You have to give them some
structure of motivation. They have to know what will happen to them
if they succeed and how much they will suffer if they fail. If you don&amp;#39;t
make this mechanism explicit, you will deal with an implicit version of it
where your chances of winning are very low. Most people assume the best
and only motivation for a software team is to stay on the project. You&amp;#39;re
paying them and that&amp;#39;s enough, right? Wrong. Management can&amp;#39;t be effective
when a monthly bank transfer is a reward and its absence is a punishment.
It is too coarse-grained; that&amp;#39;s why it&amp;#39;s absolutely ineffective. Find a better and
more fine-grained mechanism. This post may help:
&lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;Why Monetary Awards Don&amp;#39;t Work&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/06/15/software-outsourcing-survival-guide.html</guid>
      <dc:date>2015-06-15T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Wikipedia's Definition of a Software Bug Is Wrong</title>
      <link>http://www.yegor256.com/2015/06/11/wikipedia-bug-definition.html</link>
      <description>&lt;p&gt;Here is what &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_bug&quot;&gt;Wikipedia says&lt;/a&gt;
at the time of this writing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A software bug is an error, flaw, failure, or fault
in a computer program or system that causes it
to produce an incorrect or unexpected result or
to behave in unintended ways.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think that&amp;#39;s incomplete. The definition entirely excludes &amp;quot;non-behavioral&amp;quot;
defects related to, for example, &lt;strong&gt;maintainability&lt;/strong&gt; and &lt;strong&gt;reusability&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;As you know, every piece of software has &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_requirement&quot;&gt;functional&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Non-functional_requirement&quot;&gt;non-functional&lt;/a&gt;
requirements.
Functional requirements tell us &lt;em&gt;what&lt;/em&gt; the software has to do, and non-functional
requirements document &lt;em&gt;how&lt;/em&gt; it has to do it. For example, here is a functional
requirement:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The user can generate a PDF report.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If our software doesn&amp;#39;t generate a PDF report and crashes instead,
that&amp;#39;s a functional bug. If instead of a PDF report, it generates an empty
page or a plain text document, that&amp;#39;s a functional bug. If there
is no &amp;quot;generate PDF report&amp;quot; button at all and the user simply can&amp;#39;t start
the PDF generation process, that&amp;#39;s a functional bug.&lt;/p&gt;

&lt;p&gt;Here is an example of a non-functional requirement:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PDF report generation must take less than 100ms.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If our software generates a perfectly correct PDF report but it
takes a minute, that&amp;#39;s a non-functional bug.&lt;/p&gt;

&lt;p&gt;So far so good, since the bug definition given by Wikipedia perfectly
covers both of them &amp;mdash; if they happen, they will cause our software
&amp;quot;to &lt;em&gt;produce&lt;/em&gt; an incorrect or unexpected result or to &lt;em&gt;behave&lt;/em&gt; in an unintended way.&amp;quot;
The emphasis here is on the words &amp;quot;produce&amp;quot; and &amp;quot;behave.&amp;quot; They presume
the software is doing something and we&amp;#39;re observing its behavior.&lt;/p&gt;

&lt;p&gt;However, that&amp;#39;s not all of it.&lt;/p&gt;

&lt;p&gt;What about maintainability? I may have this kind of non-functional requirement:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The source code of the PDF generator must be
easy to maintain and extend for an average
Java programmer.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s a rather vague requirement, but you get the idea.&lt;/p&gt;

&lt;p&gt;Maintainability and reusability are very critical non-functional components
of any modern software program, especially taking into account a very high
cost of labor in the market. Very often, it&amp;#39;s more important to make sure
the software is maintainable than fast. If it&amp;#39;s maintainable and slow, we
can find new programmers to &lt;em&gt;improve&lt;/em&gt; the code. If it is fast
but unmaintainable, we won&amp;#39;t be able to do anything with it later and will
have to &lt;em&gt;rewrite&lt;/em&gt; it from scratch if some new feature is required.
Read more about this in
&lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;Are You a Hacker or a Designer?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The definition of a software bug given by Wikipedia doesn&amp;#39;t cover
maintainability and reusability flaws at all.
That makes for a common source of confusion &amp;mdash;
an inconsistent code style is not a bug (see the discussion under
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;this post&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;That is wrong.&lt;/p&gt;

&lt;p&gt;An inconsistent code style &lt;strong&gt;is&lt;/strong&gt; a software bug, as is incomplete documentation,
lack of documentation, code that&amp;#39;s too complex, the lack of a coding style guide,
etc.&lt;/p&gt;

&lt;p&gt;I would rewrite the software bug definition paragraph in Wikipedia like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A software bug is an error, flaw, failure, or fault
in a computer program or system that causes it
to violate at least one of its functional or
non-functional requirements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This definition looks more accurate to me.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/06/11/wikipedia-bug-definition.html</guid>
      <dc:date>2015-06-11T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Seven Deadly Sins of a Software Project</title>
      <link>http://www.yegor256.com/2015/06/08/deadly-sins-software-project.html</link>
      <description>&lt;p&gt;&lt;em&gt;Maintainability&lt;/em&gt; is the &lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;most valuable virtue&lt;/a&gt;
of modern software development.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Maintainability&quot;&gt;Maintainability&lt;/a&gt;
can basically be measured as the working time required for
a new developer to learn the software before he or she can start making
serious changes in it. The longer the time, the lower the maintainability.
In some projects, this time requirement is close to infinity, which means it is
literally unmaintainable. I believe there are seven fundamental and fatal
&lt;strong&gt;sins&lt;/strong&gt; that make our software unmaintainable. Here they are.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;anti-patterns&quot;&gt;Anti-Patterns&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/06/software-project-sins-1.gif' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, the programming languages we&amp;#39;re using are too &lt;em&gt;flexible&lt;/em&gt;.
They allow too much and forbid too little. For example, Java has nothing
against you placing the entire application in one single &amp;quot;class&amp;quot;
with a few thousand methods. Technically, the application will compile
and run. But it&amp;#39;s a well-known anti-pattern called a
&lt;a href=&quot;https://en.wikipedia.org/wiki/God_object&quot;&gt;God object&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thus, an &lt;a href=&quot;https://en.wikipedia.org/wiki/Anti-pattern&quot;&gt;anti-pattern&lt;/a&gt;
is a technically acceptable way of designing things that is
commonly agreed to be wrong. There are many anti-patterns in each
language. Their presence in your product is similar to a tumor in
a living organism. Once it starts to grow, it&amp;#39;s very difficult to stop.
Eventually, the entire body dies. Eventually, the entire software becomes
unmaintainable and has to be re-written.&lt;/p&gt;

&lt;p&gt;Once you let a few anti-patterns in, you will eventually get more of them,
and the &amp;quot;tumor&amp;quot; will only grow.&lt;/p&gt;

&lt;p&gt;This is especially true for object-oriented languages (Java, C++, Ruby, and Python),
mostly because they inherit so much from procedural languages (C, Fortran, and COBOL).
And because OOP developers tend to think in a procedural and imperative way.
Unfortunately.&lt;/p&gt;

&lt;p&gt;By the way, in addition to an existing &lt;a href=&quot;https://en.wikipedia.org/wiki/Anti-pattern&quot;&gt;list of well-known anti-patterns&lt;/a&gt;,
I also consider &lt;a href=&quot;/2014/09/10/anti-patterns-in-oop.html&quot;&gt;these few things&lt;/a&gt;
as rather bad coding approaches.&lt;/p&gt;

&lt;p&gt;My only practical suggestion here is to read and learn. Maybe
&lt;a href=&quot;/2015/04/22/favorite-software-books.html&quot;&gt;these books&lt;/a&gt; will help you.
Always try to be skeptical about the quality of your software, and don&amp;#39;t relax
when it &amp;quot;just works&amp;quot;. Like with cancer, the earlier you diagnose it, greater is
the chance to survive.&lt;/p&gt;

&lt;h2 id=&quot;untraceable-changes&quot;&gt;Untraceable Changes&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/06/software-project-sins-2.gif' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;When I look at the commit history, I should be able to tell
for every single change &lt;em&gt;what&lt;/em&gt; was changed, &lt;em&gt;who&lt;/em&gt; made a change, and
&lt;em&gt;why&lt;/em&gt; the change was made. Moreover, the time required to get those three
answers must be measured in seconds. In most projects, this is not the
case. Here are a few practical recommendations:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Always Use Tickets&lt;/strong&gt;.
No matter how small the project or its team is, even if it&amp;#39;s just yourself,
create tickets (GitHub issues) for every problem you&amp;#39;re solving. Explain
the problem briefly in the ticket and document your thinking there. Use
the ticket as temporary storage for all information related to the problem.
Post everything that could make any sense in the future, when
someone else will try to understand what those &amp;quot;few strange commits&amp;quot; were about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference Tickets in Commits&lt;/strong&gt;.
Needless to say, every commit must have a message. Commits without
messages are a very dirty practice; I won&amp;#39;t even discuss why. But just a message
is not enough. Every message must start with the number of the ticket you&amp;#39;re working
with. GitHub (I&amp;#39;m sure you are using it) will automatically link commits
and tickets, increasing &lt;em&gt;traceability&lt;/em&gt; of changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Delete Anything&lt;/strong&gt;.
Git allows us to do a &amp;quot;forced&amp;quot; push, which overwrites the entire branch that
previously existed on the server. This is just one example of how
you can destroy the history of development. Many times I&amp;#39;ve also seen
people delete their comments in GitHub discussions to make tickets look
more &amp;quot;clean&amp;quot;. That&amp;#39;s just wrong. Never delete anything; let your history
stay with you, no matter how bad (or messy) it may look to you now.&lt;/p&gt;

&lt;h2 id=&quot;ad-hoc-releases&quot;&gt;Ad Hoc Releases&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/06/software-project-sins-3.gif' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Every piece of software must be packaged before it can
be delivered to the end user. If it&amp;#39;s a Java library, it has to be
packaged as a &lt;code&gt;.jar&lt;/code&gt; file and released to some repository; if it&amp;#39;s a web
app, it has to be deployed to some platform, etc. No matter how small
or big the product is, there is always a standard procedure that
tests, packages, and deploys.&lt;/p&gt;

&lt;p&gt;An ideal solution would be to automate this procedure so
it is possible to execute it from a command line with a single command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./release.sh
...
DONE &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;took 98.7s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most projects are far from that. Their release process always
involves some magic, where the person responsible for it
(also known as a DevOp) has to click some buttons here and there, login
somewhere, check some metrics, etc. Such an &lt;em&gt;ad hoc&lt;/em&gt; release process
is still a very typical sin of the entire software engineering industry.&lt;/p&gt;

&lt;p&gt;I can give only one practical piece of advice here: Automate it. I use
&lt;a href=&quot;/2014/09/11/deployment-script-vs-rultor.html&quot;&gt;rultor.com&lt;/a&gt; for that,
but you can use whatever tools you like. What is important is that the entire
procedure is fully automated and can be executed from the command line.&lt;/p&gt;

&lt;h2 id=&quot;volunteer-static-analysis&quot;&gt;Volunteer Static Analysis&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/06/software-project-sins-4.gif' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_program_analysis&quot;&gt;Static analysis&lt;/a&gt;
is what makes our code &lt;em&gt;look&lt;/em&gt; better. And by making it
look better, we are inevitably making it &lt;em&gt;work&lt;/em&gt; better. But this happens
only when the entire team is forced (!) to follow the rules dictated by the
static analyzer(s). I&amp;#39;ve written about this in
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;Strict Control of Java Code Quality&lt;/a&gt;.
I use &lt;a href=&quot;http://www.qulice.com&quot;&gt;qulice.com&lt;/a&gt; in Java projects
and &lt;a href=&quot;https://github.com/bbatsov/rubocop&quot;&gt;rubocop&lt;/a&gt; in Ruby, but there
are many similar tools for nearly every language.&lt;/p&gt;

&lt;p&gt;You can use any of them, but make it mandatory! In most projects
where static analysis is used, developers just build nicely-looking
reports and continue to write code the way they did before. Such a &amp;quot;volunteer&amp;quot;
approach is not doing any favors for the project. Moreover, it
creates an illusion of quality.&lt;/p&gt;

&lt;p&gt;What I&amp;#39;m saying is that static analysis must be a mandatory step in
your deployment pipeline. The build can&amp;#39;t pass if any static analysis
rule is violated.&lt;/p&gt;

&lt;h2 id=&quot;unknown-test-coverage&quot;&gt;Unknown Test Coverage&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/06/software-project-sins-5.gif' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Simply put, &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_coverage&quot;&gt;test coverage&lt;/a&gt;
is the degree to which the software has been tested by unit or integration tests. The
higher the coverage, the greater &amp;quot;amount&amp;quot; of code was executed while
tests were running. Obviously, higher coverage is a good thing.&lt;/p&gt;

&lt;p&gt;However, many project developers simply don&amp;#39;t know their coverage. They just don&amp;#39;t measure
this metric. They may have some tests, but nobody knows how deeply they
penetrate the software and what parts of it are not tested at all.
This situation is much worse than low test coverage that is measured and
reported to everyone.&lt;/p&gt;

&lt;p&gt;High coverage is not a guarantee of high quality. That&amp;#39;s obvious. But unknown
coverage is a clear indicator of maintainability problems. When a new
developer enters the project, he or she should be able to make some
changes and see how coverage is affected by them. Ideally, test coverage
should be checked the same way as static analysis, and the build should
fail if it comes out lower than a certain pre-defined threshold
(usually somewhere around 80 percent).&lt;/p&gt;

&lt;h2 id=&quot;nonstop-development&quot;&gt;Nonstop Development&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/06/software-project-sins-6.gif' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;What I mean by nonstop is without milestones and releases. No matter what kind of
software you&amp;#39;re writing, you must release and versionalize it frequently.
A project without a clear release history is an unmaintainable mess.&lt;/p&gt;

&lt;p&gt;This is mostly because maintainability is all about me being able to understand you
by reading your code.&lt;/p&gt;

&lt;p&gt;When I look into the source code and its commit and release history, I have
to be able to tell what the intention of its author(s) was, what the project
was doing a year ago, where it is going now, what its roadmap is, etc. All
this information must be in the source code and, more importantly,
in Git history.&lt;/p&gt;

&lt;p&gt;Git tags and GitHub release notes are two powerful instruments that provide
me such information. Use them to their full extent. Also, don&amp;#39;t forget that
each binary version of the product must be available for immediate download.
I have to be able to download version 0.1.3 and test it right now, even
if the project is working on 3.4 at the moment.&lt;/p&gt;

&lt;h2 id=&quot;undocumented-interfaces&quot;&gt;Undocumented Interfaces&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2015/06/software-project-sins-7.gif' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Every piece of software has interfaces through which it is supposed to be used.
If it&amp;#39;s a Ruby gem, there are classes and methods that I&amp;#39;m going to
use as an end user of it. If it&amp;#39;s a web app, there are web pages
that an end user will see and control in order to use the app. Every software
project has interfaces, and they must be carefully documented.&lt;/p&gt;

&lt;p&gt;Like everything above, this is also about maintainability. As a new programmer
on a project, I will start to learn about it from its interfaces. I should be able
to understand what it does and try to use it myself.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m talking here about documentation for users, not for developers. In
general, I&amp;#39;m against documentation inside the software. Here I totally agree with
the &lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;Agile Manifesto&lt;/a&gt; &amp;mdash; working software is
much more important than comprehensive documentation. But that&amp;#39;s not referring to
&amp;quot;external&amp;quot; documentation, which is supposed to be read by users, not developers.&lt;/p&gt;

&lt;p&gt;So end-user interaction with the software must be clearly documented.&lt;/p&gt;

&lt;p&gt;If your software is a library, then its end users are software developers
who are going to use it &amp;mdash; not contribute to it but simply use it as a
&amp;quot;black box.&amp;quot;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;These are the criteria being used to evaluate the open-source projects
entered in our
&lt;a href=&quot;/award.html&quot;&gt;award&lt;/a&gt; competition.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/06/08/deadly-sins-software-project.html</guid>
      <dc:date>2015-06-08T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Much For This Software?</title>
      <link>http://www.yegor256.com/2015/06/02/how-to-estimate-sofware-cost.html</link>
      <description>&lt;p&gt;&amp;quot;Here is the specification; how much will it cost to create this software?&amp;quot;
I hear this almost every day from clients of &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;
and prospects that are planning to become our clients and outsource the software
development to us. My best answer is &amp;quot;&lt;em&gt;I don&amp;#39;t know; it depends.&lt;/em&gt;&amp;quot;
Sounds like a strange response for someone who claims
he knows what he is doing, isn&amp;#39;t it? &amp;quot;Here is the 20-page specification
that explains all the features of the product; how come you can&amp;#39;t estimate
the cost?&amp;quot; I can, but I won&amp;#39;t. Here is why.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/06/interstate-60.jpg' style='width:600px;' alt='Interstate 60: Episodes of the Road (2002) by Bob Gale'/&gt;&lt;figcaption&gt;Interstate 60: Episodes of the Road (2002) by Bob Gale&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let me ask you something else: &lt;strong&gt;Why do you need an estimate?&lt;/strong&gt;
Yes, I mean it &amp;mdash; why do you ask me how much it will cost
to develop the software for you? I can tell you why.&lt;/p&gt;

&lt;p&gt;Because you don&amp;#39;t trust me.&lt;/p&gt;

&lt;p&gt;And obviously you have good reasons for that, simply because we both
know that a software product is something that can stay in development forever
and never be finished. Look at YouTube, for example. How much do you think
it would take to create a website like this, where users are able to
upload their videos and then stream them? A few days for a good web developer.
Will it stream video? Yes, it will. Will it be ready to compete with YouTube?
No, it won&amp;#39;t. Add a few hundred developers to the team, a few years, and a
few million dollars, and even then you will be behind YouTube. Simply because
it&amp;#39;s a never-ending process. Any software, no matter how big or good it is,
always needs more and more improvements and bug fixes.&lt;/p&gt;

&lt;p&gt;Thus, when you ask me how much it will cost to create a system similar
to YouTube, according to your specifications, my honest and accurate answer
should be: &amp;quot;&lt;em&gt;All of your money, and it won&amp;#39;t be enough.&lt;/em&gt;&amp;quot; Will you
sign a contract and outsource the project to me after that answer? No, you won&amp;#39;t.
That&amp;#39;s why I have to lie and promise something like &amp;quot;three months and $40,000&amp;quot;.
Why would you trust me? If you&amp;#39;re smart enough, you won&amp;#39;t.&lt;/p&gt;

&lt;p&gt;My point is that no matter what I promise you, I will be wrong. Terribly wrong.&lt;/p&gt;

&lt;p&gt;What is the solution? What do you do? I totally understand that you
do need a number to make your plans and secure the money.
You need to choose the right software outsourcing partner, and you
need to know what to expect and when, but ...&lt;/p&gt;

&lt;p&gt;You&amp;#39;re asking the &lt;strong&gt;wrong question&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;This question has only one valid answer, and it&amp;#39;s the answer nobody
will ever give you &amp;mdash; the development will take forever and will
consume all your money. All other answers are simply a lie.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m sorry if I&amp;#39;ve delivered bad news to you.&lt;/p&gt;

&lt;p&gt;But let&amp;#39;s get back to the original problem: Why are you asking
me how much it will take to develop the software if you know it&amp;#39;s a
never-ending process and there is basically no limit? Because you
want to make sure your $40,000 will be used the right way and will
produce the maximum it can produce. To get this assurance from me, you&amp;#39;re
asking for an estimate. I&amp;#39;m telling you that your software will be ready
for $40K, and you sleep well. Until the moment you realize you&amp;#39;ve been
fooled. By your own self.&lt;/p&gt;

&lt;p&gt;Your concern is perfectly valid. You want to spend no more than $40K, and you want
to get a product that will help you achieve your business goals. For example,
you want to get into the market and acquire your first few thousand users. In other words,
your biggest worry is that your dollars will be turned into the right amount
of the right software.&lt;/p&gt;

&lt;p&gt;Any software team can consume your $40K, but each team will produce a different
&lt;em&gt;amount&lt;/em&gt; of software with different &lt;em&gt;quality&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;My point is that instead of asking how much a software project will cost, you should
ask how much software we can create for each dollar you give us and what
quality will it be.&lt;/p&gt;

&lt;p&gt;Basically, don&amp;#39;t ask us to estimate how much gas it will take to get
to the finish line, because there is no finish line. Instead, ask us
how much we charge per gallon and how many gallons we consume per mile.&lt;/p&gt;

&lt;p&gt;Different teams use different metrics to measure their results
(to be honest, most of them don&amp;#39;t use any). We, at
&lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, use
&lt;a href=&quot;/2014/11/14/hits-of-code.html&quot;&gt;hits of code&lt;/a&gt;,
bugs, pull requests, test coverage, and a few other metrics
as measurable indicators of &lt;em&gt;quantity and quality&lt;/em&gt;. We know exactly how much
software we can produce for each $100 you pay us.&lt;/p&gt;

&lt;p&gt;Collect those numbers from other teams and compare them. Also, make sure
you can control these numbers during the course of the project. That&amp;#39;s the
guarantee you&amp;#39;re looking for. Now you know what you&amp;#39;re buying and how
much you&amp;#39;re paying for it. In other words, like I said above, having these
numbers in front of you will assure you that your money is producing
the maximum amount of software it can produce, at the highest quality.&lt;/p&gt;

&lt;p&gt;The only question left is how you can know you&amp;#39;re buying
the right software. In other words, you know how much
we charge per gallon and how many gallons we use per mile, but
how do you know we&amp;#39;re driving in the right direction and not making
too many circles or detours?&lt;/p&gt;

&lt;p&gt;There is only one mechanism to guarantee that: regular checkpoints.
You should ask us whether we deliver the software in small and regular
increments, and whether we allow you to conduct regular
&lt;a href=&quot;/2014/12/18/independent-technical-reviews.html&quot;&gt;independent reviews&lt;/a&gt;
of our progress. Also, make sure we prioritize our technical goals,
use milestones, versionalize releases, publish release notes, etc.
Make sure that in the course of our journey, you are able to control
the progress and make corrections.&lt;/p&gt;

&lt;p&gt;To summarize, this is wrong (because there is no &amp;quot;there&amp;quot;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey driver, how much will it cost to get there?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this is right:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey driver, how much do you charge per mile, and do you have a map?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hope I&amp;#39;ve made my point clear :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/06/02/how-to-estimate-sofware-cost.html</guid>
      <dc:date>2015-06-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>There Can Be Only One Primary Constructor</title>
      <link>http://www.yegor256.com/2015/05/28/one-primary-constructor.html</link>
      <description>&lt;p&gt;I suggest classifying class constructors in OOP as &lt;strong&gt;primary&lt;/strong&gt;
and &lt;strong&gt;secondary&lt;/strong&gt;. A primary constructor is the one that constructs
an object and encapsulates other objects inside it. A secondary
one is simply a preparation step before calling a primary constructor and is not
really a constructor but rather an introductory layer in front of a real
constructing mechanism.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/05/the-matrix-agent-smith.jpg' style='width:600px;' alt='The Matrix (1999) by The Wachowski Brothers'/&gt;&lt;figcaption&gt;The Matrix (1999) by The Wachowski Brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is what I mean:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// secondary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// secondary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;USD&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// primary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// methods here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are three constructors in the class &amp;mdash; only one is
&lt;em&gt;primary&lt;/em&gt; and the other two are &lt;em&gt;secondary&lt;/em&gt;. My definition of a
secondary constructor is simple: It doesn&amp;#39;t do anything besides
calling a primary constructor, through &lt;code&gt;this(..)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My point here is that a
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;properly designed class&lt;/a&gt;
must have only one primary constructor, and it should be declared
after all secondary ones. Why? There is only one reason
behind this rule: It helps eliminate code duplication.&lt;/p&gt;

&lt;p&gt;Without such a rule, we may have this design for our class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// primary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;USD&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// primary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;USD&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// primary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// methods here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;#39;s not a lot of code here, but the duplication is massive and ugly;
I hope you see it for yourself.&lt;/p&gt;

&lt;p&gt;By strictly following this suggested rule, all classes will have
a single entry point (point of construction), which is a primary
constructor, and it will always be easy to find because it stays
below all secondary constructors.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/28/one-primary-constructor.html</guid>
      <dc:date>2015-05-28T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>A Few Thoughts on Unit Test Scaffolding</title>
      <link>http://www.yegor256.com/2015/05/25/unit-test-scaffolding.html</link>
      <description>&lt;p&gt;When I start to repeat myself in unit test methods by creating
the same objects and preparing the data to run the test,
I feel disapointed in my design. Long test methods with a lot of code
duplication just don&amp;#39;t look right. To simplify and shorten them,
there are basically two options, at least in Java: 1) private properties
initialized through &lt;code&gt;@Before&lt;/code&gt; and &lt;code&gt;@BeforeClass&lt;/code&gt;, and 2) private static
methods. They both look anti-OOP to me, and I think there is an
alternative. Let me explain.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/05/leon-the-professional.jpg' style='width:600px;' alt='Léon: The Professional by Luc Besson'/&gt;&lt;figcaption&gt;Léon: The Professional by Luc Besson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;JUnit officially suggests a
&lt;a href=&quot;http://junit.org/faq.html#atests_2&quot;&gt;test fixture&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetricsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTempDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DiscFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;first.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;second.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Goodbye!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@After&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculatesTotalSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countsWordsInFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think it&amp;#39;s obvious what this test is doing. First, in &lt;code&gt;prepare()&lt;/code&gt;,
it creates a &amp;quot;test fixture&amp;quot; of type &lt;code&gt;Folder&lt;/code&gt;. That is used in all three
tests as an argument for the &lt;code&gt;Metrics&lt;/code&gt; constructor. The real class being
tested here is &lt;code&gt;Metrics&lt;/code&gt; while &lt;code&gt;this.folder&lt;/code&gt; is something we need
in order to test it.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s wrong with this test? There is one serious issue:
&lt;strong&gt;coupling&lt;/strong&gt; between test methods. Test methods (and all tests in general)
must be perfectly isolated from each other. This means that changing
one test must not affect any others. In this example, that is not the case.
When I want to change the &lt;code&gt;countsWords()&lt;/code&gt; test, I have to change the internals
of &lt;code&gt;before()&lt;/code&gt;, which will affect the other method in the test &amp;quot;class&amp;quot;.&lt;/p&gt;

&lt;p&gt;With all due respect to JUnit, the idea of creating test fixtures in
&lt;code&gt;@Before&lt;/code&gt; and &lt;code&gt;@After&lt;/code&gt; is wrong, mostly because it encourages
developers to couple test methods.&lt;/p&gt;

&lt;p&gt;Here is how we can improve our test and isolate test methods:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetricsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculatesTotalSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTempDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test-1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MetricsTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;first.txt:Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;second.txt:Goodbye!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countsWordsInFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTempDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test-2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MetricsTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;alpha.txt:Three words here&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;beta.txt:two words&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;gamma.txt:one!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DiscFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Does it look better now? We&amp;#39;re not there yet, but now our test
methods are perfectly isolated. If I want to change one of them,
I&amp;#39;m not going to affect the others because I pass all configuration
parameters to a private static utility (!) method &lt;code&gt;folder()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A utility method, huh? Yes,
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;it smells&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main issue with this design, even though it is way better than
the previous one, is that it doesn&amp;#39;t prevent code duplication between
test &amp;quot;classes&amp;quot;. If I need a similar test fixture of type &lt;code&gt;Folder&lt;/code&gt; in
another test case, I will have to move this static method there. Or
even worse, I will have to create a utility class.
Yes, there is &lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;nothing worse&lt;/a&gt;
in object-oriented programming than utility classes.&lt;/p&gt;

&lt;p&gt;A much better design would be to use
&lt;a href=&quot;/2014/09/23/built-in-fake-objects.html&quot;&gt;&amp;quot;fake&amp;quot; objects&lt;/a&gt;
instead of private static utilities. Here is how. First, we create a fake class
and place it into &lt;code&gt;src/main/java&lt;/code&gt;. This class can be used in tests
and also in production code, if necessary (&lt;code&gt;Fk&lt;/code&gt; for &amp;quot;fake&amp;quot;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FkFolder&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Closeable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTempDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test-1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DiscFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how our test will look now:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetricsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculatesTotalSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;first.txt:Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;second.txt:Goodbye!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countsWordsInFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;alpha.txt:Three words here&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;beta.txt:two words&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;gamma.txt:one!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What do you think? Isn&amp;#39;t it better than what JUnit offers?
Isn&amp;#39;t it more reusable and extendable than utility methods?&lt;/p&gt;

&lt;p&gt;To summarize, I believe scaffolding in unit testing must be
done through
&lt;a href=&quot;/2014/09/23/built-in-fake-objects.html&quot;&gt;fake objects&lt;/a&gt;
that are shipped together with production code.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 25 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/25/unit-test-scaffolding.html</guid>
      <dc:date>2015-05-25T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Avoid a Software Outsourcing Disaster</title>
      <link>http://www.yegor256.com/2015/05/21/avoid-software-outsourcing-disaster.html</link>
      <description>&lt;p&gt;Software outsourcing is a disaster waiting to happen; we all know that. First, you find
a company that promises you everything you could wish for in a product &amp;mdash;
on-time and in-budget delivery, highest quality, beautiful user interface,
cutting-edge technologies, and hassle-free lifetime support. So you send the
first payment and your journey starts. The team hardly understands your needs,
the quality is terrible, all your time and budget expectations
are severely violated, and the level of frustration is skyrocketing. And the
&amp;quot;best&amp;quot; part is that you can&amp;#39;t get away or else all the money you&amp;#39;ve spent so far
will go down the drain and you will have to start from scratch. You have to
stay &amp;quot;married&amp;quot; to this team because you can&amp;#39;t afford a &amp;quot;divorce&amp;quot;. Is there
a way to do software outsourcing right?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/05/evil-cult.jpg' style='width:600px;' alt='The Evil Cult (1993) by Jing Wong'/&gt;&lt;figcaption&gt;The Evil Cult (1993) by Jing Wong&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Yes, it is possible to do it right and truly hassle-free, but you have
to be ready to twist your management philosophy.&lt;/p&gt;

&lt;p&gt;The basic fundamental principle here is that 1) you should openly and frequently
communicate your &lt;strong&gt;concerns&lt;/strong&gt; with the outsourcing team, and 2) they should
openly and frequently communicate &lt;strong&gt;risks and issues&lt;/strong&gt; with you. These are
two major success factors in software outsourcing that are very often neglected.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1937021033/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1937021033&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=S5KTMPGVOXPSCJN2'&gt;&lt;img src='http://www.yegor256.com/images/2015/05/wei-liao-zi-book.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I learned this principle from &lt;a href=&quot;https://en.wikipedia.org/wiki/Wei_Liaozi&quot;&gt;Wei Liao Zi&lt;/a&gt;.
He said, according to &lt;a href=&quot;http://www.amazon.com/gp/product/1937021033/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1937021033&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=S5KTMPGVOXPSCJN2&quot;&gt;Military Strategy Classics of Ancient China&lt;/a&gt;,
p.239:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When information from below reaches up high, and the concerns
of up high penetrate to below, this is the most ideal situation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me demonstrate a few practical examples of software outsourcing
disasters and explain how they can be avoided if you follow said
2,500-year-old principle.&lt;/p&gt;

&lt;h2 id=&quot;it-takes-forever-and-i&amp;#39;m-over-budget!&quot;&gt;It Takes Forever and I&amp;#39;m Over Budget!&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s always 95 percent ready, and you always have something that is not implemented
or is broken. They&amp;#39;ve done a lot of work, you&amp;#39;ve paid a lot of money,
but a market-ready product is not yet there. It takes week after week
and month after month; the backlog always has something, and you simply
can&amp;#39;t finish this. You&amp;#39;re starting to see this project in your nightmares,
and Prozac doesn&amp;#39;t help anymore. How does this sound? Familiar?&lt;/p&gt;

&lt;p&gt;I hope you do realize that no matter what kind of contract you signed with
your software outsourcing partner, how many schedules you&amp;#39;ve baselined,
or how many promises were made, they want to keep you as a client
forever. Well, for as long as you have something in your bank account.&lt;/p&gt;

&lt;p&gt;You want your business to succeed and flourish, right? They want the same for their
business. Your success means a product that is finished and launched to
end users. Their success means a neverending process of writing software
for you. These two goals have very little in common. I would even say
they contradict each other &amp;mdash; when you succeed, they fail.&lt;/p&gt;

&lt;p&gt;Of course, they will tell you they want to finish this product for
you and get new contracts in the future. They will say their primary
motiviation is to make you happy and obtain a good reference. They
will assure you that customer satisfaction is more important than money.
However, I&amp;#39;m suggesting you be strong enough to face the reality &amp;mdash;
it&amp;#39;s all lies.&lt;/p&gt;

&lt;p&gt;The majority of software outsourcing projects fail.
The vast majority (see the latest &lt;a href=&quot;http://www.csus.edu/indiv/v/velianitis/161/ChaosReport.pdf&quot;&gt;CHAOS report&lt;/a&gt;).
Software developers realize this better than you,
mostly because they see how it happens every day.
And your project is not an exception. Thus, let&amp;#39;s forget about these
beautiful promises and focus on the ugly reality &amp;mdash; you&amp;#39;re on your own.&lt;/p&gt;

&lt;p&gt;Keeping in mind the principle I mentioned above, here is my recommendation:
Make sure the team understands 1) your real time and scope constraints
and 2) the consequences of their violation. This is about the first
part of the principle &amp;mdash; &lt;em&gt;you should openly and frequently communicate
your concerns&lt;/em&gt;. What usually happens is that the outsourcing team remains
unaware of a real business situation and only hears &amp;quot;I need this ASAP&amp;quot; every
second day.&lt;/p&gt;

&lt;p&gt;&amp;quot;ASAP&amp;quot; is not a deadline. Moreover, it&amp;#39;s a very de-motivating substitute
for a realistic milestone. When the team doesn&amp;#39;t know when exactly you need
the product, what exactly has to be ready by that date, and &lt;em&gt;why&lt;/em&gt;,
it starts to work against you. The emphasis here is on &amp;quot;why&amp;quot;. For most
business owners, it&amp;#39;s difficult to answer this question.&lt;/p&gt;

&lt;p&gt;Why do you need the product to be ready by the first of June?
Just because you are sick of waiting? This is not a reasonable
answer. You&amp;#39;re sick of it but you still have money in your bank
account. They will keep invoicing you, and they won&amp;#39;t respect
you. They won&amp;#39;t treat you as a strong and goal-oriented
business person. You either aren&amp;#39;t smart enough to identify your
time constraints or you&amp;#39;re hiding them from the team. In either case,
they won&amp;#39;t appreciate that behavior.&lt;/p&gt;

&lt;p&gt;Here is how a properly defined time and cost constraint may sound:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Features A, B, and D must be ready before the first of June,
because our marketing campaign starts on the fifth of June. If
we don&amp;#39;t have them ready, I will lose $25,000 in marketing
costs. If this happens, I will have to cut the monthly development
budget in half.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the software outsourcing company, your partner, hears this definition
of a deadline, it becomes a real partner of yours. Now its goals
are aligned with yours. If the milestone is missed, you will suffer
and they understand exactly how. Besides that, they see how your
suffering will be transferred to their shoulders too.&lt;/p&gt;

&lt;p&gt;Stop asking them to finish everything ASAP. Stop calling them twice a day
and yelling for an hour about their poor performance. Stop using language
in business emails. Stop making all this noise. It doesn&amp;#39;t help you anyway.
Moreover, it only makes the situation worse, because you&amp;#39;re losing respect
and they&amp;#39;re starting to treat you like a cash cow &amp;mdash; a rather stupid
and emotional one.&lt;/p&gt;

&lt;p&gt;Instead, do your homework and define your realistic milestones. Think
about your real time, scope, and budget limitations. Write them down in
very short and concise sentences. Make sure your constraints are realistic
and their descriptions answer the main question &amp;mdash; why.&lt;/p&gt;

&lt;p&gt;Why do you need this by the first of June? Why do you want to spend less than
$50,000? Why do you need all five features to be in version 1.0? Why
do you want your web app to be ready to handle 1K concurrent sessions?
Why do you need a mobile app in the first release?&lt;/p&gt;

&lt;p&gt;Answer for yourself and make sure your answers are understood by the
outsourcing company. Don&amp;#39;t hide this information.&lt;/p&gt;

&lt;h2 id=&quot;the-product-is-so-clumsy&quot;&gt;The Product Is So Clumsy&lt;/h2&gt;

&lt;p&gt;You want your web app to look like Pinterest, react fast, be easy to use,
and make you proud when you show it to your friends. But the product
they created for you is clumsy, slow, and to be honest, ugly. You&amp;#39;re
asking them to do something about it, and they keep giving you promises.
The project keeps consuming your money and its budget grows, but the look and feel
is not getting any better. It is far from Pinterest, very far. The frustration
is growing, and you don&amp;#39;t see any reasonable way out of this. The only
advice you&amp;#39;re getting from your friends is to re-do it all from scratch with
a new web development team. How does this sound? I bet it&amp;#39;s familiar.&lt;/p&gt;

&lt;p&gt;I believe the root cause of this dead-end situation is a fear
of conflict. At early stages in the project, you try to do everything you can
to keep a good relationship with the outsourcing company and not to offend anyone.
You don&amp;#39;t want to control anyone&amp;#39;s work because they may take it as an insult.
You don&amp;#39;t want to express your quality concerns because they may
de-motivate the team. You just hope they will improve the product in the future,
but when the future comes, it&amp;#39;s too late.&lt;/p&gt;

&lt;p&gt;Again, keeping the age-old principle in mind, I would recommend that from the first
day of the project, you establish a routine procedure of checking their
results and expressing your concerns. In our projects at
&lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, we ask our customers to be present
in GitHub, review our releases frequently, and report any inconsistencies
found as GitHub issues. We encourage project sponsors to be as pessimistic
and negative about our quality from the beginning of the project. We realize
this is how we can minimize the risk of a &amp;quot;piled-up frustration&amp;quot;.&lt;/p&gt;

&lt;p&gt;Try to do the same in your project that is outsourced to an offshore developer.
Don&amp;#39;t be afraid to offend them. Iterative and incremental criticism is a much
healthier approach than feedback-free peace that ends in war. Find a way
to keep your outsourcing team aware of your opinion about its results
on a regular basis. Don&amp;#39;t try to be nice to save a project. You&amp;#39;re doing
yourself a bad favor. Instead, be open about your concerns. Remember
the first part of the principle above &amp;mdash; you should openly and frequently
communicate your concerns. This is how you stabilize the project and minimize
risks.&lt;/p&gt;

&lt;p&gt;Also, it&amp;#39;s a very good practice, from time to time, to invite
technical reviewers to generate independent opinions about the product
under development. Read my other post about this subject:
&lt;a href=&quot;/2014/12/18/independent-technical-reviews.html&quot;&gt;You Do Need Independent Technical Reviews!&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;i-can&amp;#39;t-rely-on-their-promises&quot;&gt;I Can&amp;#39;t Rely on Their Promises&lt;/h2&gt;

&lt;p&gt;You call them, make plans, declare milestones, define features, set priorities,
agree about quality, and then hang up. In a few days, you realize it was
a total waste of time. They don&amp;#39;t keep their promises because there is
always something new happening. Someone is sick, some server is broken,
some piece of software appears to be malfunctional, some code is no
longer working, etc. You call again, express your frustration, make
strong accusations, restructure milestones, redefine features, reset
priorities, and in a few days start over. Been there, done that? Sound familiar?&lt;/p&gt;

&lt;p&gt;In my experience, this unpredictability and unreliability of a software
outsourcing team is in most cases caused by a project sponsor himself or herself.
This happens when you don&amp;#39;t listen to them or they are afraid to tell
you the truth, which is usually the same thing. Some call this
&amp;quot;fear-driven development&amp;quot;. The team is afraid of you, and in order to
keep you on board as a paying customer, has to lie to you.&lt;/p&gt;

&lt;p&gt;Basically, they are telling you what you want to hear &amp;mdash;
that the end of the project is close, that currently open bugs are
easy to fix, that performance problems are minor, that the quality
of the architecture is outstanding, and that the team is very motivated to work with you.
When you hear any of the above, question yourself &amp;mdash; Do you
encourage them to tell the truth? Do you reward them for bringing you
bad but honest news?&lt;/p&gt;

&lt;p&gt;Once again citing the fundamental principle mentioned above, I would recommend
you make sure your reasoning for awards and punishments is transparent to
your software outsourcing partner and is based on project objectives,
not your personal emotions.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;one of my previous posts&lt;/a&gt;,
I wrote that a happy customer is a false objective for a software development team.
A customer who is promoting this objective is a terrible customer who
is doomed to fail the project. If you reward your team when they
make you happy with good news, you are training them to lie to you. If you
expect them to deliver good news, you are discouraging them from telling
you the truth and from doing what is good for the project, not for you personally.&lt;/p&gt;

&lt;p&gt;You&amp;#39;re discouraging them from arguing with you. In other words, you&amp;#39;re
throttling the channel of information that is supposed to come to you
from the people working for you. You&amp;#39;re isolating yourself, and the team
is starting to work against you, not with you.&lt;/p&gt;

&lt;p&gt;Here is a practical recommendation. First, regularly announce your reasonable
objectives and constraints, like I explained above. Make sure the team
understands your business plans and the &amp;quot;why&amp;quot; reasoning behind them. Second,
regularly ask team members about risks and issues. Ask them why they think project
objectives may be compromised. Even better, let them document risks
regularly and report them back to you. Reward them for being honest in
this list of risks.&lt;/p&gt;

&lt;p&gt;Try it and you will be surprised by how many interesting things that risk list
will contain.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 21 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/21/avoid-software-outsourcing-disaster.html</guid>
      <dc:date>2015-05-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Cookie-Based Authentication Works in the Takes Framework</title>
      <link>http://www.yegor256.com/2015/05/18/cookie-based-authentication.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.takes.org'&gt;&lt;img src='http://www.takes.org/logo.png' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;When you enter your email and password into the Facebook login page,
you get into your account. Then, wherever you go in the site,
you always see your photo at the top right corner of the page. Facebook
remembers you and doesn&amp;#39;t ask for the password again and again. This works
thanks to &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_cookie&quot;&gt;HTTP cookies&lt;/a&gt;
and is called &lt;strong&gt;cookie-based authentication&lt;/strong&gt;. Even though this mechanism
often causes some security problems, it is very popular and simple.
Here is how &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes&lt;/a&gt; makes it possible in a few lines of code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, let&amp;#39;s see how it works. Moreover, let&amp;#39;s see how I believe it should work.&lt;/p&gt;

&lt;p&gt;Step one: The user enters an email and password and clicks &amp;quot;submit&amp;quot;. The server
receives a POST request with this information inside:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;POST / HTTP/1.1
Host: www.facebook.com
Content-Type: application/x-www-form-urlencoded

email=me@yegor256.com&amp;amp;password=itisasecret&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The server matches the provided information with its records and decides what to do.
If the information is invalid, it returns the same login page, asking you to
enter it all again. If the information is valid, the server returns something
like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HTTP/1.1 303 See Other
Location: www.facebook.com
Set-Cookie: user=me@yegor256.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since the response status code is 303, the browser goes to the page
specified in the &lt;code&gt;Location&lt;/code&gt; header and opens the front page of the site. This
is what it sends to the server:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET / HTTP/1.1
Host: www.facebook.com
Cookie: user=me@yegor256.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The server gets my email from the &lt;code&gt;Cookie&lt;/code&gt;
header and understands that it&amp;#39;s me again! No need to ask for the
password once more. The server trusts the informatiom from the cookie.
That&amp;#39;s it. That&amp;#39;s what cookie-based authentication is all about.&lt;/p&gt;

&lt;h2 id=&quot;wait-...-what-about-security?&quot;&gt;Wait ... What About Security?&lt;/h2&gt;

&lt;p&gt;Right, what about security? If the server trusts any browser request with
a user email in the &lt;code&gt;Cookie&lt;/code&gt; header, anyone would be able to send my email
from another place and get access to my account.&lt;/p&gt;

&lt;p&gt;The first step to prevent this is to encrypt the email with a secret
encryption key, known only to the server. Nobody except the server itself
will be able to encrypt it the same way the server needs to decrypt it.
The response would look like this, using an example of encryption
by &lt;a href=&quot;https://en.wikipedia.org/wiki/XOR_cipher&quot;&gt;XOR cipher&lt;/a&gt; with &lt;code&gt;bamboo&lt;/code&gt; as a secret key:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HTTP/1.1 303 See Other
Location: www.facebook.com
Set-Cookie: user=b1ccafd92c568515100f5c4d104671003cfa39&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is not the best encryption mechanism, though; for proper encryption, it&amp;#39;s better
to use something stronger like &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_Encryption_Standard&quot;&gt;DES&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This all sounds good, but what if someone hijacks the traffic between the server and the
browser and gets a hold of a properly encrypted email cookie? In this case,
the thief would be able to use the same cookie for authentication even without
knowing its content. The server would trust the information and let the
person into my account. This type of attack is called
&lt;a href=&quot;http://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;man-in-the-middle&lt;/a&gt; (MITM).
To prevent this from happening, we should use HTTPS and inform the browser
that the cookie is sensitive and should never be returned to the server without
SSL encryption. That&amp;#39;s done by an extra flag in the &lt;code&gt;Set-Cookie&lt;/code&gt; header:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HTTP/1.1 303 See Other
Location: www.facebook.com
Set-Cookie: user=me@yegor256.com; Secure&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is yet another type of attack associated with cookie-based authentication,
based on a browser&amp;#39;s ability to expose all cookies associated with a web page
to JavaScript executed inside it. An attacker may inject some malicious
JavaScript code into the page (Don&amp;#39;t ask me how ... this will happen only
if your entire HTML rendering is done wrong), and this code will gain access
to the cookie. Then, the code will send the cookie somewhere else so
the attacker can collect it. This type of attack is called
&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;cross-site scripting&lt;/a&gt; (XSS).
To prevent this, there is another flag for the &lt;code&gt;Set-Cookie&lt;/code&gt; header, called &lt;code&gt;HttpOnly&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HTTP/1.1 303 See Other
Location: www.facebook.com
Set-Cookie: user=me@yegor256.com; Secure; HttpOnly&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The presence of this flag will tell the browser that this particular cookie can
be transferred back to the server only through HTTP requests. JavaScript won&amp;#39;t
have access to it.&lt;/p&gt;

&lt;h2 id=&quot;how-it&amp;#39;s-done-in-takes&quot;&gt;How It&amp;#39;s Done in Takes&lt;/h2&gt;

&lt;p&gt;Here is how this cookie-based authentication mechanism is designed in the
&lt;a href=&quot;http://www.takes.org&quot;&gt;Takes&lt;/a&gt; framework. The entire framework consists of
&lt;em&gt;takes&lt;/em&gt;, which receive requests and produce responses
(&lt;a href=&quot;/2015/03/22/takes-java-web-framework.html&quot;&gt;this article&lt;/a&gt;
explains the framework in more detail). When the request comes in,
we should find the authentication cookie in the &lt;code&gt;Cookie&lt;/code&gt; header and translate
it to the user credentials. When the response goes out, we should add the
&lt;code&gt;Set-Cookie&lt;/code&gt; header to it with the encrypted user credentials. That&amp;#39;s it. Just
these two steps.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say we have an account page that is supposed to show the current user&amp;#39;s
balance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkAccount&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Balances&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get it from request&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsHTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;html&amp;gt;Your balance is %s&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;balances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Right after the &lt;code&gt;request&lt;/code&gt; comes in, we should retrieve the identity of
the user, encoded inside an authenticating cookie. To make this mechanism
reusable, we have the &lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/TkAuth.html&quot;&gt;&lt;code&gt;TkAuth&lt;/code&gt;&lt;/a&gt;
decorator, which wraps an existing &lt;em&gt;take&lt;/em&gt;,
decodes an incoming cookie, and adds a new &lt;code&gt;TkAuth&lt;/code&gt;
header to the request with the user&amp;#39;s identification information:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Codec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcHex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcXOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, when &lt;code&gt;TkAuth&lt;/code&gt; receives a request with an authenticating cookie inside,
it asks &lt;code&gt;pass&lt;/code&gt; to decode the cookie and return either a
valid &lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/Identity.html&quot;&gt;&lt;code&gt;Identity&lt;/code&gt;&lt;/a&gt;
or &lt;code&gt;Identity.ANONYMOUS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, when the response goes back to the browser, &lt;code&gt;TkAuth&lt;/code&gt; asks &lt;code&gt;pass&lt;/code&gt;
to encode the indentity back into a string and adds &lt;code&gt;Set-Cookie&lt;/code&gt; to the response.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/PsCookie.html&quot;&gt;&lt;code&gt;PsCookie&lt;/code&gt;&lt;/a&gt;
uses an instance of
&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/codecs/Codec.html&quot;&gt;&lt;code&gt;Codec&lt;/code&gt;&lt;/a&gt;
in order to do these backward and forward encoding operations.&lt;/p&gt;

&lt;p&gt;When our &lt;code&gt;TkAccount&lt;/code&gt; &lt;em&gt;take&lt;/em&gt; wants to retrieve a currently authenticated
user identity from the request, it can use
&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/RqAuth.html&quot;&gt;&lt;code&gt;RqAuth&lt;/code&gt;&lt;/a&gt;,
a utility decorator of &lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/Request.html&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkAccount&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RqAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// other manipulations with the user&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;RqAuth&lt;/code&gt; decorator uses the header, added by &lt;code&gt;PsCookie&lt;/code&gt;, in order
to authenticate the user and create an &lt;code&gt;Identity&lt;/code&gt; object.&lt;/p&gt;

&lt;h2 id=&quot;how-is-it-composable?&quot;&gt;How Is It Composable?&lt;/h2&gt;

&lt;p&gt;This mechanism is indeed very extendable and &amp;quot;composable&amp;quot;. Let&amp;#39;s say we
want to skip authentication during integration testing. Here is how:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// original application &amp;quot;take&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsFake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* if running integration tests */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcHex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcXOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/PsChain.html&quot;&gt;&lt;code&gt;PsChain&lt;/code&gt;&lt;/a&gt;
implements &lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/Pass.html&quot;&gt;&lt;code&gt;Pass&lt;/code&gt;&lt;/a&gt;
and attempts to authenticate the user by asking all encapsulated passes,
one by one. The first one in the chain is
&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/PsFake.html&quot;&gt;&lt;code&gt;PsFake&lt;/code&gt;&lt;/a&gt;.
Using a single boolean argument in its constructor, it makes a decision whether
to return a fake identity or return nothing. With just a single boolean
trigger, we can switch off the entire authentication mechanism in the app.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say you want to authenticate users through Facebook OAuth. Here is how:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// original application &amp;quot;take&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsByFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PsByFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PsFacebook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsFacebook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;... Facebook API key ...&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;... Facebook API secret ...&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcHex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcXOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When a user clicks on the login link on your site, the browser goes to &lt;code&gt;facebook.com&lt;/code&gt;,
where his or her identity is verified. Then, Facebook returns a &lt;code&gt;302&lt;/code&gt; redirection
response with a &lt;code&gt;Location&lt;/code&gt; header set to the URL we provide in the login link.
The link must include something like this: &lt;code&gt;?PsByFlag=PsFacebook&lt;/code&gt;. This will
tell &lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/PsByFlag.html&quot;&gt;&lt;code&gt;PsByFlag&lt;/code&gt;&lt;/a&gt;
that this request authenticates a user.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PsByFlag&lt;/code&gt; will iterate through all encapsulated &amp;quot;pairs&amp;quot; and try to find the
right one.
&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/social/PsFacebook.html&quot;&gt;&lt;code&gt;PsFacebook&lt;/code&gt;&lt;/a&gt;
will be the first and the right one. It will connect to the Facebook API using the
provided credentials and will retrieve all possible information about the user.&lt;/p&gt;

&lt;p&gt;Here is how we can implement a logout mechanism:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// original application &amp;quot;take&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsByFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PsByFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PsFacebook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsFacebook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;... Facebook API key ...&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;... Facebook API secret ...&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PsByFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PsLogout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsLogout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcHex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcXOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we can add &lt;code&gt;?PsByFlag=PsLogout&lt;/code&gt; to any link on the site and it will
log the current user out.&lt;/p&gt;

&lt;p&gt;You can see how all this works in a real application by checking out the
&lt;a href=&quot;https://github.com/yegor256/rultor/blob/master/src/main/java/com/rultor/web/TkAppAuth.java&quot;&gt;&lt;code&gt;TkAppAuth&lt;/code&gt;&lt;/a&gt;
class in &lt;a href=&quot;http://www.rultor.com&quot;&gt;Rultor&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/18/cookie-based-authentication.html</guid>
      <dc:date>2015-05-18T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Two Instruments of a Software Architect</title>
      <link>http://www.yegor256.com/2015/05/13/two-instruments-of-software-architect.html</link>
      <description>&lt;p&gt;A &lt;a href=&quot;/&quot;&gt;software architect&lt;/a&gt;
is a key person in any software project, no matter how big or small it is.
An architect is personally responsible for the technical outcome of
the entire team. A good architect knows what needs to be done and how
it&amp;#39;s going to be done, both architecturally and design-wise. In order to enforce
this idea in practice, an architect uses two instruments:
&lt;strong&gt;bugs and reviews&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/05/rear-window.jpg' style='width:600px;' alt='Rear Window (1954) by Alfred Hitchcock'/&gt;&lt;figcaption&gt;Rear Window (1954) by Alfred Hitchcock&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;At &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, we discourage any communication
between developers unless they are formally attached to the tickets or tasks
we&amp;#39;re working on. Read more details about this approach in
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The same principle applies to an architect. We don&amp;#39;t use meetings,
stand-ups, Skype calls, IRC channels, or any other tools where information
flies in the air and stays in our heads. Instead, we put everything in writing and talk
only when we&amp;#39;re being explicitly asked to and paid to &amp;mdash; in tickets.&lt;/p&gt;

&lt;h2 id=&quot;bugs&quot;&gt;Bugs&lt;/h2&gt;

&lt;p&gt;With this in mind, a reasonable question may be asked: How can
a software architect enforce his or her technical vision for the team
if he can&amp;#39;t communicate with the team? Here is our answer:
the architect must use &lt;strong&gt;bugs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A bug is a ticket that has a reporter, a problem, and a resolver, just
like &lt;a href=&quot;/2014/11/24/principles-of-bug-tracking.html&quot;&gt;this post&lt;/a&gt; explains.
Say an architect reviews an existing technical solution and finds
something that contradicts his vision. When such a contradiction
is found, it is a good candidate for a bug. Sometimes there is just
not enough information in the code yet, and this is also a good candidate
for a bug.&lt;/p&gt;

&lt;p&gt;Thus, bugs reported by an architect serve as communication channels
between him and the team. An architect doesn&amp;#39;t explain what needs to be done
but asks the team to fix the product in a way he thinks is right.
If the ticket resolver, a member of the team, disagrees with that approach,
a discussion starts right in the ticket.&lt;/p&gt;

&lt;p&gt;Sometimes an architect has doubts and needs to discuss a few possible solutions
with the team or simply collect opinions. Again, we use bugs for that.
But these bugs don&amp;#39;t report problems in the source code; instead, they
complain about incomplete documentation. For example, say an architect
doesn&amp;#39;t know which database to use, MongoDB or Cassandra, and needs more
information about their pros and cons. A bug will sound like &amp;quot;our design documentation
doesn&amp;#39;t have a detailed comparison of existing NoSQL databases; please fix it&amp;quot;.
Whoever is assigned to this ticket will perform the comparison
and update the documentation.&lt;/p&gt;

&lt;p&gt;Bugs are a &lt;em&gt;proactive&lt;/em&gt; tool for an architect. Through reporting bugs,
an architect influences the project and &amp;quot;dictates his will&amp;quot;.&lt;/p&gt;

&lt;h2 id=&quot;reviews&quot;&gt;Reviews&lt;/h2&gt;

&lt;p&gt;In our projects, every ticket is implemented in its own branch. When
implementation is done, all tickets pass mandatory code peer review. In other
words, developers review each others&amp;#39; code. An architect is not involved
in this process.&lt;/p&gt;

&lt;p&gt;But when peer review is done, each ticket goes to an architect and he
has to give a final &amp;quot;OK&amp;quot; before the code goes to the &lt;code&gt;master&lt;/code&gt; branch through
Rultor, our &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;merge bot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is an architect&amp;#39;s opportunity for control. This is where he can
prevent his vision from being destroyed. When the code created by a developer
violates project design principles or any part of the entire technical idea,
the architect says &amp;quot;No&amp;quot; and the branch is rejected.&lt;/p&gt;

&lt;p&gt;Reviews are a &lt;em&gt;reactive&lt;/em&gt; instrument for an architect. Through strict and
non-compromising code reviews, an architect enforces his design and architectural
principles.&lt;/p&gt;

&lt;p&gt;PS. Here is how an architect is supposed to report to the project manager:
&lt;a href=&quot;/2015/05/11/software-architect-responsibilities.html&quot;&gt;Three Things I Expect From a Software Architect&lt;/a&gt;&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/13/two-instruments-of-software-architect.html</guid>
      <dc:date>2015-05-13T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>