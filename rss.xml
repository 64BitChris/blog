<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014-2015</copyright>
    <lastBuildDate>Thu, 10 Sep 2015 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>When Do You Stop Testing?</title>
      <link>http://www.yegor256.com/2015/09/10/testing-exit-criteria.html</link>
      <description>&lt;p&gt;There is a software to be tested. There is a team of testers. There is
some money in the budget. There is some time in the schedule. We start
right now. Testers are trying to break the product, finding bugs,
reporting bugs, communicating with programmers when necessary, doing
their best to find what&amp;#39;s wrong. Eventually they stop and say
&amp;quot;we&amp;#39;re done&amp;quot;. How do they know when to stop? When there is enough
testing? It&amp;#39;s obvious &amp;mdash; when there are &lt;strong&gt;no more bugs left&lt;/strong&gt; and the
product can be shipped! If you think like this, I have bad news for you.
You&amp;#39;re &lt;strong&gt;fundamentally wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/09/la-fille-sur-le-pont.jpg' style='width:600px;' alt='La fille sur le pont (1999) by Patrice Leconte'/&gt;&lt;figcaption&gt;La fille sur le pont (1999) by Patrice Leconte&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;All this is perfectly explained by Glenford Myers in his great book
&lt;a href=&quot;/2014/08/22/art-of-software-testing.html&quot;&gt;The Art of Software Testing&lt;/a&gt;.
I will just summarize it here again.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1118031962/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1118031962&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=ZSPUL4X4IBFT6ZVJ'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-art-of-testing.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;First, &amp;quot;testing is the process of executing a program with the
intent of &lt;strong&gt;finding errors&lt;/strong&gt;&amp;quot; (page 6). Pay attention, the intent is to find errors.
Not to prove that the product works fine, but to prove that it &lt;strong&gt;doesn&amp;#39;t work&lt;/strong&gt;
as intended. The goal of any tester is to show how the product can be
broken, how it fails on different inputs, how it crashes under stress,
how it misunderstands the user, how it doesn&amp;#39;t satisfy the requirements.
This is why Dr. Myers is calling testing &amp;quot;a destructive, even sadistic, process&amp;quot;
(page 6). This is what most testers don&amp;#39;t understand.&lt;/p&gt;

&lt;p&gt;Second, any software has an &lt;strong&gt;unlimited amount of bugs&lt;/strong&gt;. Dr. Myers says that
&amp;quot;you cannot test a program to guarantee that it is error free&amp;quot; (page 10)
and that &amp;quot;it is impractical, often impossible, to find all the errros in
a program&amp;quot; (page 8). This is also what most testers don&amp;#39;t understand. They
believe that there is a limited number of bugs, which they have to find
and call it a day. There literally no limit! The amount of bugs is unlimited,
in any software product. No matter how small or big, complex or simple,
new or old is the product.&lt;/p&gt;

&lt;p&gt;Having these axioms in mind, let&amp;#39;s try to decide when testers have to stop.
According to Dr. Meyers, &amp;quot;one of the most difficult questions
to answer when testing a program is determining when to stop,
since there is no way of knowing if the error just detected is the
last remaining error&amp;quot; (page 135).&lt;/p&gt;

&lt;p&gt;They can&amp;#39;t find all bugs, no matter how much time we give them. And they
are motivated to find more and more of them. But at some point of time we
must make a decision and release the product. Looks like we will release
it with bugs inside? Yes, indeed! We will release a product &lt;strong&gt;full of bugs&lt;/strong&gt;.
The only question is how many of them were found already and how critical
they were.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s put it all together. There are too many bugs to be able to find
all of them in a reasonable amount of time. However, we have to release a new
version, sooner or later. At the same time, testers will always tell us
that there are more bugs there and they can find more, just need more
time. What to do?&lt;/p&gt;

&lt;p&gt;Dr. Meyers says that &amp;quot;since the goal of testing is to find errors,
why not make the completion criterion the detection of some predefined
number of errors?&amp;quot; (page 136). Indeed, we should predict how many bugs
are just enough to find, in order to have a desirable level of &lt;strong&gt;confidence&lt;/strong&gt;
that the product is ready to be shipped. Then, ship it, conciously
understanding that it still has an unlimited amount of not yet discovered
bugs.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=T5AHAWGQIY5ZZK2Z'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-object-thinking.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;David West in
&lt;a href=&quot;http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=T5AHAWGQIY5ZZK2Z&quot;&gt;Object Thinking&lt;/a&gt;
says that &amp;quot;software is released for use,
not when it is known to be correct, but when the rate of discovering
errors slows down to one that management considers acceptable&amp;quot; (page 13).&lt;/p&gt;

&lt;p&gt;Thus, the only valid criteria for exiting a testing process is the
discovery of a &lt;strong&gt;forecasted&lt;/strong&gt; amount of bugs.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 10 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/10/testing-exit-criteria.html</guid>
      <dc:date>2015-09-10T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Set Up a Private Maven Repository in Amazon S3</title>
      <link>http://www.yegor256.com/2015/09/07/maven-repository-amazon-s3.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;Amazon S3&lt;/a&gt;
is a perfect place for keeping private &lt;a href=&quot;https://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; artifacts.
I assume you keep public artifacts in
&lt;a href=&quot;/2014/08/19/how-to-release-to-maven-central.html&quot;&gt;Maven Central&lt;/a&gt; because
you want them to be available to everybody. Private artifacts
are those you don&amp;#39;t want visible to anyone except members
of your team. Thus, you want to deploy your &lt;code&gt;.jar&lt;/code&gt; files there
and make sure they are visible only by your team. Here is how we do
this in all &lt;a href=&quot;http://www.teamed.io&quot;&gt;our&lt;/a&gt; Java projects.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;create-an-s3-bucket&quot;&gt;Create an S3 Bucket&lt;/h2&gt;

&lt;p&gt;First, you create a new S3 bucket. I would recommend you name it using
your project domain and a prefix. For example, with &lt;code&gt;repo.teamed.io&lt;/code&gt;,
&lt;code&gt;repo&lt;/code&gt; is a prefix and &lt;code&gt;teamed.io&lt;/code&gt; is the domain.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s no need to configure any permissions for this bucket. Just create it
through the &lt;a href=&quot;https://console.aws.amazon.com/console/home&quot;&gt;Amazon S3 console&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;create-an-iam-user&quot;&gt;Create an IAM User&lt;/h2&gt;

&lt;p&gt;Create a new IAM user. I recommend you name it like &lt;code&gt;teamed-maven&lt;/code&gt;
if your project name is &lt;code&gt;teamed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add a new &amp;quot;inline policy&amp;quot; to the user:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;Statement&amp;quot;: [
    {
      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
      &amp;quot;Action&amp;quot;: &amp;quot;s3:*&amp;quot;,
      &amp;quot;Resource&amp;quot;: [
        &amp;quot;arn:aws:s3:::repo.teamed.io&amp;quot;,
        &amp;quot;arn:aws:s3:::repo.teamed.io/*&amp;quot;
      ]
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;repo.teamed.io&lt;/code&gt; is the name of the S3 bucket you
created a minute ago.&lt;/p&gt;

&lt;p&gt;Make sure you have an &amp;quot;access key&amp;quot; for this new user. It must look similar
to this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;key: AKIAI9NNNJD5D7X4TUVA
secret: t5tZQCwuaRhmlOXfbGE5aTBMFw34iFyxfCEr32av&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key is 20 characters (all caps), and the secret is 40 characters.&lt;/p&gt;

&lt;h2 id=&quot;extend-settings.xml&quot;&gt;Extend &lt;code&gt;settings.xml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Add this configuration to your &lt;code&gt;~/.m2/settings.xml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servers&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;server&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;username&amp;gt;&lt;/span&gt;AKIAI9NNNJD5D7X4TUVA&lt;span class=&quot;nt&quot;&gt;&amp;lt;/username&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;password&amp;gt;&lt;/span&gt;t5tZQCwuaRhmlOXfbGE5aTBMFw34iFyxfCEr32av&lt;span class=&quot;nt&quot;&gt;&amp;lt;/password&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
    [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/servers&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-pom.xml&quot;&gt;Configure &lt;code&gt;pom.xml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Add this configuration to &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;distributionManagement&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;snapshotRepository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;s3://repo.teamed.io/snapshot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/snapshotRepository&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;s3://repo.teamed.io/release&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/distributionManagement&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;s3://repo.teamed.io/release&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, configure &lt;a href=&quot;https://github.com/jcaddel/maven-s3-wagon&quot;&gt;S3 Wagon&lt;/a&gt;,
also in &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;extension&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.kuali.maven.wagons&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-s3-wagon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extension&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt;
    [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;#39;re ready to go. You can deploy your artifacts just by running
Maven from the command line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mvn clean deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-s3auth.com&quot;&gt;Configure s3auth.com&lt;/h2&gt;

&lt;p&gt;Now you want to see these artifacts in your browser, in a secure mode, by
providing secure credentials. I recommend you use
&lt;a href=&quot;http://www.s3auth.com&quot;&gt;s3auth.com&lt;/a&gt;, as explained in
&lt;a href=&quot;/2014/04/21/s3-http-basic-auth.html&quot;&gt;Basic HTTP Auth for S3 Buckets&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configure-rultor&quot;&gt;Configure Rultor&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Another recommendation is to configure rultor.com for deployment of your
artifacts to S3 automatically.&lt;/p&gt;

&lt;p&gt;First, encrypt your &lt;code&gt;settings.xml&lt;/code&gt; with this
&lt;a href=&quot;https://github.com/yegor256/rultor-remote&quot;&gt;Rultor remote&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;$ gem install rultor
$ rultor encrypt -p me/test settings.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of &lt;code&gt;me/test&lt;/code&gt;, you should use the name of your GitHub project.&lt;/p&gt;

&lt;p&gt;As a result, you will get a new file named &lt;code&gt;settings.xml.asc&lt;/code&gt;. Add it to the root directory
of your project, then commit and push. The file contains your secret information,
but only the Rultor server can decrypt it.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;.rultor.yml&lt;/code&gt; file in the root directory of your project
(The Rultor &lt;a href=&quot;http://doc.rultor.com/reference.html&quot;&gt;reference page&lt;/a&gt;
explains this format in greater detail):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;settings.xml&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;repo/settings.xml.asc&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;mvn clean deploy --settings ../settings.xml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now it&amp;#39;s time to see how it all works together. Create a new ticket in the
GitHub issue tracker and post something like this into it
(read more about &lt;a href=&quot;http://doc.rultor.com/basics.html&quot;&gt;Rultor commands&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@rultor deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will get a response in a few seconds. The rest will be done by Rultor.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/07/maven-repository-amazon-s3.html</guid>
      <dc:date>2015-09-07T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Redundant Variables Are Pure Evil</title>
      <link>http://www.yegor256.com/2015/09/01/redundant-variables-are-evil.html</link>
      <description>&lt;p&gt;A redundant variable is one that exists exclusively
to &lt;strong&gt;explain&lt;/strong&gt; its value. I strongly believe that such a variable is
not only pure noise but also &lt;strong&gt;evil&lt;/strong&gt;, with a very negative effect
on code readability. When we introduce a redundant variable, we intend to make our code
cleaner and easier to read. In reality, though, we make it more verbose
and difficult to understand. Without exception, any variable used only
once is redundant and must be replaced with a value.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/09/y-tu-mama-tambien.jpg' style='width:600px;' alt='Y Tu Mamá También (2001) by Alfonso Cuarón'/&gt;&lt;figcaption&gt;Y Tu Mamá También (2001) by Alfonso Cuarón&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here, variable &lt;code&gt;fileName&lt;/code&gt; is redundant:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Length is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code must look differently:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Length is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example is very primitive, but I&amp;#39;m sure you&amp;#39;ve seen these
redundant variables many times. We use them to &amp;quot;explain&amp;quot; the code &amp;mdash;
it&amp;#39;s not just a string literal &lt;code&gt;&amp;quot;test.txt&amp;quot;&lt;/code&gt; anymore but a &lt;code&gt;fileName&lt;/code&gt;.
The code looks easier to understand, right? Not really.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s dig into what &amp;quot;readability&amp;quot; of code is in the first place. I think this
quality can be measured by the number of seconds I need to understand the
code I&amp;#39;m looking at. The longer the timeframe, the lower the readability.
Ideally, I want to understand any piece of code in a &lt;strong&gt;few seconds&lt;/strong&gt;. If I can&amp;#39;t,
that&amp;#39;s a failure of its &lt;strong&gt;author&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2015/06/29/simple-diagrams.html&quot;&gt;Remember&lt;/a&gt;,
if I don&amp;#39;t understand you, it&amp;#39;s your fault.&lt;/p&gt;

&lt;p&gt;An increasing length of code degrades readability. So the more variable
names I have to remember while reading through it, the longer
it takes to digest the code and come to a conclusion about
its purpose and effects. I think &lt;strong&gt;four&lt;/strong&gt; is the maximum number
of variables I can comfortably keep in my head without thinking
about quitting the job.&lt;/p&gt;

&lt;p&gt;New variables make the code longer because they need extra lines to
be declared. And they make the code more complex because its reader
has to remember more names.&lt;/p&gt;

&lt;p&gt;Thus, when you want to introduce a new variable to explain what your code is
doing, stop and think. Your code is too complex and long in the first place!
Refactor it using new objects or methods but not variables. Make your
code shorter by moving pieces of it into new classes or private methods.&lt;/p&gt;

&lt;p&gt;Moreover, I think that in &lt;a href=&quot;/2015/08/18/multiple-return-statements-in-oop.html&quot;&gt;perfectly designed methods&lt;/a&gt;,
you won&amp;#39;t need &lt;strong&gt;any&lt;/strong&gt; variables aside from method arguments.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/01/redundant-variables-are-evil.html</guid>
      <dc:date>2015-09-01T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Need Robust Software? Make It Fragile</title>
      <link>http://www.yegor256.com/2015/08/25/fail-fast.html</link>
      <description>&lt;p&gt;In any software project, the goal is to create something stable. We don&amp;#39;t want it
to break in front of a user. We also don&amp;#39;t want our website to show an
&amp;quot;internal application error&amp;quot; instead of a web page. We want our software
to work, not fail. That&amp;#39;s a perfectly valid and logical desire,
but in order to achieve that, we have to make our software as fragile
as possible. This may sound counterintuitive, but that&amp;#39;s the way it is.
The more &lt;strong&gt;fragile&lt;/strong&gt; your app is in development, the more &lt;strong&gt;robust&lt;/strong&gt; it is
in production.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/08/black-cat-white-cat.jpg' style='width:600px;' alt='Black Cat, White Cat (1998) by Emir Kusturica'/&gt;&lt;figcaption&gt;Black Cat, White Cat (1998) by Emir Kusturica&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;By fragile, I&amp;#39;m referring to the &lt;a href=&quot;http://martinfowler.com/ieeeSoftware/failFast.pdf&quot;&gt;Fail Fast&lt;/a&gt;
philosophy, which is the opposite of
Fail Safe. I believe you know the difference, but let me remind you anyway,
by example. This is Fail Safe:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method is supposed to calculate and return a file size. It first checks
whether the file exists. If it doesn&amp;#39;t exist, the method returns zero. Indeed,
the file is absent, so there is no size. We could complain that the file is
absent, but what for? Why make noise? Let&amp;#39;s keep it quiet and return zero.
We don&amp;#39;t fail because we&amp;#39;re trying to keep the app running. This is called Fail Safe.&lt;/p&gt;

&lt;p&gt;To the contrary, this is how Fail Fast looks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;There is no such file; I can&amp;#39;t get its length.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can&amp;#39;t find a file? We don&amp;#39;t hide this fact. We make this situation
public and visible. We scream and cry. We throw an exception. We &lt;strong&gt;want&lt;/strong&gt; the
app to crash, break, and fail, because someone gave us a file that doesn&amp;#39;t
exist. We complain and protest. This is called Fail Fast.&lt;/p&gt;

&lt;p&gt;Which philosophy, if we follow it everywhere, will make our software
robust and failure-resilient? Only the second one &amp;mdash; the Fail Fast.&lt;/p&gt;

&lt;p&gt;Why? Because the quicker and easier the failure is, the faster it will
be fixed. And the fix will be simpler and also more visible. Fail Fast
is a much better approach for maintainability. The code becomes cleaner.
It is much easier to track a failure. All methods are ready to break and throw
an exception on even the tiniest problem.&lt;/p&gt;

&lt;p&gt;In this example, if the method returns zero, it&amp;#39;s not obvious
whether the file exists and its size is actually zero or if its name is wrong
and it is just not found. The Fail Safe approach &lt;strong&gt;conceals&lt;/strong&gt; problems and makes
code less maintainable, and that&amp;#39;s why it&amp;#39;s difficult to stabilize.&lt;/p&gt;

&lt;p&gt;In the beginning, during production, we will have many crashes and errors. But
all of them will be visible and easy to understand. We will fix them and
cover them with unit tests. Each fix will make our software more &lt;strong&gt;stable&lt;/strong&gt;
and better covered by tests.&lt;/p&gt;

&lt;p&gt;Software designed with the Fail Safe approach in mind will look more stable
at the beginning, but it will degrade quickly and inevitably turn into
an unmaintainable mess.&lt;/p&gt;

&lt;p&gt;Software designed with the Fail Fast approach in mind will crash frequently
at the beginning but will improve its stability with every fix and eventually
become very stable and robust.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why fragility is the key success factor for robustness.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/08/25/fail-fast.html</guid>
      <dc:date>2015-08-25T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Why Many Return Statements Are a Bad Idea in OOP</title>
      <link>http://www.yegor256.com/2015/08/18/multiple-return-statements-in-oop.html</link>
      <description>&lt;p&gt;This &lt;a href=&quot;http://programmers.stackexchange.com/questions/118703&quot;&gt;debate&lt;/a&gt;
is very old, but I have something to say too. The question
is whether a method may have multiple &lt;code&gt;return&lt;/code&gt; statements or always
just one. The answer may surprise you: In a pure object-oriented
world, a method &lt;strong&gt;must&lt;/strong&gt; have a &lt;strong&gt;single&lt;/strong&gt; &lt;code&gt;return&lt;/code&gt; statement and &lt;strong&gt;nothing&lt;/strong&gt; else.
Yes, just a &lt;code&gt;return&lt;/code&gt; statement and that&amp;#39;s it. No other operators
or statements. Just &lt;code&gt;return&lt;/code&gt;. All arguments in favor of multiple
&lt;code&gt;return&lt;/code&gt; statements go against the very idea of object-oriented programming.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This is a classical example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code above has two &lt;code&gt;return&lt;/code&gt; statements, and it is shorter than this one
with a single &lt;code&gt;return&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More verbose, less readable, and slower, right? Right.&lt;/p&gt;

&lt;p&gt;This is the code in a &lt;strong&gt;pure&lt;/strong&gt; object-oriented world:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What do you think now? There are no statements or operators. No &lt;code&gt;if&lt;/code&gt; and no &lt;code&gt;&amp;gt;&lt;/code&gt;.
Instead, there are &lt;strong&gt;objects&lt;/strong&gt; of class &lt;code&gt;If&lt;/code&gt; and &lt;code&gt;GreaterThan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a pure and clean object-oriented approach.&lt;/p&gt;

&lt;p&gt;However, Java doesn&amp;#39;t have that. Java (and many other pseudo OOP languages)
gives us operators like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, etc. instead
of giving built-in classes, which would do the same. Because of that, we continue
to think in terms of procedures and keep talking about whether
two &lt;code&gt;return&lt;/code&gt; statements are better than one.&lt;/p&gt;

&lt;p&gt;If your code is truly object-oriented, you won&amp;#39;t be able to have more than
one &lt;code&gt;return&lt;/code&gt;. Moreover, you will have nothing except a &lt;code&gt;return&lt;/code&gt; in each method.
Actually, you will have only two operators in the entire
software &amp;mdash; &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt;. That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;Until we&amp;#39;re there, let&amp;#39;s stick with just one &lt;code&gt;return&lt;/code&gt; and at least try to look
like pure OOP.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 18 Aug 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/08/18/multiple-return-statements-in-oop.html</guid>
      <dc:date>2015-08-18T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Nine Steps to Start a Software Project</title>
      <link>http://www.yegor256.com/2015/08/04/nine-steps-start-software-project.html</link>
      <description>&lt;p&gt;Agile or not, a software project starts with a requirements analysis
and definition. We basically define what needs to be done somehow, be it on a
piece of napkin or a 100-page Word document. The next step is to
turn this into a working piece of software as fast as possible and by spending as
few dollars as possible. Ideally, this prototyping takes a week
and is made by an architect working &lt;strong&gt;solo&lt;/strong&gt;.
Once the &amp;quot;skeleton&amp;quot; is ready, we start putting software &amp;quot;meat&amp;quot; on it.
We recruit a team of programmers for that or outsource it. I see nine important steps
in the skeleton creation part; let me show you them one by one.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/08/ying-xiong.jpg' style='width:600px;' alt='Ying xiong (2002) by Yimou Zhang'/&gt;&lt;figcaption&gt;Ying xiong (2002) by Yimou Zhang&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s use some examples to make this more illustrative. Let&amp;#39;s say I&amp;#39;m a
software architect and the project is a &amp;quot;Google killer.&amp;quot; We&amp;#39;re hired to
create a new search engine, and my job is to turn requirements into
a prototype, a.k.a. a skeleton or a proof of concept. This is what I have
as an input (let&amp;#39;s say it&amp;#39;s a piece of napkin ... what else would it be
for a Google killer, right?):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Each page is ranked by the number of mentions in
social networks like Twitter, LinkedIn, Facebook, etc.
The more mentions it has, the higher the rank and the
higher its position in the search results page.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Seems like a doable project to me, and the requirements document is
clear enough. It doesn&amp;#39;t say anything about performance, but I
can assume that it has to be as fast as Google. The same goes
for scalability, stress resilience, etc.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not going to discuss how the software is created in a specific
technical stack. That&amp;#39;s not important for this article. What&amp;#39;s important now
is how my programming work will be &amp;quot;wrapped.&amp;quot; In other words, what will
I hand off to the team of programmers after a week of hard work &amp;mdash;
what is my product, or more formally, my &lt;strong&gt;deliverables&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thus, let&amp;#39;s assume I managed to create a piece of software and it works.&lt;/p&gt;

&lt;h2 id=&quot;decisions-and-alternatives&quot;&gt;Decisions and Alternatives&lt;/h2&gt;

&lt;p&gt;First of all, I have to document my key technical decisions and their
alternatives. &lt;a href=&quot;http://www.teamed.io&quot;&gt;We&lt;/a&gt; usually work in GitHub, and the best documentation
media is the &lt;code&gt;README.md&lt;/code&gt; file in the root directory of the repo. I just
put my text there in a plain Markdown format. That&amp;#39;s enough for a good
technical document &amp;mdash; it has to be short; that&amp;#39;s important.&lt;/p&gt;

&lt;p&gt;For each decision I made, there has to be at least one alternative
that I considered and rejected. There are two items at the top of my list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Apache Lucene is a search engine. It is popular,
  mature enough, scalable, and written in Java. Alternatives
  are Solr, Sphinx, Gigablast, and many others.
Java 8 is a programming language, and JVM is a
  runtime platform. I know how they work, and the team
  has enough experience with them. Alternatives are
  Ruby, Python, Go, Scala, and tons of others.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These decisions are very high-level, but I still need to document them. As you
see, I&amp;#39;m not explaining in details why the alternatives were rejected, and it&amp;#39;s
my choice. If someone questions my decisions in the future, they may
say that the alternatives were not analyzed properly. It will be clear whose fault
it was &amp;mdash; mine. So I&amp;#39;m taking full responsibility for these two
choices I&amp;#39;ve made: Lucene and Java 8.&lt;/p&gt;

&lt;p&gt;Yet another item to the list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Three modules make up the app: UI, scraper,
  and analyzer. They are fully decoupled and
  communicate strictly through Lucene. I don&amp;#39;t
  see any alternatives.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, I attach a simple diagram to illustrate my decision:&lt;/p&gt;

&lt;p&gt;&lt;img src='/uml/19b92d0465e2e819ffcf88cf46c6e333.svg' alt='UML' style='width:100%;'/&gt;&lt;/p&gt;

&lt;p&gt;As you see, in this case, I totally ignored all alternatives. I didn&amp;#39;t even
mention them. Again, I take full responsibility for that; I said,
&amp;quot;I don&amp;#39;t see any alternatives.&amp;quot; If, later, a better alternative is
discovered, it will be obvious why we overlooked it and whose fault
it was. It&amp;#39;s not only about punishment but about discipline and
traceability of decisions. Each decision must be traceable to the person
who made it. This helps us avoid bad decisions in the future and
makes the entire project more maintainable and transparent.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s add one more decision to the list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Takes Framework is used for UI. It helps keep our
  code truly object-oriented, testable, fast, and
  decoupled from the data model. Alternatives:
  - Spring: It is big, complex, and ugly
  - Play: Similar to Spring, big and ugly
  - Spark: Not as clear as Takes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, I documented the alternatives and gave my reasons why
they are not good for us. As you see, the reasons are very biased; I
basically expressed my personal opinions about these three
frameworks and definitely gave preference to my own open
source &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes&lt;/a&gt; framework. Is it good? No, it&amp;#39;s not.
But I&amp;#39;m the &lt;a href=&quot;/&quot;&gt;architect&lt;/a&gt;,
and I do what I think is right for the project.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m trying to show that the point of this documentation is for
me, the architect, to explain my way of thinking &amp;mdash; no matter how bad,
biased, or irrational it was. I have to write my decisions down and let the
project know them all.&lt;/p&gt;

&lt;p&gt;I would suggest you keep the number of documented decisions somewhere
between &lt;strong&gt;four and 12&lt;/strong&gt;. If there are fewer than four, I probably forgot
to document something important. More than 12 &amp;mdash; I&amp;#39;m documenting
too many non-important decisions. I should use other media for that,
like JavaDoc blocks or responsive classes.&lt;/p&gt;

&lt;h2 id=&quot;concerns&quot;&gt;Concerns&lt;/h2&gt;

&lt;p&gt;The next chapter in the &lt;code&gt;README.md&lt;/code&gt; file has to explain how exactly I
managed to address all concerns expressed in the initial requirements.
I mentioned above that it goes without saying that our system must
be as fast and scalable as Google. Thus, let&amp;#39;s say there are two &amp;quot;concerns&amp;quot; &amp;mdash;
performance and scalability.&lt;/p&gt;

&lt;p&gt;As a software architect, I must address them both. In other words, I have to
prove that my solution is fast and scalable. Maybe it&amp;#39;s not, but if I believe
it is, I have to explain why I think so. I can&amp;#39;t be quiet about the concerns. Here
is what I would say about performance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The system is as fast as the Lucene search engine, while
Lucene is rather fast even with large amounts of data.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this one is about scalability:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The bottleneck is in Lucene, and it is scalable
vertically. Not sure about horizontal scalability.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, I&amp;#39;m trying to be honest and tell the truth. We&amp;#39;ll be able to
review these statements later and decide whether I was right or wrong. But
we need to have my answers to all concerns expressed in the requirements.&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;

&lt;p&gt;The next section is about assumptions I&amp;#39;ve made while working with the
prototype. We usually make assumptions when we don&amp;#39;t have enough factual
information, and we basically fill the gaps. There is nothing wrong with
it, but we have to document which gaps were filled and why.&lt;/p&gt;

&lt;p&gt;How about these two assumptions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. I assume that social platforms won&amp;#39;t block our
   calls and will provide counters for all pages.
2. I assume that Lucene will be enough for both
   indexing and data storage, so we won&amp;#39;t need a
   database engine.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I made these assumptions without proper analysis of the situation. I don&amp;#39;t
know whether Twitter will be happy to see millions of requests every hour
coming from our server or not. Maybe it will ban us; I don&amp;#39;t know. I don&amp;#39;t
have to evaluate this and find an exact answer. I just made an assumption
and documented it.&lt;/p&gt;

&lt;p&gt;Will it be enough to have Lucene only, without any additional data persistence
layer? I don&amp;#39;t know, but I &lt;em&gt;hope&lt;/em&gt; so. I don&amp;#39;t have time to do a detailed
analysis of our entire data model and its potential future requirements. I just
make an assumption and call it a day.&lt;/p&gt;

&lt;p&gt;If later, during the handoff, the project sponsor says this assumption
exposes too much risk for the project, we&amp;#39;ll do a better analysis. For now, my job
is to document what I see and move on. Remember, I have just a week of time.&lt;/p&gt;

&lt;h2 id=&quot;risks&quot;&gt;Risks&lt;/h2&gt;

&lt;p&gt;Now I list all potential problems I forsee and estimate
their probability and impact. Let me show you an example first:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. Lucene may not be able to handle billions of documents [6x9]
2. Social platforms will ban our requests [8x9]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first number in square brackets is the probability and the second one
is the impact, on a 0 to 9 scale. If both numbers are nine, it&amp;#39;s not a risk
anymore; it&amp;#39;s a fact. If both numbers are zero, we can simply ignore this
risk.&lt;/p&gt;

&lt;p&gt;I listed just two, but in a real system there should be somewhere
between four and 12 risks. Too many risks is a sign that the prototype is
not focused enough, while too few is due to a lack of attention.&lt;/p&gt;

&lt;h2 id=&quot;continuous-integration&quot;&gt;Continuous Integration&lt;/h2&gt;

&lt;p&gt;Now I have to make sure the product is &amp;quot;wrapped&amp;quot; in continuous integration,
which is a &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;critical component&lt;/a&gt;
of any software package. I have to configure it, preferably
&lt;a href=&quot;/2014/10/05/ten-hosted-continuous-integration-services.html&quot;&gt;in the cloud&lt;/a&gt;,
and make sure the build is clean.&lt;/p&gt;

&lt;p&gt;It is also important to make sure the continuous integration pipeline
covers all critical areas, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Building on multiple platforms, such as Linux, Windows, and Mac.&lt;/li&gt;
&lt;li&gt;Running integration tests and unit tests.&lt;/li&gt;
&lt;li&gt;Analyzing statically.&lt;/li&gt;
&lt;li&gt;Collecting test coverage.&lt;/li&gt;
&lt;li&gt;Generating documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The stricter the pipeline, the better it is for the project. At this stage, my job,
as an architect, is to build a &amp;quot;guard wall&amp;quot; around the product to protect
it against future &lt;strong&gt;chaos&lt;/strong&gt;. The chaos will come from programmers making
changes through pull requests. They will care much less about the entire
quality of the product than I do, and that&amp;#39;s why I have to incorporate tools
that keep the situation under control.&lt;/p&gt;

&lt;p&gt;My goal is to make the continuous integration pipeline as &lt;strong&gt;fragile&lt;/strong&gt; as possible.
Any minor error should lead to a build failure. Of course, I&amp;#39;m talking about
reproducible failures. The build should fail in a predictable way, not
sporadically.&lt;/p&gt;

&lt;h2 id=&quot;static-analysis&quot;&gt;Static Analysis&lt;/h2&gt;

&lt;p&gt;This is yet another &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;critical component&lt;/a&gt;
of any software project. You have to analyze the quality of code statically.
In the most primitive approach, a static analysis will check the formatting
of your source code and fail the build when that formatting is broken. However,
in a more advanced variant, static analysis will catch many important bugs.&lt;/p&gt;

&lt;p&gt;It is called &amp;quot;static&amp;quot; becuase it doesn&amp;#39;t require the software to be running.
To the contrary, unit tests validate software quality in runtime
by running the app.&lt;/p&gt;

&lt;p&gt;There are many static analysis tools, for almost every language and format.
I strongly recommend you use them. Moreover, I recommend you configure them
as strictly as possible in order to make the build as fragile as you can.
The fragility of the build is a key success factor in software development.&lt;/p&gt;

&lt;h2 id=&quot;test-coverage&quot;&gt;Test Coverage&lt;/h2&gt;

&lt;p&gt;Test coverage must be collected on every build and, at the very least, reported. In
an ideal scenario, low test coverage must fail the build. Let&amp;#39;s say I set
the required percentage of coverage to 75 percent (it&amp;#39;s actually a more complex metric, but
in a primitive approach just one number is enough). If someone introduces
a new class without a unit test, the coverage percentage goes down and
the build breaks.&lt;/p&gt;

&lt;p&gt;My job, as an architect creating a prototype, is to make sure the coverage
is calculated on every build and is under control &amp;mdash; it can&amp;#39;t go
lower than the threshold I set.&lt;/p&gt;

&lt;p&gt;No matter how low the threshold is, what matters is whether it is under
control or not.&lt;/p&gt;

&lt;h2 id=&quot;continuous-delivery&quot;&gt;Continuous Delivery&lt;/h2&gt;

&lt;p&gt;This is the final step before the handoff. I have to configure a continuous
delivery pipeline to make sure the product is packaged and deployed in
one click. This is a very important &amp;mdash; critically important &amp;mdash; step. Without it,
everything done before and the piece of software itself is just a collection
of files. A piece of software is a product when it is packagable and
deployable in one click.&lt;/p&gt;

&lt;p&gt;&amp;quot;Pipeline&amp;quot; means that there are a number of elements chained sequentially;
for a Java application, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run automated build (the same as in continuous integration)&lt;/li&gt;
&lt;li&gt;Package JAR file&lt;/li&gt;
&lt;li&gt;Upload JAR file to repository&lt;/li&gt;
&lt;li&gt;Build JavaDoc site&lt;/li&gt;
&lt;li&gt;Upload JavaDoc site to Amazon S3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#39;m using &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;Rultor&lt;/a&gt; to
automate the entire pipeline and simplify its start, stop, and logging. I just
post a &amp;quot;please release now&amp;quot; message to a GitHub ticket, and the product
is packaged and deployed in a few minutes.&lt;/p&gt;

&lt;h2 id=&quot;acceptance&quot;&gt;Acceptance&lt;/h2&gt;

&lt;p&gt;The last step is the handoff &amp;mdash; I have to present my solution to the
project manager, the sponsor of the project, and the team. Everybody has
to accept it. It doesn&amp;#39;t mean they will like it, and that&amp;#39;s not the goal. The
goal is to deliver a complete solution, with risks, assumptions, decisions
documented, continuous integration configured, static analysis enforced, etc.
If my solution won&amp;#39;t be good enough for their criteria, they will change
the architect and try again.&lt;/p&gt;

&lt;p&gt;My objective is &lt;strong&gt;not&lt;/strong&gt; to satisfy them but to do the best I can according
to the requirements and my professional understanding of the problem and
business domains. I wrote about this some time ago:
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;A Happy Boss Is a False Objective&lt;/a&gt;.
Again, my objective is not to make them happy. Instead, my objective is to make
a perfect prototype, the way I understand the word &lt;strong&gt;perfect&lt;/strong&gt;. If I fail,
I fail. The project will get another architect and try again.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it. The skeleton is ready, and my job is done.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/08/04/nine-steps-start-software-project.html</guid>
      <dc:date>2015-08-04T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Checked vs. Unchecked Exceptions: The Debate Is Not Over</title>
      <link>http://www.yegor256.com/2015/07/28/checked-vs-unchecked-exceptions.html</link>
      <description>&lt;p&gt;Do we need checked exceptions at all? The
&lt;a href=&quot;http://stackoverflow.com/questions/6115896/java-checked-vs-unchecked-exception-explanation&quot;&gt;debate&lt;/a&gt;
is over, isn&amp;#39;t it?
Not for me. While most object-oriented languages don&amp;#39;t have them, and most programmers
think checked exceptions are a Java mistake, I believe in the
opposite &amp;mdash; unchecked exceptions are the &lt;strong&gt;mistake&lt;/strong&gt;. Moreover, I believe
multiple exception types are a bad idea too.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/07/true-romance.jpg' style='width:600px;' alt='True Romance (1993) by Tony Scott'/&gt;&lt;figcaption&gt;True Romance (1993) by Tony Scott&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let me first explain how I understand exceptions in object-oriented programming.
Then I&amp;#39;ll compare my understanding with a &amp;quot;traditional&amp;quot; approach, and
we&amp;#39;ll discuss the differences. So, my understanding first.&lt;/p&gt;

&lt;p&gt;Say there is a method that saves some binary data to a file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// save data to the file&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When everything goes right, the method just saves the data and returns control.
When something is wrong, it throws &lt;code&gt;Exception&lt;/code&gt; and we have to do something
about it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Sorry, we can&amp;#39;t save right now.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When a method says it &lt;code&gt;throws&lt;/code&gt; an exception, I understand that the
method is not &lt;strong&gt;safe&lt;/strong&gt;. It may fail sometimes, and it&amp;#39;s my responsibility to
either 1) handle this failure or 2) declare myself as &lt;strong&gt;unsafe&lt;/strong&gt; too.&lt;/p&gt;

&lt;p&gt;I know each method is designed with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;
in mind. This is a guarantee to me that if method &lt;code&gt;save()&lt;/code&gt; fails, it means
the entire saving operation can&amp;#39;t be completed. If I need to know what
the cause of this failure was, I will &lt;a href=&quot;https://en.wikipedia.org/wiki/Exception_chaining&quot;&gt;un-chain&lt;/a&gt;
the exception &amp;mdash; traverse the stack of chained exceptions and stack traces
encapsulated in &lt;code&gt;ex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I never use exceptions for flow control, which means I &lt;strong&gt;never recover&lt;/strong&gt;
situations where exceptions are thrown. When an exception occurs, I let it float up to the
highest level of the application. Sometimes I rethrow it in order
to add more semantic information to the chain. That&amp;#39;s why it doesn&amp;#39;t matter
to me what the cause of the exception thrown by &lt;code&gt;save()&lt;/code&gt; was. I just know
the method failed. That&amp;#39;s enough for me. Always.&lt;/p&gt;

&lt;p&gt;For the same reason, I don&amp;#39;t need to differentiate between different exception
types. I just don&amp;#39;t need that type of hierarchy. &lt;code&gt;Exception&lt;/code&gt; is enough for me.
Again, that&amp;#39;s because I don&amp;#39;t use exceptions for flow control.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s how I understand exceptions.&lt;/p&gt;

&lt;p&gt;According to this paradigm, I would say we must:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;always use checked exceptions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;never throw/use unchecked exceptions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use only &lt;code&gt;Exception&lt;/code&gt;, without any sub-types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;always declare one exception type in the &lt;code&gt;throws&lt;/code&gt; block.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;never catch without rethrowing; read &lt;a href=&quot;/2015/07/09/catch-if-cant-otherwise.html&quot;&gt;more about that here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This paradigm diverges from many other articles I&amp;#39;ve found on this subject.
Let&amp;#39;s compare and discuss.&lt;/p&gt;

&lt;h2 id=&quot;runtime-vs.-api-exceptions&quot;&gt;Runtime vs. API Exceptions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html&quot;&gt;Oracle says&lt;/a&gt;
some exceptions should be part of API (checked ones) while some are
runtime exceptions and should not be part of it (unchecked). They will be documented
in JavaDoc but not in the method signature.&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t understand the logic here, and I&amp;#39;m sure Java designers don&amp;#39;t
understand it either. How and why are some exceptions important while
others are not? Why do some of them deserve a proper API position
in the &lt;code&gt;throws&lt;/code&gt; block of the method signature while others don&amp;#39;t? What is the criteria?&lt;/p&gt;

&lt;p&gt;I have an answer here, though. By introducing checked and unchecked exceptions, Java
developers tried to solve the problem of methods that are too complex and messy. When
a method is too big and does too many things at the same time (violates
the single responsibility principle), it&amp;#39;s definitely better to let us
keep some exceptions &amp;quot;hidden&amp;quot; (a.k.a. unchecked).
But it&amp;#39;s not a real solution. It is only
a temporary patch that does all of us more harm than good &amp;mdash; methods keep
growing in size and complexity.&lt;/p&gt;

&lt;p&gt;Unchecked exceptions are a mistake in Java design, not checked ones.&lt;/p&gt;

&lt;p&gt;Hiding the fact that a method may fail at some point is a mistake. That&amp;#39;s
exactly what unchecked exceptions do.&lt;/p&gt;

&lt;p&gt;Instead, we should make this fact visible. When a method does too many
things, there will be too many points of failure, and the author of the
method will realize that something is wrong &amp;mdash; a method should
not throw exceptions in so many situations. This will lead to refactoring. The existence of
unchecked exceptions leads to a mess. By the way, checked exceptions don&amp;#39;t exist
at all in Ruby, C#, Python, PHP, etc. This means that creators of these
languages understand OOP even less than Java authors.&lt;/p&gt;

&lt;h2 id=&quot;checked-exceptions-are-too-noisy&quot;&gt;Checked Exceptions Are Too Noisy&lt;/h2&gt;

&lt;p&gt;Another common argument against checked exceptions is that they make our
code more verbose. We have to put &lt;code&gt;try/catch&lt;/code&gt; everywhere instead of
staying focused on the main logic. Bozhidar Bozhanov even
&lt;a href=&quot;http://techblog.bozho.net/checked-and-unchecked-exceptions-in-java/&quot;&gt;suggests&lt;/a&gt;
a technical solution for this verbosity problem.&lt;/p&gt;

&lt;p&gt;Again, I don&amp;#39;t understand this logic. If I want to do something when method
&lt;code&gt;save()&lt;/code&gt; fails, I catch the exception and handle the situation somehow.
If I don&amp;#39;t want to do that, I just say my method also &lt;code&gt;throws&lt;/code&gt; and pay no
attention to exception handling. What is the problem? Where is the verbosity
coming from?&lt;/p&gt;

&lt;p&gt;I have an answer here, too. It&amp;#39;s coming from the existence of unchecked
exceptions. We simply can&amp;#39;t always ignore failure, because the interfaces
we&amp;#39;re using don&amp;#39;t allow us to do this. That&amp;#39;s all. For example, class
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;,
which is widely used for multi-thread programming, has
method &lt;code&gt;run()&lt;/code&gt; that is not supposed to throw anything. That&amp;#39;s why we always have
to catch everything inside the method and rethrow checked
exceptions as unchecked.&lt;/p&gt;

&lt;p&gt;If all methods in all Java interfaces would be declared either as
&amp;quot;safe&amp;quot; (&lt;code&gt;throws&lt;/code&gt; nothing) or &amp;quot;unsafe&amp;quot; (&lt;code&gt;throws Exception&lt;/code&gt;), everything would
become logical and clear. If you want to stay &amp;quot;safe,&amp;quot; take responsibility
for failure handling. Otherwise, be &amp;quot;unsafe&amp;quot; and let your users worry about
safety.&lt;/p&gt;

&lt;p&gt;No noise, very clean code, and obvious logic.&lt;/p&gt;

&lt;h2 id=&quot;inappropriately-exposed-implementation-details&quot;&gt;Inappropriately Exposed Implementation Details&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/library/j-jtp05254/&quot;&gt;Some say&lt;/a&gt;
the ability to put a checked exception into &lt;code&gt;throws&lt;/code&gt; in the method
signature instead of catching it here and rethrowing a new type
encourages us to have too many irrelevant exception types in method
signatures. For example, our method &lt;code&gt;save()&lt;/code&gt; may declare that it
may throw &lt;code&gt;OutOfMemoryException&lt;/code&gt;, even though it seems to have
nothing to do with memory allocation. But it does allocate some memory, right?
So such a memory overflow may happen during a file saving operation.&lt;/p&gt;

&lt;p&gt;Yet again, I don&amp;#39;t get the logic of this argument.
If all exceptions are checked, and we don&amp;#39;t have multiple exception types,
we just throw &lt;code&gt;Exception&lt;/code&gt; everywhere, and that&amp;#39;s it. Why do we need to care
about the exception type in the first place? If we don&amp;#39;t use exceptions to control
flow, we won&amp;#39;t do this.&lt;/p&gt;

&lt;p&gt;If we really want to make our application memory overflow-resistant, we will
introduce some memory manager, which will have something like the &lt;code&gt;bigEnough()&lt;/code&gt;
method, which will tell us whether our heap is big enough for the next
operation. Using exceptions in such situations is a totally inappropriate approach
to exception management in OOP.&lt;/p&gt;

&lt;h2 id=&quot;recoverable-exceptions&quot;&gt;Recoverable Exceptions&lt;/h2&gt;

&lt;p&gt;Joshua Bloch, in &lt;a href=&quot;http://www.amazon.com/gp/product/0321356683/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321356683&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=QPTA6QN63DE364IM&quot;&gt;Effective Java&lt;/a&gt;,
says to &amp;quot;use checked exceptions for recoverable conditions and runtime exceptions
for programming errors.&amp;quot; He means something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// We can&amp;#39;t save the file, but it&amp;#39;s OK&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Let&amp;#39;s move on and do something else&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How is that any different from a famous anti-pattern called
&lt;a href=&quot;http://c2.com/cgi/wiki?DontUseExceptionsForFlowControl&quot;&gt;Don&amp;#39;t Use Exceptions for Flow Control&lt;/a&gt;?
Joshua, with all due respect, you&amp;#39;re wrong. There are no such things
as recoverable conditions in OOP. An exception indicates that the execution of a
chain of calls from method to method is broken, and it&amp;#39;s time to go up
through the chain and stop somewhere. But we never go back again
after the exception:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;App#run()
  Data#update()
    Data#write()
      File#save() &amp;lt;-- Boom, there&amp;#39;s a failure here, so we go up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can start this chain again, but we don&amp;#39;t go back after &lt;code&gt;throw&lt;/code&gt;. In other
words, we don&amp;#39;t &lt;strong&gt;do&lt;/strong&gt; anything in the &lt;code&gt;catch&lt;/code&gt; block. We only report the problem
and wrap up execution. We never &amp;quot;recover&amp;quot;!&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;All arguments against checked exceptions demonstrate nothing but
a serious misunderstanding of object-oriented programming by their authors.
The mistake in Java and in many other languages is the existence of unchecked
exceptions, not checked ones.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 28 Jul 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/07/28/checked-vs-unchecked-exceptions.html</guid>
      <dc:date>2015-07-28T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Hourly Pay Is Modern Slavery</title>
      <link>http://www.yegor256.com/2015/07/21/hourly-pay-modern-slavery.html</link>
      <description>&lt;p&gt;What is the difference between a slave and a free man? A slave
has a master. That master, a cruel and ruthless villain, is telling the slave what
to do and punishing him at will. However, at the same time, the master
guarantees food and a roof over the slave&amp;#39;s head. A slave understands
this exchange of freedom for food as a fair trade, while a free man
values freedom more. That&amp;#39;s the difference. That&amp;#39;s how it was in the
Roman empire centuries ago. But isn&amp;#39;t that how it is now too? Aren&amp;#39;t we
ancient slaves in our offices and in front of our monitors?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/07/gladiator.jpg' style='width:600px;' alt='Gladiator (2000) by Ridley Scott'/&gt;&lt;figcaption&gt;Gladiator (2000) by Ridley Scott&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1781252521/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1781252521&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=XUYP4NCA2TZVDHBT'&gt;&lt;img src='http://www.yegor256.com/images/2015/07/how-to-manage-your-slaves.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;This post is partially provoked by a recently published semi-historical book
&lt;a href=&quot;http://www.amazon.com/gp/product/1781252521/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1781252521&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=XUYP4NCA2TZVDHBT&quot;&gt;&lt;strong&gt;How to Manage Your Slaves&lt;/strong&gt;&lt;/a&gt;
by Jerry Toner. However, there&amp;#39;s more. The entire eXtremely Distributed
Software Development (&lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt;) methodology
is based on a primary fundamental principle that states,
&amp;quot;Everyone gets paid for verified deliverables.&amp;quot; They&amp;#39;re not paid for their time
per hour, per week, or per month, but rather for verified deliverables.
What is the difference and what does all this have to do with slavery?
Let&amp;#39;s see.&lt;/p&gt;

&lt;p&gt;My point here is that any payment schedule based on time instead of results
is turning us into slaves.&lt;/p&gt;

&lt;p&gt;Here is an example. Say I&amp;#39;m a software developer and I need some money
to pay my bills, buy a car, rent a house, and enjoy my life. I have
some skills for that. I can write Java software. I find a company that needs
my skills. It hires me, and we sign a contract. The contract says I have
to be in the office from 9 until 5 and I have to do what my boss tells
me to do. In exchange, I will get paychecks every few weeks, which will
cover my expenses.&lt;/p&gt;

&lt;p&gt;Doesn&amp;#39;t it look similar to what I just said above about ancient slaves? The
master (a.k.a. CEO) tells me what to do and punishes me at will;
in exchange, he gives me food and safety.&lt;/p&gt;

&lt;p&gt;The problem here is not about punishment.
This model of work makes me &lt;strong&gt;think like a slave&lt;/strong&gt;. I think this is a fair
exchange &amp;mdash; I give away my freedom (my time), and I get back food and
safety. I&amp;#39;m a slave not because the master is punishing me and I&amp;#39;m sitting
all day long in fetters. Absolutely not. A slave is not the one who was
captured and imprisoned. A slave is one who thinks slavery is
a fair way of management.&lt;/p&gt;

&lt;p&gt;Letting someone tell me what to do with my time in order to get food
in return is exactly what slavery is about.&lt;/p&gt;

&lt;p&gt;What is freedom, then? How should a free man make money?&lt;/p&gt;

&lt;p&gt;A free man sells the &lt;strong&gt;results of his work&lt;/strong&gt;. A free man cleans someone&amp;#39;s house
and bills him when the work is done. A free man drives passengers
from the airport to their home and bills them when they get there.
A free man creates a software module and bills the client when it&amp;#39;s ready.
A free man translates a document and bills per page. A free man
cooks a cake and bills for it.&lt;/p&gt;

&lt;p&gt;A free man sells results, not time.&lt;/p&gt;

&lt;p&gt;Also, a free man takes care of the food and security on his or her own.&lt;/p&gt;

&lt;p&gt;Is it more risky? Yes. Is it more stressful? Yes.
But that&amp;#39;s what freedom is about.&lt;/p&gt;

&lt;p&gt;This is my favorite quote from the book:
&amp;quot;a good slave is loyal, hard-working and vigilant&amp;quot;.&lt;/p&gt;

&lt;p&gt;Think about it.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/07/21/hourly-pay-modern-slavery.html</guid>
      <dc:date>2015-07-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Fools Don't Write Unit Tests</title>
      <link>http://www.yegor256.com/2015/07/16/fools-dont-write-unit-tests.html</link>
      <description>&lt;p&gt;&amp;quot;We don&amp;#39;t have time to write unit tests&amp;quot; or &amp;quot;We don&amp;#39;t have the
budget for unit testing&amp;quot; are complaints I hear very often. Sometimes it
may sound like, &amp;quot;We don&amp;#39;t use TDD, so that&amp;#39;s why there are no unit tests,&amp;quot; or even
&amp;quot;TDD is too expensive for us now.&amp;quot; I&amp;#39;m sure you&amp;#39;ve heard this or even
said it yourself. It doesn&amp;#39;t make any sense to me. I don&amp;#39;t get the
logic. In my understanding, unit testing is not
a product; it&amp;#39;s a &lt;strong&gt;tool&lt;/strong&gt;. You use tests to develop a product
faster and better. How can you say you don&amp;#39;t have time to use
the tool that makes your work faster? Let me show you how.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/07/ex-machina.jpg' style='width:600px;' alt='Ex Machina (2015) by Alex Garland'/&gt;&lt;figcaption&gt;Ex Machina (2015) by Alex Garland&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;TDD or not, a unit test is a unit test. Either you create it before
the main piece of code or after it.&lt;/p&gt;

&lt;p&gt;A unit test is a tool that helps you, a developer of software,
&amp;quot;run&amp;quot; your stuff and see how it works. How else can you check if it works?
When I hear, &amp;quot;I don&amp;#39;t have time for unit tests,&amp;quot; my next question is:
&amp;quot;How did you test your code?&amp;quot;&lt;/p&gt;

&lt;p&gt;I seriously can&amp;#39;t understand how it is possible to write something
and then not test it. Well, unless you&amp;#39;re paid monthly and nobody
really cares about your deliverables. If you do care about the software
you produce, you&amp;#39;re interested in seeing it in action, right?&lt;/p&gt;

&lt;p&gt;So, how do you do this?&lt;/p&gt;

&lt;p&gt;If it&amp;#39;s a one-page PHP website, you can probably run it locally on Apache,
modify it on disk, and then &lt;code&gt;Cmd&lt;/code&gt;+&lt;code&gt;R&lt;/code&gt; many times. That&amp;#39;ll work for a primitive
piece of code and only for you, a single developer of it. But I hear
this &amp;quot;I don&amp;#39;t have time&amp;quot; argument from programmers working on enterprise
systems. How do you guys test your code?&lt;/p&gt;

&lt;p&gt;I would compare unit tests with OOP classes. You can design the entire application
in a single class with a few thousand methods. You will save time on creating
other classes, structuring them, thinking about connections between them, etc.
It will be a single 20,000-line &lt;code&gt;.java&lt;/code&gt; file. And you&amp;#39;ll say that &amp;quot;you didn&amp;#39;t
have time to create classes,&amp;quot; right? What would we say about such a product and the
author of it? Right, we&amp;#39;d say he or she is just stupid. And it has nothing
to do with time or budget. Such a programmer just doesn&amp;#39;t know how to use
object-oriented programming tools, like encapsulation, inheritance, polymorphism,
interfaces, method overloading, etc. It&amp;#39;s not about time or budget; it&amp;#39;s about
skills and discipline.&lt;/p&gt;

&lt;p&gt;The same is true for unit tests. If you create code without unit tests,
it may work, just like that monster class with 20,000 lines, but the quality
of your product will be very low. And not because you didn&amp;#39;t have time to
write unit tests, but because you didn&amp;#39;t know how to do it.&lt;/p&gt;

&lt;p&gt;So every time I hear, &amp;quot;I didn&amp;#39;t have time for unit testing,&amp;quot; I understand
that you just didn&amp;#39;t know how and are trying to conceal that fact behind
false excuses. It&amp;#39;s not professional, to say the least.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/07/16/fools-dont-write-unit-tests.html</guid>
      <dc:date>2015-07-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Meetings Are Legalized Robbery</title>
      <link>http://www.yegor256.com/2015/07/13/meetings-are-legalized-robbery.html</link>
      <description>&lt;p&gt;Software development is all about creativity, right? It&amp;#39;s an art,
not a science. As software engineers, we solve complex problems,
and often our solutions are absolutely not obvious. We experiment,
innovate, research, and investigate.
To do all this, we &lt;em&gt;talk&lt;/em&gt;.
We sit together in our meeting rooms, Skype conference calls, or Slack channels;
we discuss our solutions;
we ask our coworkers for their opinions;
and we argue about the best ideas. There&amp;#39;s no doubt meetings are the key component of the modern
software design discipline ... and it&amp;#39;s very &lt;em&gt;sad&lt;/em&gt; to see it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/07/heat.jpg' style='width:600px;' alt='Heat (1995) by Michael Mann'/&gt;&lt;figcaption&gt;Heat (1995) by Michael Mann&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;A good software architect doesn&amp;#39;t need meetings and &lt;strong&gt;never&lt;/strong&gt; organizes them.&lt;/p&gt;

&lt;p&gt;Meetings demotivate, waste time, burn money, and degrade quality. But more about
that later. For now, let&amp;#39;s discuss a proposed alternative.&lt;/p&gt;

&lt;p&gt;Say I&amp;#39;m an architect who needs to design the schema for a relational
database in a new project, and I have a team of five programmers whom I want
to help me with this design. That&amp;#39;s a very logical and appropriate desire,
as a good architect always discusses all possible options with available
team members before making a final decision. So I call a meeting? No!&lt;/p&gt;

&lt;h2 id=&quot;a-good-architect&quot;&gt;A Good Architect&lt;/h2&gt;

&lt;p&gt;I ask Jeff, one of our programmers, to create a draft of the DB schema, but I don&amp;#39;t
actually talk to him about it. I value and respect his time &amp;mdash;
there&amp;#39;s no need to bother him with this organizational noise, so I just create
a ticket and assign it to Jeff. When he has time, he creates a draft
and returns a pull request. I review it and make some comments before he updates
the branch, and finally
&lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;I merge it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perfect; we have a draft.&lt;/p&gt;

&lt;p&gt;At the end of the document, Jeff also listed assumptions, risks, and concerns.
For example, this is what I got back from him (it&amp;#39;s Markdown, a very
convenient format for simple technical documents; I highly recommend it):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;## Tables
user (id INT, name VARCHAR, email VARCHAR);
payment (id INT, date DATETIME, amount INT);
order (id INT, details VARCHAR, user_id INT FK(user));

## Assumptions
- All payments will be in whole dollars, no cents.
- All users will have only one email.
- There will be no search feature required.

## Risks
- Order details may not fit into VARCHAR.
- Foreign keys may not be supported in the DBMS.

## Concerns
- Would NoSQL be more suitable?
- What is the DB server we&amp;#39;ll use?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I don&amp;#39;t know how much time Jeff would have spent on this document,
but I just created it in 10 minutes. Of course, it&amp;#39;s a very simple schema
for a very simple project. But even if Jeff spent an hour
on it, every minute of that hour is valuable to the project. What I mean
is that every dollar I pay Jeff for his time is returned to me
in the form of a text document.&lt;/p&gt;

&lt;p&gt;Now I have a draft and I&amp;#39;m taking the next step. I ask
Monica to take a look at it and suggest changes. Again, it&amp;#39;s another
hour and I&amp;#39;ve got back a pull request with changes, corrections,
new assumptions, new risks, and new concerns. I&amp;#39;m not talking to Monica &amp;mdash;
there is no need for that. She has all the information she needs
to work with the DB schema. She is a good engineer, and I trust
her ability to formulate her opinion in a written format.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s no need to sit together in the same room or stand at a whiteboard.
Monica is smart enough to do this job by herself. She already has
all the ideas expressed by Jeff in front of her;
there is no need for her to talk to him either.&lt;/p&gt;

&lt;p&gt;Once I merge her pull request (after a proper review and corrections),
I have a new version of my &lt;code&gt;schema.md&lt;/code&gt; document.&lt;/p&gt;

&lt;p&gt;Moreover, I have a Git history of this document, and I have a history
of pull requests with comments. This is way better than meeting notes
or even a meeting video. Anyone who joins the project later will be
able to understand how we came to the conclusion of using PostgreSQL
and storing monetary amounts without cents. It&amp;#39;s all there in the Git history
and Github tickets, forever with us.&lt;/p&gt;

&lt;p&gt;What if I need more opinions? Or if I&amp;#39;m still not sure the schema is good enough?
No problem; I ask someone else to review it one more time and
send me a pull request with changes.
I can even ask Jeff to do it again after a few iterations with
other programmers!&lt;/p&gt;

&lt;p&gt;Moreover, I can add my own concerns to the document, and on the next iteration,
ask Jeff to pay attention to and resolve them.&lt;/p&gt;

&lt;p&gt;The more we circle this document, the better it becomes. And every minute
the project pays for turns into a tangible product: a &lt;strong&gt;document&lt;/strong&gt;
with a change history!&lt;/p&gt;

&lt;p&gt;That&amp;#39;s how a professional architect collects opinions and
makes complex decisions. Now let&amp;#39;s see what a bad architect would do.&lt;/p&gt;

&lt;h2 id=&quot;a-bad-architect&quot;&gt;A Bad Architect&lt;/h2&gt;

&lt;p&gt;I first call a meeting. No, wait; I schedule it in Google Calendar.
No, wait, wait. First of all, I create an agenda:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. Introduction: 10 min
2. Problem: 15 min
  - We need a DB schema
  - Let&amp;#39;s choose a server
3. Opinions: 15 min
  - Jeff and Monica have experience
  - Others?
4. Coffee break: 10 min
5. Discussion: 30 min
  - Let&amp;#39;s not forget risks
  - Ask Joe about PostgreSQL
6. Conclusions: 10 min&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;#39;m sure you know what I&amp;#39;m talking about and you&amp;#39;ve seen these
agendas from your &amp;quot;architects.&amp;quot; Anyway, my first step is done. I&amp;#39;ve scheduled an
hour-and-a-half meeting where all programmers will be present. We&amp;#39;ll have fun
and drink coffee. We&amp;#39;ll discuss the problem, hear all opinions, and find
the best solution. We&amp;#39;ll document it in that &lt;code&gt;schema.md&lt;/code&gt; and
get back to our tasks.&lt;/p&gt;

&lt;p&gt;Instead of circulating those &lt;em&gt;dry&lt;/em&gt; and &lt;em&gt;boring&lt;/em&gt; Git documents, we&amp;#39;ll have a
real human communication with a nice coffee break where we&amp;#39;ll share our
opinions about the last episode of The Bing Bang Theory. Isn&amp;#39;t that what
we all like about our office jobs anyway?&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t think so.&lt;/p&gt;

&lt;p&gt;I think meetings demotivate, waste time, burn money, and degrade quality.
Those who organize them either have no idea what they are doing or
are silently &lt;em&gt;robbing&lt;/em&gt; the company they&amp;#39;re working for.&lt;/p&gt;

&lt;p&gt;We needed meetings 30 years ago when we didn&amp;#39;t have laptops and GitHub.
But even then, we had a pen and paper.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m talking about meetings that are intended to collect or distribute information,
discuss or propose something, or find a solution in a &lt;em&gt;technical&lt;/em&gt; domain.
The only &lt;em&gt;valid purpose&lt;/em&gt; of meetings is to read &lt;strong&gt;body language&lt;/strong&gt; of the people
you are dealing with. Politicians, businessmen, poker players,
shrinks, physicians, etc. &amp;mdash; they need meetings because they must
read our bodies, not just our thoughts.&lt;/p&gt;

&lt;p&gt;Do we really care about Monica&amp;#39;s body while we&amp;#39;re designing a DB schema?
Well, that depends, right? But let&amp;#39;s be serious; we&amp;#39;re not paid for that.&lt;/p&gt;

&lt;h2 id=&quot;meetings-demotivate&quot;&gt;Meetings Demotivate&lt;/h2&gt;

&lt;p&gt;The best motivation for a creative person is to see the results of
his or her creativity. If I&amp;#39;m not mistaken, enjoying the process
of creativity without any results is an obvious
sign of mental illness. A healthy and creative person like a software
engineer, for example, wants to see how his or her efforts are turned
into something valuable and, preferably, tangible.&lt;/p&gt;

&lt;p&gt;Meetings almost never produce anything tangible and rarely something valuable.
Sometimes we have &amp;quot;minutes&amp;quot;
of our meetings, but they are just short pieces of paper with a brief
summary of what we were talking about. Not a real &amp;quot;product&amp;quot; for a
creative person.&lt;/p&gt;

&lt;p&gt;Thus, they demotivate me because I simply don&amp;#39;t see what two hours
of my life were turned into. We don&amp;#39;t really &lt;em&gt;create&lt;/em&gt; anything there,
we just discuss. Pay attention here; I&amp;#39;m talking about meetings, not about
collaborative work on something, like in pair programming, for example.&lt;/p&gt;

&lt;p&gt;You may say that some meetings actually produce great ideas, which
are very tangible results. You may say that only in a direct,
face-to-face setting could these ideas be born. You may also
say that many bright technical decisions were invented precisely due
to a magic synergy of friends thinking in the same direction, at the
same time, and in the same room. This argument makes sense, but I&amp;#39;ll address that later.&lt;/p&gt;

&lt;h2 id=&quot;meetings-waste-time&quot;&gt;Meetings Waste Time&lt;/h2&gt;

&lt;p&gt;I think it&amp;#39;s obvious. For the first few minutes of the meeting, you&amp;#39;re concentrated;
then you start checking your Twitter feed and doodling. Everybody is doing
the same &amp;mdash; not because we&amp;#39;re lazy but because there is &lt;em&gt;no demand&lt;/em&gt;
for our full focus at the meeting.&lt;/p&gt;

&lt;p&gt;While Monica is working with the document, making comments and suggestions,
she is fully concentrated on the result &amp;mdash; mostly because there is nobody
else to help her. She has to deliver that pull request, and I&amp;#39;m waiting for her.
Her concentration is as high as it would be at the meeting, when someone
is asking her a direct question and she has to provide a detailed answer.&lt;/p&gt;

&lt;p&gt;Her time is optimized for a suitable outcome while everybody else is doing
something else.&lt;/p&gt;

&lt;p&gt;At the meeting, on the other hand, we&amp;#39;re all concentrating sparingly at best. And the longer
the meeting, the slower we are. Also, the more people who are there,
the less we care and the more interested we become in our Facebook updates.
I reckon that&amp;#39;s not much of a surprise to you if you&amp;#39;ve been in the software development
industry for at least a few months.&lt;/p&gt;

&lt;h2 id=&quot;meetings-burn-money&quot;&gt;Meetings Burn Money&lt;/h2&gt;

&lt;p&gt;This aligns closely with the previous conclustion. Meetings are among the biggest budget consumers
of any type of activity in a project, simply because they pay
&lt;em&gt;everybody&lt;/em&gt; who is sitting in that room or on that Skype conference while the
result they produce is almost equal to what a single person can deliver.
Or much less.&lt;/p&gt;

&lt;p&gt;Even though this may sound extreme, I have to say that I consider meetings
a legalized way to &lt;strong&gt;rob&lt;/strong&gt; a project. Most meeting
organizers (architects, CTOs, CEOs, programmers, etc.) don&amp;#39;t realize that.
They believe the more they talk, the better engineers they are. And their
bosses, by mistake, appreciate that sort of activity from their subordinates.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s robbery!&lt;/p&gt;

&lt;p&gt;I told you to create a draft of a DB schema. Now you&amp;#39;re coming to me
and asking for a meeting because certain &amp;quot;aspects&amp;quot; are not clear?
Did you study software engineering anywhere? Do you know how to work
with technical documents? Are you capable of writing in a way that everybody
else can understand and respond to you, also in writing? No? Now you want
the project to not only pay you for the DB schema draft but to also
pay me for talking to you and for a few other guys to sit next to us and text
their friends? You basically want to rob the owner of this project.
No more, no less.&lt;/p&gt;

&lt;h2 id=&quot;meetings-degrade-quality&quot;&gt;Meetings Degrade Quality&lt;/h2&gt;

&lt;p&gt;Quality goes up when it is being controlled. When someone tells me every
day that my code is buggy and needs improvements, my quality goes up.
When nobody cares what I do or how good my results are, my quality
goes down, no matter how self-motivated I am.&lt;/p&gt;

&lt;p&gt;Meetings promote group achievements and discourage individual ones. At the
end of a meeting, it&amp;#39;s often not clear who exactly suggested a good idea
and who made the biggest effort. In other words, at the end of a meeting,
I don&amp;#39;t know how good I am. Am I still the same as a month ago or am I a better
engineer?&lt;/p&gt;

&lt;p&gt;They smile more and ask me &amp;quot;what do you think?&amp;quot; more frequently than last summer;
that must mean something, right? I&amp;#39;m sure you understand this is
not the kind of feedback a serious engineer would expect.&lt;/p&gt;

&lt;p&gt;A serious software developer wants to produce tangible results and receive
tangible feedback, like money or code reviews. I want to know what
was wrong in my DB schema draft and what I missed. And I want this to be
documented somewhere. This is what makes me better, and this is how I learn
and grow.&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-a-ha!-moment?&quot;&gt;What About the A-ha! Moment?&lt;/h2&gt;

&lt;p&gt;Now, what about true creativity or that well-known &amp;quot;a-ha!&amp;quot; moment? Sometimes
it&amp;#39;s necessary to &amp;quot;think out loud&amp;quot; in order to invent something, right?
We all know how important a face-to-face interaction could be when we&amp;#39;re
researching and developing something new. Where would we be without meetings?
We can&amp;#39;t simply work with documents; we need to talk to each other in order to let our
ideas out. Isn&amp;#39;t it obvious?&lt;/p&gt;

&lt;p&gt;I have only one argument for that. Did Einstein invent his theory
at a meeting with his colleagues? I don&amp;#39;t think so. And he was solving a much
bigger problem than a DB schema design.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;Let me summarize. Meetings are an activity that requires almost no skill,
while documenting ideas in text and diagrams is a way more difficult
job to do. So train and discipline yourself to work with documents
and let juniors enjoy their meetings.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/07/13/meetings-are-legalized-robbery.html</guid>
      <dc:date>2015-07-13T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Catch Me If You ... Can't Do Otherwise</title>
      <link>http://www.yegor256.com/2015/07/09/catch-if-cant-otherwise.html</link>
      <description>&lt;p&gt;I don&amp;#39;t know whether it&amp;#39;s an anti-pattern or just a common and very popular
mistake, but I see it everywhere and simply must write about it. I&amp;#39;m talking
about &lt;strong&gt;exception catching without re-throwing&lt;/strong&gt;. I&amp;#39;m talking about something like
this Java code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/07/catch-me-if-you-can.jpg' style='width:600px;' alt='Catch Me If You Can (2002) by Steven Spielberg'/&gt;&lt;figcaption&gt;Catch Me If You Can (2002) by Steven Spielberg&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Pay attention: I don&amp;#39;t have anything against this code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Exception_chaining&quot;&gt;&lt;em&gt;exception chaining&lt;/em&gt;&lt;/a&gt;
and is a perfectly valid construct.&lt;/p&gt;

&lt;p&gt;So what is wrong with catching an exception and logging it? Let&amp;#39;s try to
look at the bigger picture first. We&amp;#39;re talking about object-oriented
programming &amp;mdash; this means we&amp;#39;re dealing with objects. Here is
how an object (its class, to be exact) would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Wire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how I&amp;#39;m using this class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks nice, right? I don&amp;#39;t need to worry about that &lt;code&gt;IOException&lt;/code&gt; when I&amp;#39;m
calling &lt;code&gt;send(1)&lt;/code&gt;. It will be handled internally, and if it occurs, the stacktrace
will be logged. But this is a totally wrong way of thinking, and it&amp;#39;s inherited
from languages without exceptions, like C.&lt;/p&gt;

&lt;p&gt;Exceptions were invented to simplify our design by moving the entire
error handling code away from the main logic. Moreover, we&amp;#39;re not just moving it away but
also concentrating it in one place &amp;mdash; in the &lt;code&gt;main()&lt;/code&gt; method, the entry
point of the entire app.&lt;/p&gt;

&lt;p&gt;The primary purpose of an exception is to collect as much information as possible
about the error and float it up to the highest level, where the user
is capable of doing something about it. Exception chaining helps even
further by allowing us to extend that information on its way up. We are basically
putting our bubble (the exception) into a bigger bubble every time we
catch it and re-throw. When it hits the surface, there are many bubbles, each remaining
inside another like a Russian doll. The original exception is the
smallest bubble.&lt;/p&gt;

&lt;p&gt;When you catch an exception without re-throwing it, you basically pop the bubble.
Everything inside it, including the original exception and all other bubbles
with the information inside them, are in your hands.
You don&amp;#39;t let me see them. You use them somehow, but I don&amp;#39;t know how. You&amp;#39;re
doing something behind the scenes, hiding potentially important information.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re hiding that from me, I can&amp;#39;t promise my user that I will be honest
with him and openly report a problem when it occurs. I simply can&amp;#39;t
trust your &lt;code&gt;send()&lt;/code&gt; method anymore, and my user will not trust me.&lt;/p&gt;

&lt;p&gt;By catching exceptions without re-throwing them, you&amp;#39;re basically breaking the
chain of trust between objects.&lt;/p&gt;

&lt;p&gt;My suggestion is to catch exceptions as seldomly as possible, and every time
you catch them, re-throw.&lt;/p&gt;

&lt;p&gt;Unfortunately, the design of Java goes against this principle in many places.
For example, Java has checked and un-checked exceptions, while there should only
be checked ones in my opinion (the ones you must catch or declare
as throwable). Also, Java allows multiple exception types to be declared
as throwable in a single method &amp;mdash; yet another mistake; stick to declaring just
one type. Also, there is a generic &lt;code&gt;Exception&lt;/code&gt; class at the top of the hierarchy,
which is also wrong in my opinion. Besides that, some built-in classes don&amp;#39;t
allow any checked exceptions to be thrown, like &lt;code&gt;Runnable.run()&lt;/code&gt;. There
are many other problems with exceptions in Java.&lt;/p&gt;

&lt;p&gt;But try to keep this principle in mind and your code will be cleaner: &lt;code&gt;catch&lt;/code&gt; only if you have no other choice.&lt;/p&gt;

&lt;p&gt;P.S. Here is how the class should look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Wire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/07/09/catch-if-cant-otherwise.html</guid>
      <dc:date>2015-07-09T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Public Static Literals ... Are Not a Solution for Data Duplication</title>
      <link>http://www.yegor256.com/2015/07/06/public-static-literals.html</link>
      <description>&lt;p&gt;I have a &lt;code&gt;new String(array,&amp;quot;UTF-8&amp;quot;)&lt;/code&gt; in one place and exactly
the same code in another place in my app. Actually, I may have
it in many places. And every time, I have to use that &lt;code&gt;&amp;quot;UTF-8&amp;quot;&lt;/code&gt; constant
in order to create a &lt;code&gt;String&lt;/code&gt; from a byte array. It would be very
convenient to define it once somewhere and reuse it, just like Apache Commons
is doing; see &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/CharEncoding.html#UTF_8&quot;&gt;&lt;code&gt;CharEncoding.UTF_8&lt;/code&gt;&lt;/a&gt;
(There are many other static literals there).
These guys are setting a bad example! &lt;code&gt;public&lt;/code&gt; &lt;code&gt;static&lt;/code&gt;
&amp;quot;properties&amp;quot; are as bad as
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;utility classes&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/07/the-shining.jpg' style='width:600px;' alt='The Shining (1980) by Stanley Kubrick'/&gt;&lt;figcaption&gt;The Shining (1980) by Stanley Kubrick&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is what I&amp;#39;m talking about, specifically:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharEncoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UTF_8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// some other methods and properties&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, when I need to create a &lt;code&gt;String&lt;/code&gt; from a byte array, I use this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.lang3.CharEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#39;s say I want to convert a &lt;code&gt;String&lt;/code&gt; into a byte array:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.lang3.CharEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks convenient, right? This is what the designers of Apache Commons think
(one of the most popular but simply &lt;em&gt;terrible&lt;/em&gt; libraries
in the Java world). I encourage you to think differently.
I can&amp;#39;t tell you to stop using Apache Commons, because we just don&amp;#39;t have
a better alternative (yet!). But in your own code, don&amp;#39;t use public
static properties &amp;mdash; ever. Even if this code may look convenient to you,
it&amp;#39;s a very bad design.&lt;/p&gt;

&lt;p&gt;The reason why is very similar to
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;utility classes&lt;/a&gt;
with public static
methods &amp;mdash; they are unbreakable hard-coded dependencies. Once you
use that &lt;code&gt;CharEncoding.UTF_8&lt;/code&gt;, your object starts to depend on this
data, and its user (the user of your object) can&amp;#39;t break this dependency. You may say that
this is your intention, in the case of a &lt;code&gt;&amp;quot;UTF-8&amp;quot;&lt;/code&gt; constant &amp;mdash; to make
sure that Unicode is specifically and exclusively being used. In this particular
example, this may be true, but look at it from a more global perspective.&lt;/p&gt;

&lt;p&gt;Let me show you the alternative I have in mind before we continue.
Here is what I&amp;#39;m suggesting instead to convert a byte array
into a &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UTF8String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s pseudo-code, since Java designers made class &lt;code&gt;String&lt;/code&gt; final and we
can&amp;#39;t really extend it and create &lt;code&gt;UTF8String&lt;/code&gt;, but you get the idea. In the real
world, this would look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UTF8String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, we encapsulate the &amp;quot;UTF-8&amp;quot; constant somewhere inside the class
&lt;code&gt;UTF8String&lt;/code&gt;, and its users have no idea how exactly this &amp;quot;byte array to string&amp;quot;
conversion is happening.&lt;/p&gt;

&lt;p&gt;By introducing &lt;code&gt;UTF8String&lt;/code&gt;, we solved the problem of &amp;quot;UTF-8&amp;quot;
literal duplication. But we did it in a proper object-oriented way &amp;mdash;
we encapsulated the functionality inside a class and let everybody
instantiate its objects and use them. We resolved the problem of functionality
duplication, not just data duplication.&lt;/p&gt;

&lt;p&gt;Placing data into one shared place (&lt;code&gt;CharEncoding.UTF_8&lt;/code&gt;)
doesn&amp;#39;t really solve the duplication problem; it actually makes it worse, mostly
because it encourages everybody to duplicate functionality using the same
piece of shared data.&lt;/p&gt;

&lt;p&gt;My point here is that every time you see that you have some data duplication
in your application, start thinking about the functionality you&amp;#39;re duplicating.
You will easily find the code that is repeated again and again. Make a new
class for this code and place the data there, as a &lt;code&gt;private&lt;/code&gt; property (or private
&lt;code&gt;static&lt;/code&gt; property). That&amp;#39;s how you will improve your design and truly get rid
of duplication.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/07/06/public-static-literals.html</guid>
      <dc:date>2015-07-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>The Better Architect You Are, The Simpler Your Diagrams</title>
      <link>http://www.yegor256.com/2015/06/29/simple-diagrams.html</link>
      <description>&lt;p&gt;I don&amp;#39;t even know where to start. Let&amp;#39;s begin with this:
&lt;strong&gt;If I don&amp;#39;t understand you, it&amp;#39;s your fault&lt;/strong&gt;. This has to be
the most basic, fundamental principle of a good software architect (well,
of any engineer), but most of the architects I&amp;#39;ve met so far, in many
companies, don&amp;#39;t seem to believe in it. They don&amp;#39;t understand that
the job of a software architect is &lt;em&gt;to make complex things simple&lt;/em&gt;,
not the other way around. They use diagrams, which are the most
popular instruments of an architect, to explain to us, programmers,
what he or she has in mind. But the diagrams are usually very cryptic
and hard to digest. What&amp;#39;s worse is that the complexity goes up
in line with their salaries &amp;mdash;
it&amp;#39;s disgusting.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/06/a-beautiful-mind.jpg' style='width:600px;' alt='A Beautiful Mind (2001) by Ron Howard'/&gt;&lt;figcaption&gt;A Beautiful Mind (2001) by Ron Howard&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Why is this happening? Why are their diagrams complex and difficult to read?
I&amp;#39;m sure you know what I&amp;#39;m talking about; you probably have your own examples
of such diagrams from projects and architects you&amp;#39;ve worked with. So why do we have them?&lt;/p&gt;

&lt;p&gt;Architects are &lt;strong&gt;proud of complexity&lt;/strong&gt;, that&amp;#39;s why. They think that
the more complex the problem they&amp;#39;re working with, the better an engineer
they are. I&amp;#39;ve had this dialog many times:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- You know, your diagram looks so complex ...
- Oh yeah, we&amp;#39;re solving complex problems here!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Usually, after that, the architect smiles with an obvious feeling of satisfaction.
Indeed, someone actually noticed how difficult his job is and appreciated
his efforts. Someone is stupid, and he is smart. He can understand this
multi-tier architecture, and I can&amp;#39;t. He definitely earns my respect, right?&lt;/p&gt;

&lt;p&gt;Wrong! A good architect knows his main role is to decompose a complex problem
into less complex components and let programmers solve them one by one. Just as
a good project manager has to decompose a complex task into smaller ones.
When the problem is properly decomposed (broken down into smaller, isolated
and properly decoupled pieces), the complexity &lt;em&gt;decreases&lt;/em&gt;, and it becomes
easier for everybody to understand and resolve.&lt;/p&gt;

&lt;p&gt;The main virtue of an architect is the ability to &lt;em&gt;reduce&lt;/em&gt; complexity. Thus,
a good architect would never be proud of a complex diagram. Instead, he would
be proud of a simple and easy-to-understand drawing with a few rectangles that
perfectly explain an entire multi-tier application. That is what
is really difficult to do. That&amp;#39;s where a true architectural mind shines.&lt;/p&gt;

&lt;p&gt;There are not many architects like that. I can&amp;#39;t say I&amp;#39;m one of them yet,
but I have a few recommendations for your diagrams. Read on and remember
that the main goal of all this is to &lt;strong&gt;reduce complexity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No More Than Five Rectangles&lt;/strong&gt;.
If you have more, there is something wrong. Try to explain yourself
in less than five. Just group some of them together and give it a name.
You don&amp;#39;t want me to spend more than a few seconds trying to understand who
is participating in the show you&amp;#39;re presenting. I want to see them
all at one glance and immediately understand who is who. I just made up
the number five, but you get the idea &amp;mdash; make sure all diagram participants
are easy to count. I&amp;#39;ve seen diagrams with 25 or more rectangles ... that&amp;#39;s unacceptable.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0321193687/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321193687&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=OAN3SZQEKQYKPSZX'&gt;&lt;img src='http://www.yegor256.com/images/2015/06/uml-distilled-book.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Use UML&lt;/strong&gt;.
Well, use whatever notation you feel comfortable with, but many years ago
people agreed that instead of using different notations, it would be easier
to learn one for all; that&amp;#39;s &lt;a href=&quot;http://www.uml.org/&quot;&gt;UML&lt;/a&gt;.
It&amp;#39;s a huge format/standard/language,
but you don&amp;#39;t need to know all of it. Just learn the basics; that will be
enough to express almost any idea you have. I would recommend
&lt;a href=&quot;http://www.amazon.com/gp/product/0321193687/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321193687&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=OAN3SZQEKQYKPSZX&quot;&gt;UML Distilled: A Brief Guide to the Standard Object Modeling Language (3rd Edition)&lt;/a&gt;
by Martin Fowler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Direct and Annotate Lines&lt;/strong&gt;.
There is nothing more annoying on a diagram than a line connecting two
rectangles without any text on it and without any direction. Is it a flow
of data? Is it a compile-time dependency? There are many possible meanings.
Always use arrows, and always annotate them &amp;mdash; this will help me
understand you much faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Use Colors&lt;/strong&gt;.
Or let me put it this way: Don&amp;#39;t abuse colors. And in order to avoid abusing
them, you be better off staying away from colors in the first place. If you need
to use colors, there must be something wrong with your diagram. It&amp;#39;s probably
too complex; that&amp;#39;s why you need to use colors. Simplify it by grouping elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Creative&lt;/strong&gt;.
It&amp;#39;s not art; it&amp;#39;s engineering. You don&amp;#39;t need to impress me; you need
to deliver the message. Your goal is not to show how sophisticated your mind is.
Moreover, your diagram style should not be personal. A diagram from you and
a diagram from another architect should look almost exactly the same if they
deliver the same message. It&amp;#39;s call uniformity. That&amp;#39;s how you make them
easier for me to understand. I don&amp;#39;t want to have to learn your personality
in order to understand your diagram. If it&amp;#39;s a server, draw a
rectangle. There&amp;#39;s no need to put a 3D picture of an HP server there.
A rectangle is enough. Also, please no shades, no fonts, and no styles.
Again, it&amp;#39;s not an artistic contest. I will understand your rectangle
pretty well without that &amp;quot;nice&amp;quot; shadow you&amp;#39;re tempted to drop. I will also
understand an arrow with a default width; no need to make it wider just
because your diagram editor allows you to. Don&amp;#39;t waste your time and my
time on all this styling. Just focus on those simple lines, rectangles, text,
and arrows.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;As I mentioned above, the goal of all this is to reduce complexity
and help me, a programmer, understand you, an architect. Remember,
if I can&amp;#39;t understand you, it&amp;#39;s your fault. You&amp;#39;re a bad architect
if you can&amp;#39;t deliver your ideas in a plain, simple form.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 29 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/06/29/simple-diagrams.html</guid>
      <dc:date>2015-06-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>XML Data and XSL Views in Takes Framework</title>
      <link>http://www.yegor256.com/2015/06/25/xml-data-xsl-views-takes-framework.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.takes.org'&gt;&lt;img src='http://www.takes.org/logo.png' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;A year ago, I &lt;a href=&quot;/2014/06/25/xml-and-xslt-in-browser.html&quot;&gt;tried to explain&lt;/a&gt;
how effectively data and its presentation can be separated
in a web applicatoin with the help of XML and XSL. In a few words,
instead of using &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_web_template_engines&quot;&gt;templating&lt;/a&gt;
(like JSP, Velocity, FreeMarker, etc.) and injection of data into HTML,
we compose them in the form of an XML document and then let
the XSL stylesheet transform them into HTML. Here is a brief example
of how all this can be used together with the &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes framework&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, let&amp;#39;s agree that templating is a bad idea in the first place. Yes, I mean
it. The entire design of JSP is wrong, with all due respect to its creators.
Here is how it works: Let&amp;#39;s say my website has to fetch the current exchange rate of
the euro from a database and show it on the home page. Here&amp;#39;s how my &lt;code&gt;index.jsp&lt;/code&gt;
would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsp&quot; data-lang=&quot;jsp&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;EUR/USD: &lt;span class=&quot;k&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to create HTML, the JSP engine will have to call &lt;code&gt;get()&lt;/code&gt; on object
&lt;code&gt;rates&lt;/code&gt; and render what&amp;#39;s returned through &lt;code&gt;toString()&lt;/code&gt;. It&amp;#39;s a terrible
design for a few reasons. First, the view is tightly coupled with the model.
Second, the flexibility of rendering is very limited. Third, the result of
rendering is not reusable, and views are not stackable. There are many other
reasons ... more about them in one of the next articles.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s see how this should be done right. First, we let our model generate
the output in XML format, for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.1&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;page&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;rate&amp;gt;&lt;/span&gt;1.1324&lt;span class=&quot;nt&quot;&gt;&amp;lt;/rate&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/page&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is what the model will produce, having no knowledge of the view. Then,
we create the view as an XSL stylesheet, which will transform XML into HTML:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns:xsl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;EUR/USD: &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rate&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, the view doesn&amp;#39;t know anything about the model in terms of
implementation. All it knows is the format of XML data output produced
by the model. Here is how you design it in the &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes framework&lt;/a&gt;.
Let&amp;#39;s start with a simple example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.http.Exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.http.FtCLI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FtCLI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NEVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s a simple web application that starts a web server
and never ends (it waits for connections in daemon mode). To make it work,
we should create a simple &amp;quot;take&amp;quot; named &lt;code&gt;TkApp&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.Take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.takes.tk.TkWrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TkWrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;page&amp;gt;&amp;lt;rate&amp;gt;1.1324&amp;lt;/rate&amp;gt;&amp;lt;/page&amp;gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;application/xml&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &amp;quot;take&amp;quot; always returns the same XML response, but it doesn&amp;#39;t
do any XSL transformation yet. We need to add the &lt;code&gt;RsXSLT&lt;/code&gt; class to the picture:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsXSLT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;?xml-stylesheet type=&amp;#39;text/xsl&amp;#39; href=&amp;#39;/xsl/index.xsl&amp;#39;?&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;page&amp;gt;&amp;lt;rate&amp;gt;1.1324&amp;lt;/rate&amp;gt;&amp;lt;/page&amp;gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;application/xml&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Excuse me for using string concatenation, which is a
&lt;a href=&quot;/2014/06/19/avoid-string-concatenation.html&quot;&gt;bad practice&lt;/a&gt;;
it&amp;#39;s merely for the simplicity of the example.&lt;/p&gt;

&lt;p&gt;As you see, I also added an XML stylesheet processing instruction to
the XML. RsXSLT will understand it and try to find the &lt;code&gt;/xsl/index.xsl&lt;/code&gt;
resource on classpath. You see the content of that file above.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;Well, not really. Building XML from strings is not a good idea. We
have a better instrument in the Takes framework. We use &lt;a href=&quot;http://www.xembly.org&quot;&gt;Xembly&lt;/a&gt;,
which is a simple imperative language for building and modifying
XML documents. More about it here:
&lt;a href=&quot;/2014/04/09/xembly-intro.html&quot;&gt;Xembly, an Assembly for XML&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is how our &lt;code&gt;TkApp&lt;/code&gt; would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsXSLT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsXembly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XeChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XeStylesheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/xsl/index.xsl&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XeAppend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XeDirectives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Directives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rate&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.1324&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;application/xml&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The most important class here is
&lt;a href=&quot;http://www.takes.org/apidocs-0.16.9/org/takes/rs/xe/RsXembly.html&quot;&gt;&lt;code&gt;RsXembly&lt;/code&gt;&lt;/a&gt;.
The idea is to let
model classes expose their data through Xembly &amp;quot;directives,&amp;quot; which
will later be applied to a DOM structure by &lt;code&gt;RsXembly&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;XeChain&lt;/code&gt;, &lt;code&gt;XeStylesheet&lt;/code&gt;, &lt;code&gt;XeAppend&lt;/code&gt;, and &lt;code&gt;XeDirectives&lt;/code&gt; expose
directives but with different meanings
(they are all instances of an &lt;code&gt;XeSource&lt;/code&gt; interface).
Their names describe their
intentions rather well.
&lt;a href=&quot;http://www.takes.org/apidocs-0.16.9/org/takes/rs/xe/XeChain.html&quot;&gt;&lt;code&gt;XeChain&lt;/code&gt;&lt;/a&gt;
just chains everything that is
delivered by encapsulated &amp;quot;directive sources.&amp;quot;
&lt;a href=&quot;http://www.takes.org/apidocs-0.16.9/org/takes/rs/xe/XeStylesheet.html&quot;&gt;&lt;code&gt;XeStylesheet&lt;/code&gt;&lt;/a&gt;
returns directives that create a single XML processing instruction.
&lt;a href=&quot;http://www.takes.org/apidocs-0.16.9/org/takes/rs/xe/XeAppend.html&quot;&gt;&lt;code&gt;XeAppend&lt;/code&gt;&lt;/a&gt;
creates an XML node and adds encapsulated directives to it.
&lt;a href=&quot;http://www.takes.org/apidocs-0.16.9/org/takes/rs/xe/XeDirectives.html&quot;&gt;&lt;code&gt;XeDirectives&lt;/code&gt;&lt;/a&gt;
simply returns what&amp;#39;s inside.&lt;/p&gt;

&lt;p&gt;In the end, this code will create exactly the same XML document
as I created above with string concatenation.&lt;/p&gt;

&lt;p&gt;The beauty of this approach is in the perfect decoupling of data generation
and XML building and translation between XML and HTML. It is perfectly reusable
and &amp;quot;stackable.&amp;quot; We can transform the data in XML format multiple times,
applying different XSL stylesheets to each one. We can even transform them into
JSON without changing a line of code in model classes.&lt;/p&gt;

&lt;p&gt;Moreover, we can format them differently, using rather powerful XSLT 2.0
instruments. XSLT by itself is a powerful and purely functional language that
enables any possible data manipulations. No templating engine is even close
to it.&lt;/p&gt;

&lt;p&gt;Take a look at how it works in the
&lt;a href=&quot;https://github.com/yegor256/rultor/blob/1.55/src/main/java/com/rultor/web/RsPage.java&quot;&gt;&lt;code&gt;RsPage&lt;/code&gt;&lt;/a&gt;
class in Rultor, for example.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/06/25/xml-data-xsl-views-takes-framework.html</guid>
      <dc:date>2015-06-25T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>A Few Valid Reasons to Reject a Bug Fix</title>
      <link>http://www.yegor256.com/2015/06/22/valid-reasons-to-reject-bug-fix.html</link>
      <description>&lt;p&gt;A bug exists when something doesn&amp;#39;t work as expected. A &lt;em&gt;bug
fix&lt;/em&gt; is basically a patch (a pull request) to the existing code base that
is supposed to solve the problem and make sure that &amp;quot;something&amp;quot;
works as expected. Very often, such a patch fixes one thing
and breaks many others. I believe that sometimes it&amp;#39;s necessary to &lt;strong&gt;reject&lt;/strong&gt;
a bug fix and ask its author to re-do the patch in order to
protect the project from bigger problems. There are a few
valid reasons for such a rejection, according to my experience.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/06/crimen-ferpecto.jpg' style='width:600px;' alt='El Crimen Perfecto (2004) by Álex de la Iglesia'/&gt;&lt;figcaption&gt;El Crimen Perfecto (2004) by Álex de la Iglesia&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;it-degrades-code-coverage&quot;&gt;It Degrades Code Coverage&lt;/h2&gt;

&lt;p&gt;This is a very common situation: After the changes are made in one place,
unit tests fail in some other place. The bug is fixed, but some possibly
unrelated unit tests start to report failure. Under pressure or simply because
we&amp;#39;re lazy, we don&amp;#39;t fix them; we simply remove the tests or mark them
as temporarily &amp;quot;skipped.&amp;quot; The problem is solved, the build is clean, so let&amp;#39;s
merge the patch and call it a day, right? Wrong!&lt;/p&gt;

&lt;p&gt;Even though I&amp;#39;m in favor of &lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;cutting corners&lt;/a&gt;
as much as possible, this is the corner I don&amp;#39;t recommend you cut.&lt;/p&gt;

&lt;p&gt;The unit tests are there precisely to prevent us from breaking the
product when under pressure.&lt;/p&gt;

&lt;p&gt;Obviously, there are situations when the unit tests are wrong and
we have to delete them. In those cases, don&amp;#39;t forget to create new ones.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=D2WNVUW64RHDRGSC'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-legacy.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;There are also situations when the bug must be fixed in a few minutes
to put the system back online and fixing all unit tests will take an hour.
Such a situation is a strong indicator that you&amp;#39;ve got a terrible underlying
situation with test coverage in the product. There&amp;#39;s no doubt that we have to make
a fix and ask our tests to shut up for some time. But in this case, make sure
the next task your team is working on after the bug fix is released is
correcting those disabled unit tests. I would recommend reading
&lt;a href=&quot;http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=D2WNVUW64RHDRGSC&quot;&gt;Working Effectively With Legacy Code&lt;/a&gt;
by Michael Feathers, which tackles this very subject.&lt;/p&gt;

&lt;h2 id=&quot;it-doesn&amp;#39;t-reproduce-the-issue&quot;&gt;It Doesn&amp;#39;t Reproduce the Issue&lt;/h2&gt;

&lt;p&gt;Sometimes the entire system may be down simply because of a small
typo in one line of code. An obvious bug fix is to remove the typo, but
that&amp;#39;s not what a good project is expecting from us if we care about its
quality. The problem is not the typo but rather the absence of unit tests
that would catch the typo at the deployment phase.&lt;/p&gt;

&lt;p&gt;The real problem is the lack of test code coverage in this particular
section of the code. By removing the typo, we&amp;#39;re not helping the project
in any way. Moreover, we&amp;#39;re doing it a disservice &amp;mdash; we&amp;#39;re &lt;em&gt;concealing&lt;/em&gt;
the real problem.&lt;/p&gt;

&lt;p&gt;Thus, no matter how small or cosmetic the issue is, its bug fix
must contain an extra test that first reproduces the bug. Without such
a test, a bug fix is a waste of the project&amp;#39;s money.&lt;/p&gt;

&lt;p&gt;Furthermore, without a unit test reproducing the issue, there is no
guarantee that our bug fix doesn&amp;#39;t introduce more bugs. I would even say that
the more bug fixes we have, the higher the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Entropy_%28information_theory%29&quot;&gt;entropy&lt;/a&gt;.
And the only way to decrease this uncertainty is by covering the
code with unit tests. Without a test, a bug fix brings more disorder
to the code base.&lt;/p&gt;

&lt;h2 id=&quot;it-is-too-big&quot;&gt;It Is Too Big&lt;/h2&gt;

&lt;p&gt;Bug fixes are &lt;em&gt;not features&lt;/em&gt;; they must be small and focused. It&amp;#39;s a very
typical mistake for programmers to get carried away while fixing a
bug and introduce some refactoring together with a fix. The result is that the
patch gets rather big and difficult to understand. I&amp;#39;m not against refactoring; it&amp;#39;s
a very important and positive thing for a project, but do it separately
&lt;em&gt;after&lt;/em&gt; the bug is fixed and merged.&lt;/p&gt;

&lt;p&gt;No refactoring while fixing a bug!&lt;/p&gt;

&lt;p&gt;Create a new unit test, reproduce the bug, and commit it. Fix the bug
in the existing code base, no matter how ugly it is. Create new
bugs, asking the team to improve the situation with the ugly code base.
If interested, assign those bugs to yourself. Or maybe somebody else
will be interested in fixing them and refactoring the code. But all that
will happen later in other pull requests with new code reviews
and new merges.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not about being lazy and unwilling to fix what looks bad. It&amp;#39;s about
a discipline, which is &lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;much more important&lt;/a&gt;
than good intentions.&lt;/p&gt;

&lt;h2 id=&quot;it-solves-more-than-one-issue&quot;&gt;It Solves More Than One Issue&lt;/h2&gt;

&lt;p&gt;Always fix one issue at a time &amp;mdash; simple as that. No exceptions. When
a bug fix patch contains code changes that fix multiple issues, it is
very difficult to understand which issue is tested, which one is reproduced,
and how they relate to each other. Combining several bug fixes into a single
pull request is a very bad practice.&lt;/p&gt;

&lt;p&gt;No matter how simple the fix is, keep it separate from others.
Review, test, and merge it individually. This will also increase the
traceability of changes. It will always be easy to understand who made
that fix, who reviewed the code, and when it was merged (and deployed).&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/06/22/valid-reasons-to-reject-bug-fix.html</guid>
      <dc:date>2015-06-22T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>