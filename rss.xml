<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014-2015</copyright>
    <lastBuildDate>Sat, 17 Oct 2015 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>Software Quality Award, 2016</title>
      <link>http://www.yegor256.com/2015/10/17/award-2016.html</link>
      <description>&lt;p&gt;This is the second year of the
&lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. The prize
is still the same &amp;mdash; &lt;strong&gt;$4,096&lt;/strong&gt;.
The rules were changed a bit. Read on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One person can submit &lt;strong&gt;only one&lt;/strong&gt; project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Submissions are accepted until the &lt;strong&gt;September 1, 2016&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Submissions must be sent via email to &lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;me@yegor256.com&lt;/a&gt;.
All I need is your Github login and repository name; I will check the commit
history to make sure you&amp;#39;re the main contributor to the project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Results will be announced &lt;strong&gt;October 15, 2016&lt;/strong&gt; on this page and by email.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The best project will receive &lt;strong&gt;$4,096&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Winners that received any cash prizes in previous years can&amp;#39;t submit again.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open source (in Github).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least 10,000 lines of code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least one year old.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object-oriented (that&amp;#39;s the only thing I understand).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best project is selected using this &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;criteria&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What doesn&amp;#39;t matter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don&amp;#39;t care about
popularity; quality is the key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it&amp;#39;s still eligible for the award. I don&amp;#39;t care about
your marketing position; quality is all.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/17/award-2016.html</guid>
      <dc:date>2015-10-17T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>What Is the Difference Between Ridley Scott and Joseph Goebbels?</title>
      <link>http://www.yegor256.com/2015/10/16/ridley-scott-and-joseph-goebbels.html</link>
      <description>&lt;p&gt;I saw &lt;a href=&quot;http://www.imdb.com/title/tt3659388/&quot;&gt;The Martian&lt;/a&gt;
this weekend, and it triggered a few thoughts. Of course, I didn&amp;#39;t like
the movie as a piece of art. It is total garbage, but this is not my point.
There is something bigger to discuss, aside from the bad acting, primitive
storyline, politically correct but absolutely unrealistic casting,
and tons of logical inconsistencies. It&amp;#39;s Hollywood; what
should I expect, right? Not just that. I think the problem is bigger.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/10/cossacks-of-the-kuban.jpg' style='width:600px;' alt='Cossacks of the Kuban (1950) by Ivan Pyryev'/&gt;&lt;figcaption&gt;Cossacks of the Kuban (1950) by Ivan Pyryev&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Have any of you seen this movie: &lt;a href=&quot;http://www.imdb.com/title/tt0041562/&quot;&gt;Cossacks of the Kuban&lt;/a&gt;?
It was shot in 1949, when &lt;a href=&quot;https://en.wikipedia.org/wiki/Joseph_Stalin&quot;&gt;Joseph Stalin&lt;/a&gt;
was in power, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Soviet_Union&quot;&gt;Soviet Union&lt;/a&gt;
was literally broke, and &lt;a href=&quot;https://en.wikipedia.org/wiki/World_War_II&quot;&gt;WWII&lt;/a&gt;
brought people to the point of &lt;strong&gt;starvation&lt;/strong&gt;.
However, the film showed something completely opposite &amp;mdash;
wealthy villages, rich peasants, and tables full of food.&lt;/p&gt;

&lt;p&gt;It was &lt;a href=&quot;https://en.wikipedia.org/wiki/Propaganda&quot;&gt;propaganda&lt;/a&gt; in 1949.&lt;/p&gt;

&lt;p&gt;But isn&amp;#39;t it quite similar to what I&amp;#39;ve just seen a few days ago,
produced and directed in 2015 by &lt;a href=&quot;http://www.imdb.com/name/nm0000631/&quot;&gt;Ridley Scott&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;In 1949, the goal of Soviet propaganda was to convince people that
their personal situations with a lack of food and lack of future were
just their local, personal &lt;strong&gt;exceptions&lt;/strong&gt; to a more general rule. And that
rule was that the country was full of food. The country was governed by
the principles of socialism, and they were working perfectly.&lt;/p&gt;

&lt;p&gt;In 2015, the goal of Hollywood propaganda is to convince us that the
organizational and motivational problems in our offices are just local exceptions to
the general rule. The rule is simple: project management is not important
if we&amp;#39;re all good friends.&lt;/p&gt;

&lt;p&gt;Ridley Scott is telling us that in a perfect organization, such as
&lt;a href=&quot;https://www.nasa.gov/&quot;&gt;NASA&lt;/a&gt;,
everybody &lt;strong&gt;loves&lt;/strong&gt; everyone; that&amp;#39;s why they can get a man from Mars without
even a map. Do the same in your company and you will be fine. You don&amp;#39;t
need risk planning, you just need a hero. Actually, you&amp;#39;d be better off
with a couple of heroes who love each other.&lt;/p&gt;

&lt;p&gt;That doesn&amp;#39;t work for you? It must be a problem with implementation.
Keep trying and smiling.&lt;/p&gt;

&lt;p&gt;Make friends, don&amp;#39;t make plans.&lt;/p&gt;

&lt;p&gt;It is a lie, very similar to the lie we heard in 1949.&lt;/p&gt;

&lt;p&gt;The truth is that you are not going to get anywhere if you follow
the spirit of this movie. In reality, teamwork must look completely
different. There are conflicts, fights, politics, betrayals, back-stabbing,
leakage of information, and just primitive incompetence. To manage all
this, one can&amp;#39;t just be a &lt;strong&gt;nice guy&lt;/strong&gt; with a big heart. I would even say
that being a nice guy is a drawback for any management position in a modern
organization. Well, in any organization at any time and in any place.&lt;/p&gt;

&lt;p&gt;Project management is &lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;not&lt;/a&gt;
about compassion and sympathy. It is about
accurate and routine comparison of risks, probabilities, impacts, and
their mitigation plans. It is about
&lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;setting rules&lt;/a&gt;
and making &lt;strong&gt;decisions&lt;/strong&gt;. It is about making sure
these decisions are being executed, precisely and without mistakes.
It is about &lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;making sure&lt;/a&gt;
those who&amp;#39;ve made mistakes are &lt;strong&gt;punished&lt;/strong&gt; while those who&amp;#39;ve
done everything right are &lt;strong&gt;rewarded&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A team of six. In a multimillion-dollar spaceship.
Flying to another planet to save one person.
Against explicit instructions from upper management.
They come back as national heroes.
Are you serious?&lt;/p&gt;

&lt;p&gt;Have you tried to deploy a new feature on a production server against
the direct will of your boss? Try it. No spaceships, no Mars. Just
a piece of code and a simple server. Then try to convince your boss
that you&amp;#39;re a hero.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m sure you get the point.&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.popsci.com/sites/popsci.com/files/styles/large_1x_/public/psc1015_mt_088.jpg' style='width:600px;' alt='Shooting The Martian (by popsci.com)'/&gt;&lt;figcaption&gt;Shooting The Martian (by popsci.com)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;So, why is Ridley Scott lying to us?
Why is he giving us a false picture of reality?
Intentionally false. He knows better than I do how real management
works in real-life organizations. Hollywood is not much different
than Silicon Valley in this aspect. So, why is he lying?&lt;/p&gt;

&lt;p&gt;Why was &lt;a href=&quot;https://en.wikipedia.org/wiki/Joseph_Goebbels&quot;&gt;Joseph Goebbels&lt;/a&gt;,
a minister of propaganda in the Third Reich,
lying to the German people?&lt;/p&gt;

&lt;p&gt;Because that&amp;#39;s what we like to hear.&lt;/p&gt;

&lt;p&gt;We don&amp;#39;t want to know the truth. We didn&amp;#39;t want to know about
Nazi war crimes &amp;mdash; so Joseph Goebbels built a fake reality for us.
We don&amp;#39;t want to know about the true principles of management &amp;mdash;
so Ridley Scott built fake ones for us.&lt;/p&gt;

&lt;p&gt;Think about it.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/16/ridley-scott-and-joseph-goebbels.html</guid>
      <dc:date>2015-10-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Competition Without Rules Is Destructive</title>
      <link>http://www.yegor256.com/2015/10/13/competition-without-rules.html</link>
      <description>&lt;p&gt;When your team has to choose which technical decision to make,
who has the final say? When one of your colleagues asks
for a raise, who decides, and what is his or her decision based on?
When it&amp;#39;s necessary to work overtime, how is it decided
who will stay in the office?
I&amp;#39;m expecting you to shrug your shoulders. You&amp;#39;re right, these questions never
have explicit answers in modern organizations. We are used to working
in a more &amp;quot;democratic&amp;quot; way, where such decisions are made
&lt;strong&gt;subjectively&lt;/strong&gt; by managers or more senior employees.
Is this how it should be?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/10/the-wrestler.jpg' style='width:600px;' alt='The Wrestler (2008) by Darren Aronofsky'/&gt;&lt;figcaption&gt;The Wrestler (2008) by Darren Aronofsky&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;We are trying to &lt;strong&gt;avoid explicitness&lt;/strong&gt; in these sensitive subjects. Indeed,
how can we tell Jeff that his salary is lower than
Monica&amp;#39;s because his performance is worse?
This will definitely lead to depression and negativity
within the team, right?&lt;/p&gt;

&lt;p&gt;What I&amp;#39;m trying to say is that &lt;strong&gt;we don&amp;#39;t set rules&lt;/strong&gt;. We think that
strict and explicit rules related to performance
offend creative people. Well, all people.&lt;/p&gt;

&lt;p&gt;We avoid explicitness in performance appraisals.&lt;/p&gt;

&lt;p&gt;And this is totally wrong!&lt;/p&gt;

&lt;p&gt;This is a &lt;strong&gt;mistake&lt;/strong&gt;, and it causes big problems!&lt;/p&gt;

&lt;p&gt;When a group doesn&amp;#39;t have explicitly defined principles of
survival and growth, it starts to create them &lt;strong&gt;naturally&lt;/strong&gt;. When
people don&amp;#39;t know what exactly needs to be done in order to get
a 15 percent raise, they find a way to get this information anyway. And guess what
this information will end up being? Right &amp;mdash; you have
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;to make your boss happy&lt;/a&gt;;
that&amp;#39;s how your chances for a raise improve.&lt;/p&gt;

&lt;p&gt;Instead of working toward the goals set by the organization,
we are fighting with each other for the attention of our boss.
Instead of focusing on the results and their quality, we
are reading the mood of our manager. Our fear becomes a guide for us.&lt;/p&gt;

&lt;p&gt;Competition is &lt;strong&gt;inevitable&lt;/strong&gt; in a group, especially if the group consists
of creative people. Creativity is all about competition. Each of us
wants to be better than the others, and this is what drives &lt;strong&gt;innovation&lt;/strong&gt;.
But if the team has no rules, even a minor competition seriously
and negatively affects their motivation.&lt;/p&gt;

&lt;p&gt;If you want your team to be creative and productive, clearly and explicitly
define the rules of competition. Make sure everyone can get clear and
straightforward answers at any time to questions like these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Who is the best developer on our team?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why is my salary lower than Jeff&amp;#39;s?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do I need to do in order to get a raise?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under what conditions will I be fired?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can you ask these questions in your team and easily
get explicit answers?&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 13 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/13/competition-without-rules.html</guid>
      <dc:date>2015-10-13T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Be a Good Office Slave</title>
      <link>http://www.yegor256.com/2015/10/06/how-to-be-good-office-slave.html</link>
      <description>&lt;p&gt;This is a short manual for you, my friend. I assume you are sitting in the
office right now, reading this blog post. Maybe you don&amp;#39;t like
your office job, or maybe you enjoy it and feel excited to be
close to your office friends. It doesn&amp;#39;t matter. What matters is that
there is always an alternative to office slavery. I&amp;#39;m not talking about
starting your own business. There are people in this world who work
for someone without doing what is described below. They do exist,
as well as companies that don&amp;#39;t turn their employees into slaves. I really hope
you will eventually find one. In the meantime, this manual is for you :)&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/10/the-office.jpg' style='width:600px;' alt='The Office (2001–2003)'/&gt;&lt;figcaption&gt;The Office (2001–2003)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Help Others&lt;/strong&gt;.
Find the stupidest newbies and help them. Regardless of what exactly
you help them with, they should rely on you. Show them where the restroom is,
recommend a good restraunt nearby, assist in an IDE installation,
explain how the project works, and make standard jokes about the worst
class in it. They must become your best friends &amp;mdash; and not only them. Be
helpful to everybody. No matter what is happening, everyone must know
that you&amp;#39;re ready to help. Ideally, they all must depend on your
kindness and readiness to save them from the
&lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;chaos&lt;/a&gt; around.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be the Last to Leave the Office&lt;/strong&gt;.
Nothing annoys a manager more than an employee who leaves the office
at 5 p.m. sharp. It&amp;#39;s a sign of disrespect. Don&amp;#39;t you like it here? Is there
anything in this life more important to you than this job? There shouldn&amp;#39;t be.
Demonstrate that by staying late. Here is a simple trick:
just come later. The boss won&amp;#39;t blame you for that. But always stay there
after everybody else is gone. Ideally, you should leave right after the boss.
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;Overtime&lt;/a&gt;
is a clear sign of your loyalty to our mutual results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Nag&lt;/strong&gt;.
No matter what is happening, you should never criticize your direct manager. The
boss is &lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;always right&lt;/a&gt;.
Everything else may be wrong &amp;mdash; the situation,
colleagues, suppliers, computers, the CEO, investors, the market, or the weather,
but not the boss you directly report to.
The word of this person is the law. The boss is the god. Ideally, you should
be the prophet. No matter what the boss says, you deliver
it to others. And you must look like you sincerely believe that it&amp;#39;s right.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attend All Meetings&lt;/strong&gt;.
No matter what they are about, you must be there. And don&amp;#39;t just be present;
actively participate. It&amp;#39;s not so difficult, and very soon you will
start to understand what they are talking about and will be able to say
something, even if you had no idea about the subject beforehand. Eventually,
everybody will start thinking they must ask your permission in order
to make some decision, because you were at that meeting. Important people
don&amp;#39;t write code; they attend
&lt;a href=&quot;/2015/07/13/meetings-are-legalized-robbery.html&quot;&gt;meetings&lt;/a&gt;. Remember that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Turn Down Recruiters, Publicly&lt;/strong&gt;.
Loyalty! That&amp;#39;s what matters to a real team. When a recruiter calls you,
raise your voice and explain that you&amp;#39;re happy in this company and don&amp;#39;t
want to move on, ever. The more people who hear you, the better. Also,
you can sometimes tell stories about offers you&amp;#39;re getting
and how you turn them down. Your boss should be the main
audience for these stories. Why do you turn them down? Not because they are
bad, but because your life belongs to this company.
Loyalty is what makes you a
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;good slave&lt;/a&gt;; don&amp;#39;t forget it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Take Sides&lt;/strong&gt;.
It&amp;#39;s just too risky. In any argument, you can always find pros and cons
for both sides, right? So why support one of them? You may be wrong and
lose respect in front of everybody. Why take that chance? Instead, always
say that there are drawbacks to both options. That&amp;#39;s what a wise man would
say, anyway. There is no absolute truth in this world. That&amp;#39;s why you should
always stay in the middle, where you will never be wrong. Well, until your boss
takes one of the sides. That&amp;#39;s the right moment to agree and follow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Never Ask for a Raise&lt;/strong&gt;.
It should be absolutely clear to everybody that you don&amp;#39;t work for money. You
work for &lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;the big idea&lt;/a&gt;.
Period.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attend All Social Events&lt;/strong&gt;.
Birthdays, corporate parties, Halloween, Friday beers &amp;mdash; you must be
there, always. Don&amp;#39;t worry about wasting your life; you will like
them eventually. It is very important to demonstrate that you truly live in the
office. You are not just writing code, taking money, and going home to your family.
Absolutely not! The office is your real family, and you truly enjoy eating
pizza with your boss and listening to his childhood stories. That&amp;#39;s how
you demonstrate your loyalty, which is the best quality of a
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;good slave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Point Fingers Privately&lt;/strong&gt;.
Don&amp;#39;t say anything bad about anyone in public. No matter who is doing what,
we&amp;#39;re always a team; we&amp;#39;re together. Together! This should be your main
keyword when talking about results, problems, and risks. Never blame anyone &amp;mdash;
publicly. However, when you&amp;#39;re talking in the kitchen with a few of your most trusted
colleagues, let yourself go. Tell them who you think is the weakest part
of the team and what you would do with him or her if you were the boss.
Don&amp;#39;t restrict yourself, but always make sure there are only a few people who can hear you.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;If you follow all these rules, you won&amp;#39;t be fired, ever. Well, until
the company is bankrupt, that is. If it&amp;#39;s a startup, it will go bankrupt for sure,
thanks to you and people like you. If it&amp;#39;s a big enterprise, it probably won&amp;#39;t, unfortunately.
You will be safe, and your resume will have an
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;impressive&lt;/a&gt;
&amp;quot;12 years at Oracle&amp;quot; statement. Well, that&amp;#39;s an achievement, isn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t think so.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/06/how-to-be-good-office-slave.html</guid>
      <dc:date>2015-10-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Vertical and Horizontal Decorating</title>
      <link>http://www.yegor256.com/2015/10/01/vertical-horizontal-decorating.html</link>
      <description>&lt;p&gt;A &lt;a href=&quot;http://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt;
is one of the best ways to add features to an object
without changing its interface. I use
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;composable decorators&lt;/a&gt;
quite often and always question myself as to how to design them right
when the list of features must be configurable.
I&amp;#39;m not sure I have the right answer, but here is
some food for thought.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/10/the-apartment.jpg' style='width:600px;' alt='The Apartment (1960) by Billy Wilder'/&gt;&lt;figcaption&gt;The Apartment (1960) by Billy Wilder&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s say I have a list of numbers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I want to create a list that will only have odd, unique, positive, and sorted numbers.
The first approach is &lt;strong&gt;vertical&lt;/strong&gt; (I just made this name up):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Numbers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Odds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArrayNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second approach is &lt;strong&gt;horizontal&lt;/strong&gt; (again, a name I made up):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Numbers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Modified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArrayNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Odds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See the difference? The first approach decorates &lt;code&gt;ArrayNumbers&lt;/code&gt; &amp;quot;vertically,&amp;quot;
adding functionality through the composable decorators &lt;code&gt;Positive&lt;/code&gt;, &lt;code&gt;Odds&lt;/code&gt;,
&lt;code&gt;Unique&lt;/code&gt;, and &lt;code&gt;Sorted&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second approach introduces the new interface &lt;code&gt;Diff&lt;/code&gt;, which implements
the core functionality of iterating numbers through instances of
&lt;code&gt;Positive&lt;/code&gt;, &lt;code&gt;Odds&lt;/code&gt;, &lt;code&gt;Unique&lt;/code&gt;, and &lt;code&gt;Sorted&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the user of &lt;code&gt;numbers&lt;/code&gt;, both approaches are the same. The difference is
only in the design. Which one is better and when? It seems that
vertical decorating is easier to implement and is more suitable for
smaller objects that expose just a few methods.&lt;/p&gt;

&lt;p&gt;As for my experience, I always tend to start with vertical decorating since it&amp;#39;s
easier to implement but eventually migrate to a horizontal one when the
number of decorators starts to grow.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/10/01/vertical-horizontal-decorating.html</guid>
      <dc:date>2015-10-01T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>You're Just the Mayonnaise in a Bad Sandwich</title>
      <link>http://www.yegor256.com/2015/09/29/mayonnaise.html</link>
      <description>&lt;p&gt;That&amp;#39;s what a character played by actor Bruce Willis said to Robert DeNiro&amp;#39;s
movie producer character in Barry Levinson&amp;#39;s brilliant film
&lt;a href=&quot;http://www.imdb.com/title/tt0486674/&quot;&gt;What Just Happened&lt;/a&gt;. I second that.
Producers, recruiters, managers, real estate agents,
sales agents, lawyers, and &lt;a href=&quot;http://english.stackexchange.com/questions/103448/is-outstaffing-a-real-word&quot;&gt;outstaffers&lt;/a&gt;
&amp;mdash; what do they all have in common?
They are middlemen standing between money and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Proletariat&quot;&gt;proletariat&lt;/a&gt;, taking a huge percentage
for themselves but &lt;strong&gt;adding no value&lt;/strong&gt;. Their very existence is our mutual
misfortune. We are too weak to get rid of them now, but sooner
or later every supply chain will be &lt;strong&gt;mayonnaise-free&lt;/strong&gt;. Look at
Uber &amp;mdash; taxi companies are dead already, and we now have only drivers
and passengers with a computer system in between. The same will happen
everywhere else.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/09/what-just-happened.jpg' style='width:600px;' alt='What Just Happened (2008) by Barry Levinson'/&gt;&lt;figcaption&gt;What Just Happened (2008) by Barry Levinson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Seriously, look at &lt;strong&gt;IT recruiters&lt;/strong&gt;, for example. To find a programmer, one has to pay
about $30K (in Silicon Valley, if a programmer&amp;#39;s salary is, say, $120K a year)
to a recruiter. $30,000! What will this money be spent on? Or let me put it this way:
How much software will I get for this money? Let me put it even better:
Why don&amp;#39;t I give this money to the programmer directly as a bonus for
switching companies? Why do &lt;strong&gt;we&lt;/strong&gt; need this recruiter between us &amp;mdash;
me and the programmer I&amp;#39;m going to hire? Can&amp;#39;t we use this $30,000 more effectively?&lt;/p&gt;

&lt;p&gt;Because software systems are not powerful enough yet? Because I can&amp;#39;t
find a programmer with a few clicks and I have to delegate this
search function to someone for $30K?&lt;/p&gt;

&lt;p&gt;Well, yes and no.&lt;/p&gt;

&lt;p&gt;On one hand, there are plenty of job sites and rather powerful
technologies for finding the right person.
There is &lt;a href=&quot;https://careers.stackoverflow.com/&quot;&gt;StackOverflow Careers&lt;/a&gt;,
which not only allows me to find a programmer but also see what he or she talks about and
the quality of his or her questions and answers. There is
&lt;a href=&quot;http://www.github.com&quot;&gt;GitHub&lt;/a&gt; that demonstrates the code written
by a programmer, helping me easily understand its quality.
There are professional certifications that show how strong
a candidate&amp;#39;s skills are. And there are plenty of other avenues.&lt;/p&gt;

&lt;p&gt;On the other hand, these tools are not actively used by
the majority of programmers and software companies &amp;mdash;
mostly because IT recruiters stay between us, &lt;strong&gt;stealing&lt;/strong&gt; our money
and protecting that position for themselves.
Just like taxi companies remain between passengers and drivers,
or real estate agents get in between house owners and house buyers,
or outstaffing companies squeeze in the middle of project sponsors and engineers.&lt;/p&gt;

&lt;p&gt;Imagine if there was no Google and you had to hire a &amp;quot;researcher&amp;quot; every
time you needed to find some information. That&amp;#39;s how it worked 50 years
ago. Not anymore. Google solved the problem of information discovery. It is
fast, it is accurate, and it is free. The researchers are out of business.
Are we sorry about it? Well, maybe, but that&amp;#39;s the way it should be.
The same will happen with IT recruiters and all those &amp;quot;agents.&amp;quot; They will
eventually be out of business and will start doing something that
actually adds &lt;strong&gt;some value&lt;/strong&gt; for all of us.&lt;/p&gt;

&lt;p&gt;At the moment, they are simply taking away our money, &lt;strong&gt;exploiting&lt;/strong&gt; the
fact that we&amp;#39;re lazy, or stupid, or shy, or you name it. For example, it was not obvious
in the beginning how to use Google. I know a few people who still don&amp;#39;t
know how to do it. I&amp;#39;m sure you know a few, too. They would
rather call a friend when they need information than pull up
Google.&lt;/p&gt;

&lt;p&gt;Say I&amp;#39;m a good friend and Jeff calls me to ask what the weather will
be like tomorrow in California. I&amp;#39;ll advise him to Google it, now and
every time in the future. I will teach him how to do it. But if I was a lousy
friend and wanted Jeff to depend on me forever, I would just
browse over to Google, check the weather, and tell Jeff it&amp;#39;ll be cloudy.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s exactly what recruiters are doing.
Their entire business is based on the fact that we&amp;#39;re &lt;strong&gt;not smart&lt;/strong&gt; enough
to use existing software systems, publicly available and in most cases
very cheap or simply free. Or we&amp;#39;re &lt;strong&gt;too shy&lt;/strong&gt; to apply for a new job ourselves.
Or we just &lt;strong&gt;don&amp;#39;t know&lt;/strong&gt; how to write a good resume and emphasize
our skills properly. They are expoiting our weaknesses to make money.&lt;/p&gt;

&lt;p&gt;A friend of mine was looking for a house in San Francisco a few months ago. He
actually found the house on &lt;a href=&quot;http://www.zillow.com&quot;&gt;Zillow&lt;/a&gt; but paid $70,000
to two real estate agents to help him close the deal
(the price of the house was close to $1.4 million,
with 2.5 percent to each agent). What did these &amp;quot;hard-working&amp;quot; people do to earn his $70,000?
They prepared the necessary paperwork and, of course,
talked to him for a few weeks.&lt;/p&gt;

&lt;p&gt;Can&amp;#39;t we get rid of these two good-for-nothings and delegate their
operations to a computer system? Well, we have Zillow, but how much
of my friend&amp;#39;s $70,000 found its way to Zillow? Almost nothing
(I assume one of the agents paid a few pennies to publish an ad there).
Is that fair? Let&amp;#39;s instead give $5,000 out of every real estate transaction
to Zillow and let it handle everything, automatically. Without any &amp;quot;agents&amp;quot;
involved. Can we? I&amp;#39;m sure we can, and that&amp;#39;s the future.&lt;/p&gt;

&lt;p&gt;What will the army of real estate agents do? Well, maybe something useful,
like &lt;strong&gt;cleaning streets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The very existence of this mayonnaise in our modern business environment
is a very negative thing. Money is simply not working the way it should.
Also, since this mayonnaise is rather expensive, its existence creates
a very de-motivating effect on those who are actually delivering value while
making a much smaller income. It obviously demonstrates that the entire
system is defective and simply not fair.&lt;/p&gt;

&lt;p&gt;The same is true about &lt;strong&gt;outstaffing&lt;/strong&gt; companies, which we contract with to
gain access to programmers sitting somewhere overseas or much closer.
They find developers, hire them full-time, and resell their skills with a 150 percent
or greater margin on a part-time or short-term basis. I&amp;#39;ve been getting a few offers
from such companies every day.&lt;/p&gt;

&lt;p&gt;They want me to pay, say, $40 for each hour while a developer
sitting in their office gets like $2,500 per month. This means
$25 out of my $40 will be spent &lt;strong&gt;not writing code&lt;/strong&gt; but rather on something else.
Also, a programmer will be motivated for the $2,500, not for $7,000.
So I will be paying $7K per month and getting software worth $2,500 a month.&lt;/p&gt;

&lt;p&gt;I will be paying for a Mercedes-Benz S-Class but getting a Ford Focus.
I&amp;#39;m not greedy; I just want my every dollar to be converted into some value.
In this scenario, $4,500 will be simply wasted.&lt;/p&gt;

&lt;p&gt;The same is true about every single middleman in the market. They
make business processes less effective, take away significant
amounts of money, and slow down optimizations and innovations.
A truly modern and innovative way of doing business is by &lt;strong&gt;directly connecting
money and people&lt;/strong&gt; who add value. There should be no one in
between except computer systems.&lt;/p&gt;

&lt;p&gt;Sometimes I hear the comment that people love to work with people, not computers. That&amp;#39;s
why we need all that mayonnaise &amp;mdash; to make our life &lt;strong&gt;happier&lt;/strong&gt;? It&amp;#39;s true that
people love to deal with people &amp;mdash; people we really need, people who
speak the same language, and people who deliver &lt;strong&gt;real value&lt;/strong&gt;. Not with
producers, recruiters, real estate agents, sales agents, outstaffers, lawyers,
travel agents, investment brokers, executive officers, or taxi dispatchers.&lt;/p&gt;

&lt;p&gt;The point of Bruce Willis&amp;#39;s character is that when the sandwich is bad
you don&amp;#39;t fix it with a mayonnaise. It won&amp;#39;t help, but only make things worse.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/29/mayonnaise.html</guid>
      <dc:date>2015-09-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Are You a Micromanager?</title>
      <link>http://www.yegor256.com/2015/09/22/micromanagement.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Micromanagement&quot;&gt;Micromanagement&lt;/a&gt;,
according to Wikipedia at the time of this writing, is &amp;quot;a management style
whereby a manager closely &lt;strong&gt;observes&lt;/strong&gt; or &lt;strong&gt;controls&lt;/strong&gt; the work of subordinates
or employees.&amp;quot; Everyone knows micromanagement is evil, but what
could be wrong with closely observing or controlling people&amp;#39;s work? Nothing.
Observing and controlling is not what&amp;#39;s so bad about micromanagement. It
is something completely different.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/09/office-space.jpg' style='width:600px;' alt='Office Space (1999) by Mike Judge'/&gt;&lt;figcaption&gt;Office Space (1999) by Mike Judge&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are &lt;a href=&quot;https://www.google.com/search?q=micromanagement&quot;&gt;tons of articles&lt;/a&gt;
about micromanagement. Most of them emphasize that the &amp;quot;micro&amp;quot; prefix prescribes
the size of the tasks being managed, meaning a good manager doesn&amp;#39;t care
about the small stuff while a micromanager employs
&amp;quot;excessive control or attention to details&amp;quot;, as
&lt;a href=&quot;http://www.merriam-webster.com/dictionary/micromanage&quot;&gt;Merriam-Webster&lt;/a&gt; says.&lt;/p&gt;

&lt;p&gt;It seems that in order to become a good manager, one should just
stop paying attention to details. Huh?
What could be worse than a manager who doesn&amp;#39;t pay attention to details?&lt;/p&gt;

&lt;p&gt;Micromanagement has nothing to do with the details observed or the amount
of control a manager exerts over subordinates. Instead, it is all about
&lt;strong&gt;how&lt;/strong&gt; the details are observed and control is exercised. A micromanager
gives instructions while a good manager defines goals and rules.&lt;/p&gt;

&lt;p&gt;A micromanager defines &lt;strong&gt;algorithms&lt;/strong&gt; for achieving results and insists
on them being implemented according to his or her will. This is what
a micromanager would sound like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- Could you please stop what you&amp;#39;re doing now
  and install Nginx on a new server? I beg you,
  don&amp;#39;t do anything else until it&amp;#39;s done.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how a good manager would delegate a similar task:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- Hey, the server with Nginx configured must
  be up and running by 6 p.m. I&amp;#39;m counting on you.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pay attention to how polite our micromanager is and how rude the good manager is.
However, it&amp;#39;s obvious that the first one is extremely annoying while
the second doesn&amp;#39;t irritate us at all. Because it&amp;#39;s all about how
the task is defined &amp;mdash; as an &lt;strong&gt;algorithm&lt;/strong&gt; or as a &lt;strong&gt;goal with rules&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A micromanager treats me as a dumb executor of his or her will. A micromanager
is &lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot;&gt;&lt;strong&gt;imperative&lt;/strong&gt;&lt;/a&gt;.
A good manager, on the other hand, is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;&lt;strong&gt;declarative&lt;/strong&gt;&lt;/a&gt;. A good manager
declares what needs to be done, never telling me how I must achieve it.&lt;/p&gt;

&lt;p&gt;By the way, there is &amp;mdash; surprisingly &amp;mdash; a lot in common between management and
object-oriented programming :) Good object-oriented programming is
&lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;also declarative&lt;/a&gt;,
not imperative.&lt;/p&gt;

&lt;p&gt;Thus, this &amp;quot;micro&amp;quot; prefix is not really about the size of the tasks a manager
keeps under control. It is about what a manager wants to see inside them &amp;mdash;
a black box or a glass box under a &lt;strong&gt;microscope&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A good manager doesn&amp;#39;t care about what I&amp;#39;m doing now, what tasks I&amp;#39;m working on,
or what my plans, problems, and risks are. Instead, a good manager cares about my
&lt;strong&gt;results&lt;/strong&gt;, to a very specific level of details. A good manager pays extreme
attention to defining quality standards for my work, clearly explaining
expectations to me, and explicitly defining the rules of failure and success. A good
manager makes the path ahead of me very clear. With a good manager, I know
exactly what results are expected and what will happen if I fail or
succeed.&lt;/p&gt;

&lt;p&gt;Thus, to be a good manager, you should never tell your subordinates &lt;strong&gt;how&lt;/strong&gt;
to complete their tasks. Instead, you should define &lt;strong&gt;what&lt;/strong&gt; solutions and results
are expected. And, of course, what will happen in the case of success or failure.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/22/micromanagement.html</guid>
      <dc:date>2015-09-22T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Fire Someone Right</title>
      <link>http://www.yegor256.com/2015/09/16/how-to-fire-someone-right.html</link>
      <description>&lt;p&gt;A friend of mine asked me today, &amp;quot;How should I fire
someone the right way? What are the tricks to do it nicely,
gracefully, and professionally?&amp;quot; I responded by saying that if you question yourself
about how to do it right, you&amp;#39;re doing it wrong in the first place.
If firing is a painful and unpleasant process for you, there is
a problem with your management model. Firing must be an &lt;strong&gt;easy&lt;/strong&gt;
and &lt;strong&gt;open&lt;/strong&gt; procedure, &lt;strong&gt;visible&lt;/strong&gt; and &lt;strong&gt;understood&lt;/strong&gt; by the entire team.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/09/up-in-the-air.jpg' style='width:600px;' alt='Up in the Air (2009) by Jason Reitman'/&gt;&lt;figcaption&gt;Up in the Air (2009) by Jason Reitman&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I mentioned this problem before in
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;my post&lt;/a&gt; about team morale.
I said that firing someone should not be done behind &lt;strong&gt;closed doors&lt;/strong&gt;.
Instead, the assessment of individual performance should
occur openly and be visible to the entire team. If you need to close
the door in order to talk &amp;quot;privately&amp;quot; to express your concerns and
eventually to fire someone, you are a bad manager.&lt;/p&gt;

&lt;p&gt;I also explained &lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;some time ago&lt;/a&gt;
that a perfectly managed team is working for the project, not for you, the boss.
The team must share the same goal and work towards it. The boss (or CEO,
CTO, project manager, Scrum master, team lead, etc.) is there in order
to enforce the &lt;strong&gt;rules&lt;/strong&gt; accepted by the team. The team agrees to the rules,
so the boss is just making sure they are &lt;strong&gt;enforced&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If firing is unpleasant for you, the rules are not clear.&lt;/p&gt;

&lt;p&gt;If the rules are not clear, you&amp;#39;re a bad manager.&lt;/p&gt;

&lt;p&gt;The firing is unpleasant only when your decision is not supported by the team.
You feel you&amp;#39;re doing something wrong to the person you are firing and
to the people who stay on the team. You feel it only because you don&amp;#39;t have
enough support from your team. You&amp;#39;re acting as a dictator, not a true leader.&lt;/p&gt;

&lt;p&gt;The firing decision should not be your decision. It should be derived
from the rules your team agreed to work with. You should not fire when
you don&amp;#39;t like the person. Instead, you should fire when the person doesn&amp;#39;t
comply with the rules, like when there&amp;#39;s a lack of performance.&lt;/p&gt;

&lt;p&gt;When the rules are clear, everybody understands them, and reconciliation of
performance is done regularly and openly, everybody will understand
your firing decision and support it &amp;mdash; including the person you&amp;#39;re firing!
Because it won&amp;#39;t be your decision, but rather a decision logically derived
from the rules. You will work for the project, not for your emotions or
personal feelings.&lt;/p&gt;

&lt;p&gt;By firing a person who is causing problems for the project,
you will be doing a good thing for everybody &amp;mdash; the project, the team, and the
person who will go and find another place for his or her skills and talents.&lt;/p&gt;

&lt;p&gt;Let me reiterate: If firing is unpleasant, there is a problem
with the manager and the management.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/16/how-to-fire-someone-right.html</guid>
      <dc:date>2015-09-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>When Do You Stop Testing?</title>
      <link>http://www.yegor256.com/2015/09/10/testing-exit-criteria.html</link>
      <description>&lt;p&gt;There is a software to be tested. There is a team of testers. There is
some money in the budget. There is some time in the schedule. We start
right now. Testers are trying to break the product, finding bugs,
reporting bugs, communicating with programmers when necessary, doing
their best to find what&amp;#39;s wrong. Eventually they stop and say
&amp;quot;we&amp;#39;re done&amp;quot;. How do they know when to stop? When there is enough
testing? It&amp;#39;s obvious &amp;mdash; when there are &lt;strong&gt;no more bugs left&lt;/strong&gt; and the
product can be shipped! If you think like this, I have bad news for you.
You&amp;#39;re &lt;strong&gt;fundamentally wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/09/la-fille-sur-le-pont.jpg' style='width:600px;' alt='La fille sur le pont (1999) by Patrice Leconte'/&gt;&lt;figcaption&gt;La fille sur le pont (1999) by Patrice Leconte&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;All this is perfectly explained by Glenford Myers in his great book
&lt;a href=&quot;/2014/08/22/art-of-software-testing.html&quot;&gt;The Art of Software Testing&lt;/a&gt;.
I will just summarize it here again.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1118031962/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1118031962&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=ZSPUL4X4IBFT6ZVJ'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-art-of-testing.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;First, &amp;quot;testing is the process of executing a program with the
intent of &lt;strong&gt;finding errors&lt;/strong&gt;&amp;quot; (page 6). Pay attention, the intent is to find errors.
Not to prove that the product works fine, but to prove that it &lt;strong&gt;doesn&amp;#39;t work&lt;/strong&gt;
as intended. The goal of any tester is to show how the product can be
broken, how it fails on different inputs, how it crashes under stress,
how it misunderstands the user, how it doesn&amp;#39;t satisfy the requirements.
This is why Dr. Myers is calling testing &amp;quot;a destructive, even sadistic, process&amp;quot;
(page 6). This is what most testers don&amp;#39;t understand.&lt;/p&gt;

&lt;p&gt;Second, any software has an &lt;strong&gt;unlimited amount of bugs&lt;/strong&gt;. Dr. Myers says that
&amp;quot;you cannot test a program to guarantee that it is error free&amp;quot; (page 10)
and that &amp;quot;it is impractical, often impossible, to find all the errros in
a program&amp;quot; (page 8). This is also what most testers don&amp;#39;t understand. They
believe that there is a limited number of bugs, which they have to find
and call it a day. There literally no limit! The amount of bugs is unlimited,
in any software product. No matter how small or big, complex or simple,
new or old is the product.&lt;/p&gt;

&lt;p&gt;Having these axioms in mind, let&amp;#39;s try to decide when testers have to stop.
According to Dr. Meyers, &amp;quot;one of the most difficult questions
to answer when testing a program is determining when to stop,
since there is no way of knowing if the error just detected is the
last remaining error&amp;quot; (page 135).&lt;/p&gt;

&lt;p&gt;They can&amp;#39;t find all bugs, no matter how much time we give them. And they
are motivated to find more and more of them. But at some point of time we
must make a decision and release the product. Looks like we will release
it with bugs inside? Yes, indeed! We will release a product &lt;strong&gt;full of bugs&lt;/strong&gt;.
The only question is how many of them were found already and how critical
they were.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s put it all together. There are too many bugs to be able to find
all of them in a reasonable amount of time. However, we have to release a new
version, sooner or later. At the same time, testers will always tell us
that there are more bugs there and they can find more, just need more
time. What to do?&lt;/p&gt;

&lt;p&gt;Dr. Meyers says that &amp;quot;since the goal of testing is to find errors,
why not make the completion criterion the detection of some predefined
number of errors?&amp;quot; (page 136). Indeed, we should predict how many bugs
are just enough to find, in order to have a desirable level of &lt;strong&gt;confidence&lt;/strong&gt;
that the product is ready to be shipped. Then, ship it, conciously
understanding that it still has an unlimited amount of not yet discovered
bugs.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=T5AHAWGQIY5ZZK2Z'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-object-thinking.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;David West in
&lt;a href=&quot;http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=T5AHAWGQIY5ZZK2Z&quot;&gt;Object Thinking&lt;/a&gt;
says that &amp;quot;software is released for use,
not when it is known to be correct, but when the rate of discovering
errors slows down to one that management considers acceptable&amp;quot; (page 13).&lt;/p&gt;

&lt;p&gt;Thus, the only valid criteria for exiting a testing process is the
discovery of a &lt;strong&gt;forecasted&lt;/strong&gt; amount of bugs.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 10 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/10/testing-exit-criteria.html</guid>
      <dc:date>2015-09-10T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Set Up a Private Maven Repository in Amazon S3</title>
      <link>http://www.yegor256.com/2015/09/07/maven-repository-amazon-s3.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;Amazon S3&lt;/a&gt;
is a perfect place for keeping private &lt;a href=&quot;https://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; artifacts.
I assume you keep public artifacts in
&lt;a href=&quot;/2014/08/19/how-to-release-to-maven-central.html&quot;&gt;Maven Central&lt;/a&gt; because
you want them to be available to everybody. Private artifacts
are those you don&amp;#39;t want visible to anyone except members
of your team. Thus, you want to deploy your &lt;code&gt;.jar&lt;/code&gt; files there
and make sure they are visible only by your team. Here is how we do
this in all &lt;a href=&quot;http://www.teamed.io&quot;&gt;our&lt;/a&gt; Java projects.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;create-an-s3-bucket&quot;&gt;Create an S3 Bucket&lt;/h2&gt;

&lt;p&gt;First, you create a new S3 bucket. I would recommend you name it using
your project domain and a prefix. For example, with &lt;code&gt;repo.teamed.io&lt;/code&gt;,
&lt;code&gt;repo&lt;/code&gt; is a prefix and &lt;code&gt;teamed.io&lt;/code&gt; is the domain.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s no need to configure any permissions for this bucket. Just create it
through the &lt;a href=&quot;https://console.aws.amazon.com/console/home&quot;&gt;Amazon S3 console&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;create-an-iam-user&quot;&gt;Create an IAM User&lt;/h2&gt;

&lt;p&gt;Create a new IAM user. I recommend you name it like &lt;code&gt;teamed-maven&lt;/code&gt;
if your project name is &lt;code&gt;teamed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add a new &amp;quot;inline policy&amp;quot; to the user:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;Statement&amp;quot;: [
    {
      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
      &amp;quot;Action&amp;quot;: &amp;quot;s3:*&amp;quot;,
      &amp;quot;Resource&amp;quot;: [
        &amp;quot;arn:aws:s3:::repo.teamed.io&amp;quot;,
        &amp;quot;arn:aws:s3:::repo.teamed.io/*&amp;quot;
      ]
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;repo.teamed.io&lt;/code&gt; is the name of the S3 bucket you
created a minute ago.&lt;/p&gt;

&lt;p&gt;Make sure you have an &amp;quot;access key&amp;quot; for this new user. It must look similar
to this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;key: AKIAI9NNNJD5D7X4TUVA
secret: t5tZQCwuaRhmlOXfbGE5aTBMFw34iFyxfCEr32av&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key is 20 characters (all caps), and the secret is 40 characters.&lt;/p&gt;

&lt;h2 id=&quot;extend-settings.xml&quot;&gt;Extend &lt;code&gt;settings.xml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Add this configuration to your &lt;code&gt;~/.m2/settings.xml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servers&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;server&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;username&amp;gt;&lt;/span&gt;AKIAI9NNNJD5D7X4TUVA&lt;span class=&quot;nt&quot;&gt;&amp;lt;/username&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;password&amp;gt;&lt;/span&gt;t5tZQCwuaRhmlOXfbGE5aTBMFw34iFyxfCEr32av&lt;span class=&quot;nt&quot;&gt;&amp;lt;/password&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
    [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/servers&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-pom.xml&quot;&gt;Configure &lt;code&gt;pom.xml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Add this configuration to &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;distributionManagement&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;snapshotRepository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;s3://repo.teamed.io/snapshot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/snapshotRepository&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;s3://repo.teamed.io/release&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/distributionManagement&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo.teamed.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;s3://repo.teamed.io/release&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, configure &lt;a href=&quot;https://github.com/jcaddel/maven-s3-wagon&quot;&gt;S3 Wagon&lt;/a&gt;,
also in &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;extension&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.kuali.maven.wagons&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-s3-wagon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extension&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt;
    [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;#39;re ready to go. You can deploy your artifacts just by running
Maven from the command line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mvn clean deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-s3auth.com&quot;&gt;Configure s3auth.com&lt;/h2&gt;

&lt;p&gt;Now you want to see these artifacts in your browser, in a secure mode, by
providing secure credentials. I recommend you use
&lt;a href=&quot;http://www.s3auth.com&quot;&gt;s3auth.com&lt;/a&gt;, as explained in
&lt;a href=&quot;/2014/04/21/s3-http-basic-auth.html&quot;&gt;Basic HTTP Auth for S3 Buckets&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configure-rultor&quot;&gt;Configure Rultor&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Another recommendation is to configure rultor.com for deployment of your
artifacts to S3 automatically.&lt;/p&gt;

&lt;p&gt;First, encrypt your &lt;code&gt;settings.xml&lt;/code&gt; with this
&lt;a href=&quot;https://github.com/yegor256/rultor-remote&quot;&gt;Rultor remote&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;$ gem install rultor
$ rultor encrypt -p me/test settings.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of &lt;code&gt;me/test&lt;/code&gt;, you should use the name of your GitHub project.&lt;/p&gt;

&lt;p&gt;As a result, you will get a new file named &lt;code&gt;settings.xml.asc&lt;/code&gt;. Add it to the root directory
of your project, then commit and push. The file contains your secret information,
but only the Rultor server can decrypt it.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;.rultor.yml&lt;/code&gt; file in the root directory of your project
(The Rultor &lt;a href=&quot;http://doc.rultor.com/reference.html&quot;&gt;reference page&lt;/a&gt;
explains this format in greater detail):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;settings.xml&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;repo/settings.xml.asc&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;mvn clean deploy --settings ../settings.xml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now it&amp;#39;s time to see how it all works together. Create a new ticket in the
GitHub issue tracker and post something like this into it
(read more about &lt;a href=&quot;http://doc.rultor.com/basics.html&quot;&gt;Rultor commands&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@rultor deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will get a response in a few seconds. The rest will be done by Rultor.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/07/maven-repository-amazon-s3.html</guid>
      <dc:date>2015-09-07T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Redundant Variables Are Pure Evil</title>
      <link>http://www.yegor256.com/2015/09/01/redundant-variables-are-evil.html</link>
      <description>&lt;p&gt;A redundant variable is one that exists exclusively
to &lt;strong&gt;explain&lt;/strong&gt; its value. I strongly believe that such a variable is
not only pure noise but also &lt;strong&gt;evil&lt;/strong&gt;, with a very negative effect
on code readability. When we introduce a redundant variable, we intend to make our code
cleaner and easier to read. In reality, though, we make it more verbose
and difficult to understand. Without exception, any variable used only
once is redundant and must be replaced with a value.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/09/y-tu-mama-tambien.jpg' style='width:600px;' alt='Y Tu Mamá También (2001) by Alfonso Cuarón'/&gt;&lt;figcaption&gt;Y Tu Mamá También (2001) by Alfonso Cuarón&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here, variable &lt;code&gt;fileName&lt;/code&gt; is redundant:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Length is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code must look differently:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Length is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example is very primitive, but I&amp;#39;m sure you&amp;#39;ve seen these
redundant variables many times. We use them to &amp;quot;explain&amp;quot; the code &amp;mdash;
it&amp;#39;s not just a string literal &lt;code&gt;&amp;quot;test.txt&amp;quot;&lt;/code&gt; anymore but a &lt;code&gt;fileName&lt;/code&gt;.
The code looks easier to understand, right? Not really.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s dig into what &amp;quot;readability&amp;quot; of code is in the first place. I think this
quality can be measured by the number of seconds I need to understand the
code I&amp;#39;m looking at. The longer the timeframe, the lower the readability.
Ideally, I want to understand any piece of code in a &lt;strong&gt;few seconds&lt;/strong&gt;. If I can&amp;#39;t,
that&amp;#39;s a failure of its &lt;strong&gt;author&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2015/06/29/simple-diagrams.html&quot;&gt;Remember&lt;/a&gt;,
if I don&amp;#39;t understand you, it&amp;#39;s your fault.&lt;/p&gt;

&lt;p&gt;An increasing length of code degrades readability. So the more variable
names I have to remember while reading through it, the longer
it takes to digest the code and come to a conclusion about
its purpose and effects. I think &lt;strong&gt;four&lt;/strong&gt; is the maximum number
of variables I can comfortably keep in my head without thinking
about quitting the job.&lt;/p&gt;

&lt;p&gt;New variables make the code longer because they need extra lines to
be declared. And they make the code more complex because its reader
has to remember more names.&lt;/p&gt;

&lt;p&gt;Thus, when you want to introduce a new variable to explain what your code is
doing, stop and think. Your code is too complex and long in the first place!
Refactor it using new objects or methods but not variables. Make your
code shorter by moving pieces of it into new classes or private methods.&lt;/p&gt;

&lt;p&gt;Moreover, I think that in &lt;a href=&quot;/2015/08/18/multiple-return-statements-in-oop.html&quot;&gt;perfectly designed methods&lt;/a&gt;,
you won&amp;#39;t need &lt;strong&gt;any&lt;/strong&gt; variables aside from method arguments.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/09/01/redundant-variables-are-evil.html</guid>
      <dc:date>2015-09-01T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Need Robust Software? Make It Fragile</title>
      <link>http://www.yegor256.com/2015/08/25/fail-fast.html</link>
      <description>&lt;p&gt;In any software project, the goal is to create something stable. We don&amp;#39;t want it
to break in front of a user. We also don&amp;#39;t want our website to show an
&amp;quot;internal application error&amp;quot; instead of a web page. We want our software
to work, not fail. That&amp;#39;s a perfectly valid and logical desire,
but in order to achieve that, we have to make our software as fragile
as possible. This may sound counterintuitive, but that&amp;#39;s the way it is.
The more &lt;strong&gt;fragile&lt;/strong&gt; your app is in development, the more &lt;strong&gt;robust&lt;/strong&gt; it is
in production.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/08/black-cat-white-cat.jpg' style='width:600px;' alt='Black Cat, White Cat (1998) by Emir Kusturica'/&gt;&lt;figcaption&gt;Black Cat, White Cat (1998) by Emir Kusturica&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;By fragile, I&amp;#39;m referring to the &lt;a href=&quot;http://martinfowler.com/ieeeSoftware/failFast.pdf&quot;&gt;Fail Fast&lt;/a&gt;
philosophy, which is the opposite of
Fail Safe. I believe you know the difference, but let me remind you anyway,
by example. This is Fail Safe:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method is supposed to calculate and return a file size. It first checks
whether the file exists. If it doesn&amp;#39;t exist, the method returns zero. Indeed,
the file is absent, so there is no size. We could complain that the file is
absent, but what for? Why make noise? Let&amp;#39;s keep it quiet and return zero.
We don&amp;#39;t fail because we&amp;#39;re trying to keep the app running. This is called Fail Safe.&lt;/p&gt;

&lt;p&gt;To the contrary, this is how Fail Fast looks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;There is no such file; I can&amp;#39;t get its length.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can&amp;#39;t find a file? We don&amp;#39;t hide this fact. We make this situation
public and visible. We scream and cry. We throw an exception. We &lt;strong&gt;want&lt;/strong&gt; the
app to crash, break, and fail, because someone gave us a file that doesn&amp;#39;t
exist. We complain and protest. This is called Fail Fast.&lt;/p&gt;

&lt;p&gt;Which philosophy, if we follow it everywhere, will make our software
robust and failure-resilient? Only the second one &amp;mdash; the Fail Fast.&lt;/p&gt;

&lt;p&gt;Why? Because the quicker and easier the failure is, the faster it will
be fixed. And the fix will be simpler and also more visible. Fail Fast
is a much better approach for maintainability. The code becomes cleaner.
It is much easier to track a failure. All methods are ready to break and throw
an exception on even the tiniest problem.&lt;/p&gt;

&lt;p&gt;In this example, if the method returns zero, it&amp;#39;s not obvious
whether the file exists and its size is actually zero or if its name is wrong
and it is just not found. The Fail Safe approach &lt;strong&gt;conceals&lt;/strong&gt; problems and makes
code less maintainable, and that&amp;#39;s why it&amp;#39;s difficult to stabilize.&lt;/p&gt;

&lt;p&gt;In the beginning, during production, we will have many crashes and errors. But
all of them will be visible and easy to understand. We will fix them and
cover them with unit tests. Each fix will make our software more &lt;strong&gt;stable&lt;/strong&gt;
and better covered by tests.&lt;/p&gt;

&lt;p&gt;Software designed with the Fail Safe approach in mind will look more stable
at the beginning, but it will degrade quickly and inevitably turn into
an unmaintainable mess.&lt;/p&gt;

&lt;p&gt;Software designed with the Fail Fast approach in mind will crash frequently
at the beginning but will improve its stability with every fix and eventually
become very stable and robust.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why fragility is the key success factor for robustness.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/08/25/fail-fast.html</guid>
      <dc:date>2015-08-25T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Why Many Return Statements Are a Bad Idea in OOP</title>
      <link>http://www.yegor256.com/2015/08/18/multiple-return-statements-in-oop.html</link>
      <description>&lt;p&gt;This &lt;a href=&quot;http://programmers.stackexchange.com/questions/118703&quot;&gt;debate&lt;/a&gt;
is very old, but I have something to say too. The question
is whether a method may have multiple &lt;code&gt;return&lt;/code&gt; statements or always
just one. The answer may surprise you: In a pure object-oriented
world, a method &lt;strong&gt;must&lt;/strong&gt; have a &lt;strong&gt;single&lt;/strong&gt; &lt;code&gt;return&lt;/code&gt; statement and &lt;strong&gt;nothing&lt;/strong&gt; else.
Yes, just a &lt;code&gt;return&lt;/code&gt; statement and that&amp;#39;s it. No other operators
or statements. Just &lt;code&gt;return&lt;/code&gt;. All arguments in favor of multiple
&lt;code&gt;return&lt;/code&gt; statements go against the very idea of object-oriented programming.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This is a classical example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code above has two &lt;code&gt;return&lt;/code&gt; statements, and it is shorter than this one
with a single &lt;code&gt;return&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More verbose, less readable, and slower, right? Right.&lt;/p&gt;

&lt;p&gt;This is the code in a &lt;strong&gt;pure&lt;/strong&gt; object-oriented world:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What do you think now? There are no statements or operators. No &lt;code&gt;if&lt;/code&gt; and no &lt;code&gt;&amp;gt;&lt;/code&gt;.
Instead, there are &lt;strong&gt;objects&lt;/strong&gt; of class &lt;code&gt;If&lt;/code&gt; and &lt;code&gt;GreaterThan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a pure and clean object-oriented approach.&lt;/p&gt;

&lt;p&gt;However, Java doesn&amp;#39;t have that. Java (and many other pseudo OOP languages)
gives us operators like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, etc. instead
of giving built-in classes, which would do the same. Because of that, we continue
to think in terms of procedures and keep talking about whether
two &lt;code&gt;return&lt;/code&gt; statements are better than one.&lt;/p&gt;

&lt;p&gt;If your code is truly object-oriented, you won&amp;#39;t be able to have more than
one &lt;code&gt;return&lt;/code&gt;. Moreover, you will have nothing except a &lt;code&gt;return&lt;/code&gt; in each method.
Actually, you will have only two operators in the entire
software &amp;mdash; &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt;. That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;Until we&amp;#39;re there, let&amp;#39;s stick with just one &lt;code&gt;return&lt;/code&gt; and at least try to look
like pure OOP.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 18 Aug 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/08/18/multiple-return-statements-in-oop.html</guid>
      <dc:date>2015-08-18T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Nine Steps to Start a Software Project</title>
      <link>http://www.yegor256.com/2015/08/04/nine-steps-start-software-project.html</link>
      <description>&lt;p&gt;Agile or not, a software project starts with a requirements analysis
and definition. We basically define what needs to be done somehow, be it on a
piece of napkin or a 100-page Word document. The next step is to
turn this into a working piece of software as fast as possible and by spending as
few dollars as possible. Ideally, this prototyping takes a week
and is made by an architect working &lt;strong&gt;solo&lt;/strong&gt;.
Once the &amp;quot;skeleton&amp;quot; is ready, we start putting software &amp;quot;meat&amp;quot; on it.
We recruit a team of programmers for that or outsource it. I see nine important steps
in the skeleton creation part; let me show you them one by one.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/08/ying-xiong.jpg' style='width:600px;' alt='Ying xiong (2002) by Yimou Zhang'/&gt;&lt;figcaption&gt;Ying xiong (2002) by Yimou Zhang&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s use some examples to make this more illustrative. Let&amp;#39;s say I&amp;#39;m a
software architect and the project is a &amp;quot;Google killer.&amp;quot; We&amp;#39;re hired to
create a new search engine, and my job is to turn requirements into
a prototype, a.k.a. a skeleton or a proof of concept. This is what I have
as an input (let&amp;#39;s say it&amp;#39;s a piece of napkin ... what else would it be
for a Google killer, right?):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Each page is ranked by the number of mentions in
social networks like Twitter, LinkedIn, Facebook, etc.
The more mentions it has, the higher the rank and the
higher its position in the search results page.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Seems like a doable project to me, and the requirements document is
clear enough. It doesn&amp;#39;t say anything about performance, but I
can assume that it has to be as fast as Google. The same goes
for scalability, stress resilience, etc.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not going to discuss how the software is created in a specific
technical stack. That&amp;#39;s not important for this article. What&amp;#39;s important now
is how my programming work will be &amp;quot;wrapped.&amp;quot; In other words, what will
I hand off to the team of programmers after a week of hard work &amp;mdash;
what is my product, or more formally, my &lt;strong&gt;deliverables&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thus, let&amp;#39;s assume I managed to create a piece of software and it works.&lt;/p&gt;

&lt;h2 id=&quot;decisions-and-alternatives&quot;&gt;Decisions and Alternatives&lt;/h2&gt;

&lt;p&gt;First of all, I have to document my key technical decisions and their
alternatives. &lt;a href=&quot;http://www.teamed.io&quot;&gt;We&lt;/a&gt; usually work in GitHub, and the best documentation
media is the &lt;code&gt;README.md&lt;/code&gt; file in the root directory of the repo. I just
put my text there in a plain Markdown format. That&amp;#39;s enough for a good
technical document &amp;mdash; it has to be short; that&amp;#39;s important.&lt;/p&gt;

&lt;p&gt;For each decision I made, there has to be at least one alternative
that I considered and rejected. There are two items at the top of my list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Apache Lucene is a search engine. It is popular,
  mature enough, scalable, and written in Java. Alternatives
  are Solr, Sphinx, Gigablast, and many others.
Java 8 is a programming language, and JVM is a
  runtime platform. I know how they work, and the team
  has enough experience with them. Alternatives are
  Ruby, Python, Go, Scala, and tons of others.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These decisions are very high-level, but I still need to document them. As you
see, I&amp;#39;m not explaining in details why the alternatives were rejected, and it&amp;#39;s
my choice. If someone questions my decisions in the future, they may
say that the alternatives were not analyzed properly. It will be clear whose fault
it was &amp;mdash; mine. So I&amp;#39;m taking full responsibility for these two
choices I&amp;#39;ve made: Lucene and Java 8.&lt;/p&gt;

&lt;p&gt;Yet another item to the list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Three modules make up the app: UI, scraper,
  and analyzer. They are fully decoupled and
  communicate strictly through Lucene. I don&amp;#39;t
  see any alternatives.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, I attach a simple diagram to illustrate my decision:&lt;/p&gt;

&lt;p&gt;&lt;img src='/uml/19b92d0465e2e819ffcf88cf46c6e333.svg' alt='UML' style='width:100%;'/&gt;&lt;/p&gt;

&lt;p&gt;As you see, in this case, I totally ignored all alternatives. I didn&amp;#39;t even
mention them. Again, I take full responsibility for that; I said,
&amp;quot;I don&amp;#39;t see any alternatives.&amp;quot; If, later, a better alternative is
discovered, it will be obvious why we overlooked it and whose fault
it was. It&amp;#39;s not only about punishment but about discipline and
traceability of decisions. Each decision must be traceable to the person
who made it. This helps us avoid bad decisions in the future and
makes the entire project more maintainable and transparent.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s add one more decision to the list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Takes Framework is used for UI. It helps keep our
  code truly object-oriented, testable, fast, and
  decoupled from the data model. Alternatives:
  - Spring: It is big, complex, and ugly
  - Play: Similar to Spring, big and ugly
  - Spark: Not as clear as Takes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, I documented the alternatives and gave my reasons why
they are not good for us. As you see, the reasons are very biased; I
basically expressed my personal opinions about these three
frameworks and definitely gave preference to my own open
source &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes&lt;/a&gt; framework. Is it good? No, it&amp;#39;s not.
But I&amp;#39;m the &lt;a href=&quot;/&quot;&gt;architect&lt;/a&gt;,
and I do what I think is right for the project.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m trying to show that the point of this documentation is for
me, the architect, to explain my way of thinking &amp;mdash; no matter how bad,
biased, or irrational it was. I have to write my decisions down and let the
project know them all.&lt;/p&gt;

&lt;p&gt;I would suggest you keep the number of documented decisions somewhere
between &lt;strong&gt;four and 12&lt;/strong&gt;. If there are fewer than four, I probably forgot
to document something important. More than 12 &amp;mdash; I&amp;#39;m documenting
too many non-important decisions. I should use other media for that,
like JavaDoc blocks or responsive classes.&lt;/p&gt;

&lt;h2 id=&quot;concerns&quot;&gt;Concerns&lt;/h2&gt;

&lt;p&gt;The next chapter in the &lt;code&gt;README.md&lt;/code&gt; file has to explain how exactly I
managed to address all concerns expressed in the initial requirements.
I mentioned above that it goes without saying that our system must
be as fast and scalable as Google. Thus, let&amp;#39;s say there are two &amp;quot;concerns&amp;quot; &amp;mdash;
performance and scalability.&lt;/p&gt;

&lt;p&gt;As a software architect, I must address them both. In other words, I have to
prove that my solution is fast and scalable. Maybe it&amp;#39;s not, but if I believe
it is, I have to explain why I think so. I can&amp;#39;t be quiet about the concerns. Here
is what I would say about performance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The system is as fast as the Lucene search engine, while
Lucene is rather fast even with large amounts of data.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this one is about scalability:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The bottleneck is in Lucene, and it is scalable
vertically. Not sure about horizontal scalability.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, I&amp;#39;m trying to be honest and tell the truth. We&amp;#39;ll be able to
review these statements later and decide whether I was right or wrong. But
we need to have my answers to all concerns expressed in the requirements.&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;

&lt;p&gt;The next section is about assumptions I&amp;#39;ve made while working with the
prototype. We usually make assumptions when we don&amp;#39;t have enough factual
information, and we basically fill the gaps. There is nothing wrong with
it, but we have to document which gaps were filled and why.&lt;/p&gt;

&lt;p&gt;How about these two assumptions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. I assume that social platforms won&amp;#39;t block our
   calls and will provide counters for all pages.
2. I assume that Lucene will be enough for both
   indexing and data storage, so we won&amp;#39;t need a
   database engine.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I made these assumptions without proper analysis of the situation. I don&amp;#39;t
know whether Twitter will be happy to see millions of requests every hour
coming from our server or not. Maybe it will ban us; I don&amp;#39;t know. I don&amp;#39;t
have to evaluate this and find an exact answer. I just made an assumption
and documented it.&lt;/p&gt;

&lt;p&gt;Will it be enough to have Lucene only, without any additional data persistence
layer? I don&amp;#39;t know, but I &lt;em&gt;hope&lt;/em&gt; so. I don&amp;#39;t have time to do a detailed
analysis of our entire data model and its potential future requirements. I just
make an assumption and call it a day.&lt;/p&gt;

&lt;p&gt;If later, during the handoff, the project sponsor says this assumption
exposes too much risk for the project, we&amp;#39;ll do a better analysis. For now, my job
is to document what I see and move on. Remember, I have just a week of time.&lt;/p&gt;

&lt;h2 id=&quot;risks&quot;&gt;Risks&lt;/h2&gt;

&lt;p&gt;Now I list all potential problems I forsee and estimate
their probability and impact. Let me show you an example first:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. Lucene may not be able to handle billions of documents [6x9]
2. Social platforms will ban our requests [8x9]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first number in square brackets is the probability and the second one
is the impact, on a 0 to 9 scale. If both numbers are nine, it&amp;#39;s not a risk
anymore; it&amp;#39;s a fact. If both numbers are zero, we can simply ignore this
risk.&lt;/p&gt;

&lt;p&gt;I listed just two, but in a real system there should be somewhere
between four and 12 risks. Too many risks is a sign that the prototype is
not focused enough, while too few is due to a lack of attention.&lt;/p&gt;

&lt;h2 id=&quot;continuous-integration&quot;&gt;Continuous Integration&lt;/h2&gt;

&lt;p&gt;Now I have to make sure the product is &amp;quot;wrapped&amp;quot; in continuous integration,
which is a &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;critical component&lt;/a&gt;
of any software package. I have to configure it, preferably
&lt;a href=&quot;/2014/10/05/ten-hosted-continuous-integration-services.html&quot;&gt;in the cloud&lt;/a&gt;,
and make sure the build is clean.&lt;/p&gt;

&lt;p&gt;It is also important to make sure the continuous integration pipeline
covers all critical areas, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Building on multiple platforms, such as Linux, Windows, and Mac.&lt;/li&gt;
&lt;li&gt;Running integration tests and unit tests.&lt;/li&gt;
&lt;li&gt;Analyzing statically.&lt;/li&gt;
&lt;li&gt;Collecting test coverage.&lt;/li&gt;
&lt;li&gt;Generating documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The stricter the pipeline, the better it is for the project. At this stage, my job,
as an architect, is to build a &amp;quot;guard wall&amp;quot; around the product to protect
it against future &lt;strong&gt;chaos&lt;/strong&gt;. The chaos will come from programmers making
changes through pull requests. They will care much less about the entire
quality of the product than I do, and that&amp;#39;s why I have to incorporate tools
that keep the situation under control.&lt;/p&gt;

&lt;p&gt;My goal is to make the continuous integration pipeline as &lt;strong&gt;fragile&lt;/strong&gt; as possible.
Any minor error should lead to a build failure. Of course, I&amp;#39;m talking about
reproducible failures. The build should fail in a predictable way, not
sporadically.&lt;/p&gt;

&lt;h2 id=&quot;static-analysis&quot;&gt;Static Analysis&lt;/h2&gt;

&lt;p&gt;This is yet another &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;critical component&lt;/a&gt;
of any software project. You have to analyze the quality of code statically.
In the most primitive approach, a static analysis will check the formatting
of your source code and fail the build when that formatting is broken. However,
in a more advanced variant, static analysis will catch many important bugs.&lt;/p&gt;

&lt;p&gt;It is called &amp;quot;static&amp;quot; becuase it doesn&amp;#39;t require the software to be running.
To the contrary, unit tests validate software quality in runtime
by running the app.&lt;/p&gt;

&lt;p&gt;There are many static analysis tools, for almost every language and format.
I strongly recommend you use them. Moreover, I recommend you configure them
as strictly as possible in order to make the build as fragile as you can.
The fragility of the build is a key success factor in software development.&lt;/p&gt;

&lt;h2 id=&quot;test-coverage&quot;&gt;Test Coverage&lt;/h2&gt;

&lt;p&gt;Test coverage must be collected on every build and, at the very least, reported. In
an ideal scenario, low test coverage must fail the build. Let&amp;#39;s say I set
the required percentage of coverage to 75 percent (it&amp;#39;s actually a more complex metric, but
in a primitive approach just one number is enough). If someone introduces
a new class without a unit test, the coverage percentage goes down and
the build breaks.&lt;/p&gt;

&lt;p&gt;My job, as an architect creating a prototype, is to make sure the coverage
is calculated on every build and is under control &amp;mdash; it can&amp;#39;t go
lower than the threshold I set.&lt;/p&gt;

&lt;p&gt;No matter how low the threshold is, what matters is whether it is under
control or not.&lt;/p&gt;

&lt;h2 id=&quot;continuous-delivery&quot;&gt;Continuous Delivery&lt;/h2&gt;

&lt;p&gt;This is the final step before the handoff. I have to configure a continuous
delivery pipeline to make sure the product is packaged and deployed in
one click. This is a very important &amp;mdash; critically important &amp;mdash; step. Without it,
everything done before and the piece of software itself is just a collection
of files. A piece of software is a product when it is packagable and
deployable in one click.&lt;/p&gt;

&lt;p&gt;&amp;quot;Pipeline&amp;quot; means that there are a number of elements chained sequentially;
for a Java application, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run automated build (the same as in continuous integration)&lt;/li&gt;
&lt;li&gt;Package JAR file&lt;/li&gt;
&lt;li&gt;Upload JAR file to repository&lt;/li&gt;
&lt;li&gt;Build JavaDoc site&lt;/li&gt;
&lt;li&gt;Upload JavaDoc site to Amazon S3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#39;m using &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;Rultor&lt;/a&gt; to
automate the entire pipeline and simplify its start, stop, and logging. I just
post a &amp;quot;please release now&amp;quot; message to a GitHub ticket, and the product
is packaged and deployed in a few minutes.&lt;/p&gt;

&lt;h2 id=&quot;acceptance&quot;&gt;Acceptance&lt;/h2&gt;

&lt;p&gt;The last step is the handoff &amp;mdash; I have to present my solution to the
project manager, the sponsor of the project, and the team. Everybody has
to accept it. It doesn&amp;#39;t mean they will like it, and that&amp;#39;s not the goal. The
goal is to deliver a complete solution, with risks, assumptions, decisions
documented, continuous integration configured, static analysis enforced, etc.
If my solution won&amp;#39;t be good enough for their criteria, they will change
the architect and try again.&lt;/p&gt;

&lt;p&gt;My objective is &lt;strong&gt;not&lt;/strong&gt; to satisfy them but to do the best I can according
to the requirements and my professional understanding of the problem and
business domains. I wrote about this some time ago:
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;A Happy Boss Is a False Objective&lt;/a&gt;.
Again, my objective is not to make them happy. Instead, my objective is to make
a perfect prototype, the way I understand the word &lt;strong&gt;perfect&lt;/strong&gt;. If I fail,
I fail. The project will get another architect and try again.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it. The skeleton is ready, and my job is done.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/08/04/nine-steps-start-software-project.html</guid>
      <dc:date>2015-08-04T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Checked vs. Unchecked Exceptions: The Debate Is Not Over</title>
      <link>http://www.yegor256.com/2015/07/28/checked-vs-unchecked-exceptions.html</link>
      <description>&lt;p&gt;Do we need checked exceptions at all? The
&lt;a href=&quot;http://stackoverflow.com/questions/6115896/java-checked-vs-unchecked-exception-explanation&quot;&gt;debate&lt;/a&gt;
is over, isn&amp;#39;t it?
Not for me. While most object-oriented languages don&amp;#39;t have them, and most programmers
think checked exceptions are a Java mistake, I believe in the
opposite &amp;mdash; unchecked exceptions are the &lt;strong&gt;mistake&lt;/strong&gt;. Moreover, I believe
multiple exception types are a bad idea too.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/07/true-romance.jpg' style='width:600px;' alt='True Romance (1993) by Tony Scott'/&gt;&lt;figcaption&gt;True Romance (1993) by Tony Scott&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let me first explain how I understand exceptions in object-oriented programming.
Then I&amp;#39;ll compare my understanding with a &amp;quot;traditional&amp;quot; approach, and
we&amp;#39;ll discuss the differences. So, my understanding first.&lt;/p&gt;

&lt;p&gt;Say there is a method that saves some binary data to a file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// save data to the file&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When everything goes right, the method just saves the data and returns control.
When something is wrong, it throws &lt;code&gt;Exception&lt;/code&gt; and we have to do something
about it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Sorry, we can&amp;#39;t save right now.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When a method says it &lt;code&gt;throws&lt;/code&gt; an exception, I understand that the
method is not &lt;strong&gt;safe&lt;/strong&gt;. It may fail sometimes, and it&amp;#39;s my responsibility to
either 1) handle this failure or 2) declare myself as &lt;strong&gt;unsafe&lt;/strong&gt; too.&lt;/p&gt;

&lt;p&gt;I know each method is designed with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;
in mind. This is a guarantee to me that if method &lt;code&gt;save()&lt;/code&gt; fails, it means
the entire saving operation can&amp;#39;t be completed. If I need to know what
the cause of this failure was, I will &lt;a href=&quot;https://en.wikipedia.org/wiki/Exception_chaining&quot;&gt;un-chain&lt;/a&gt;
the exception &amp;mdash; traverse the stack of chained exceptions and stack traces
encapsulated in &lt;code&gt;ex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I never use exceptions for flow control, which means I &lt;strong&gt;never recover&lt;/strong&gt;
situations where exceptions are thrown. When an exception occurs, I let it float up to the
highest level of the application. Sometimes I rethrow it in order
to add more semantic information to the chain. That&amp;#39;s why it doesn&amp;#39;t matter
to me what the cause of the exception thrown by &lt;code&gt;save()&lt;/code&gt; was. I just know
the method failed. That&amp;#39;s enough for me. Always.&lt;/p&gt;

&lt;p&gt;For the same reason, I don&amp;#39;t need to differentiate between different exception
types. I just don&amp;#39;t need that type of hierarchy. &lt;code&gt;Exception&lt;/code&gt; is enough for me.
Again, that&amp;#39;s because I don&amp;#39;t use exceptions for flow control.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s how I understand exceptions.&lt;/p&gt;

&lt;p&gt;According to this paradigm, I would say we must:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;always use checked exceptions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;never throw/use unchecked exceptions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use only &lt;code&gt;Exception&lt;/code&gt;, without any sub-types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;always declare one exception type in the &lt;code&gt;throws&lt;/code&gt; block.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;never catch without rethrowing; read &lt;a href=&quot;/2015/07/09/catch-if-cant-otherwise.html&quot;&gt;more about that here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This paradigm diverges from many other articles I&amp;#39;ve found on this subject.
Let&amp;#39;s compare and discuss.&lt;/p&gt;

&lt;h2 id=&quot;runtime-vs.-api-exceptions&quot;&gt;Runtime vs. API Exceptions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html&quot;&gt;Oracle says&lt;/a&gt;
some exceptions should be part of API (checked ones) while some are
runtime exceptions and should not be part of it (unchecked). They will be documented
in JavaDoc but not in the method signature.&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t understand the logic here, and I&amp;#39;m sure Java designers don&amp;#39;t
understand it either. How and why are some exceptions important while
others are not? Why do some of them deserve a proper API position
in the &lt;code&gt;throws&lt;/code&gt; block of the method signature while others don&amp;#39;t? What is the criteria?&lt;/p&gt;

&lt;p&gt;I have an answer here, though. By introducing checked and unchecked exceptions, Java
developers tried to solve the problem of methods that are too complex and messy. When
a method is too big and does too many things at the same time (violates
the single responsibility principle), it&amp;#39;s definitely better to let us
keep some exceptions &amp;quot;hidden&amp;quot; (a.k.a. unchecked).
But it&amp;#39;s not a real solution. It is only
a temporary patch that does all of us more harm than good &amp;mdash; methods keep
growing in size and complexity.&lt;/p&gt;

&lt;p&gt;Unchecked exceptions are a mistake in Java design, not checked ones.&lt;/p&gt;

&lt;p&gt;Hiding the fact that a method may fail at some point is a mistake. That&amp;#39;s
exactly what unchecked exceptions do.&lt;/p&gt;

&lt;p&gt;Instead, we should make this fact visible. When a method does too many
things, there will be too many points of failure, and the author of the
method will realize that something is wrong &amp;mdash; a method should
not throw exceptions in so many situations. This will lead to refactoring. The existence of
unchecked exceptions leads to a mess. By the way, checked exceptions don&amp;#39;t exist
at all in Ruby, C#, Python, PHP, etc. This means that creators of these
languages understand OOP even less than Java authors.&lt;/p&gt;

&lt;h2 id=&quot;checked-exceptions-are-too-noisy&quot;&gt;Checked Exceptions Are Too Noisy&lt;/h2&gt;

&lt;p&gt;Another common argument against checked exceptions is that they make our
code more verbose. We have to put &lt;code&gt;try/catch&lt;/code&gt; everywhere instead of
staying focused on the main logic. Bozhidar Bozhanov even
&lt;a href=&quot;http://techblog.bozho.net/checked-and-unchecked-exceptions-in-java/&quot;&gt;suggests&lt;/a&gt;
a technical solution for this verbosity problem.&lt;/p&gt;

&lt;p&gt;Again, I don&amp;#39;t understand this logic. If I want to do something when method
&lt;code&gt;save()&lt;/code&gt; fails, I catch the exception and handle the situation somehow.
If I don&amp;#39;t want to do that, I just say my method also &lt;code&gt;throws&lt;/code&gt; and pay no
attention to exception handling. What is the problem? Where is the verbosity
coming from?&lt;/p&gt;

&lt;p&gt;I have an answer here, too. It&amp;#39;s coming from the existence of unchecked
exceptions. We simply can&amp;#39;t always ignore failure, because the interfaces
we&amp;#39;re using don&amp;#39;t allow us to do this. That&amp;#39;s all. For example, class
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;,
which is widely used for multi-thread programming, has
method &lt;code&gt;run()&lt;/code&gt; that is not supposed to throw anything. That&amp;#39;s why we always have
to catch everything inside the method and rethrow checked
exceptions as unchecked.&lt;/p&gt;

&lt;p&gt;If all methods in all Java interfaces would be declared either as
&amp;quot;safe&amp;quot; (&lt;code&gt;throws&lt;/code&gt; nothing) or &amp;quot;unsafe&amp;quot; (&lt;code&gt;throws Exception&lt;/code&gt;), everything would
become logical and clear. If you want to stay &amp;quot;safe,&amp;quot; take responsibility
for failure handling. Otherwise, be &amp;quot;unsafe&amp;quot; and let your users worry about
safety.&lt;/p&gt;

&lt;p&gt;No noise, very clean code, and obvious logic.&lt;/p&gt;

&lt;h2 id=&quot;inappropriately-exposed-implementation-details&quot;&gt;Inappropriately Exposed Implementation Details&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/library/j-jtp05254/&quot;&gt;Some say&lt;/a&gt;
the ability to put a checked exception into &lt;code&gt;throws&lt;/code&gt; in the method
signature instead of catching it here and rethrowing a new type
encourages us to have too many irrelevant exception types in method
signatures. For example, our method &lt;code&gt;save()&lt;/code&gt; may declare that it
may throw &lt;code&gt;OutOfMemoryException&lt;/code&gt;, even though it seems to have
nothing to do with memory allocation. But it does allocate some memory, right?
So such a memory overflow may happen during a file saving operation.&lt;/p&gt;

&lt;p&gt;Yet again, I don&amp;#39;t get the logic of this argument.
If all exceptions are checked, and we don&amp;#39;t have multiple exception types,
we just throw &lt;code&gt;Exception&lt;/code&gt; everywhere, and that&amp;#39;s it. Why do we need to care
about the exception type in the first place? If we don&amp;#39;t use exceptions to control
flow, we won&amp;#39;t do this.&lt;/p&gt;

&lt;p&gt;If we really want to make our application memory overflow-resistant, we will
introduce some memory manager, which will have something like the &lt;code&gt;bigEnough()&lt;/code&gt;
method, which will tell us whether our heap is big enough for the next
operation. Using exceptions in such situations is a totally inappropriate approach
to exception management in OOP.&lt;/p&gt;

&lt;h2 id=&quot;recoverable-exceptions&quot;&gt;Recoverable Exceptions&lt;/h2&gt;

&lt;p&gt;Joshua Bloch, in &lt;a href=&quot;http://www.amazon.com/gp/product/0321356683/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321356683&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=QPTA6QN63DE364IM&quot;&gt;Effective Java&lt;/a&gt;,
says to &amp;quot;use checked exceptions for recoverable conditions and runtime exceptions
for programming errors.&amp;quot; He means something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// We can&amp;#39;t save the file, but it&amp;#39;s OK&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Let&amp;#39;s move on and do something else&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How is that any different from a famous anti-pattern called
&lt;a href=&quot;http://c2.com/cgi/wiki?DontUseExceptionsForFlowControl&quot;&gt;Don&amp;#39;t Use Exceptions for Flow Control&lt;/a&gt;?
Joshua, with all due respect, you&amp;#39;re wrong. There are no such things
as recoverable conditions in OOP. An exception indicates that the execution of a
chain of calls from method to method is broken, and it&amp;#39;s time to go up
through the chain and stop somewhere. But we never go back again
after the exception:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;App#run()
  Data#update()
    Data#write()
      File#save() &amp;lt;-- Boom, there&amp;#39;s a failure here, so we go up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can start this chain again, but we don&amp;#39;t go back after &lt;code&gt;throw&lt;/code&gt;. In other
words, we don&amp;#39;t &lt;strong&gt;do&lt;/strong&gt; anything in the &lt;code&gt;catch&lt;/code&gt; block. We only report the problem
and wrap up execution. We never &amp;quot;recover&amp;quot;!&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;All arguments against checked exceptions demonstrate nothing but
a serious misunderstanding of object-oriented programming by their authors.
The mistake in Java and in many other languages is the existence of unchecked
exceptions, not checked ones.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 28 Jul 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/07/28/checked-vs-unchecked-exceptions.html</guid>
      <dc:date>2015-07-28T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>