<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"> <channel><title>yegor256.com</title><link>http://www.yegor256.com</link> <description>RSS feed for yegor256.com</description> <pubDate>Sun, 03 Aug 2014 00:00:00 +0000</pubDate> <item><title>Cache Java Method Results</title><link>http://www.yegor256.com/2014/08/03/cacheable-java-annotation.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://aspects.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Say, you have a method that takes time to execute and you want its result to be cached. There are &lt;a href="http://www.coderanch.com/how-to/java/CachingStrategies"&gt;many solutions&lt;/a&gt;, including &lt;a href="http://commons.apache.org/proper/commons-jcs/"&gt;Apache Commons JCS&lt;/a&gt;, &lt;a href="http://www.ehcache.org"&gt;Ehcache&lt;/a&gt;, &lt;a href="https://jcp.org/en/jsr/detail?id=107"&gt;JSR 107&lt;/a&gt;, &lt;a href="https://code.google.com/p/guava-libraries/wiki/CachesExplained"&gt;Guava Caching&lt;/a&gt; and many others.&lt;/p&gt;&lt;p&gt;&lt;a href="http://aspects.jcabi.com/annotation-cacheable.html"&gt;jcabi-aspects&lt;/a&gt; offers a very simple one, based on AOP aspects and Java6 annotations:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.jcabi.aspects.Cacheable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Cacheable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lifetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MINUTES&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://google.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getContent&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result of &lt;code&gt;load()&lt;/code&gt; method will be cached in memory for five minutes.&lt;/p&gt; </description> <pubDate>Sun, 03 Aug 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/08/03/cacheable-java-annotation.html</guid> <dc:date>2014-08-03T00:00:00+00:00</dc:date> </item> <item><title>Rultor + Travis</title><link>http://www.yegor256.com/2014/07/31/travis-and-rultor.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.travis-ci.org'&gt;&lt;img src='http://img.yegor256.com/2014/07/travis-logo.png' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://img.rultor.com/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.rultor.com"&gt;Rultor&lt;/a&gt; is a coding team assistant. &lt;a href="http://travis-ci.org"&gt;Travis&lt;/a&gt; is a hosted continuous integration system. In this article I&amp;#39;ll show how our open source projects are using them in tandem to achieve seamless continuous delivery.&lt;/p&gt;&lt;p&gt;I&amp;#39;ll show a few practical scenarios.&lt;/p&gt; </description> <pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/07/31/travis-and-rultor.html</guid> <dc:date>2014-07-31T00:00:00+00:00</dc:date> </item> <item><title>Every Build in Its Own Docker Container</title><link>http://www.yegor256.com/2014/07/29/docker-in-rultor.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.docker.io'&gt;&lt;img src='http://img.rultor.com/docker-logo.png' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.docker.io"&gt;Docker&lt;/a&gt; is a command line tool that can run a shell command in a virtual Linux, inside an isolated file system. Every time we build our projects, we want them to run in their own Docker containers. Take this Maven project for example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo docker run -i -t ubuntu mvn clean &lt;span class="nb"&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://img.rultor.com/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;This command will start a new Ubuntu system and execute &lt;code&gt;mvn clean test&lt;/code&gt; inside it. &lt;a href="http://www.rultor.com"&gt;Rultor.com&lt;/a&gt;, our virtual assistant, does exactly that with our builds, when we deploy, package, test and merge them.&lt;/p&gt; </description> <pubDate>Tue, 29 Jul 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/07/29/docker-in-rultor.html</guid> <dc:date>2014-07-29T00:00:00+00:00</dc:date> </item> <item><title>Rultor.com, a Merging Bot</title><link>http://www.yegor256.com/2014/07/24/rultor-automated-merging.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://img.rultor.com/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;You get a Github pull request. You review it. It looks correct &amp;mdash; it&amp;#39;s time to merge it into &lt;code&gt;master&lt;/code&gt;. You post a comment in it, asking &lt;a href="https://github.com/rultor"&gt;@rultor&lt;/a&gt; to test and merge. Rultor starts a new &lt;a href="http://www.docker.io"&gt;Docker&lt;/a&gt; container, merges the pull request into &lt;code&gt;master&lt;/code&gt;, runs all tests and, if everything looks clean &amp;mdash; merges, pushes, and closes the request.&lt;/p&gt;&lt;p&gt;Then, you ask &lt;a href="https://github.com/rultor"&gt;@rultor&lt;/a&gt; to deploy the current version to production environment. It checks out your repository, starts a new Docker container, executes your deployment scripts and reports to you right there in the Github issue.&lt;/p&gt; </description> <pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/07/24/rultor-automated-merging.html</guid> <dc:date>2014-07-24T00:00:00+00:00</dc:date> </item> <item><title>Master Branch Must Be Read-Only</title><link>http://www.yegor256.com/2014/07/21/read-only-master-branch.html</link> <description>&lt;p&gt;Continuous integration is easy. Download Jenkins, install, create a job, click the button, and get a nice email saying that your build is broken (I assume your build is automated). Then, fix broken tests (I assume you have tests), and get a much better looking email saying that your build is clean.&lt;/p&gt;&lt;p&gt;Then, tweet about it, claiming that your team is using continuous integration.&lt;/p&gt;&lt;p&gt;Then, in a few weeks, start filtering out Jenkins alerts, into their own folder, so that they don&amp;#39;t bother you anymore. Anyway, your team doesn&amp;#39;t have the time or desire to fix all unit tests every time someone breaks them.&lt;/p&gt;&lt;p&gt;After all, we all know that unit testing is not for a team working with deadlines, right?&lt;/p&gt;&lt;p&gt;Wrong. Continuous integration can and must work.&lt;/p&gt; </description> <pubDate>Mon, 21 Jul 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/07/21/read-only-master-branch.html</guid> <dc:date>2014-07-21T00:00:00+00:00</dc:date> </item> <item><title>Liquibase with Maven</title><link>http://www.yegor256.com/2014/07/20/liquibase-in-maven.html</link> <description>&lt;p&gt;&lt;a href="http://www.liquibase.org"&gt;Liquibase&lt;/a&gt; is a migration management tool for relational databases. It versionalizes schema and data changes in a database; similar to the way Git or SVN works for source code. Thanks to their &lt;a href="http://www.liquibase.org/documentation/maven/"&gt;Maven plugin&lt;/a&gt;, Liquibase can be used as a part of a build automation scenario.&lt;/p&gt; </description> <pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/07/20/liquibase-in-maven.html</guid> <dc:date>2014-07-20T00:00:00+00:00</dc:date> </item> <item><title>How to Read MANIFEST.MF Files</title><link>http://www.yegor256.com/2014/07/03/how-to-read-manifest-mf.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://manifests.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Every Java package (JAR, WAR, EAR, etc.) has a &lt;a href="http://docs.oracle.com/javase/tutorial/deployment/jar/manifestindex.html"&gt;&lt;code&gt;MANIFEST.MF&lt;/code&gt;&lt;/a&gt; file in the &lt;code&gt;META-INF&lt;/code&gt; directory. The file contains a list of attributes, which describe this particular package. For example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;Manifest-Version: 1.0 Created-By: 1.7.0_06 (Oracle Corporation) Main-Class: MyPackage.MyClass&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When your application has multiple JAR dependencies, you have multiple &lt;code&gt;MANIFEST.MF&lt;/code&gt; files in your class path. All of them have the same location: &lt;code&gt;META-INF/MANIFEST.MF&lt;/code&gt;. Very often it is necessary to go through all of them in runtime and find the attribute by its name.&lt;/p&gt;&lt;p&gt;&lt;a href="http://manifests.jcabi.com"&gt;jcabi-manifests&lt;/a&gt; makes it possible with a one-liner:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.jcabi.manifests.Manifests&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Manifests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Created-By&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; </description> <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/07/03/how-to-read-manifest-mf.html</guid> <dc:date>2014-07-03T00:00:00+00:00</dc:date> </item> <item><title>Custom Pygments Lexer in Jekyll</title><link>http://www.yegor256.com/2014/06/29/custom-lexer-in-jekyll.html</link> <description>&lt;p&gt;I needed to create a custom syntax highlighting for &lt;a href="http://www.requs.org"&gt;requs.org&lt;/a&gt; on which I&amp;#39;m using Jekyll for site rendering.&lt;/p&gt;&lt;p&gt;This is how my code blocks look in markdown pages:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;{ % highlight requs %} User is a &amp;quot;human being&amp;quot;. { % endhighlight %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I created a custom &lt;a href="http://pygments.org/docs/lexerdevelopment/"&gt;Pygments lexer&lt;/a&gt;:&lt;/p&gt; </description> <pubDate>Sun, 29 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/06/29/custom-lexer-in-jekyll.html</guid> <dc:date>2014-06-29T00:00:00+00:00</dc:date> </item> <item><title>SASS in Java Webapp</title><link>http://www.yegor256.com/2014/06/26/sass-in-java-webapp.html</link> <description>&lt;p&gt;&lt;a href="http://sass-lang.com/"&gt;SASS&lt;/a&gt; is a powerful and very popular language for writing &lt;a href="http://www.w3.org/Style/CSS/Overview.en.html"&gt;CSS&lt;/a&gt; style sheets. This is how I&amp;#39;m using SASS in my Maven projects.&lt;/p&gt;&lt;p&gt;First, I change the extensions of &lt;code&gt;.css&lt;/code&gt; files to &lt;code&gt;.scss&lt;/code&gt; and move them from &lt;code&gt;src/main/webapp/css&lt;/code&gt; to &lt;code&gt;src/main/scss&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Then, I configure the &lt;a href="https://github.com/Jasig/sass-maven-plugin"&gt;sass-maven-plugin&lt;/a&gt; (get its latest versions in &lt;a href="http://search.maven.org/"&gt;Maven Central&lt;/a&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.jasig.maven&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;sass-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;generate-css&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;generate-resources&lt;span class="nt"&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;update-stylesheets&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;sassSourceDirectory&amp;gt;&lt;/span&gt;${basedir}/src/main/scss&lt;span class="nt"&gt;&amp;lt;/sassSourceDirectory&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;destination&amp;gt;&lt;/span&gt;${project.build.directory}/css&lt;span class="nt"&gt;&amp;lt;/destination&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; </description> <pubDate>Thu, 26 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/06/26/sass-in-java-webapp.html</guid> <dc:date>2014-06-26T00:00:00+00:00</dc:date> </item> <item><title>XML+XSLT in a Browser</title><link>http://www.yegor256.com/2014/06/25/xml-and-xslt-in-browser.html</link> <description>&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Separation_of_presentation_and_content"&gt;Separating data and their presentation&lt;/a&gt; is a great concept. Take HTML and CSS for example. HTML is supposed to have pure data and CSS is supposed to format that data in order to make it readable by a human. Years ago, that was probably the intention of HTML/CSS, but in reality it doesn&amp;#39;t work like that. Mostly because CSS is not powerful enough.&lt;/p&gt;&lt;p&gt;We still have to format our data using HTML tags, while CSS can help slightly with positioning and decorating.&lt;/p&gt;&lt;p&gt;On the other hand, XML with &lt;a href="http://en.wikipedia.org/wiki/XSLT"&gt;XSLT&lt;/a&gt; implements perfectly the idea of separating data and presentation. XML documents, like HTML, are supposed to contain data only without any information about positioning or formatting. XSL stylesheets position and decorate the data. XSL is a much more powerful language. That&amp;#39;s why it&amp;#39;s possible to avoid any formatting inside XML.&lt;/p&gt;&lt;p&gt;The latest versions of Chrome, Safari, FireFox and IE all support this mechanism. When a browser retrieves an XML document from a server, and the document has an XSL stylesheet &lt;a href="http://www.w3.org/TR/xml-stylesheet/"&gt;associated&lt;/a&gt; with it &amp;mdash; the browser transforms XML into HTML on-fly.&lt;/p&gt; </description> <pubDate>Wed, 25 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/06/25/xml-and-xslt-in-browser.html</guid> <dc:date>2014-06-25T00:00:00+00:00</dc:date> </item> <item><title>Deploy Jekyll to Github Pages</title><link>http://www.yegor256.com/2014/06/24/jekyll-github-deploy.html</link> <description>&lt;p&gt;This blog is written in &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; and is hosted at &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;. It uses half a dozen custom plugins, which &lt;a href="https://help.github.com/articles/using-jekyll-plugins-with-github-pages"&gt;are not allowed there&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Here is how I deploy it:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;jgd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;#39;s it. &lt;a href="http://rubygems.org/gems/jgd"&gt;jgd&lt;/a&gt; is my Ruby gem (stands for &amp;quot;Jekyll Github Deploy&amp;quot;), which does the trick. Here is &lt;a href="https://github.com/yegor256/jekyll-github-deploy/blob/master/bash/deploy.sh"&gt;what it does&lt;/a&gt;:&lt;/p&gt; </description> <pubDate>Tue, 24 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/06/24/jekyll-github-deploy.html</guid> <dc:date>2014-06-24T00:00:00+00:00</dc:date> </item> <item><title>CasperJS Tests in Maven Build</title><link>http://www.yegor256.com/2014/06/21/casperjs-with-maven.html</link> <description>&lt;p&gt;I&amp;#39;m a big fan of automated testing in general and integration testing in particular. I strongly believe that effort spent on writing tests are direct investments into quality and stability of the product under development.&lt;/p&gt;&lt;p&gt;&lt;a href="http://casperjs.org/"&gt;CasperJS&lt;/a&gt; is a testing framework on top of &lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;, which is a headless browser. Using CasperJS, we can ensure that our application responds correctly to requests sent by a regular web browser.&lt;/p&gt; </description> <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/06/21/casperjs-with-maven.html</guid> <dc:date>2014-06-21T00:00:00+00:00</dc:date> </item> <item><title>Limit Java Method Execution Time</title><link>http://www.yegor256.com/2014/06/20/limit-method-execution-time.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://aspects.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Say, you want to allow a Java method to work for a maximum of five seconds and want an exception to be thrown if the timeframe is exceeded. Here is how you can do it with &lt;a href="http://aspects.jcabi.com"&gt;jcabi-aspects&lt;/a&gt; and &lt;a href="http://eclipse.org/aspectj/"&gt;AspectJ&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Resource&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Timeable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SECONDS&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;openConnection&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getContent&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; </description> <pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/06/20/limit-method-execution-time.html</guid> <dc:date>2014-06-20T00:00:00+00:00</dc:date> </item> <item><title>Avoid String Concatenation</title><link>http://www.yegor256.com/2014/06/19/avoid-string-concatenation.html</link> <description>&lt;p&gt;This is &amp;quot;string concatentation&amp;quot;, and it is a bad practice:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="c1"&gt;// bad practice, don&amp;#39;t reuse!&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why? Some may say that it is slow, mostly because parts of the resulting string are copied multiple times. Indeed, on every &lt;code&gt;+&lt;/code&gt; operator, &lt;code&gt;String&lt;/code&gt; class allocates a new block in memory and copies everything it has into it; plus a suffix being concatenated. This is true, but this is not the point here.&lt;/p&gt; </description> <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/06/19/avoid-string-concatenation.html</guid> <dc:date>2014-06-19T00:00:00+00:00</dc:date> </item> <item><title>Objects Should Be Immutable</title><link>http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html</link> <description>&lt;p&gt;In object-oriented programming, an object is &lt;a href="http://en.wikipedia.org/wiki/Immutable_object"&gt;immutable&lt;/a&gt; if its state can&amp;#39;t be modified after it is created.&lt;/p&gt;&lt;p&gt;In Java, a good example of an immutable object is &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html"&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. Once created, we can&amp;#39;t modify its state. We can request that it creates new strings, but its own state will never change.&lt;/p&gt;&lt;p&gt;However, there are not so many immutable classes in JDK. Take, for example, class &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/util/Date.html"&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;. It is possible to modify its state using &lt;code&gt;setTime()&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I don&amp;#39;t know why the JDK designers decided to make these two very similar classes differently. However, I believe that the design of a mutable &lt;code&gt;Date&lt;/code&gt; has a many flaws, while the immutable &lt;code&gt;String&lt;/code&gt; is much more in the spirit of the object-oriented paradigm.&lt;/p&gt;&lt;p&gt;Moreover, I think that &lt;strong&gt;all classes should be immutable in a perfect object-oriented world&lt;/strong&gt;. Unfortunately, sometimes, it is technically not possible due to limitations in JVM. Nevertheless, we should always aim for the best.&lt;/p&gt;&lt;p&gt;This is an incomplete list of arguments in favor of immutability:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;immutable objects are simpler to construct, test, and use&lt;/li&gt; &lt;li&gt;truly immutable objects are always thread-safe&lt;/li&gt; &lt;li&gt;they help to avoid temporal coupling&lt;/li&gt; &lt;li&gt;their usage is side-effect free (no defensive copies)&lt;/li&gt; &lt;li&gt;identity mutability problem is avoided&lt;/li&gt; &lt;li&gt;they always have failure atomicity&lt;/li&gt; &lt;li&gt;they are much easier to cache&lt;/li&gt; &lt;li&gt;they prevent NULL references, &lt;a href="/2014/05/13/why-null-is-bad.html"&gt;which are bad&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Let&amp;#39;s discuss the most important arguments one by one.&lt;/p&gt; </description> <pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html</guid> <dc:date>2014-06-09T00:00:00+00:00</dc:date> </item> <item><title>Java Method Logging with AOP and Annotations</title><link>http://www.yegor256.com/2014/06/01/aop-aspectj-java-method-logging.html</link> <description>&lt;p&gt;Sometimes, I want to log (through &lt;a href="http://www.slf4j.org"&gt;slf4j&lt;/a&gt; and &lt;a href="http://logging.apache.org/log4j/2.x/"&gt;log4j&lt;/a&gt;) every execution of a method, seeing what arguments it receives, what it returns and how much time every execution takes. This is how I&amp;#39;m doing it, with help of &lt;a href="http://eclipse.org/aspectj/"&gt;AspectJ&lt;/a&gt;, &lt;a href="http://aspects.jcabi.com"&gt;jcabi-aspects&lt;/a&gt; and Java 6 annotations:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Loggable&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;power&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is what I see in log4j output:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;[INFO] com.example.Foo #power(2, 10): 1024 in 12μs [INFO] com.example.Foo #power(3, 3): 27 in 4μs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nice, isn&amp;#39;t it? Now, let&amp;#39;s see how it works.&lt;/p&gt; </description> <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/06/01/aop-aspectj-java-method-logging.html</guid> <dc:date>2014-06-01T00:00:00+00:00</dc:date> </item> <item><title>Object-Oriented Java Adapter of Amazon S3 SDK</title><link>http://www.yegor256.com/2014/05/26/amazon-s3-java-oop-adapter.html</link> <description>&lt;figure class='badge'&gt;&lt;img src='http://img.yegor256.com/2014/05/s3-logo.png' style='width:150px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;I&amp;#39;m a big fan of Amazon Web Services (AWS). I&amp;#39;m using them in almost all of my projects. One of their most popular services is &lt;a href="http://aws.amazon.com/s3/"&gt;Simple Storage Service (S3)&lt;/a&gt;. It is a storage for binary objects (files) with unique names, accessible through HTTP or RESTful API.&lt;/p&gt;&lt;p&gt;Using S3 is very simple. You create a &amp;quot;bucket&amp;quot; with a unique name, upload your &amp;quot;object&amp;quot; into the bucket through their web interface or through RESTful API, and then download it again (either through HTTP or the API.)&lt;/p&gt;&lt;p&gt;Amazon ships the &lt;a href="https://aws.amazon.com/sdkforjava/"&gt;Java SDK&lt;/a&gt; that wraps their RESTful API. However, this SDK is not object-oriented at all. It is purely imperative and procedural &amp;mdash; it just mirrors the API.&lt;/p&gt;&lt;p&gt;For example, in order to download an existing object &lt;code&gt;doc.txt&lt;/code&gt; from bucket &lt;code&gt;test-1&lt;/code&gt;, you have to do something like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;AWSCredentials&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;BasicAWSCredentials&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;AmazonS3&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AmazonS3Client&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;S3Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GetObjectRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test-1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;doc.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getObjectContent&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IOUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure class='badge'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;As always, procedural programming has its inevitable disadvantages. To overcome them all, I designed &lt;a href="http://s3.jcabi.com"&gt;jcabi-s3&lt;/a&gt;, which is a small object-oriented adapter for Amazon SDK. This is how the same object-reading task can be accomplished with &lt;a href="http://s3.jcabi.com"&gt;jcabi-s3&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Simple&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Bucket&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test-1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Ocket&lt;/span&gt; &lt;span class="n"&gt;ocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ocket&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;doc.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Ocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ocket&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why is this approach better? Well, there are a number of obvious advantages.&lt;/p&gt; </description> <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/05/26/amazon-s3-java-oop-adapter.html</guid> <dc:date>2014-05-26T00:00:00+00:00</dc:date> </item> <item><title>Get Rid of Java Static Loggers</title><link>http://www.yegor256.com/2014/05/23/avoid-java-static-logger.html</link> <description>&lt;p&gt;This is a very common practice in Java (using &lt;a href="http://www.slf4j.org/apidocs/org/slf4j/LoggerFactory.html"&gt;&lt;code&gt;LoggerFactory&lt;/code&gt;&lt;/a&gt; from &lt;a href="http://www.slf4j.org/"&gt;slf4j&lt;/a&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="n"&gt;LOGGER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// save the file&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isInfoEnabled&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file {} saved successfuly&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What&amp;#39;s wrong with it? Code duplication.&lt;/p&gt; </description> <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/05/23/avoid-java-static-logger.html</guid> <dc:date>2014-05-23T00:00:00+00:00</dc:date> </item> <item><title>MySQL Maven Plugin</title><link>http://www.yegor256.com/2014/05/21/mysql-maven-plugin.html</link> <description>&lt;p&gt;I was using MySQL in a few Java web projects and found out there was no Maven plugin that would help me to test my DAO classes against a real MySQL server. There are plenty of mechanisms to mock a database persistence layer both in memory and on disc. However, it is always good to make sure that your classes are tested against a database identical to the one you have in production environment.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://mysql.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I&amp;#39;ve created my own Maven plugin, &lt;a href="http://mysql.jcabi.com"&gt;jcabi-mysql-maven-plugin&lt;/a&gt;, that does exactly two things: starts a MySQL server on &lt;code&gt;pre-integration-test&lt;/code&gt; phase and shuts it down on &lt;code&gt;post-integration-test&lt;/code&gt;.&lt;/p&gt; </description> <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/05/21/mysql-maven-plugin.html</guid> <dc:date>2014-05-21T00:00:00+00:00</dc:date> </item> <item><title>Atomic Counters at Stateful.co</title><link>http://www.yegor256.com/2014/05/18/cloud-autoincrement-counters.html</link> <description>&lt;figure class='badge'&gt;&lt;img src='http://img.yegor256.com/2014/04/dynamodb-logo.jpg' style='width:150px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;Amazon DynamoDB is a great NoSQL cloud database. It is cheap, highly reliable and rather powerful. I&amp;#39;m using it in many web systems.&lt;/p&gt;&lt;p&gt;There is one feature that it lacks, though &amp;mdash; auto-increment attributes.&lt;/p&gt;&lt;p&gt;Say that you have a table with a list of messages:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;+------+----------------------------+ | id | Attributes | +------+----------------------------+ | 205 | author=&amp;quot;jeff&amp;quot;, text=&amp;quot;...&amp;quot; | | 206 | author=&amp;quot;bob&amp;quot;, text=&amp;quot;...&amp;quot; | | 207 | author=&amp;quot;alice&amp;quot;, text=&amp;quot;...&amp;quot; | +------+----------------------------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every time you add a new item to the table, a new value of &lt;code&gt;id&lt;/code&gt; has to be set. And this has to be done with concurrency in mind. SQL databases like PostgreSQL, Oracle, MySQL and others support auto-increment features. When you add a new record to the table, the value of the primary key is omitted and the server retrieves the next one automatically. If a number of &lt;code&gt;INSERT&lt;/code&gt; requests arrive at the same time the server guarantees that the numbers won&amp;#39;t be duplicated.&lt;/p&gt;&lt;p&gt;However, DynamoDB doesn&amp;#39;t have this feature. Instead, DynamoDB has &lt;a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html#WorkingWithItems.AtomicCounters"&gt;Atomic Counters&lt;/a&gt; and &lt;a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html#WorkingWithItems.ConditionalUpdate"&gt;Conditional Updates&lt;/a&gt;, which are very similar features. Still, they&amp;#39;re not exactly the same.&lt;/p&gt;&lt;p&gt;In case of an atomic counter, you should create a supplementary table and keep the latest value of &lt;code&gt;id&lt;/code&gt; in it.&lt;/p&gt;&lt;p&gt;In case of conditional updates, you should retry a few times in case of collisions.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;img src='http://img.stateful.co/pomegranate.svg' style='width:128px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;To make life easier in a few of my applications, I created a simple web service &amp;mdash; &lt;a href="http://www.stateful.co"&gt;stateful.co&lt;/a&gt;. It provides a simple atomic counter feature through its RESTful API.&lt;/p&gt; </description> <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/05/18/cloud-autoincrement-counters.html</guid> <dc:date>2014-05-18T00:00:00+00:00</dc:date> </item> <item><title>Object-Oriented Github API</title><link>http://www.yegor256.com/2014/05/14/object-oriented-github-java-sdk.html</link> <description>&lt;figure class='badge'&gt;&lt;img src='http://img.yegor256.com/2014/05/github-logo.png' style='width:128px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.github.com"&gt;Github&lt;/a&gt; is an awesome platform for maintaining Git sources and tracking project issues. I moved all my projects (both private and public) to Github about three years ago and have no regrets. Moreover, Github gives access to almost all of its features through RESTful JSON API.&lt;/p&gt;&lt;p&gt;There are &lt;a href="https://developer.github.com/libraries/"&gt;a few&lt;/a&gt; Java SDKs that wrap and expose the API. I tried to use them, but faced a number of issues:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;They are not really object-oriented (even though one of them has a description that says it is)&lt;/li&gt; &lt;li&gt;They are not based on JSR-353 (JSON Java API)&lt;/li&gt; &lt;li&gt;They provide no mocking instruments&lt;/li&gt; &lt;li&gt;They don&amp;#39;t cover the entire API and can&amp;#39;t be extended&lt;/li&gt; &lt;/ul&gt;&lt;figure class='badge'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;Keeping in mind all those drawbacks, I created my own library &amp;mdash; &lt;a href="http://github.jcabi.com"&gt;jcabi-github&lt;/a&gt;. Let&amp;#39;s look at its most important advantages.&lt;/p&gt; </description> <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/05/14/object-oriented-github-java-sdk.html</guid> <dc:date>2014-05-14T00:00:00+00:00</dc:date> </item> <item><title>Why NULL is Bad?</title><link>http://www.yegor256.com/2014/05/13/why-null-is-bad.html</link> <description>&lt;p&gt;A simple example of &lt;code&gt;NULL&lt;/code&gt; usage in Java:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;1 2 3 4 5 6 7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="nf"&gt;getByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;What is wrong with this method?&lt;/p&gt; </description> <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/05/13/why-null-is-bad.html</guid> <dc:date>2014-05-13T00:00:00+00:00</dc:date> </item> <item><title>OOP Alternative to Utility Classes</title><link>http://www.yegor256.com/2014/05/05/oop-alternative-to-utility-classes.html</link> <description>&lt;p&gt;A utility class (aka helper class) is a &amp;quot;structure&amp;quot; that has only static methods and encapsulates no state. &lt;code&gt;StringUtils&lt;/code&gt;, &lt;code&gt;IOUtils&lt;/code&gt;, &lt;code&gt;FileUtils&lt;/code&gt; from &lt;a href="http://commons.apache.org/"&gt;Apache Commons&lt;/a&gt;; &lt;code&gt;Iterables&lt;/code&gt; and &lt;code&gt;Iterators&lt;/code&gt; from &lt;a href="https://code.google.com/p/guava-libraries/"&gt;Guava&lt;/a&gt;, and &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html"&gt;&lt;code&gt;Files&lt;/code&gt;&lt;/a&gt; from JDK7 are perfect examples of utility classes.&lt;/p&gt;&lt;p&gt;This design idea is very popular in the Java world (as well as C#, Ruby, etc.) because utility classes provide common functionality used everywhere.&lt;/p&gt;&lt;p&gt;Here, we want to follow the &lt;a href="http://en.wikipedia.org/wiki/Don&amp;#x27;t_repeat_yourself"&gt;DRY principle&lt;/a&gt; and avoid duplication. Therefore, we place common code blocks into utility classes and reuse them when necessary:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="c1"&gt;// This is a terrible design, don&amp;#39;t reuse&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NumberUtils&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Indeed, this a very convenient technique!?&lt;/p&gt; </description> <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/05/05/oop-alternative-to-utility-classes.html</guid> <dc:date>2014-05-05T00:00:00+00:00</dc:date> </item> <item><title>DynamoDB Local Maven Plugin</title><link>http://www.yegor256.com/2014/05/01/dynamodb-local-maven-plugin.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://aws.amazon.com/dynamodb'&gt;&lt;img src='http://img.yegor256.com/2014/04/dynamodb-logo.jpg' style='width:150px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.html"&gt;DynamoDB Local&lt;/a&gt; is a locally running copy of Amazon DynamoDB server. Amazon developed the tool and based it on SQLite. It acts as a real DynamoDB service through the RESTful API.&lt;/p&gt;&lt;p&gt;I guess, DynamoDB Local is meant to be used in integration testing and this is how we&amp;#39;re going to use it below.&lt;/p&gt;&lt;p&gt;I use Maven to run all of my Java integration testing using &lt;a href="http://maven.apache.org/surefire/maven-failsafe-plugin/"&gt;maven-failsafe-plugin&lt;/a&gt;. The philosophy of integration testing with Maven is that you start all your supplementary test stubs during the &lt;code&gt;pre-integration-test&lt;/code&gt; phase, run your tests in the &lt;code&gt;integration-test&lt;/code&gt; phase and then shutdown all stubs during the &lt;code&gt;post-integration-test&lt;/code&gt;.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://dynamodb.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;It would be great if it were possible to use DynamoDB Local that way. I didn&amp;#39;t find any Maven plugins for that purpose, so I decided to create my own &amp;mdash;&lt;a href="https://github.com/jcabi/jcabi-dynamodb-maven-plugin"&gt;jcabi-dynamodb-maven-plugin&lt;/a&gt;.&lt;/p&gt; </description> <pubDate>Thu, 01 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/05/01/dynamodb-local-maven-plugin.html</guid> <dc:date>2014-05-01T00:00:00+00:00</dc:date> </item> <item><title>W3C Java Validators</title><link>http://www.yegor256.com/2014/04/29/w3c-java-validators.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://w3c.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;A few years ago, I created two Java wrappers for W3C validators: (&lt;a href="http://validator.w3.org/"&gt;HTML&lt;/a&gt; and &lt;a href="http://jigsaw.w3.org/css-validator/"&gt;CSS&lt;/a&gt;). Both wrappers seemed to be working fine and were even listed by W3C on &lt;a href="http://validator.w3.org/docs/api.html"&gt;their website&lt;/a&gt; in the API section. Until recently, these wrappers have always been part of &lt;a href="http://www.rexsl.com"&gt;ReXSL&lt;/a&gt; library.&lt;/p&gt;&lt;p&gt;A few days ago, though, I took the wrappers out of ReXSL and published them as a standalone library &amp;mdash; &lt;a href="http://w3c.jcabi.com"&gt;jcabi-w3c&lt;/a&gt;. Consequently, now seems to be a good time to write a few words about them.&lt;/p&gt;&lt;p&gt;Below is an example that demonstrates how you can validate an HTML document against W3C compliancy rules:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;1 2 3 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.jcabi.w3c.ValidatorBuilder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;ValidatorBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;html&amp;gt;hello, world!&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valid&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; </description> <pubDate>Tue, 29 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/29/w3c-java-validators.html</guid> <dc:date>2014-04-29T00:00:00+00:00</dc:date> </item> <item><title>XML/XPath Matchers for Hamcrest</title><link>http://www.yegor256.com/2014/04/28/xml-xpath-hamcrest-matchers.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://matchers.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="https://github.com/hamcrest/JavaHamcrest"&gt;Hamcrest&lt;/a&gt; is my favorite instrument in unit testing. It replaces the JUnit procedural assertions of &lt;code&gt;org.junit.Assert&lt;/code&gt; with an object-oriented mechanism. However, I will discuss that subject in more detail sometime later.&lt;/p&gt;&lt;p&gt;Now, though, I want to demonstrate a new library published today on Github and Maven Central: &lt;a href="http://matchers.jcabi.com"&gt;jcabi-matchers&lt;/a&gt;. jcabi-matchers is a collection of Hamcrest matchers to make XPath assertions in XML and XHTML documents.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s say, for instance, a class that is undergoing testing produces an XML that needs to contain a single &lt;code&gt;&amp;lt;message&amp;gt;&lt;/code&gt; element with the content &lt;code&gt;&amp;quot;hello, world!&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This is how that code would look in a unit test:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.jcabi.matchers.XhtmlMatchers&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.hamcrest.MatcherAssert&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Test&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;hasWelcomeMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MatcherAssert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;createXml&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;XhtmlMatchers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasXPaths&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/document[count(message)=1]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/document/message[.=&amp;#39;hello, world!&amp;#39;]&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; </description> <pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/28/xml-xpath-hamcrest-matchers.html</guid> <dc:date>2014-04-28T00:00:00+00:00</dc:date> </item> <item><title>Typical Mistakes in Java Code</title><link>http://www.yegor256.com/2014/04/27/typical-mistakes-in-java-code.html</link> <description>&lt;p&gt;This page contains most typical mistakes I see in the Java code of people working with me. Static analysis (we&amp;#39;re using &lt;a href="http://www.qulice.com"&gt;qulice&lt;/a&gt; can&amp;#39;t catch all of the mistakes for obvious reasons, and that&amp;#39;s why I decided to list them all here.&lt;/p&gt; </description> <pubDate>Sun, 27 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/27/typical-mistakes-in-java-code.html</guid> <dc:date>2014-04-27T00:00:00+00:00</dc:date> </item> <item><title>Incremental Requirements With Requs</title><link>http://www.yegor256.com/2014/04/26/incremental-requirements-with-requs.html</link> <description>&lt;p&gt;Requirements engineering is one of the most important disciplines in software development. Perhaps, even more important than architecture, design or coding itself.&lt;/p&gt;&lt;p&gt;Joy Beatty and Karl Wiegers in &lt;a href="http://www.amazon.com/Software-Requirements-Developer-Best-Practices/dp/0735679665"&gt;Software Requirements&lt;/a&gt; argue that the cost of mistakes made in a requirements specification is significantly higher than a bug in source code. I totally agree.&lt;/p&gt;&lt;p&gt;In XDSD projects we specify requirements using &lt;a href="http://www.requs.org"&gt;Requs&lt;/a&gt;, a &lt;a href="http://en.wikipedia.org/wiki/Controlled_natural_language"&gt;controlled natural language&lt;/a&gt; that sounds like English, while at the same time is parseable by computers. A simple requirements document in Requs may look similar to:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;1 2 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;Department has employee-s. Employee has name and salary. UC1 where Employee gets raise: &amp;quot;TBD&amp;quot;. &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This Software Requirements Specification (SRS) defines two types (&lt;code&gt;Department&lt;/code&gt; and &lt;code&gt;Employee&lt;/code&gt;) and one method &lt;code&gt;UC&lt;/code&gt; (aka &amp;quot;use case&amp;quot;).&lt;/p&gt;&lt;p&gt;Requs syntax is explained &lt;a href="http://www.requs.org/syntax.html"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The main and only goal of requirements engineering in any XDSD project is to create a complete and non-ambiguous SRS document. The person who performs this task is called the &amp;quot;system analyst&amp;quot;. This article explains his or her main tasks and discusses possible pitfalls.&lt;/p&gt;&lt;h2 id="tasks"&gt;Tasks&lt;/h2&gt;&lt;p&gt;We modify SRS incrementally, and our increments are very small. For instance, say we have the sample document I mentioned above, and I&amp;#39;m a system analyst on the project. All my tasks will be similar to &amp;quot;there is a bug in SRS, let&amp;#39;s fix it&amp;quot;.&lt;/p&gt;&lt;p&gt;Even if it is a suggestion, it will still start with a complaint about the incompleteness of the SRS. For example:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;UC1 doesn&amp;#39;t explain how exactly an employee receives a raise.&lt;/li&gt; &lt;li&gt;Does the salary of an employee have limits? Can it be negative?&lt;/li&gt; &lt;li&gt;How many employees can a department have? Can it be zero?&lt;/li&gt; &lt;li&gt;Can an employee receive a decrease in salary?&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;All of these &lt;a href="/2014/04/13/bugs-are-welcome.html"&gt;bugs&lt;/a&gt; are addressed to me. I need to fix them by improving the SRS. My workflow is the same in every task:&lt;/p&gt;&lt;ol&gt; &lt;li&gt;Understand what is required&lt;/li&gt; &lt;li&gt;Change the SRS&lt;/li&gt; &lt;li&gt;Close the task&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Let&amp;#39;s try this step by step.&lt;/p&gt;&lt;h2 id="requirements-providers"&gt;Requirements Providers&lt;/h2&gt;&lt;p&gt;As a system analyst, my job is to understand what product owners (aka &amp;quot;requirements providers&amp;quot;) want and document their wishes. In most cases, their wants and wishes are very vague and chaotic. My job is to make them complete and unambiguous. That&amp;#39;s why the first step is to understand what is required.&lt;/p&gt;&lt;p&gt;First of all, I must determine who the product owner is before I can begin. The product owner signs the SRS, so I should pay complete attention to his opinions. However, my job is not only to listen, but also to suggest. A good system analyst can provoke creative thinking in a product owner by asking the right questions.&lt;/p&gt;&lt;p&gt;OK, now I that know the identity of the product owner, I need to talk to him. In XDSD, we don&amp;#39;t do any meetings, phone calls, or any other type of informal communications. Therefore, my only mechanism for receiving the information I need is with is &amp;mdash; tickets.&lt;/p&gt;&lt;p&gt;I will submit &lt;strong&gt;new&lt;/strong&gt; tickets, addressing them to the product owner. As there can be many product owners in a project, I must submit tickets that clearly state in the first sentence that the ticket pertains to questions for a particular owners. The person receiving the ticket will then determine the best person to answer it.&lt;/p&gt;&lt;p&gt;Thus, while working with a single task, I will submit many questions and receive many interesting answers. I&amp;#39;ll do all this in order to improve my understanding of the product the owners are developing.&lt;/p&gt;&lt;p&gt;When I understand how the SRS should be fixed, it is time to make changes in the Requs files.&lt;/p&gt;&lt;h2 id="requs-files"&gt;Requs Files&lt;/h2&gt;&lt;p&gt;The SRS document is generated automatically on every continuous integration build cycle. It is compiled from pieces called &lt;code&gt;.req&lt;/code&gt; files, which are usually located in the &lt;code&gt;src/main/requs&lt;/code&gt; directory in a project repository.&lt;/p&gt;&lt;p&gt;My job, as a system analyst, is to make changes to some of these files and submit a pull request for review.&lt;/p&gt;&lt;p&gt;&lt;a href="/2014/04/15/github-guidelines.html"&gt;Github Guidelines&lt;/a&gt; explains [how to work with Github. However, in short, I need to:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Clone the repository;&lt;/li&gt; &lt;li&gt;Check out its copy to my computer;&lt;/li&gt; &lt;li&gt;Make changes;&lt;/li&gt; &lt;li&gt;Commit my changes;&lt;/li&gt; &lt;li&gt;Push them to my remote fork;&lt;/li&gt; &lt;li&gt;Submit a pull request&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;It doesn&amp;#39;t really matter which files I edit because Requs automatically composes together all files with the &lt;code&gt;req&lt;/code&gt; extension. I can even add new files to the directory &amp;mdash; they will be picked up. Likewise, I can also add sub- directories with files.&lt;/p&gt;&lt;h2 id="local-build"&gt;Local Build&lt;/h2&gt;&lt;p&gt;Before submitting a pull request, I will try to validate that my changes are syntactically and grammatically valid. I will compile Requs files into the SRS document using the same method our continuous integration server uses to compile them.&lt;/p&gt;&lt;p&gt;Before I can compile, though, I need to install &lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html"&gt;JDK7&lt;/a&gt; and &lt;a href="http://maven.apache.org/download.cgi"&gt;Maven&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Afterwards, I make the following command line call in the project directory:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mvn clean requs:compile &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;After entering the commands, I expect to see the &lt;code&gt;BUILD SUCCESS&lt;/code&gt; message. If not, there are some errors and I should fix them. My pull request won&amp;#39;t be merged and I won&amp;#39;t be able to close the task if Requs can&amp;#39;t compile the files.&lt;/p&gt;&lt;p&gt;Once compiled, I can open the SRS in Firefox. It is in &lt;code&gt;target/requs/index.xml&lt;/code&gt;. Even though it is an XML file, Firefox can open it as a webpage. Other browsers won&amp;#39;t work. Well, Google Chrome will work, but only with this &lt;a href="http://stackoverflow.com/questions/3828898/can-chrome-be-made-to-perform-an-xsl-transform-on-a-local-file"&gt;small trick&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="pull-request-review"&gt;Pull Request Review&lt;/h2&gt;&lt;p&gt;Once all changes are finished, I will submit a pull request. A project manager will the assign someone to review my pull request and I will receive feedback.&lt;/p&gt;&lt;p&gt;In most cases, there will be at least a few corrections requested by the reviewer. Generally speaking, my requests are reviewed by other system analysts. Therefore, I must address all comments and make sure my changes satisfy the reviewer.&lt;/p&gt;&lt;p&gt;I will make extra changes to the same branch locally, and push them to Github. The pull request will be updated automatically, so I don&amp;#39;t need to create a new one.&lt;/p&gt;&lt;p&gt;Once the pull request is clean enough for the reviewer, he will merge it into the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;&lt;h2 id="close-and-get-paid"&gt;Close and Get Paid&lt;/h2&gt;&lt;p&gt;Finally, my pull request is merged and I get back to the task owner. I tell him that the SRS was fixed and request that he review it. His original problem should be fixed by now &amp;mdash; the SRS should provide the information required.&lt;/p&gt;&lt;p&gt;He then closes the task and the project manager pays me within a few hours.&lt;/p&gt; </description> <pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/26/incremental-requirements-with-requs.html</guid> <dc:date>2014-04-26T00:00:00+00:00</dc:date> </item> <item><title>Java XML Parsing Made Easy</title><link>http://www.yegor256.com/2014/04/24/java-xml-parsing-and-traversing.html</link> <description>&lt;p&gt;Unlike with many other modern languages, parsing XML in Java requires more than one line of code. XML traversing using XPath takes even more code, and I find this is unfair and annoying.&lt;/p&gt;&lt;p&gt;I&amp;#39;m a big fan of XML and use it it in almost every Java application. Some time ago, I decided to put all of that XML-to-DOM parsing code into a small library &amp;mdash;&lt;a href="http://xml.jcabi.com"&gt;jcabi-xml&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Put simply, the library is a convenient wrapper for JDK-native DOM manipulations. That&amp;#39;s why it is small and dependency-free. With the following example, you can see just how simple XML parsing can be:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.jcabi.xml.XML&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.jcabi.xml.XMLDocument&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;XMLDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;root&amp;gt;&amp;lt;a&amp;gt;hello&amp;lt;/a&amp;gt;&amp;lt;b&amp;gt;world!&amp;lt;/b&amp;gt;&amp;lt;/root&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; </description> <pubDate>Thu, 24 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/24/java-xml-parsing-and-traversing.html</guid> <dc:date>2014-04-24T00:00:00+00:00</dc:date> </item> <item><title>Basic HTTP Auth for S3 Buckets</title><link>http://www.yegor256.com/2014/04/21/s3-http-basic-auth.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.s3auth.com'&gt;&lt;img src='http://img.s3auth.com/logo.png' style='width:200px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt; is a simple and very useful storage of binary objects (aka &amp;quot;files&amp;quot;). To use it, you create a &amp;quot;bucket&amp;quot; there with a unique name and upload your objects.&lt;/p&gt;&lt;p&gt;Afterwards, AWS guarantees your object will be available for download through their &lt;a href="http://docs.aws.amazon.com/AmazonS3/latest/API/APIRest.html"&gt;RESTful API&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;A few years ago, AWS introduced a S3 feature S3 called &lt;a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html"&gt;static website hosting&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;With static website hosting, you simply turn on the feature and all objects in your bucket become available through public HTTP. This is an awesome feature for hosting static content, such as images, JavaScript files, video and audio content.&lt;/p&gt;&lt;p&gt;When using the hosting, you need to change the CNAME record in your DNS so that it points to &lt;code&gt;www.example.com.aws.amazon.com&lt;/code&gt;. After changing the DNS entry, your static website is available at &lt;code&gt;www.example.com&lt;/code&gt; just as it would be normally.&lt;/p&gt;&lt;p&gt;When using Amazon S3, though, it is not possible to protect your website because the content is purely static. This means you can&amp;#39;t have a login page on the front end. With the service, you can either make your objects either absolutely public &amp;mdash; so that anyone can see them online &amp;mdash; or assign access rights to them &amp;mdash; but only for users connected through RESTful API.&lt;/p&gt; </description> <pubDate>Mon, 21 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/21/s3-http-basic-auth.html</guid> <dc:date>2014-04-21T00:00:00+00:00</dc:date> </item> <item><title>How Hourly Rate Is Calculated</title><link>http://www.yegor256.com/2014/04/20/how-hourly-rate-is-calculated.html</link> <description>&lt;p&gt;In XDSD, everyone &amp;mdash; including project managers, analysts, programmers, and product owners &amp;mdash; receives payments based on deliverables with agreed upon budgets. In the fhe first section of the article, &lt;a href="/2014/04/17/how-xdsd-is-different.html"&gt;How XDSD Is Different&lt;/a&gt; I explain exactly how this concept works. I don&amp;#39;t explain in the article, though, how we decide which hourly rate is acceptable for each project participant.&lt;/p&gt;&lt;p&gt;When new people come to us, usually they have some numbers in mind. They know how much they expect to make per week, per month or per day. We rarely negotiate the payment rates, but rather just accept reasonable offers. Nonetheless, every few months, we review payments rates and change them accordingly (increasing or decreasing them as appropriate).&lt;/p&gt;&lt;p&gt;Further along in the article, is a list of factors that influence our decision making process regarding payment rates. However, before we get to the factors that influence our rate-setting decisions, it is important to mention that &amp;mdash; unlike most other companies or software teams &amp;mdash; we don&amp;#39;t pay attention to the following:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Your geographic location;&lt;/li&gt; &lt;li&gt;Skills and experience listed in your CV;&lt;/li&gt; &lt;li&gt;Amount of time already spent on our projects;&lt;/li&gt; &lt;li&gt;Age, sex, nationality, religious beliefs, etc.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The factors listed below, though, are indeed very important to us. They affect your &amp;quot;overall score&amp;quot; significantly and play a major part in decisions to decrease or increase a payment rate. After changing a payment rate, we don&amp;#39;t negotiate it with the project member.&lt;/p&gt;&lt;p&gt;Keep in mind that besides decreasing your hourly rate, a low overall score may affect the number of tasks you receive from us.&lt;/p&gt;&lt;p&gt;The best developers receive most of the new tasks. So, continue reading, follow our principles and learn how to earn and enjoy higher rates :)&lt;/p&gt;&lt;h2 id="fast-delivery"&gt;Fast Delivery&lt;/h2&gt;&lt;p&gt;The faster you deliver on a task, the better. We track all your completed tasks and can calculate easily how many days it takes you, on average, to close tasks. To increase this metric, you should try to close all tasks as soon as possible to reduce your overall completion-time average.&lt;/p&gt;&lt;p&gt;If you see that a specific task is not suitable for you, don&amp;#39;t hold on to it. Instead, inform your project manager as soon as possible that you do not want to work on the task. After you inform the project manager, he will try find you something else more suitable.&lt;/p&gt;&lt;p&gt;By the way, the best developers usually close their tasks in five calendar days (or less) on average.&lt;/p&gt;&lt;h2 id="past-due-tasks"&gt;Past Due Tasks&lt;/h2&gt;&lt;p&gt;Though we encourage everyone to reject tasks they don&amp;#39;t like, we are strongly against overdue tasks. Once you have started to work on a task, we expect you to finish it on time.&lt;/p&gt;&lt;p&gt;Our &lt;a href="/2014/04/13/no-obligations-principle.html"&gt;No Obligation Principle&lt;/a&gt; gives our project managers freedom to take any task away from you if don’t complete it in a reasonable amount of time (ten days).&lt;/p&gt;&lt;p&gt;Removal of tasks by project managers affects your overall score negatively. Nevertheless, even the best developers sometimes have overdue tasks, and we understand that it happens from time to time. However, our best developers they keep their number of overdue tasks to a minimum. A good rule of thumb for acceptable numbers in this area is about one overdue task per twenty completed successfully and on time.&lt;/p&gt;&lt;h2 id="complexity"&gt;Complexity&lt;/h2&gt;&lt;p&gt;Every XDSD task has a project role assigned to it. The article, &lt;a href="/2014/04/12/puzzle-driven-development-by-roles.html"&gt;Puzzle Driven Development by Roles&lt;/a&gt;, lists the key roles we use in XDSD projects. Generally speaking, the higher the role, the higher the complexity of tasks assigned to it. Therefore, closing a task in an &amp;quot;architect&amp;quot; role is much more important than closing one as an &amp;quot;implementer&amp;quot; (or &amp;quot;developer.&amp;quot;)&lt;/p&gt;&lt;p&gt;The more tasks you close in your current role, the faster you will receive promotions and receive pay-rate increases. Very often, our developers work in a few roles at the same time.&lt;/p&gt;&lt;h2 id="lengthy-discussions"&gt;Lengthy Discussions&lt;/h2&gt;&lt;p&gt;We discourage long conversations on one task. The longer the discussions about a task, the longer it takes to complete &amp;mdash; which lowers your quality as a developer. Ideally, developers should receive a task, deliver the result and inform the task author after it&amp;#39;s done. Afterwards, the task author closes the task and payment is made.&lt;/p&gt;&lt;p&gt;We track the number of messages you post and receive in your tasks automatically. Consequently, too many messages may affect your overall score in a negative way.&lt;/p&gt;&lt;p&gt;To avoid long conversations in tasks, submit new tickets with questions or bug reports. Again, the &lt;a href="/2014/04/12/puzzle-driven-development-by-roles.html"&gt;Puzzle Driven Development by Roles&lt;/a&gt; article explains the whole idea of helping us &amp;quot;to break the project&amp;quot; by submitting new bugs. Follow this concept and you&amp;#39;ll be fine.&lt;/p&gt;&lt;h2 id="contribution-via-bugs"&gt;Contribution via Bugs&lt;/h2&gt;&lt;p&gt;In XDSD &lt;a href="/2014/04/13/bugs-are-welcome.html"&gt;Bugs Are Welcome&lt;/a&gt;. You are supposed to report bugs along the normal development activities. Besides receiving extra money for reporting bugs, you can also increase your overall rating.&lt;/p&gt;&lt;p&gt;The best developers submit one bug for every 2 to 3 tasks they complete.&lt;/p&gt; </description> <pubDate>Sun, 20 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/20/how-hourly-rate-is-calculated.html</guid> <dc:date>2014-04-20T00:00:00+00:00</dc:date> </item> <item><title>Mocking of HTTP Server in Java</title><link>http://www.yegor256.com/2014/04/18/jcabi-http-server-mocking.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Recently, I explained a &lt;a href="/2014/04/11/jcabi-http-intro.html"&gt;fluent Java HTTP client&lt;/a&gt; created (mostly) to make HTTP interactions more object-oriented than with other available clients,including: &lt;a href="http://hc.apache.org/httpclient-3.x/"&gt;Apache Client&lt;/a&gt;, &lt;a href="https://jersey.java.net/documentation/latest/client.html"&gt;Jersey Client&lt;/a&gt; and plain old &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/net/HttpURLConnection.html"&gt;&lt;code&gt;HttpURLConnection&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This client ships in the &lt;a href="http://http.jcabi.com"&gt;jcabi-http&lt;/a&gt; Maven artifact. However, the client part is not the only benefit of using &lt;a href="http://http.jcabi.com"&gt;jcabi-http&lt;/a&gt;. Jcabi also includes a server component that can help you in unit and integration testing of your HTTP clients.&lt;/p&gt; </description> <pubDate>Fri, 18 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/18/jcabi-http-server-mocking.html</guid> <dc:date>2014-04-18T00:00:00+00:00</dc:date> </item> <item><title>How XDSD Is Different</title><link>http://www.yegor256.com/2014/04/17/how-xdsd-is-different.html</link> <description>&lt;p&gt;eXtremely Distributed Software Development, or XDSD for short, is a methodology that differs significantly from working in traditional software development teams. Most XDSD methods are so different (yet critical) that many newcomers get confused. This article should help you bootstrap once you join a project managed with by XDSD principles &amp;mdash; either as a developer or a project sponsor.&lt;/p&gt;&lt;h2 id="we-pay-only-for-closed-tasks"&gt;We Pay Only For Closed Tasks&lt;/h2&gt;&lt;p&gt;Unlike with many other projects, in XDSD, we pay only for closed tasks and the agreed upon time budget. Let me explain by example. Let&amp;#39;s say, you are a Ruby programmer and you a get a new task that requires you to fix a broken unit test. The task has a time budget of 30 minutes, as is the case most of the time. Sometimes, though, tasks may have time budgets of fifteen minutes or one hour.&lt;/p&gt;&lt;p&gt;In our example, we agree upon a contract rate of $50 per hour. With the broken test, you will receive $25 for completing the task &amp;mdash; 30 minute tasked billed at $50 per hour.&lt;/p&gt;&lt;p&gt;It does not matter how long it actually takes you to fix the test. Your actual time spent on the project may be five minutes or five hours. Nevertheless, you will receive compensation for 30 minutes of work only. If you fix the broken test in 5 minutes, you receive $25. If the task takes you an hour, or even a month, to complete, you still receive only $25.&lt;/p&gt;&lt;p&gt;Furthermore, if you fail to fix the unit test and close the task altogether, you will receive no pay at all for the assignment.&lt;/p&gt;&lt;p&gt;You can view more details about this principle in the following articles: &lt;a href="/2014/04/13/no-obligations-principle.html"&gt;No Obligations Principle&lt;/a&gt; or &lt;a href="/2014/04/15/definition-of-done.html"&gt;Definition of Done&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/revolver-avi-with-dollar.jpg' style='width:600px;' alt='Revolver (2005) by Guy Ritchie'/&gt;&lt;figcaption&gt;Revolver (2005) by Guy Ritchie&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;As mentioned above, this is one of the most important differences between XDSD and other methods. Many people get confused when they see this principle in action, and some leave our projects because of it. They simply are used to being paid by the end of the month &amp;mdash; no matter how much work they actually deliver. In XDSD, we consider this type of approach very unfair. We feel that people who deliver more results should receive more cash. Conversely, those who don&amp;#39;t deliver should get less.&lt;/p&gt;&lt;h2 id="we-deliver-unfinished-components"&gt;We Deliver Unfinished Components&lt;/h2&gt;&lt;p&gt;Since most of our tasks are half an hour in size, we encourage developers to deliver unfinished components. Read more about this concept in the article below: &lt;a href="/2014/04/12/puzzle-driven-development-by-roles.html"&gt;Puzzle Driven Development&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="no-informal-communications"&gt;No Informal Communications&lt;/h2&gt;&lt;p&gt;Unlike many other projects or teams you may have worked with, XDSD uses no informal communication channels. To clarify, we never use emails, we never chat on Skype and we don&amp;#39;t do any meetings or phone calls. Additionally, XDSD maintains no type mailing list. Our only method of communication is a ticket tracking system (which in most projects consists of &lt;a href="/2014/04/15/github-guidelines.html"&gt;Github Issues&lt;/a&gt;.)&lt;/p&gt;&lt;p&gt;Moreover, we discourage horizontal communications between developers regarding the scope of individual tasks. When assigned a task, your single and only point of contact (and your only customer) is the task author. You communicate with the author in the ticket to clarify task requirements.&lt;/p&gt;&lt;p&gt;When the requirements of a task are clear &amp;mdash; and you understand them fully &amp;mdash; deliver the result to the author and wait for him to close the task. After the author closes the task, the project manager pays you.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/goodfellas-paulie-talking.jpg' style='width:600px;' alt='Goodfellas (1990) by Martin Scorsese'/&gt;&lt;figcaption&gt;Goodfellas (1990) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;We&amp;#39;re very strict about this principle &amp;mdash; no informal communications. However, it doesn&amp;#39;t mean that we are not interested in your opinions and constructive criticism. Rather, we encourage everyone to submit their suggestions and bugs. By the way, we pay for bugs (see the next section for further details about bug reporting and payments.)&lt;/p&gt;&lt;p&gt;Since we have no formal communications, members of project teams are not required to work at specific times. Instead, team members work at times convenient for them in their time zones. This includes weekdays and weekends.&lt;/p&gt;&lt;h2 id="we-pay-for-bugs"&gt;We Pay For Bugs&lt;/h2&gt;&lt;p&gt;Unlike many other software teams, XDSD welcomes bug reports in all our projects. Therefore, we ask for bugs openly and expect team members to report them. Review the following article for complete details on XDSD bug reporting: &lt;a href="/2014/04/13/bugs-are-welcome.html"&gt;Bugs are welcome&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We expect everyone involved with a project to report every bug found. Additionally, we encourage team members to make suggestions. In XDSD, we pay team members for every properly reported bug.&lt;/p&gt;&lt;p&gt;XDSD makes payments for reported bugs because we believe that the more of them we can find, the higher the quality of the end product. Some new developers are surprised when they receive tasks such as &amp;quot;you must find 10 bugs in class A.&amp;quot; Often, the natural reaction is to ask &amp;quot;what if there are no bugs?&amp;quot; However, we believe that any software product may have an unlimited amount of bugs; it is just a matter of expending the time and effort needed to discover them.&lt;/p&gt;&lt;h2 id="only-pull-request"&gt;Only Pull Request&lt;/h2&gt;&lt;p&gt;We never grant team member access to the &lt;code&gt;master&lt;/code&gt; branch &amp;mdash; no matter how long you work on a project. Consequently, you must always submit your changes through pull requests (most of our projects are done in &lt;a href="/2014/04/15/github-guidelines.html"&gt;Github&lt;/a&gt;.)&lt;/p&gt;&lt;p&gt;We enforce this policy not because we don&amp;#39;t trust our developers, but simply because we don&amp;#39;t trust anyone :)&lt;/p&gt;&lt;h2 id="no-compromises-about-code-quality"&gt;No Compromises About Code Quality&lt;/h2&gt;&lt;p&gt;Before merge any changes to the &lt;code&gt;master&lt;/code&gt; branch, we check the entire code base with unit tests and static analyzers. Unit testing is a very common component in modern software development, and one by which you should not be surprised. However, the strictness of static analysis is something that often frustrates XDSD newcomers, and we understand that. We pay much more attention to the quality and uniformity of our source code than most of our competing software development teams.&lt;/p&gt;&lt;p&gt;Even more important is that we never make compromises. If your pull request violates even one rule of the static analyzer, it won&amp;#39;t be accepted. And, it doesn&amp;#39;t matter how small or innocent that violation may look. This merging process is fully automated and can&amp;#39;t be bypassed.&lt;/p&gt; </description> <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/17/how-xdsd-is-different.html</guid> <dc:date>2014-04-17T00:00:00+00:00</dc:date> </item> <item><title>Github Guidelines</title><link>http://www.yegor256.com/2014/04/15/github-guidelines.html</link> <description>&lt;p&gt;This manual explains the workflow used when working with a XDSD project hosted on &lt;a href="http://www.github.com"&gt;Github.com&lt;/a&gt;. You start when a Github issue is assigned to you. Next, you will receive a message from a project manager containing the issue number, title, description and its budget in hours (usually 30 minutes).&lt;/p&gt;&lt;p&gt;If you don&amp;#39;t agree with the budget allotment, don&amp;#39;t hesitate to ask for an increase. As soon as you are comfortable with the budget and understand the scope of the work, say so in a reply to the ticket and start working. Be aware that you won&amp;#39;t be paid for time spent above and beyond the allotted time budget.&lt;/p&gt;&lt;h2 id="1.-fork"&gt;1. Fork&lt;/h2&gt;&lt;p&gt;Even though you&amp;#39;re part of the development team, you don&amp;#39;t have write access to the repository in Github. Consequently, to contribute changes, you should fork the repository to your own Github account (create a private copy of it), make needed changes and then submit them for review using &amp;quot;a pull request.&amp;quot;&lt;/p&gt;&lt;p&gt;After you submit a pull request review, the repository owner approves your changes by merging them into the main repository. This is how we protect the main development stream against accidental damage.&lt;/p&gt;&lt;p&gt;This article explains how to fork a repository: &lt;a href="https://help.github.com/articles/fork-a-repo"&gt;fork-a-repo&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This one explains how to download and install Github on your computer: &lt;a href="https://help.github.com/articles/set-up-git"&gt;set-up-git&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Finally, don&amp;#39;t forget to add your private SSH key to Github: &lt;a href="https://help.github.com/articles/generating-ssh-keys"&gt;generating-ssh-keys&lt;/a&gt;&lt;/p&gt;&lt;h2 id="2.-branch"&gt;2. Branch&lt;/h2&gt;&lt;p&gt;Once you have a forked our repository to your account, clone it to your computer, and then check out the &lt;code&gt;master&lt;/code&gt; branch. For example:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;1 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git clone git@github.com:yegor256/jcabi.git git checkout master &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now, it&amp;#39;s time to branch (&lt;code&gt;123&lt;/code&gt; is the number of the Github issue you&amp;#39;re going to work with, and the name of the branch):&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git checkout -b 123 &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;By convention, we use the same names for the branch and issue you&amp;#39;re working with.&lt;/p&gt;&lt;h2 id="3.-changes"&gt;3. Changes&lt;/h2&gt;&lt;p&gt;All task-related questions should be discussed in the Github issue. For Github issues, we don&amp;#39;t use emails, Skype, phone calls or meetings. All questions should be asked directly in the Github issues.&lt;/p&gt;&lt;p&gt;Don&amp;#39;t hesitate to submit new issues if something is not clear or you need help. It&amp;#39;s a very common to receive a task that you may not be able to implement. Don&amp;#39;t panic. This usually happens when you first just join a project and don&amp;#39;t yet have enough information. If this happens, don&amp;#39;t try to figure out a problem or issue by yourself.&lt;/p&gt;&lt;p&gt;The rule of thumb for this type of situation is: &amp;quot;if something is not clear, it is our fault, not yours.&amp;quot; Therefore, if you don’t understand the project design, it is the fault of the project designer.&lt;/p&gt;&lt;p&gt;Submit a bug report requesting an explanation of a design concept. You will be paid for this report, and the information you receive in the reply will be shared between all other developers.&lt;/p&gt;&lt;p&gt;Read this article: &lt;a href="/2014/04/13/bugs-are-welcome.html"&gt;Bugs Are Welcome&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Don&amp;#39;t expect anyone to help you. Your only source of help is the source code itself. If the code doesn&amp;#39;t explain everything you need to know &amp;mdash; it is a bug, which must be reported.&lt;/p&gt;&lt;h2 id="4.-commit-and-push"&gt;4. Commit and Push&lt;/h2&gt;&lt;p&gt;Make any needed changes using a text editor or IDE. It&amp;#39;s a good practice to commit changes as soon as you make them. Don&amp;#39;t accumulate large numbers of changes too long before committing them.&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;1 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git commit -am &lt;span class="s1"&gt;&amp;#39;#123: the description of the changes&amp;#39;&lt;/span&gt; git push origin 123 &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;If you have questions about the scope of work, post them in the Github issue and wait for an answer. If you think that the existing code needs improvements, don&amp;#39;t hesitate to submit a new issue to Github.&lt;/p&gt;&lt;p&gt;Don&amp;#39;t try to fix all problems in one branch; let other programmers take care of them.&lt;/p&gt;&lt;h2 id="5.-pull-request"&gt;5. Pull Request&lt;/h2&gt;&lt;p&gt;Create a pull request in Github using the process in the following article: &lt;a href="https://help.github.com/articles/using-pull-requests"&gt;using-pull-requests&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Post its number in the original issue and wait for feedback.&lt;/p&gt;&lt;h2 id="6.-code-review"&gt;6. Code Review&lt;/h2&gt;&lt;p&gt;After a while, your pull request will be reviewed by someone from the project team. In many cases, you may receive a few negative comments, and you will have to fix any and all issues associated with them. Your pull request won&amp;#39;t be merged into &lt;code&gt;master branch&lt;/code&gt;, until your changes satisfy the reviewer.&lt;/p&gt;&lt;p&gt;Be patient with the reviewer, and listen to him carefully. However, don&amp;#39;t think that your reviewer is always right. If you think that your changes are valid, insist that someone else review them.&lt;/p&gt;&lt;h2 id="7.-merge"&gt;7. Merge&lt;/h2&gt;&lt;p&gt;When everything looks good to the reviewer, he will inform our automated merge bot. The automated merge bot will then select your pull request and try to merge it into &lt;code&gt;master&lt;/code&gt; branch. For various reasons, this operation fails often. If the merge fails, regardless of the reason, it is your responsibility to make sure that your branch is merged successfully.&lt;/p&gt;&lt;p&gt;If you can&amp;#39;t merge a branch because of failures in tests not associated with your task, don&amp;#39;t try to fix them yourself. Instead, report a problem as a new bug and wait for its resolution.&lt;/p&gt;&lt;p&gt;Remember, until your branch is merged, you are not paid.&lt;/p&gt;&lt;h2 id="8.-payment"&gt;8. Payment&lt;/h2&gt;&lt;p&gt;Once your changes are merged, return to the Github issue and ask the author to close it. Once the issue is closed by a project manager, you will receive your payment within a few hours, through oDesk or PayPal.&lt;/p&gt; </description> <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/15/github-guidelines.html</guid> <dc:date>2014-04-15T00:00:00+00:00</dc:date> </item> <item><title>Definition Of Done</title><link>http://www.yegor256.com/2014/04/15/definition-of-done.html</link> <description>&lt;p&gt;&lt;a href="https://www.scrum.org/Resources/Scrum-Glossary/Definition-of-Done"&gt;Definition of Done (DoD)&lt;/a&gt; is a key definition used in Scrum and the one we also use in XDSD.&lt;/p&gt;&lt;p&gt;DoD is an exit criteria of a simple atomic task and answers the question:&amp;quot;am I done with this task?&amp;quot; Moreover, DoD answers the question: &amp;quot;will I be paid for the task?&amp;quot;&lt;/p&gt;&lt;p&gt;In XDSD, the definition of &amp;quot;done&amp;quot; is very simple &amp;mdash; the task is done &lt;a href="http://en.wikipedia.org/wiki/If_and_only_if"&gt;iff&lt;/a&gt; its author accepts the deliverables.&lt;/p&gt;&lt;p&gt;At XDSD, our first and most important principle states that someone is paid only when he provides deliverables. Combining the definition of done and the principle of paying only for deliverables provides us a very important conclusion: we do not pay for un-finished tasks.&lt;/p&gt;&lt;p&gt;Every task has its own time budget. Regardless of the number of people who worked on a task previously, only the last one &amp;mdash; the one who managed to provide a working deliverable &amp;mdash; receives payment.&lt;/p&gt;&lt;p&gt;To better understand this principle, you should read: &lt;a href="/2014/04/13/no-obligations-principle.html"&gt;No Obligations Principle&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Your goal as a developer working on a task should be to close it and receive payment as soon as possible. To that end, here are few things that can help you complete tasks and receive payments without too much frustration:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Don&amp;#39;t even start a task unless you&amp;#39;re sure you can finish it;&lt;/li&gt; &lt;li&gt;Ask any and all questions of the task author in advance (before beginning work);&lt;/li&gt; &lt;li&gt;Don&amp;#39;t assume anything &amp;mdash; ask if you&amp;#39;re not sure;&lt;/li&gt; &lt;li&gt;Stay after the author to close tasks &amp;mdash; be aggressive;&lt;/li&gt; &lt;li&gt;Don&amp;#39;t expect any help from anyone &amp;mdash; you&amp;#39;re on your own;&lt;/li&gt; &lt;li&gt;Ask about payment if you don’t receive it automatically after an author closes your task(s)&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;It is important to remember that, as a developer, it is your responsibility to ensure that tasks are closed and you receive payment.&lt;/p&gt; </description> <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/15/definition-of-done.html</guid> <dc:date>2014-04-15T00:00:00+00:00</dc:date> </item> <item><title>Object-Oriented DynamoDB API</title><link>http://www.yegor256.com/2014/04/14/jcabi-dynamo-java-api-of-aws-dynamodb.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://dynamo.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I&amp;#39;m a big fan of cloud computing in general and of &lt;a href="http://aws.amazon.com/"&gt;Amazon Web Services&lt;/a&gt; in particular. I honestly believe that in a few years big providers will host all, or almost all, computing and storage resources. When this is the case, we won&amp;#39;t have to worry too much anymore about downtime, backups and system administrators. &lt;a href="http://aws.amazon.com/dynamodb/"&gt;DynamoDB&lt;/a&gt; is one of the steps towards this future.&lt;/p&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;This looks cool - jcabi-dynamo - a &lt;a href="https://twitter.com/search?q=%23Java&amp;amp;src=hash"&gt;#Java&lt;/a&gt; Object layer atop the &lt;a href="https://twitter.com/search?q=%23DynamoDB&amp;amp;src=hash"&gt;#DynamoDB&lt;/a&gt; SDK - &lt;a href="http://t.co/khRFR2joKX"&gt;http://t.co/khRFR2joKX&lt;/a&gt; &lt;a href="https://twitter.com/search?q=%23aws&amp;amp;src=hash"&gt;#aws&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeff Barr (@jeffbarr) &lt;a href="https://twitter.com/jeffbarr/statuses/380813867971915777"&gt;September 19, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;DynamoDB is a &lt;a href="http://en.wikipedia.org/wiki/NoSQL"&gt;NoSQL&lt;/a&gt; database accessible through &lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer"&gt;RESTful&lt;/a&gt; JSON API. Its design is relatively simple. There are tables, which basically are collections of data structs, or in AWS terminology, &amp;quot;items.&amp;quot;&lt;/p&gt;&lt;p&gt;Every item has a mandatory &amp;quot;hash,&amp;quot; an optional &amp;quot;range&amp;quot; and a number of other optional attributes. For instance, take the example table &lt;code&gt;depts&lt;/code&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;+------+--------+---------------------------+ | dept | worker | Attributes | +------+--------+---------------------------+ | 205 | Jeff | job=&amp;quot;manager&amp;quot;, sex=&amp;quot;male&amp;quot; | | 205 | Bob | age=43, city=&amp;quot;Chicago&amp;quot; | | 398 | Alice | age=27, job=&amp;quot;architect&amp;quot; | +------+--------+---------------------------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Java, Amazon provides an &lt;a href="https://aws.amazon.com/documentation/sdkforjava/"&gt;SDK&lt;/a&gt;, which mirrors all RESTful calls to Java methods. The SDK works fine, but is designed in a pure &lt;a href="http://en.wikipedia.org/wiki/Procedural_programming"&gt;procedural&lt;/a&gt; style.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s say we want to add a new item to the table above. RESTful call &lt;a href="http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html"&gt;&lt;code&gt;putItem&lt;/code&gt;&lt;/a&gt; looks like (in essence):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;putItem: tableName: depts item: dept: 435 worker: &amp;quot;William&amp;quot; job: &amp;quot;programmer&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is what the Amazon server needs to know in order to create a new item in the table. This is how you&amp;#39;re supposed to make this call through the AWS Java SDK:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt; 1 2 3 4 5 6 7 8 9 10 11 12 13&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PutItemRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PutItemRequest&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setTableName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;depts&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeValue&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dept&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AttributeValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;435&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;worker&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AttributeValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;William&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;job&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AttributeValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;programmer&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;AmazonDynamoDB&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// instantiate it with credentials&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shutdown&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The above script works fine, but there is one major drawback &amp;mdash; it is not object oriented. It is a perfect example of an imperative &lt;a href="http://en.wikipedia.org/wiki/Procedural_programming"&gt;procedural programming&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;To allow you to compare, let me show what I&amp;#39;ve done with &lt;a href="http://dynamo.jcabi.com"&gt;jcabi-dynamo&lt;/a&gt;. Here is my code, which does exactly the same thing, but in an &lt;a href="http://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object-oriented&lt;/a&gt; way:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;1 2 3 4 5 6 7 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// instantiate it with credentials&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;depts&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dept&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;435&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;worker&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;William&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;job&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;programmer&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; </description> <pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/14/jcabi-dynamo-java-api-of-aws-dynamodb.html</guid> <dc:date>2014-04-14T00:00:00+00:00</dc:date> </item> <item><title>No Obligations</title><link>http://www.yegor256.com/2014/04/13/no-obligations-principle.html</link> <description>&lt;p&gt;It is a very common problem in project management &amp;mdash; how to make team members more responsible and avoid &lt;a href="http://en.wikipedia.org/wiki/Micromanagement"&gt;micro management&lt;/a&gt;?&lt;/p&gt;&lt;p&gt;We start with creating plans, drawing Gantt charts, announcing milestones, motivating everybody and promising big bonuses on success.&lt;/p&gt;&lt;h2 id="excuses"&gt;Excuses&lt;/h2&gt;&lt;p&gt;Then everybody begins working and we start hearing excuses:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&amp;quot;The task is not yet ready. I was doing something else&amp;quot;&lt;/li&gt; &lt;li&gt;&amp;quot;May I take a day off? Tomorrow is my birthday?&amp;quot;&lt;/li&gt; &lt;li&gt;&amp;quot;May I skip the unit test because I don&amp;#39;t know how to fix it?&amp;quot;&lt;/li&gt; &lt;li&gt;&amp;quot;I don&amp;#39;t know how to do it, can someone help me?&amp;quot;&lt;/li&gt; &lt;li&gt;&amp;quot;I tried, but this doesn&amp;#39;t work; what can I do?&amp;quot;&lt;/li&gt; &lt;li&gt;&amp;quot;This installation requires all of my time. I can&amp;#39;t finish the task&amp;quot;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;With excuses, team members transfer responsibility back to the project manager. There was a very famous article &lt;a href="http://hbr.org/1999/11/management-time-whos-got-the-monkey/ar/1"&gt;&amp;quot;Management Time: Who&amp;#39;s Got the Monkey?&amp;quot;&lt;/a&gt; published in the Harvard Business Review about this very subject.&lt;/p&gt;&lt;p&gt;I recommend that you read it. Its authors present problems as monkeys sitting on our shoulders. When the project manager assigns a task to a programmer &amp;mdash; he moves the monkey from his shoulders to the programmer&amp;#39;s shoulders.&lt;/p&gt;&lt;p&gt;The programmer usually presents the excuse &amp;quot;I don&amp;#39;t know what to do&amp;quot;. Now the monkey is back on the shoulders of the managers. The goal of the manager is to send the monkey back to make it the programmer&amp;#39;s problem again.&lt;/p&gt;&lt;p&gt;One of traditional way of transferring responsibility back to team members is to become an aggressive manager. For instance the manager may say, &amp;quot;You have a birthday tomorrow? I don&amp;#39;t care, you still have to meet your deadline&amp;quot; or &amp;quot;You don&amp;#39;t know how to fix the unit test? Not my problem, it should be fixed by tomorrow,&amp;quot; etc.&lt;/p&gt;&lt;p&gt;We&amp;#39;ve all seen multiple examples of that type of aggressive management. Personally, I find this management style extremely annoying and destructive for the project. The project environment becomes very unhealthy and good people usually end up leaving.&lt;/p&gt;&lt;p&gt;Another traditional management method is micro-management. This results when the project manager checks task statuses every few hours and tells people what to do and how to handle problems. Needless to say, this management style ruins the team and causes good people to leave even faster.&lt;/p&gt;&lt;p&gt;However, in order to keep the project on track and meet all milestones, responsibility &lt;strong&gt;must be&lt;/strong&gt; on the shoulders of the team members. They should be responsible for their own tasks and report back to the project manager when they are finished with their jobs.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/big-lebowski-her-life-is-in-your-hands.jpg' style='width:600px;' alt='The Big Lebowski (1998) by Joel Coen'/&gt;&lt;figcaption&gt;The Big Lebowski (1998) by Joel Coen&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Implementation problems should be solved by team members on their own. So, how do we accomplish this in XDSD?&lt;/p&gt;&lt;h2 id="i-owe-you-nothing"&gt;I Owe You Nothing&lt;/h2&gt;&lt;p&gt;In XDSD, there is the first fundamental principle that says everybody should be paid for deliverables. Based on this idea, we can go even further and declare a &amp;quot;No Obligations&amp;quot; principle.&lt;/p&gt;&lt;p&gt;In essence, for every team member, it says: if you don’t like the task assigned to you, don’t have time or you’re simply not in the mood &amp;mdash; don&amp;#39;t do it.&lt;/p&gt;&lt;p&gt;You have no obligation to do anything. You&amp;#39;re free to reject every second task that a project manager gives to you or even all of them.&lt;/p&gt;&lt;p&gt;On the other hand, though, the project manager is not obliged to keep a task assigned to you for longer than 10 days (we think that this time frame is logical).&lt;/p&gt;&lt;p&gt;If you get a task, and don&amp;#39;t deliver within ten days, the project manager can take it away and pay you nothing &amp;mdash; no matter how much time you invested in the task already or the reasons for your failure to complete it.&lt;/p&gt;&lt;h2 id="where-are-the-monkeys-now?"&gt;Where Are The Monkeys Now?&lt;/h2&gt;&lt;p&gt;This principle helps us to separate responsibilities between project manager and team members. The manager is responsible for finding the right people and assigning them appropriate tasks. There is a problem with the project manager&amp;#39;s management style if he receives too many rejections from the team.&lt;/p&gt;&lt;p&gt;On the other hand, his team members are responsible for their tasks and should not provide excuses for non-completion. Well, team members can make excuses, but they won&amp;#39;t change anything. No matter what their excuses are, the deliverables will be purchased only from members who manage to complete their tasks on time.&lt;/p&gt;&lt;h2 id="how-does-this-affect-me?"&gt;How Does This Affect Me?&lt;/h2&gt;&lt;p&gt;When you&amp;#39;re working with XDSD-inspired project, you should always keep the &amp;quot;No Obligations&amp;quot; principle in mind. You should start a task only if you&amp;#39;re sure that you can finish it in a few days. You should pursue your tasks and control deadlines yourself. The project manager will not ask you for status updates, as usually happens with traditional projects. He will just take the task away from you after ten days if you don’t finish it. To avoid that, you should control your tasks and their deadlines.&lt;/p&gt;&lt;p&gt;With every task, try to be as lazy as possible and cut every corner you can. The smaller the amount of work you perform on a task, the easier it will be to deliver it and pass all quality controls.&lt;/p&gt;&lt;p&gt;Always remember that your efforts are not appreciated &amp;mdash; only the deliverables matter.&lt;/p&gt; </description> <pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/13/no-obligations-principle.html</guid> <dc:date>2014-04-13T00:00:00+00:00</dc:date> </item> <item><title>Bugs Are Welcome</title><link>http://www.yegor256.com/2014/04/13/bugs-are-welcome.html</link> <description>&lt;p&gt;The traditional understanding of a software defect (aka &amp;quot;bug&amp;quot;) is that it is something negative and want to avoid in our projects. We want our projects to be &amp;quot;bug-free.&amp;quot; Our customers are asking us to develop software that doesn&amp;#39;t have bugs. And, we, as users, expect software to work without bugs.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/charlie-and-chocolate-factory-chewing-breakfast.jpg' style='width:600px;' alt='Charlie and the Chocolate Factory (2005) by Tim Burton'/&gt;&lt;figcaption&gt;Charlie and the Chocolate Factory (2005) by Tim Burton&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;But, let&amp;#39;s take a look at bugs from a different angle. In XDSD, we say that &amp;quot;bugs are welcome.&amp;quot; This means we encourage all interested parties to find bugs and report them. We want our team to see bugs as something that we need in our projects. Why?&lt;/p&gt;&lt;p&gt;Because we understand that there are two categories of bugs: visible and hidden. The more bugs that become visible, the more of them we can fix. More fixed bugs means fewer to annoy our users. By discovering bugs we make them visible.&lt;/p&gt;&lt;p&gt;This is the primary job of a software tester &amp;mdash; to make bugs visible.&lt;/p&gt;&lt;p&gt;Obviously, their visibility affects the quality of the product in a positive way. This is because we can fix them before our users start complaining.&lt;/p&gt;&lt;p&gt;In order to motivate all team members to make more bugs visible, we pay for their discovery. In XDSD projects, we are pay 15 minutes for every bug found (no matter who finds them and where.)&lt;/p&gt;&lt;h2 id="we-plan-bugs"&gt;We Plan Bugs&lt;/h2&gt;&lt;p&gt;We go even further. At XDSD, we plan for a number of hidden bugs in every project. We do this by using our experience with previous projects and expert judgment.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s say we&amp;#39;re starting to develop a web system, which is similar to the one we worked on last year. We know that in the previous project our users and team together reported 500 bugs.&lt;/p&gt;&lt;p&gt;It&amp;#39;s logical to assume that the new project will have a similar number of bugs. Thus, our task is to make those 500 bugs visible before they hit the production platform and our users call us to complain about them. Therefore, we&amp;#39;re making it one of the project goals: &amp;quot;discover 500 bugs.&amp;quot;&lt;/p&gt;&lt;p&gt;Of course, our estimate may be wrong. Nevertheless, we have historical records for a few dozen projects, and in all of them the number is close to 500. So, finding 500 bugs in a project is usually a reality &amp;mdash; we can use it as a target.&lt;/p&gt;&lt;h2 id="what-is-a-bug?"&gt;What Is a Bug?&lt;/h2&gt;&lt;p&gt;Let us try to define a bug (or software defect) in a non-ambiguous manner. Something can be reported as a bug and subsequently paid for iff:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;it is &lt;a href="http://en.wikipedia.org/wiki/Reproducibility"&gt;reproducible&lt;/a&gt;&lt;/li&gt; &lt;li&gt;it refers to functionality already implemented&lt;/li&gt; &lt;li&gt;is can be fixed in a reasonable amount of time&lt;/li&gt; &lt;li&gt;it doesn&amp;#39;t duplicate a bug already reported&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Reproducibility of a bug is very important. Consequently, it is the responsibility of a bug reporter to make sure the bug is reproducible. Until it is proven that the bug can be reproduced &amp;mdash; it&amp;#39;s not a bug for which payment can be made.&lt;/p&gt;&lt;p&gt;A bug is not a task; it has to refer to an existing functionality. Additionally, an explanation must exist for how and when the existing functionality doesn&amp;#39;t work as expected.&lt;/p&gt; </description> <pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/13/bugs-are-welcome.html</guid> <dc:date>2014-04-13T00:00:00+00:00</dc:date> </item> <item><title>PDD by Roles</title><link>http://www.yegor256.com/2014/04/12/puzzle-driven-development-by-roles.html</link> <description>&lt;p&gt;In this post, I&amp;#39;ll try to walk you through a project managed with the spirit of Puzzle Driven Development (PDD). As I do this, I will attempt to convey typical points of view of various project members.&lt;/p&gt;&lt;p&gt;Basically, there are six key roles in any software team:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Project Manager &amp;mdash; assigns tasks and pays on completion&lt;/li&gt; &lt;li&gt;System Analyst &amp;mdash; documents the product owner&amp;#39;s ideas&lt;/li&gt; &lt;li&gt;Architect &amp;mdash; defines how system components interact&lt;/li&gt; &lt;li&gt;Designer &amp;mdash; implements most complex components&lt;/li&gt; &lt;li&gt;Programmer &amp;mdash; implements all components&lt;/li&gt; &lt;li&gt;Tester &amp;mdash; finds and reports bugs&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Everybody, except the project manager, affects the project in two ways: they fix it and they break it at the same time. Let me explain this with a simple example.&lt;/p&gt;&lt;h2 id="&amp;quot;fix-and-break&amp;quot;"&gt;&amp;quot;Fix and Break&amp;quot;&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s assume, for the sake of simplicity, that a project is a simple software tool written by me for a close friend. I created the first draft version 0.0.1 and delivered it to him. For me, the project is done. I&amp;#39;ve completed the work, and hopefully will never have to return to it again.&lt;/p&gt;&lt;p&gt;However, the reality of the project is very different. In just a few hours, I receive a call from my friend saying that a he&amp;#39;s found a few bugs in the tool. He is asking me to fix them. Now, I can see that the project is not done. In fact, it&amp;#39;s broken. It has a few bugs in it, which means a few tasks to complete.&lt;/p&gt;&lt;p&gt;I&amp;#39;m going to fix the project, by removing the bugs. I implement a new version of the software, name it 0.0.2 and ship it to my friend. Again, I believe my project is finished. It is fixed and should be closed.&lt;/p&gt;&lt;p&gt;This scenario repeats itself again and again until my friend stops calling me. In other words, until he stops breaking my project.&lt;/p&gt;&lt;p&gt;It is obvious that the more my friend breaks my project, the higher the quality of the software delivered ultimately at the end. Version 0.0.1 was just a very preliminary version, although I considered it final at the time I released it. In a few months, after I learn of and fix hundreds of bugs, version 3.5.17 will be much more mature and stable.&lt;/p&gt;&lt;p&gt;This is the result of this &amp;quot;fix and break&amp;quot; approach.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/time-and-mess-diagram.jpg' style='width:600px;' alt=''/&gt;&lt;/figure&gt;&lt;p&gt;The diagram shows the relation between time and mess in the project. The bugs my friend is reporting to me are breaking the project, increasing its instability (or simply its messiness). New versions I release resolve the bugs and are fixing the project. Your &lt;a href="/2014/04/15/github-guidelines.html"&gt;Github&lt;/a&gt; commit dynamics should resemble this graph, for example:&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/jcabi-github-commits-graph.png' style='width:600px;' alt=''/&gt;&lt;/figure&gt;&lt;p&gt;When the project starts, its messiness is rather low, and then it starts to grow. The messiness then reaches its peak and starts to go down.&lt;/p&gt;&lt;h2 id="project-manager"&gt;Project Manager&lt;/h2&gt;&lt;p&gt;The job of a project manager is to do as much as possible to fix the project. He has to use the sponsor&amp;#39;s time and money in order to remove all bugs and inconsistencies and return the project back to a &amp;quot;fixed&amp;quot; state.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/pulp-fiction-mr-wolf-with-cup.jpg' style='width:600px;' alt='Pulp Fiction (1994) by Quentin Tarantino'/&gt;&lt;figcaption&gt;Pulp Fiction (1994) by Quentin Tarantino&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;When I say &amp;quot;bugs,&amp;quot; I mean more than just software errors but also:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;unclear or ambiguous requirements&lt;/li&gt; &lt;li&gt;features not yet implemented&lt;/li&gt; &lt;li&gt;functional and non-functional bugs&lt;/li&gt; &lt;li&gt;lack of test coverage&lt;/li&gt; &lt;li&gt;unresolved &lt;code&gt;@todo&lt;/code&gt; markers&lt;/li&gt; &lt;li&gt;lack of risk analysis&lt;/li&gt; &lt;li&gt;etc.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The project manager gives me tasks that he wants done in order to fix and stabilize the project to return it back to a bug-free state.&lt;/p&gt;&lt;p&gt;My job, as a member of a software team, is to help him perform the needed fixes and, at the same time, do my best to break the project! In the example with my friend, he was breaking the project constantly by reporting bugs to me. This is how he helped both of us increase the final quality of the product.&lt;/p&gt;&lt;p&gt;I should do the same and always try to report new bugs when I&amp;#39;m working on some feature. I should &lt;strong&gt;fix and break&lt;/strong&gt; at the same time.&lt;/p&gt;&lt;p&gt;Now let&amp;#39;s take a closer look at project roles.&lt;/p&gt;&lt;h2 id="system-analyst"&gt;System Analyst&lt;/h2&gt;&lt;p&gt;A product owner submits an informal feature request, which usually starts with &amp;quot;it would be nice to have...&amp;quot; I&amp;#39;m a system analyst and my job is to translate owner&amp;#39;s English into formal specifications in the SRS, understandable both by programmers and myself. It&amp;#39;s not my responsibility to implement the feature.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/arizona-dream-two-beers-and-two-shots.jpg' style='width:600px;' alt='Arizona Dream (1992) by Emir Kusturica'/&gt;&lt;figcaption&gt;Arizona Dream (1992) by Emir Kusturica&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;My task is complete when a new version of the SRS is signed by the Change Control Board. I&amp;#39;m an interpreter for the product owners, translating from their language to formal language needed in the SRS document. My only customer is the product owner. As soon as she closes the feature request, I&amp;#39;ll be paid.&lt;/p&gt;&lt;p&gt;Besides feature requests from product owners, I often receive complaints about the quality of the SRS. The document may not be clear enough for some team members. Therefore, it&amp;#39;s my job to resolve clarity problems and fix the SRS. These team members are also my customers. When they close their bug reports, I&amp;#39;ll be paid.&lt;/p&gt;&lt;p&gt;In both cases (a feature request or a bug,) I can make changes to the SRS immediately - if I have enough time. However, it&amp;#39;s not always possible. I can submit a bug and wait for its resolution; but, I don&amp;#39;t want to keep my customers waiting.&lt;/p&gt;&lt;p&gt;This is where puzzle driven development helps me. Instead of submitting bug reports, I add &amp;quot;&lt;a href="http://en.wikipedia.org/wiki/To_be_announced"&gt;TBD&lt;/a&gt;&amp;quot; puzzles in the SRS document. The puzzles are informal replacements of normally very strict formal requirements. They satisfy my customer, since they are in plain English, and are understandable by technical people.&lt;/p&gt;&lt;p&gt;Thus, when I don&amp;#39;t have time, I don&amp;#39;t wait. I change the SRS using TBDs at points where I can&amp;#39;t create a proper and formal description of the requirements or simply don&amp;#39;t know what to write exactly.&lt;/p&gt;&lt;h2 id="architect"&gt;Architect&lt;/h2&gt;&lt;p&gt;Now, I&amp;#39;m the architect, and my task is to implement a requirement, which has been formally specified in the SRS. PM is expecting a working feature from me, which I can deliver only when the architecture is clear and classes have been designed and implemented.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/science-of-sleep-time-machine.jpg' style='width:600px;' alt='The Science of Sleep (2006) by Michel Gondry'/&gt;&lt;figcaption&gt;The Science of Sleep (2006) by Michel Gondry&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Being an architect, I&amp;#39;m responsible for assembling all of the components together and making sure they fit. In most cases, I&amp;#39;m not creating them myself, but I&amp;#39;m telling everybody how they should be created. My work flow of artifacts is the following:&lt;/p&gt;&lt;div class="graphviz-wrapper"&gt;&lt;!-- Generated by graphviz version 2.26.3 (20100126.1600) --&gt; &lt;!-- Title: G Pages: 1 --&gt; &lt;svg role="img" aria-label="directed graph" width="148pt" height="194pt" viewBox="0.00 0.00 148.00 194.00" &gt; &lt;title&gt;directed graph&lt;/title&gt; &lt;desc&gt; digraph G { SRS -&amp;gt; UML; UML -&amp;gt; &amp;quot;Source code&amp;quot;; } &lt;/desc&gt;&lt;g id="graph1" class="graph" transform="scale(1 1) rotate(0) translate(4 190)"&gt; &lt;title&gt;G&lt;/title&gt; &lt;polygon fill="white" stroke="white" points="-4,5 -4,-190 145,-190 145,5 -4,5"/&gt; &lt;!-- SRS --&gt; &lt;g id="node1" class="node"&gt;&lt;title&gt;SRS&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="70" cy="-167" rx="31.1127" ry="18.3848"/&gt; &lt;text text-anchor="middle" x="70" y="-163.4" font-family="Times Roman,serif" font-size="14.00"&gt;SRS&lt;/text&gt; &lt;/g&gt; &lt;!-- UML --&gt; &lt;g id="node3" class="node"&gt;&lt;title&gt;UML&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="70" cy="-93" rx="33.234" ry="18.3848"/&gt; &lt;text text-anchor="middle" x="70" y="-89.4" font-family="Times Roman,serif" font-size="14.00"&gt;UML&lt;/text&gt; &lt;/g&gt; &lt;!-- SRS&amp;#45;&amp;gt;UML --&gt; &lt;g id="edge2" class="edge"&gt;&lt;title&gt;SRS&amp;#45;&amp;gt;UML&lt;/title&gt; &lt;path fill="none" stroke="black" d="M70,-148.327C70,-140.264 70,-130.648 70,-121.711"/&gt; &lt;polygon fill="black" stroke="black" points="73.5001,-121.667 70,-111.667 66.5001,-121.667 73.5001,-121.667"/&gt; &lt;/g&gt; &lt;!-- Source code --&gt; &lt;g id="node5" class="node"&gt;&lt;title&gt;Source code&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="70" cy="-19" rx="70.2092" ry="18.3848"/&gt; &lt;text text-anchor="middle" x="70" y="-15.4" font-family="Times Roman,serif" font-size="14.00"&gt;Source code&lt;/text&gt; &lt;/g&gt; &lt;!-- UML&amp;#45;&amp;gt;Source code --&gt; &lt;g id="edge4" class="edge"&gt;&lt;title&gt;UML&amp;#45;&amp;gt;Source code&lt;/title&gt; &lt;path fill="none" stroke="black" d="M70,-74.3267C70,-66.2639 70,-56.6477 70,-47.7115"/&gt; &lt;polygon fill="black" stroke="black" points="73.5001,-47.6673 70,-37.6674 66.5001,-47.6674 73.5001,-47.6673"/&gt; &lt;/g&gt; &lt;/g&gt; &lt;/svg&gt; &lt;/div&gt;&lt;p&gt;I receive requirements from the SRS, produce UML diagrams and explain to designers how to create source code according to my diagrams. I don&amp;#39;t really care how source code is implemented. I&amp;#39;m more concerned with the interaction of components and how well the entire architecture satisfies functional and non-functional (!) requirements.&lt;/p&gt;&lt;p&gt;My task will be closed and paid when the system analyst changes its state to &amp;quot;implemented&amp;quot; in the SRS. The system analyst is my only customer. I have to sell my solution to him. Project manager will close my task and pay me when system analyst changes the status of the functional requirement from &amp;quot;specified&amp;quot; to &amp;quot;implemented&amp;quot;.&lt;/p&gt;&lt;p&gt;The task sounds big, and I have only half an hour. Obviously, puzzle driven development should help me. I will create many tickets and puzzles. For example:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;SRS doesn&amp;#39;t explain requirements properly&lt;/li&gt; &lt;li&gt;Non-functional requirements are not clear&lt;/li&gt; &lt;li&gt;UML diagrams are not clear enough&lt;/li&gt; &lt;li&gt;Components are not implemented&lt;/li&gt; &lt;li&gt;Build is not automated&lt;/li&gt; &lt;li&gt;Continuous integration is not configured&lt;/li&gt; &lt;li&gt;Quality of code is not under control&lt;/li&gt; &lt;li&gt;Performance testing is not automated&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;When all of my puzzles are resolved, I can get back to my main task and finish feature implementation. Obviously, this may take a long time - days or even weeks.&lt;/p&gt;&lt;p&gt;But, the time cost of the main task is less than an hour. What is the point of all this hard work? Well, it&amp;#39;s simple; I&amp;#39;ll earn my hours from all the bugs reported. From this small half-an-hour task, I will generate many tickets, and every one of them will give me extra cash.&lt;/p&gt;&lt;h2 id="designer-and-programmer"&gt;Designer and Programmer&lt;/h2&gt;&lt;p&gt;The only real differences between designer and programmer are the complexity of their respective tasks and the hourly rates they receive. Designers usually do more complex and higher level implementations, while programmers implement all low-level details.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/pulp-fiction-vincent-and-jules.jpg' style='width:600px;' alt='Pulp Fiction (1994) by Quentin Tarantino'/&gt;&lt;figcaption&gt;Pulp Fiction (1994) by Quentin Tarantino&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I&amp;#39;m a programmer and my task is to implement a class or method or to fix some functional bug. In most cases, I have only half an hour available. And, most tasks are bigger and require more time than that.&lt;/p&gt;&lt;p&gt;Puzzle driven development helps me break my task into smaller sub-tasks. I always start with a unit test. In the unit test, I&amp;#39;m trying to reproduce a bug or model the feature. When my test fails, I commit it and determine the amount of time I have left. If I still have time to make it pass &amp;mdash; I do it, commit the changes and report to the project manager.&lt;/p&gt;&lt;p&gt;If I don&amp;#39;t have time to implement the fix, I mark pieces of code that don&amp;#39;t already have &lt;code&gt;@todo&lt;/code&gt; markers, commit them and report to the project manager that I&amp;#39;ve finished.&lt;/p&gt;&lt;p&gt;As you see, I&amp;#39;m fixing the code and breaking it at the same time. I&amp;#39;m fixing it with my new unit test, but breaking it with &lt;code&gt;@todo&lt;/code&gt; puzzles.&lt;/p&gt;&lt;p&gt;This is how I help to increase the overall quality of the project - by fixing and breaking at the same time.&lt;/p&gt;&lt;h2 id="tester"&gt;Tester&lt;/h2&gt;&lt;p&gt;I&amp;#39;m a tester and my primary motivation is to find bugs. This may be contradictory to what you&amp;#39;ve heard before; but in XDSD, we plan to find a certain amount of bugs at every stage of the project.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/fear-and-loathing-adrenochrome.jpg' style='width:600px;' alt='Fear and Loathing in Las Vegas (1998) by Terry Gilliam'/&gt;&lt;figcaption&gt;Fear and Loathing in Las Vegas (1998) by Terry Gilliam&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;As as a tester, I receive tasks from my project manager. These tasks usually resemble &amp;quot;review feature X and find 10 bugs in it&amp;quot;. The project manager needs a certain number of bugs to be found in order to fix the project. From his point of view, the project is fixed when, say, 200 bugs have been found. That&amp;#39;s why he asks me to find more.&lt;/p&gt;&lt;p&gt;Thus, to respond to the request, i find bugs to do my part in regard to the &amp;quot;fixing&amp;quot; part of the bigger picture. At the same time, though, I can find defects on my own and report them. This is the &amp;quot;breaking&amp;quot; part of my mission.&lt;/p&gt; </description> <pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/12/puzzle-driven-development-by-roles.html</guid> <dc:date>2014-04-12T00:00:00+00:00</dc:date> </item> <item><title>Fluent Java Http Client</title><link>http://www.yegor256.com/2014/04/11/jcabi-http-intro.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;In the world of Java, there are plenty of HTTP clients from which to choose. Nevertheless, I decided to create a new one because none of the other clients satisfied fully all of my requirements. Maybe, I&amp;#39;m too demanding. Still, this is how my &lt;a href="http://http.jcabi.com/"&gt;jcabi-http&lt;/a&gt; client interacts when you make an HTTP request and expect a successful HTML page in return:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;1 2 3 4 5 6 7 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JdkRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://www.google.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/users&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;queryParam&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;333&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;back&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Accept&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RestResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpURLConnection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;HTTP_OK&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;I designed this new client with the following requirements in mind:&lt;/p&gt; </description> <pubDate>Fri, 11 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/11/jcabi-http-intro.html</guid> <dc:date>2014-04-11T00:00:00+00:00</dc:date> </item> <item><title>How much do you pay per line of code?</title><link>http://www.yegor256.com/2014/04/11/cost-of-loc.html</link> <description>&lt;p&gt;Yes, I know, &amp;quot;line of code&amp;quot; (LoC) is a &lt;a href="http://stackoverflow.com/questions/966800/mythical-man-month-10-lines-per-developer-day-how-close-on-large-projects"&gt;very wrong metric&lt;/a&gt;. There are &lt;a href="http://blog.codinghorror.com/diseconomies-of-scale-and-lines-of-code/"&gt;tons of articles&lt;/a&gt; written about it, as well as famous books. However, I want to compare two projects in which I have participated recently and discuss some very interesting numbers.&lt;/p&gt;&lt;h2 id="project-#1:-traditionally-co-located"&gt;Project #1: Traditionally Co-located&lt;/h2&gt;&lt;p&gt;The first project I was apart of was performed by a traditionally co-located group of programmers. There were about 20 of them (I&amp;#39;m not counting managers, analysts, product owners, SCRUM masters, etc.) The project was a web auctioning site with pretty high traffic numbers (over two million page views per day).&lt;/p&gt;&lt;p&gt;The code base size was about 200k lines, of which 150k was PHP, 35k JavaScript and the remainder CSS, XML, Ruby, and something else. I&amp;#39;m counting only non-empty and non-comment lines of code, using &lt;a href="http://cloc.sourceforge.net/"&gt;&lt;code&gt;cloc.pl&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;It was a commercial project, so I can&amp;#39;t disclose its name.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/brazil-crowded-office.jpg' style='width:600px;' alt='Brazil (1985) by Terry Gilliam'/&gt;&lt;figcaption&gt;Brazil (1985) by Terry Gilliam&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The team was co-located in one office in Europe where everybody was working &amp;quot;from nine &amp;#39;til five&amp;quot;. We had meetings, lunches, desk-to-desk chats and lots of other informal communications. All tasks were tracked in JIRA.&lt;/p&gt;&lt;h2 id="project-#2:-extremely-distributed"&gt;Project #2: Extremely Distributed&lt;/h2&gt;&lt;p&gt;The second project was an open source Java product, developed by an &lt;a href="http://www.xdsd.org"&gt;extremely distributed&lt;/a&gt; team of about 15 developers. We didn&amp;#39;t have any chats or any other informal communications. We discussed everything in Github issues. The code base was significantly smaller with only about 30k lines, of which about 90% was Java and the rest in XML.&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/shaolin-temple-jet-li.jpg' style='width:600px;' alt='Shaolin Temple (1982) by Chang Hsin Yen'/&gt;&lt;figcaption&gt;Shaolin Temple (1982) by Chang Hsin Yen&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 id="maturity-of-development"&gt;Maturity of Development&lt;/h2&gt;&lt;p&gt;Both projects hosted their code bases on Github. Both teams were developing in &lt;a href="http://martinfowler.com/bliki/FeatureBranch.html"&gt;feature branches&lt;/a&gt;- even for small fixes.&lt;/p&gt;&lt;p&gt;Both teams used build automation, continuous integration, pre-flight builds, static analysis and code reviews. This indicates the maturity of the project teams.&lt;/p&gt;&lt;p&gt;Both projects satisfied the requirements of their users. I&amp;#39;m mentioning this to emphasize that both projects produced valuable and useful lines of code. There was no garbage and almost no &lt;a href="http://en.wikipedia.org/wiki/Duplicate_code"&gt;code duplication&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="show-me-the-money"&gt;Show Me the Money&lt;/h2&gt;&lt;p&gt;In both projects, my role was called that of lead architect, and I know their economics and financials. Besides that, I had access to both Git repositories, so I can measure how many new lines (or changed lines) were introduced by both teams in, say, a three-month period.&lt;/p&gt;&lt;p&gt;Now, let&amp;#39;s see the numbers.&lt;/p&gt;&lt;p&gt;The first project (the one that was co-located) was paying approximately &amp;euro;50,000 annually to a good developer, which was about $5,600 per month or $35 per hour. The second one (the extremely distributed project) was paying $20-35 per hour, for completed tasks only according to one of the principles of &lt;a href="http://www.xdsd.org"&gt;XDSD&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The first one, in three months, produced 59k new lines and removed 29k in changes in the &lt;code&gt;master&lt;/code&gt; branch, which in totals 88k lines of code. The project resulted in about 10,000 man hours to produce these lines (20 programmers, three months, 170 working hours per month) &amp;mdash; which equates to about $350k. Therefore, the project cost a whopping&lt;/p&gt;&lt;p style="color:red;text-align:center;font-size:2em;"&gt;$3.98 per line&lt;/p&gt;&lt;p&gt;The second project, in the same three month period, produced 45k new lines and removed 9k, which comes to 54k in all. To complete this work, we spent only $7k (approximately 350 working hours in 650 tasks). Thus, the project costs merely:&lt;/p&gt;&lt;p style="color:green;text-align:center;font-size:2em;"&gt;&amp;cent;13 per line&lt;/p&gt;&lt;p&gt;This also means that programmers were writing approximately 270 lines per hour or over 2,000 per day. &lt;a href="http://en.wikipedia.org/wiki/The_Mythical_Man-Month"&gt;The Mythical Man-Month&lt;/a&gt; talks about 10 lines per day, which is 200 times less than we saw in our project.&lt;/p&gt;&lt;p&gt;$350k vs $7k, $3.98 vs &amp;cent;13? What do you think?&lt;/p&gt;&lt;h2 id="how-to-validate-the-numbers?"&gt;How to Validate the Numbers?&lt;/h2&gt;&lt;p&gt;If you&amp;#39;re curios, I&amp;#39;m using this script to get the numbers from Git:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;1 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git log &lt;span class="s2"&gt;&amp;quot;--since=3 months&amp;quot;&lt;/span&gt; --pretty&lt;span class="o"&gt;=&lt;/span&gt;tformat: --numstat &lt;span class="se"&gt;\&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; gawk &lt;span class="s1"&gt;&amp;#39;{ add += $1; subs += $2; } END { printf &amp;quot;added: %s removed: %s\n&amp;quot;,add,subs,loc }&amp;#39;&lt;/span&gt; - &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;You can validate the numbers for the second project here on Github: &lt;a href="https://github.com/jcabi/jcabi-github"&gt;jcabi/jcabi-github&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;What I&amp;#39;m trying to express with these numbers is that distributed programming is much more effective, money-wise, than a co-located team. Again, I can hear you saying that &amp;quot;line of code&amp;quot; is not a proper metric. But, come on, $0.13 vs. $3.98? Thirty times more expensive?&lt;/p&gt;&lt;figure&gt;&lt;img src='http://img.xdsd.org/2014/04/lebowski-they-did-not-receive-the-money.jpg' style='width:600px;' alt='The Big Lebowski (1998) by Joel Coen'/&gt;&lt;figcaption&gt;The Big Lebowski (1998) by Joel Coen&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;It&amp;#39;s not about metrics any more. It&amp;#39;s about preventing wasteful man hours and the huge waste of money that comes with them?&lt;/p&gt;&lt;h2 id="can-we-do-the-same?"&gt;Can We Do the Same?&lt;/h2&gt;&lt;p&gt;Of course, the same results can&amp;#39;t be achieved by just telling your programmers to work from home and never come to the office. XDSD is not about that. &lt;a href="http://www.xdsd.org"&gt;XDSD&lt;/a&gt; is about strict quality principles, which should be followed by the entire team.&lt;/p&gt;&lt;p&gt;And when these principles are in place &amp;mdash; you pay thirty times less.&lt;/p&gt;&lt;p&gt;By the way, this is what people say about their projects:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;$12&amp;ndash;103: &lt;a href="http://www.crazyontap.com/topic.php?TopicId=242135"&gt;crazyontap.com&lt;/a&gt;&lt;/li&gt; &lt;li&gt;$15&amp;ndash;40: &lt;a href="http://betterembsw.blogspot.nl/2010/10/embedded-software-costs-15-40-per-line.html"&gt;betterembsw.blogspot.nl&lt;/a&gt;&lt;/li&gt; &lt;li&gt;over $5: &lt;a href="http://discuss.joelonsoftware.com/default.asp?biz.5.467536.25"&gt;joelonsoftware.com&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;What are your numbers? Please post your comments below.&lt;/p&gt; </description> <pubDate>Fri, 11 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/11/cost-of-loc.html</guid> <dc:date>2014-04-11T00:00:00+00:00</dc:date> </item> <item><title>Xembly, an Assembly for XML</title><link>http://www.yegor256.com/2014/04/09/xembly-intro.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.xembly.org'&gt;&lt;img src='http://img.xembly.org/logo-256x256.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I use XML in almost every one of my projects. And, despite all the fuss about JSON/YAML, I honestly believe that XML is one of the greatest languages ever invented. Also, I believe that the beauty of XML reveals itself when used in combination with related technologies.&lt;/p&gt;&lt;p&gt;For example, you can expose your data in XML and render it for the end-user using &lt;a href="http://www.w3.org/Style/XSL/"&gt;XSL stylesheet&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Another example would be when you validate the same data, before rendering, to ensure that the structure is correct. You can do this with the &lt;a href="http://www.w3.org/TR/xmlschema11-1/"&gt;XSD&lt;/a&gt; schema. Alternatively, you can pick specific data elements from the entire document by using &lt;a href="http://www.w3.org/TR/xpath/"&gt;XPath&lt;/a&gt; queries.&lt;/p&gt;&lt;p&gt;Essentially, these three technologies, XSL, XSD schema and XPath, are what makes XML so powerful.&lt;/p&gt;&lt;p&gt;However, there can be times when XML falls short. For instance, imagine you have an existing document that needs to be modified just slightly. For example, let&amp;#39;s use the following:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;accounts&amp;gt;&lt;/span&gt; [...] &lt;span class="nt"&gt;&amp;lt;acc&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;34&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Jeffrey&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;balance&amp;gt;&lt;/span&gt;305&lt;span class="nt"&gt;&amp;lt;/balance&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/acc&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;acc&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;35&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Walter&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;balance&amp;gt;&lt;/span&gt;50090&lt;span class="nt"&gt;&amp;lt;/balance&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/acc&amp;gt;&lt;/span&gt; [...] &lt;span class="nt"&gt;&amp;lt;/accounts&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code represents a list of accounts. Each account has its own &lt;code&gt;id&lt;/code&gt; and several child elements. In our example, we need to find the account belonging to &lt;code&gt;Jeffrey&lt;/code&gt; and increase its balance by &lt;code&gt;500&lt;/code&gt;. How would we do this?&lt;/p&gt;&lt;p&gt;Well, there are a few possible solutions:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;SAX-parse the document, change the balance and save the stream;&lt;/li&gt; &lt;li&gt;DOM-parse it, find the element with XPath, change the value and then print it;&lt;/li&gt; &lt;li&gt;apply a parametrized XSL stylesheet;&lt;/li&gt; &lt;li&gt;apply XQuery small script to make changes&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;All of these methods have their own drawbacks. However, all of them have one particular problem in common &amp;mdash; they are very verbose. With each of the above methods, you need at least a page of code to perform this rather simple operation. Furthermore, if the logic of the operation becomes more complex, the amount of needed code grows much faster than you may expect.&lt;/p&gt;&lt;p&gt;Simply put, XML lacks a tool for primitive data manipulations within a document. Perhaps, it is this shortcoming that makes XML unpopular with some.&lt;/p&gt;&lt;p&gt;Anyway, here is a tool I created a few month ago: &lt;a href="http://www.xembly.org"&gt;Xembly&lt;/a&gt;. It is an imperative language with a few simple directives and resembles &lt;a href="http://en.wikipedia.org/wiki/Assembly_language"&gt;Assembly&lt;/a&gt; in style. Thus, the name - Xembly. With Xembly, there are no loops, conditions or variables - just a sequence of directives with arguments.&lt;/p&gt; </description> <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/09/xembly-intro.html</guid> <dc:date>2014-04-09T00:00:00+00:00</dc:date> </item> <item><title>Phantomjs as an HTML Validator</title><link>http://www.yegor256.com/2014/04/06/phandom.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.phandom.org'&gt;&lt;img src='http://img.phandom.org/logo-256x256.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I created &lt;a href="http://www.phandom.org"&gt;phandom.org&lt;/a&gt; a few months ago, but yesterday finally found the time to make some needed changes to it. So, now is a good time to explain how I&amp;#39;m using Phandom in some of my unit tests.&lt;/p&gt;&lt;p&gt;Before I get started, though, I should say a few words about &lt;a href="http://phantomjs.org/"&gt;phantomjs&lt;/a&gt;, which is a JavaScript interface for WebKit. WebKit, on the other hand, is a web browser without a user interface. WebKit is a C++ library that enables manipulation of HTML content, through DOM calls. For example, this is a simple JavaScript located code in &lt;code&gt;example.js&lt;/code&gt;:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;1 2 3 4 5 6 7 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;webpage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://google.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loaded!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;phantom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;We run phantomjs from the command line with the following code:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;phantomjs example.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Phantomjs creates a &lt;code&gt;page&lt;/code&gt; object (provided by &lt;a href="https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage"&gt;webpage&lt;/a&gt; module inside phantomjs), and then asks it to &lt;code&gt;open()&lt;/code&gt; a Web page. The object communicates with WebKit and converts this call into DOM instructions. After which, the page loads. The phantomjs engine then terminates on line 6.&lt;/p&gt; </description> <pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/06/phandom.html</guid> <dc:date>2014-04-06T00:00:00+00:00</dc:date> </item> <item><title>Movies for Thanasis</title><link>http://www.yegor256.com/2014/04/06/movies-for-thanasis.html</link> <description>&lt;p&gt;Sometime ago, I recommended a list of movies to a friend of mine after he told me was losing all interest in &amp;quot;Hollywood.&amp;quot;&lt;/p&gt;&lt;p&gt;Level C titles are supposed to be impossible to understand unless you&amp;#39;ve seen (and understood) their prequels -- listed in sections A and B. So, start browsing the lists in sections A and post your comments if you have any. :)&lt;/p&gt;&lt;p&gt;Level A&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0108399/"&gt;True Romance (1993)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0110912/"&gt;Pulp Fiction (1994)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0266697/"&gt;Kill Bill (2003)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0118996/"&gt;Doberman (1997)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0144201/"&gt;La fille sur le pont (1999)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0290673/"&gt;Irreversible (2002)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0120669/"&gt;Fear and Loathing in Las Vegas (1998)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0119879/"&gt;Perdita Durango (1997)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0107165/"&gt;Golden Balls (1993)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0120753/"&gt;The Million Dollar Hotel (2000)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0245574/"&gt;Y Tu Mamá También (2001)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0105236/"&gt;Reservoir Dogs (1992)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0117951/"&gt;Trainspotting (1996)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0137523/"&gt;Fight Club (1999)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0106307/"&gt;Arizona Dream (1992)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0118843/"&gt;Black Cat, White Cat (1998)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0118789/"&gt;Buffalo &amp;#39;66 (1998)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0104545/"&gt;Jamon Jamon (1992)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0110632/"&gt;Natural Born Killers (1994)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0124901/"&gt;Thursday (1998)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0115781/"&gt;Bullet (1996)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </description> <pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/06/movies-for-thanasis.html</guid> <dc:date>2014-04-06T00:00:00+00:00</dc:date> </item> <item><title>First Post</title><link>http://www.yegor256.com/2014/04/06/introduction.html</link> <description>&lt;p&gt;This is the first post on my new blog. Therefore, it&amp;#39;s not about anything in particular - just an introduction and my way of saying hello. This blog will be primarily about software development ideas. As my &lt;a href="/about-me.html"&gt;About Me&lt;/a&gt; page says, I&amp;#39;m passionate about software quality, and will write solely about my ideas and views on it.&lt;/p&gt;&lt;p&gt;Anyway, welcome to my new blog. Together, let&amp;#39;s see how this works out! :)&lt;/p&gt;&lt;p&gt;ps. BTW, I purchased the &lt;a href="http://www.myfonts.com/fonts/ascender/cambria/"&gt;Cambria font&lt;/a&gt; just for this new blog. It cost, &amp;euro;98. Nevertheless, I think its a good investment for this new venture.&lt;/p&gt; </description> <pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/04/06/introduction.html</guid> <dc:date>2014-04-06T00:00:00+00:00</dc:date> </item> <item><title>Puzzle Driven Development</title><link>http://www.yegor256.com/2009/03/04/pdd.html</link> <description>&lt;p&gt;PDD, or Puzzle Driven Development, is a method used to break down programming tasks into smaller ones and enable their implementation in parallel. The PDD method is used widely in XDSD methodology. The method is pending a USPTO patent (application no. &lt;a href="http://www.google.com/patents/US20120023476"&gt;12/840,306&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;Let&amp;#39;s review the method with an example. Say, for instance, you are a programmer and have been tasked to design and implement a Java class. This is the formal task description: &amp;quot;class &lt;code&gt;DBWriter&lt;/code&gt; has to extend &lt;code&gt;java.io.Writer&lt;/code&gt; abstract class and save all incoming data into the database&amp;quot;.&lt;/p&gt;&lt;p&gt;You have one hour to implement this task. It is obvious to you that one hour is not enough because the problem is much bigger and requires more work than the slotted time allows. Additionally, there are a numerous unknowns:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;What information do we need to save, and in what format?&lt;/li&gt; &lt;li&gt;What is the DB schema? Is it an SQL or NoSQL database?&lt;/li&gt; &lt;li&gt;How to connect to the DB? JDBC? JPA? DAO?&lt;/li&gt; &lt;li&gt;How to handle exceptions?&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Let&amp;#39;s keep all these unknowns in mind as we try to solve the problem on the highest level of abstraction. Of course, we start with a test:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.*;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DBWriterTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Test&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSavesDataIntoDatabase&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;DataBridge&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Writer&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DBWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello, world!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello, world!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;In the above test, we define the expected behavior of the class. The test fails to compile because there are two missing classes: &lt;code&gt;DataBridge&lt;/code&gt; and &lt;code&gt;DBWriter&lt;/code&gt;. Let&amp;#39;s implement the bridge first:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;1 2 3 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;DataBridge&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Next, the writer itself:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.Writer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.utils.Arrays&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DBWriter&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Writer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;DataBridge&lt;/span&gt; &lt;span class="n"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DBWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataBridge&lt;/span&gt; &lt;span class="n"&gt;brdg&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bridge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brdg&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;cbuf&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyOfRange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cbuf&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Using the above code, we solve the problem. In the example, we successfully designed, implemented and tested the required &lt;code&gt;DBWriter&lt;/code&gt; class. Subsequently, the class can now immediately can be used &amp;quot;as is&amp;quot; by other classes.&lt;/p&gt;&lt;p&gt;Of course, the implementation is not finished, since we are not writing anything to the database. Furthermore, we still aren&amp;#39;t answering the majority of questions asked in the sample scneario. For instance, we still don&amp;#39;t know exactly how the database needs to be connected, its type (SQL or NoSQL,) the correct data format and so on. However, we&amp;#39;ve already made a number of important architectural assumptions, which allowed us to implement the class and make it usable by other classes.&lt;/p&gt;&lt;p&gt;Now it&amp;#39;s time to identify the unknowns in our code and mark them with puzzles. Every puzzle is a request for refinement. We want to ask someone else to help us refine and correct our assumptions. Here is the first puzzle we need to add:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt; 1 2 3 4 5 6 7 8 9 10 11&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;DataBridge&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/**&lt;/span&gt; &lt;span class="cm"&gt; * @todo #123 I assumed that a simple insert() method will be&lt;/span&gt; &lt;span class="cm"&gt; * enough to insert data into the database. Maybe it&amp;#39;s&lt;/span&gt; &lt;span class="cm"&gt; * not true, and some sort of transaction support may be&lt;/span&gt; &lt;span class="cm"&gt; * required. We should implement this interface and create&lt;/span&gt; &lt;span class="cm"&gt; * an integration test with a database.&lt;/span&gt; &lt;span class="cm"&gt; */&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The puzzle has three elements: &lt;code&gt;@todo&lt;/code&gt; tag, &lt;code&gt;#123&lt;/code&gt; locator and a comment. Locator displays the following: &amp;quot;The puzzle was created while working with ticket #123&amp;quot;.&lt;/p&gt;&lt;p&gt;Let’s add one more puzzle:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;1 2 3 4 5 6 7 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;cbuf&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// @todo #123 I assumed that the data should be sent to the database&lt;/span&gt; &lt;span class="c1"&gt;// as its received by the writer. Maybe this assumption&lt;/span&gt; &lt;span class="c1"&gt;// is wrong and we should aggregate data into blocks/chunks&lt;/span&gt; &lt;span class="c1"&gt;// and then send them to the data bridge.&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyOfRange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cbuf&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This puzzle indicates one of our concerns because we are not sure that the architectural decision is right. Actually, the design is very primitive at the moment and very likely to be incorrect. To refine it and refactor, we require more information from the task specifier.&lt;/p&gt;&lt;p&gt;The task is finished. Now, you can reintegrate your branch into &lt;code&gt;master&lt;/code&gt; and return the ticket to whoever assigned it to you. His task now is to find other people who will be able to resolve the puzzles we just created.&lt;/p&gt;&lt;p&gt;Every puzzle created now will produce other puzzles, which will be resolved by other people. Consequtly, our simple one-hour task can potentially generate hundreds of other tasks, which may take days or even years to complete. Nevertheless, your goal of working with your specific task is to finish it as soon as possible and reintegrate your branch into &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="best-practices"&gt;Best Practices&lt;/h2&gt;&lt;p&gt;There are a few simple rules that help you to place puzzles correctly.&lt;/p&gt;&lt;p&gt;First, you should put your &lt;code&gt;@todo&lt;/code&gt; annotations at the point where your code hits a stub. For example, in a unit test. You&amp;#39;re implementing a test and it fails because the class has not yet been implemented. You skip the test with the &lt;code&gt;@Ignore&lt;/code&gt; annotation and add a &lt;code&gt;@todo&lt;/code&gt; puzzle to its Javadoc.&lt;/p&gt;&lt;p&gt;Second, your puzzle should remain as near as possible to the code element that is hitting the stub. Say thay you have a unit test that has three test methods. All of them fail now because the class has not been implemented. The best approach would be to ignore every one of them and create three (!) puzzles. Each one of the puzzles should explain what you expect from the class and how it should be implemented.&lt;/p&gt;&lt;p&gt;Third, be as descriptive as possible. Your puzzle will soon be a task definition for someone else. So, explain clearly what you expect the next person to implement, how to do it, which documentation to use and so on and so forth. There should be enough information present that the next person assigned to the puzzles is ables implement your required classes without additional input from you!&lt;/p&gt; </description> <pubDate>Wed, 04 Mar 2009 16:52:26 +0000</pubDate> <guid>http://www.yegor256.com/2009/03/04/pdd.html</guid> <dc:date>2009-03-04T16:52:26+00:00</dc:date> </item> <dc:date>2014-08-03T00:00:00+00:00</dc:date> </channel> </rss>