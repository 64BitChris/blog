<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://www.yegor256.com/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2017-11-12T15:31:01+00:00</updated><id>http://www.yegor256.com/</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Five Features to Make Java Even Better</title><link href="http://www.yegor256.com/2017/11/07/five-new-java-features.html" rel="alternate" type="text/html" title="Five Features to Make Java Even Better" /><published>2017-11-07T00:00:00+00:00</published><updated>2017-11-07T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/11/07/five-new-java-features</id><content type="html" xml:base="http://www.yegor256.com/2017/11/07/five-new-java-features.html">&lt;p&gt;I stumbled upon &lt;a href=&quot;http://cr.openjdk.java.net/%7Ebriangoetz/amber/datum.html&quot;&gt;this proposal&lt;/a&gt;
by &lt;a href=&quot;https://twitter.com/BrianGoetz&quot;&gt;Brian Goetz&lt;/a&gt;
for data classes in Java, and immediately
realized that I too have a few ideas about how to make Java better
as a language. I actually have many of them, but this is a short list of the five most
important.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Idiocracy (2006) by Mike Judge&#39; src=&#39;/images/2017/11/idiocracy.jpg&#39; longdesc=&#39;#07fb0c2a&#39;/&gt;&lt;figcaption id=&#39;07fb0c2a&#39;&gt;Idiocracy (2006) by Mike Judge&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Global Variables&lt;/strong&gt;.
There are &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;Singletons&lt;/a&gt;
in Java,
which, as we all know, are nothing but
&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global variables&lt;/a&gt;.
Wouldn&amp;#39;t it be great to enable global variables in Java and get rid of
Singletons. PHP, JavaScript, Ruby and many other languages
have them, why doesn&amp;#39;t Java? Look at this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// return user&amp;#39;s name&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, to access it we have to use:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a Singleton. See how verbose it is?
We can simply replace it with a global variable (&lt;code&gt;global&lt;/code&gt; is the keyword
I&amp;#39;m suggesting we use):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Much less code to write, and way easier to read!&lt;/p&gt;

&lt;h2 id=&quot;global-functions-and-namespaces&quot;&gt;Global Functions and Namespaces&lt;/h2&gt;

&lt;p&gt;To group static methods together we create
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;utility classes&lt;/a&gt;,
where we have to define private constructors to prevent their instantiation.
Also, we have to remember which particular utility class a static method is in.
It&amp;#39;s just extra hassle. I&amp;#39;m suggesting we add global functions
to Java and optional &amp;quot;namespaces&amp;quot; to group them. Take a look at this
utility class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextUtils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TextUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now look at this global function with a namespace:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextUtils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My point is that since we are already using classes as collections
of functions, let&amp;#39;s make it more convenient. In some applications we
won&amp;#39;t even need namespaces, just global functions, like in C and C++.&lt;/p&gt;

&lt;h2 id=&quot;full-access-to-private-attributes-and-methods&quot;&gt;Full Access to Private Attributes and Methods&lt;/h2&gt;

&lt;p&gt;In order to access a private attribute or a method of an object from outside we
have to use the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/reflect/&quot;&gt;Reflection API&lt;/a&gt;.
It&amp;#39;s not particularly difficult, but it does take a few lines
of code, which are not so easy to read and understand:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m suggesting we allow any object to access any of the attributes and methods
of another object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, if they are private, the compiler will issue a warning.
At compile time you simply ignore the warning and move on. If you really care
about encapsulation, pay attention to the warning and do something else. But
in most cases programmers will ignore it, since they would happily use
the Reflection API anyway.&lt;/p&gt;

&lt;h2 id=&quot;null-by-default&quot;&gt;NULL by Default&lt;/h2&gt;

&lt;p&gt;It would be convenient to let us call constructors and methods with an
incomplete set of arguments. The arguments we don&amp;#39;t provide will be set
to &lt;code&gt;null&lt;/code&gt; by default. Also, when a method has to return something, but
there is no &lt;code&gt;return&lt;/code&gt; statement, Java should return &lt;code&gt;null&lt;/code&gt;. This is almost exactly how
it works in PHP, Ruby, and many other languages. I believe
it would be a convenient feature for Java &lt;del&gt;monkeys&lt;/del&gt; developers too.&lt;/p&gt;

&lt;p&gt;We won&amp;#39;t need to define so many methods when some of the arguments are optional.
&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html&quot;&gt;Method overloading&lt;/a&gt;
is very verbose and difficult to understand. Instead, we
should have one method with a long list of arguments. Some of them will be
provided by the caller, others will be set to &lt;code&gt;null&lt;/code&gt;. The method will
decide what to do, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we just call either &lt;code&gt;save(f)&lt;/code&gt; or &lt;code&gt;save(f, &amp;quot;UTF-16&amp;quot;)&lt;/code&gt;. The method will
understand what we mean. We can also make it even more convenient, like it&amp;#39;s
done in Ruby, providing method arguments by names:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-16&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, when there is nothing to return, the method must return &lt;code&gt;null&lt;/code&gt; by default.
Writing &lt;code&gt;return null&lt;/code&gt; is just a waste of a code line and doesn&amp;#39;t really
improve readability. Take a look:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_the_content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#39;s obvious from this code that if the file exists, the method loads
and returns its content. If not, it returns &lt;code&gt;null&lt;/code&gt;, which will be a good
indicator for the caller that something is not right and the content
of the file is not available.&lt;/p&gt;

&lt;h2 id=&quot;getters-and-setters&quot;&gt;Getters and Setters&lt;/h2&gt;

&lt;p&gt;I think it&amp;#39;s only obvious that we need this feature: every private attribute
must automatically have
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;a setter and a getter&lt;/a&gt;.
There should be no need
to create them, Java will provide them out-of-the-box, just like
&lt;a href=&quot;https://kotlinlang.org/docs/reference/properties.html&quot;&gt;Kotlin&lt;/a&gt;
and &lt;a href=&quot;http://www.rubyist.net/%7Eslagell/ruby/accessors.html&quot;&gt;Ruby&lt;/a&gt; do.
What is the point of having an attribute if there are no getters and setters
to read it and to modify it, right?&lt;/p&gt;

&lt;p&gt;With this new feature we&amp;#39;ll no longer need the help of
&lt;a href=&quot;https://projectlombok.org/features/GetterSetter&quot;&gt;Lombok&lt;/a&gt;,
or &lt;a href=&quot;https://www.jetbrains.com/help/idea/generating-getters-and-setters.html&quot;&gt;IntelliJ IDEA&lt;/a&gt;.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;Maybe I should turn my ideas into official proposals to
&lt;a href=&quot;https://jcp.org/en/participation/committee&quot;&gt;JCP&lt;/a&gt;. What do you think?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><category term="sarcasm" /><summary type="html">I stumbled upon this proposal
by Brian Goetz
for data classes in Java, and immediately
realized that I too have a few ideas about how to make Java better
as a language. I actually have many of them, but this is a short list of the five most
important.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/11/idiocracy.jpg" /></entry><entry><title type="html">Software Quality Award, 2018</title><link href="http://www.yegor256.com/2017/10/24/award-2018.html" rel="alternate" type="text/html" title="Software Quality Award, 2018" /><published>2017-10-24T00:00:00+00:00</published><updated>2017-10-24T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/10/24/award-2018</id><content type="html" xml:base="http://www.yegor256.com/2017/10/24/award-2018.html">&lt;figure class=&#39;badge&#39;&gt;&lt;img src=&#39;http://www.yegor256.com/images/andreea/quality-award.svg&#39; style=&#39;width:300px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;This is the forth year of the
&lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. The prize
is still the same&amp;mdash;&lt;strong&gt;$4,096&lt;/strong&gt;.
The rules are still the same. Read on.
Previous years are here:
&lt;a href=&quot;/2015/04/16/award.html&quot;&gt;2015&lt;/a&gt;,
&lt;a href=&quot;/2015/10/17/award-2016.html&quot;&gt;2016&lt;/a&gt;,
&lt;a href=&quot;/2016/10/23/award-2017.html&quot;&gt;2017&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fill
&lt;a href=&quot;https://docs.google.com/forms/d/1bPgbvs9Y6fWlmvdqGPSxMXXCCRQWPSU2UuItNjSCgQg&quot;&gt;&lt;strong&gt;THIS FORM&lt;/strong&gt;&lt;/a&gt;
to submit.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One person can submit only one project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Submissions are accepted until September 1, 2018.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I will check the commit history to make sure you&amp;#39;re the main contributor to the project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Results will be announced October 15, 2018 on this page and by email.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The best project will receive $4,096 (I may split this amount among a few projects).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Winners that received any cash prizes in previous years can&amp;#39;t submit again.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open source (in GitHub).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least 10,000 lines of code (&lt;a href=&quot;https://www.npmjs.com/package/cloc&quot;&gt;&lt;code&gt;cloc&lt;/code&gt;&lt;/a&gt; without any arguments).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least one year old.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object-oriented (that&amp;#39;s the only thing I understand).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best project is selected using this &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;criteria&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What doesn&amp;#39;t matter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don&amp;#39;t care about
popularity; quality is the key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it&amp;#39;s still eligible for the award. I don&amp;#39;t care about
your marketing position; quality is all.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html">This is the forth year of the
Software Quality Award. The prize
is still the same&amp;mdash;$4,096.
The rules are still the same. Read on.
Previous years are here:
2015,
2016,
2017.

Fill
THIS FORM
to submit.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/andreea/quality-award.png" /></entry><entry><title type="html">Lazy Loading and Caching via Sticky Cactoos Primitives</title><link href="http://www.yegor256.com/2017/10/17/lazy-loading-caching-sticky-cactoos.html" rel="alternate" type="text/html" title="Lazy Loading and Caching via Sticky Cactoos Primitives" /><published>2017-10-17T00:00:00+00:00</published><updated>2017-10-17T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/10/17/lazy-loading-caching-sticky-cactoos</id><content type="html" xml:base="http://www.yegor256.com/2017/10/17/lazy-loading-caching-sticky-cactoos.html">&lt;p&gt;You obviously know what &lt;a href=&quot;https://en.wikipedia.org/wiki/Lazy_loading&quot;&gt;lazy loading&lt;/a&gt;
is, right? And you no doubt know about &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_%28computing%29&quot;&gt;caching&lt;/a&gt;.
To my knowledge, there is no elegant way in Java to implement either of them. Here
is what I found out for myself with the help of Cactoos primitives.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Reality (2012) by Matteo Garrone&#39; src=&#39;/images/2017/10/reality.jpg&#39; longdesc=&#39;#e68b1cc6&#39;/&gt;&lt;figcaption id=&#39;e68b1cc6&#39;&gt;Reality (2012) by Matteo Garrone&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s say we need an object that will encrypt some text. Speaking in
a more object-oriented way, it will encapsulate the text and &lt;em&gt;become&lt;/em&gt; its
encrypted form. Here is how we will use it (let&amp;#39;s create
&lt;a href=&quot;/2017/03/24/tdd-that-works.html&quot;&gt;tests first&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Encrypted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EncryptedX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let&amp;#39;s implement it, in a very primitive way, with one
&lt;a href=&quot;/2015/05/28/one-primary-constructor.html&quot;&gt;primary&lt;/a&gt;
constructor. The encryption mechanism
will just add &lt;code&gt;+1&lt;/code&gt; to each byte in the incoming data, and will assume that
the encryption won&amp;#39;t break anything (a very stupid
assumption, but for the sake of this example it will work):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Encrypted1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Encrypted1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looks correct so far? I &lt;a href=&quot;https://github.com/yegor256/blog/tree/master/_samples/2017/10/sticky&quot;&gt;tested it&lt;/a&gt;
and it works. If the input is &lt;code&gt;&amp;quot;Hello, world!&amp;quot;&lt;/code&gt;,
the output will be &lt;code&gt;&amp;quot;Ifmmp-!xpsme\&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, let&amp;#39;s say that we want our class to accept an
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt;
as well as a
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.
We want to call it like this, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Encrypted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encrypted2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/hello.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is the most obvious implementation, with two
&lt;a href=&quot;/2015/05/28/one-primary-constructor.html&quot;&gt;primary&lt;/a&gt;
constructors (again, the implementation is primitive, but works):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Encrypted2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Encrypted2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;baos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toByteArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Encrypted2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// asString() is exactly the same as in Encrypted1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Technically it works, but stream reading is right inside the constructor,
which is &lt;a href=&quot;/2015/05/07/ctors-must-be-code-free.html&quot;&gt;bad practice&lt;/a&gt;.
&lt;a href=&quot;/2015/05/28/one-primary-constructor.html&quot;&gt;Primary&lt;/a&gt;
constructors must not do anything but attribute assignments, while secondary
ones may only create new objects.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s try to refactor and introduce lazy loading:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Encrypted3&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Encrypted3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Encrypted3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;baos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toByteArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Works great, but looks ugly. The ugliest part is these two lines of course:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;They make the object
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;mutable&lt;/a&gt;
and they&amp;#39;re using &lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;NULL&lt;/a&gt;. It&amp;#39;s ugly,
trust me. Unfortunately, lazy loading and NULL references always come together in
&lt;a href=&quot;https://stackoverflow.com/a/2192271/187141&quot;&gt;classic examples&lt;/a&gt;.
However there is a better way to implement it.
Let&amp;#39;s refactor our class, this time using
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.16/org/cactoos/Scalar.html&quot;&gt;&lt;code&gt;Scalar&lt;/code&gt;&lt;/a&gt;
from
&lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Encrypted4&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IoCheckedScalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Encrypted4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;baos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toByteArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Encrypted4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Encrypted4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IoCheckedScalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now it looks way better. First of all, there is only one primary constructor and
two secondary ones. Second, the object is
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutable&lt;/a&gt;.
Third, there is still a lot
of room for
&lt;a href=&quot;/2014/11/07/how-immutability-helps.html&quot;&gt;improvement&lt;/a&gt;:
we can add more constructors which will accept
other sources of data, for example
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/io/File.html&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; or a byte array.&lt;/p&gt;

&lt;p&gt;In a nutshell, the attribute that is supposed to be loaded in a &amp;quot;lazy&amp;quot; way
is represented inside an object as a &amp;quot;function&amp;quot;
(&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;lambda expression&lt;/a&gt; in
Java&amp;nbsp;8). Until we touch that attribute, it&amp;#39;s not loaded. Once we need
to work with it, the function gets executed and we have the result.&lt;/p&gt;

&lt;p&gt;There is one problem with this code though. It will read the input stream
every time we call &lt;code&gt;asString()&lt;/code&gt;, which will obviously not work, since only
the first time will the stream have the data. On every subsequent call the stream
will simply be empty. Thus, we need to make sure that &lt;code&gt;this.text.value()&lt;/code&gt;
executes the encapsulated &lt;code&gt;Scalar&lt;/code&gt; only once. All later calls must return the
previously calculated value. So we need to &lt;em&gt;cache&lt;/em&gt; it. Here is how:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Encrypted5&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IoCheckedScalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// same as above in Encrypted4&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Encrypted5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IoCheckedScalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StickyScalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// same as above in Encrypted4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.16/org/cactoos/scalar/StickyScalar.html&quot;&gt;&lt;code&gt;StickyScalar&lt;/code&gt;&lt;/a&gt;
will make sure that only the first call to its method &lt;code&gt;value()&lt;/code&gt;
will go through to the encapsulated &lt;code&gt;Scalar&lt;/code&gt;. All other calls will receive
the result of the first call.&lt;/p&gt;

&lt;p&gt;The last problem to solve is about concurrency. The code we have above is not
thread safe. If I create an instance of &lt;code&gt;Encrypted5&lt;/code&gt; and pass it to two threads,
which call &lt;code&gt;asString()&lt;/code&gt; simultaneously, the result will be unpredictable,
simply because
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.16/org/cactoos/scalar/StickyScalar.html&quot;&gt;&lt;code&gt;StickyScalar&lt;/code&gt;&lt;/a&gt;
is not thread-safe. There is another primitive to help us out though, called
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.16/org/cactoos/scalar/SyncScalar.html&quot;&gt;&lt;code&gt;SyncScalar&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Encrypted5&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IoCheckedScalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// same as above in Encrypted4&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Encrypted5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IoCheckedScalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SyncScalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StickyScalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// same as above in Encrypted4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we&amp;#39;re safe and the design is elegant. It includes lazy loading and caching.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m using this approach in many projects now and it seems convenient,
clear, and object-oriented.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><summary type="html">You obviously know what lazy loading
is, right? And you no doubt know about caching.
To my knowledge, there is no elegant way in Java to implement either of them. Here
is what I found out for myself with the help of Cactoos primitives.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/10/reality.jpg" /></entry><entry><title type="html">Streams vs. Decorators</title><link href="http://www.yegor256.com/2017/10/10/streams-vs-decorators.html" rel="alternate" type="text/html" title="Streams vs. Decorators" /><published>2017-10-10T00:00:00+00:00</published><updated>2017-10-10T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/10/10/streams-vs-decorators</id><content type="html" xml:base="http://www.yegor256.com/2017/10/10/streams-vs-decorators.html">&lt;p&gt;The &lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&quot;&gt;Streams API&lt;/a&gt;
was introduced in Java&amp;nbsp;8, together with
&lt;a href=&quot;http://openjdk.java.net/projects/lambda/&quot;&gt;lambda expressions&lt;/a&gt;, just a few
years ago. I, as a disciplined Java adept, tried to use this new feature
in a few of my projects, for example
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.11/src/main/java/io/jare/dynamo/DyUser.java#L85-L88&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;https://github.com/yegor256/wring/blob/0.17.2/src/main/java/io/wring/dynamo/DyEvents.java#L95-L98&quot;&gt;here&lt;/a&gt;.
I didn&amp;#39;t really like it and went back to good old decorators. Moreover, I
created &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt;, a library of decorators, to replace
&lt;a href=&quot;https://github.com/google/guava&quot;&gt;Guava&lt;/a&gt;, which is not so good in so many places.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;La Haine (1995) by Mathieu Kassovitz&#39; src=&#39;/images/2017/10/la-haine.jpg&#39; longdesc=&#39;#f2d417e0&#39;/&gt;&lt;figcaption id=&#39;f2d417e0&#39;&gt;La Haine (1995) by Mathieu Kassovitz&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is a primitive example. Let&amp;#39;s say we have a collection of measurements
coming in from some data source, they are all numbers between zero and one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, we need to show only the first 10 of them, ignoring zeros and ones,
and re-scaling them to &lt;code&gt;(0..100)&lt;/code&gt;. Sounds like an easy task, right? There
are three ways to do it: procedural, object-oriented, and the Java&amp;nbsp;8 way. Let&amp;#39;s
start with the procedural way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;Probe #%d: %f&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0d&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why is this a procedural way? Because it&amp;#39;s imperative. Why is it imperative?
Because it&amp;#39;s procedural. Nah, I&amp;#39;m kidding.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s imperative because we&amp;#39;re
giving instructions to the computer about what data to put where and how to
iterate through it. We&amp;#39;re not declaring the result, but imperatively
building it. It works, but it&amp;#39;s not really scalable. We can&amp;#39;t take part of this
algorithm and apply it to another use case. We can&amp;#39;t really modify it easily,
for example to take numbers from two sources instead of one, etc.
It&amp;#39;s procedural. Enough said. Don&amp;#39;t do it this way.&lt;/p&gt;

&lt;p&gt;Now, Java&amp;nbsp;8 gives us the
&lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&quot;&gt;Streams API&lt;/a&gt;,
which is supposed to offer a
functional way to do the same. Let&amp;#39;s try to use it.&lt;/p&gt;

&lt;p&gt;First, we need to create an instance of
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;,
which
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/a&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/23114015/&quot;&gt;doesn&amp;#39;t&lt;/a&gt;
let us obtain directly. Then we use the stream API to do the job:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StreamSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spliterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;Probe #%d: %f&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0d&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will work, but will say &lt;code&gt;Probe #0&lt;/code&gt; for all probes, because &lt;code&gt;forEach()&lt;/code&gt;
doesn&amp;#39;t work with indexes. There is no such thing as &lt;code&gt;forEachWithIndex()&lt;/code&gt;
in the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;
interface as of Java&amp;nbsp;8 (and Java&amp;nbsp;9
&lt;a href=&quot;http://download.java.net/java/jdk9/docs/api/java/util/stream/Stream.html&quot;&gt;too&lt;/a&gt;).
Here is a &lt;a href=&quot;https://stackoverflow.com/a/18552071/187141&quot;&gt;workaround&lt;/a&gt; with
an atomic counter:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;StreamSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spliterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;Probe #%d: %f&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAndIncrement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0d&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&amp;quot;What&amp;#39;s wrong with that?&amp;quot; you may ask. First, see how easily we got into
trouble when we didn&amp;#39;t find the right method in the &lt;code&gt;Stream&lt;/code&gt; interface. We
immediately fell off the &amp;quot;streaming&amp;quot; paradigm and got back to the
good old procedural global variable (the counter). Second, we don&amp;#39;t
really see what&amp;#39;s going on inside those &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;limit()&lt;/code&gt;, and &lt;code&gt;forEach()&lt;/code&gt;
methods. How exactly do they work? The documentation says that this
approach is &amp;quot;declarative&amp;quot; and each method in the &lt;code&gt;Stream&lt;/code&gt; interface returns
an instance of some class. What classes are they? We have no idea by
just looking at this code.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;The biggest issue with this streaming API is the very interface Stream, it&amp;#39;s huge!&lt;/aside&gt;

&lt;p&gt;These two problems are connected. The biggest issue with this streaming API
is the very interface &lt;code&gt;Stream&lt;/code&gt;&amp;mdash;it&amp;#39;s huge. At the time of writing
there are 43 methods. Forty three, in a single interface! This is against
each and every
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;principle&lt;/a&gt;
of object-oriented programming, starting with
&lt;a href=&quot;/2017/03/28/solid.html&quot;&gt;SOLID&lt;/a&gt; and then up to more serious
ones.&lt;/p&gt;

&lt;p&gt;What is the object-oriented way to implement the same algorithm? Here
is how I would do it with &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt;, which is just a collection of
&lt;del&gt;primitive&lt;/del&gt; simple Java classes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Limited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filtered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;probes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0d&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;Probe #%d: %f&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0d&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s see what&amp;#39;s going on here. First,
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.16/org/cactoos/iterable/Filtered.html&quot;&gt;&lt;code&gt;Filtered&lt;/code&gt;&lt;/a&gt;
decorates our iterable &lt;code&gt;probes&lt;/code&gt; to take certain items out of it.
Notice that &lt;code&gt;Filtered&lt;/code&gt; implements &lt;code&gt;Iterable&lt;/code&gt;. Then
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.16/org/cactoos/iterable/Limited.html&quot;&gt;&lt;code&gt;Limited&lt;/code&gt;&lt;/a&gt;,
also being an &lt;code&gt;Iterable&lt;/code&gt;, takes only the first ten items out. Then
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.16/org/cactoos/iterable/Mapped.html&quot;&gt;&lt;code&gt;Mapped&lt;/code&gt;&lt;/a&gt;
converts each probe into an instance of
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.16/org/cactoos/Scalar.html&quot;&gt;&lt;code&gt;Scalar&amp;lt;Boolean&amp;gt;&lt;/code&gt;&lt;/a&gt;,
which does the line printing.&lt;/p&gt;

&lt;p&gt;Finally, the instance of &lt;code&gt;And&lt;/code&gt; goes through the list of &amp;quot;scalars&amp;quot; and ask
each of them to return &lt;code&gt;boolean&lt;/code&gt;. They print the line and return &lt;code&gt;true&lt;/code&gt;. Since
it&amp;#39;s &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;And&lt;/code&gt; makes the next attempt with the next scalar. Finally,
its method &lt;code&gt;value()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But wait, there are no indexes. Let&amp;#39;s add them. In order to do that we
just use another class, called &lt;code&gt;AndWithIndex&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AndWithIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Limited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filtered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;probes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0d&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;Probe #%d: %f&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0d&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of &lt;code&gt;Scalar&amp;lt;Boolean&amp;gt;&lt;/code&gt; we now map our probes to
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.16/org/cactoos/Func.html&quot;&gt;&lt;code&gt;Func&amp;lt;Integer, Boolean&amp;gt;&lt;/code&gt;&lt;/a&gt;
to let them accept the index.&lt;/p&gt;

&lt;p&gt;The beauty of this approach is that all classes and interfaces are small
and that&amp;#39;s why they&amp;#39;re very composable. To make an iterable of probes limited
we decorate it with &lt;code&gt;Limited&lt;/code&gt;; to make it filtered we decorate it with
&lt;code&gt;Filtered&lt;/code&gt;; to do something else we create a new decorator and use it. We&amp;#39;re
not stuck to one single interface like &lt;code&gt;Stream&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The bottom line is that decorators are an object-oriented instrument to
modify the behavior of collections, while streams is something else which
I can&amp;#39;t even find the name for.&lt;/p&gt;

&lt;p&gt;P.S. By the way, this is how the same algorithm can be implemented
with the help of Guava&amp;#39;s
&lt;a href=&quot;https://google.github.io/guava/releases/21.0/api/docs/com/google/common/collect/Iterables.html&quot;&gt;&lt;code&gt;Iterables&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;probes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0d&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;Probe #%d: %f&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0d&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is some weird combination of object-oriented and functional styles.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><summary type="html">The Streams API
was introduced in Java&amp;nbsp;8, together with
lambda expressions, just a few
years ago. I, as a disciplined Java adept, tried to use this new feature
in a few of my projects, for example
here and
here.
I didn&amp;#39;t really like it and went back to good old decorators. Moreover, I
created Cactoos, a library of decorators, to replace
Guava, which is not so good in so many places.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/10/la-haine.jpg" /></entry><entry><title type="html">Java 9: The Good, The Bad, and Private Interface Methods</title><link href="http://www.yegor256.com/2017/10/03/java9.html" rel="alternate" type="text/html" title="Java 9: The Good, The Bad, and Private Interface Methods" /><published>2017-10-03T00:00:00+00:00</published><updated>2017-10-03T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/10/03/java9</id><content type="html" xml:base="http://www.yegor256.com/2017/10/03/java9.html">&lt;p&gt;Java 9 &lt;a href=&quot;https://blogs.oracle.com/java/java-9-release-now-available&quot;&gt;was released&lt;/a&gt;
a few weeks ago. Check the
&lt;a href=&quot;https://docs.oracle.com/javase/9/whatsnew/toc.htm&quot;&gt;release notes&lt;/a&gt;,
they include many interesting features. However, I think that
not everything is as good as Oracle and Java adepts
&lt;a href=&quot;https://www.reddit.com/r/programming/comments/71ls99/java_9_released/&quot;&gt;seem to picture it&lt;/a&gt;.
I see three trends in the Java world, which are good, bad, and ugly,
respectively. Let&amp;#39;s start with the good one.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Birdman (2014) by Alejandro G. Iñárritu&#39; src=&#39;/images/2017/10/birdman.jpg&#39; longdesc=&#39;#e53725ca&#39;/&gt;&lt;figcaption id=&#39;e53725ca&#39;&gt;Birdman (2014) by Alejandro G. Iñárritu&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-platform&quot;&gt;The Platform&lt;/h2&gt;

&lt;p&gt;The first trend is an obvious improvement of the platform that compiles Java,
packages JARs, and runs the bytecode. It definitely becomes better with every
new Java release. Here is a list of improvements Java&amp;nbsp;9 made, which are
very useful, without doubt:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/spec/&quot;&gt;JSR 376&lt;/a&gt;: Module System a.k.a. &lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/&quot;&gt;Jigsaw&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/222&quot;&gt;JEP 222&lt;/a&gt;: &lt;a href=&quot;http://jakubdziworski.github.io/java/2016/07/31/jshell-getting-started-examples.html&quot;&gt;&lt;code&gt;jshell&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/238&quot;&gt;JEP 238&lt;/a&gt;: Multi-release JARs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/282&quot;&gt;JEP 282&lt;/a&gt;: &lt;a href=&quot;https://blog.idrsolutions.com/2017/05/java-9-jlink-explained-in-5-minutes/&quot;&gt;&lt;code&gt;jlink&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/158&quot;&gt;JEP 158&lt;/a&gt;: Unified logging&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The platform is obviously becoming more mature. This is a &lt;strong&gt;good&lt;/strong&gt; trend.&lt;/p&gt;

&lt;h2 id=&quot;the-jdk&quot;&gt;The JDK&lt;/h2&gt;

&lt;p&gt;The second trend, which I&amp;#39;ve observed since
&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/features-141434.html&quot;&gt;Java&amp;nbsp;6&lt;/a&gt;,
shows that the JDK, which is essentially a collection of
classes and interfaces designed, developed, and maintained by
&lt;a href=&quot;https://www.oracle.com/java/index.html&quot;&gt;Oracle&lt;/a&gt;,
gets bigger with every new release. In Java&amp;nbsp;9 they added and extended,
besides others, the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JEP &lt;a href=&quot;http://openjdk.java.net/jeps/221&quot;&gt;221&lt;/a&gt;,
&lt;a href=&quot;http://openjdk.java.net/jeps/224&quot;&gt;224&lt;/a&gt;
&lt;a href=&quot;http://openjdk.java.net/jeps/225&quot;&gt;225&lt;/a&gt;,
&lt;a href=&quot;http://openjdk.java.net/jeps/261&quot;&gt;261&lt;/a&gt;: Javadoc processing (extended)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/268&quot;&gt;JEP 268&lt;/a&gt;: XML Catalogs (new)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/262&quot;&gt;JEP 262&lt;/a&gt;: TIFF image I/O (new)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/251&quot;&gt;JEP 251&lt;/a&gt;: multi-resolution images (new)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/110&quot;&gt;JEP 110&lt;/a&gt;: HTTP 2.0 client (new)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/236&quot;&gt;JEP 236&lt;/a&gt;: Parser for Nashorn (extended)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course some features must be implemented in the JDK itself, like
Unicode support (&lt;a href=&quot;http://openjdk.java.net/jeps/267&quot;&gt;JEP 267&lt;/a&gt;),
platform-specific Desktop features (&lt;a href=&quot;http://openjdk.java.net/jeps/272&quot;&gt;JEP 272&lt;/a&gt;),
Spin-Wait Hints (&lt;a href=&quot;http://openjdk.java.net/jeps/285&quot;&gt;JEP 285&lt;/a&gt;),
compact strings (&lt;a href=&quot;http://openjdk.java.net/jeps/254&quot;&gt;JEP 254&lt;/a&gt;),
and the process API (&lt;a href=&quot;http://openjdk.java.net/jeps/102&quot;&gt;JEP 102&lt;/a&gt;).
Their implementation depends on the underlying platform and has
to be provided together with the JVM.&lt;/p&gt;

&lt;p&gt;But what is HTTP 2.0 client doing in the JDK, together with
&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=311&quot;&gt;JAX-RS&lt;/a&gt;,
&lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=338&quot;&gt;JPA&lt;/a&gt;,
&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=224&quot;&gt;JAX-WS&lt;/a&gt;,
&lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=221&quot;&gt;JDBC&lt;/a&gt;,
and many other things that, in my opinion,
should stay as far away from Oracle as possible?
They are not platform specific and they can be, in a much better way, designed
by the open source community as independent packages.
Aggregating them under one monster umbrella brand is a mistake, I believe.&lt;/p&gt;

&lt;p&gt;I think that big corporations are only killing the software market,
instead of making it better, because of the financial and political motives
they expose it to. That&amp;#39;s exactly what is happening with JDK. Thanks to
the Oracle monopoly it lacks flexibility and dynamicity in growth. In other
words, we&amp;#39;re stuck with what Oracle and its big friends
&lt;a href=&quot;https://news.ycombinator.com/item?id=14301531&quot;&gt;think is right&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thus, making JDK bigger is a &lt;strong&gt;bad&lt;/strong&gt; trend. Instead, I believe,
Oracle would only benefit from making it smaller,
delegating everything that is not platform-specific to the open
source community, supporting programmers somehow and promoting open and effective
standardization processes on the market.&lt;/p&gt;

&lt;h2 id=&quot;the-language&quot;&gt;The Language&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt;
was developed by
&lt;a href=&quot;https://en.wikipedia.org/wiki/James_Gosling&quot;&gt;James Gosling&lt;/a&gt; in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sun_Microsystems&quot;&gt;Sun Microsystems&lt;/a&gt;
in 1995 as an object-oriented language. There were
&lt;a href=&quot;/2016/08/15/what-is-wrong-object-oriented-programming.html&quot;&gt;many concerns&lt;/a&gt;
about this claim of object-orientation and I&amp;#39;m also not sure that Java
is more OO than it is procedural. However it is officially object-oriented.&lt;/p&gt;

&lt;p&gt;There were many procedural features inherited by Java from C/C++, since
its first version, including
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;static methods&lt;/a&gt;,
&lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;NULL&lt;/a&gt;,
&lt;a href=&quot;/2016/09/13/inheritance-is-procedural.html&quot;&gt;implementation inheritance&lt;/a&gt;,
etc. It was not a perfect object-oriented language and it was not going
to be one, as I understand it. The key idea was to create something that could
be &lt;a href=&quot;https://en.wikipedia.org/wiki/Write_once,_run_anywhere&quot;&gt;written once and ran anywhere&lt;/a&gt;.
However the language was a big deal also, not just the JVM. It was simple and sexy.&lt;/p&gt;

&lt;p&gt;Java&amp;nbsp;5 made a serious step forward in 2004 and improved the language by
adding
&lt;a href=&quot;https://en.wikipedia.org/wiki/Generics_in_Java&quot;&gt;generics&lt;/a&gt;,
for-each loop,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_syntax#Varargs&quot;&gt;varargs&lt;/a&gt;,
and static import. However, &lt;a href=&quot;/2016/04/12/java-annotations-are-evil.html&quot;&gt;annotations&lt;/a&gt;
and enumerations were introduced, which helped the language to divert
from the object paradigm to something completely different and procedural.&lt;/p&gt;

&lt;p&gt;Java&amp;nbsp;7 added &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/technotes/guides/language/try-with-resources.html&quot;&gt;try-with-resource&lt;/a&gt;
in 2011, which was a good move, in line with the OOP paradigm.&lt;/p&gt;

&lt;p&gt;Java&amp;nbsp;8 added &lt;a href=&quot;http://openjdk.java.net/projects/lambda/&quot;&gt;lambda expressions&lt;/a&gt; in 2014,
which was a great feature, but absolutely irrelevant to OOP. Lambda and
&lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&quot;&gt;Streams API&lt;/a&gt;
turned Java into a mix of the object, procedural, and functional
paradigms. &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;Default methods&lt;/a&gt;
were also added to interfaces, which turned types into libraries of code. Types into libraries!
It&amp;#39;s even worse than
&lt;a href=&quot;/2016/09/13/inheritance-is-procedural.html&quot;&gt;implementation inheritance&lt;/a&gt;,
if you ask me.&lt;/p&gt;

&lt;p&gt;Now Java&amp;nbsp;9 made the next &amp;quot;improvement&amp;quot; to interfaces, allowing them to have
private methods. Private static methods in types! Can you believe it? What will
be the next step? Attributes, in Java&amp;nbsp;10, I guess.&lt;/p&gt;

&lt;p&gt;Also, let&amp;#39;s take a look at what was done to some core classes in the JDK,
to understand where the language is heading. Just two examples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Factory methods for collections&lt;/strong&gt;
(&lt;a href=&quot;http://openjdk.java.net/jeps/269&quot;&gt;JEP 269&lt;/a&gt;).
Instead of introducing new constructors and allowing us to do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;...in Java&amp;nbsp;9 they created more static methods and made us do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&amp;quot;Fewer constructors, more static methods!&amp;quot; seems to be the philosophy of those who
introduced this JEP. Needless to say that this is completely against the
very spirit of object-oriented programming. Objects must be created by
constructors, not static methods, no matter what Joshua Bloch
&lt;a href=&quot;http://amzn.to/2crH5tW&quot;&gt;says&lt;/a&gt;. Static methods make the moment of operator
&lt;code&gt;new&lt;/code&gt; usage invisible for us and that&amp;#39;s why the code is way less
maintainable&amp;mdash;we simply don&amp;#39;t know exactly what class is instantiated and
what the real arguments of its ctor are.&lt;/p&gt;

&lt;p&gt;By the way, with &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt; you can do it the right way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is OOP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New methods in &lt;code&gt;InputStream&lt;/code&gt;&lt;/strong&gt;.
Three new methods were added to the
already &lt;a href=&quot;/2016/04/26/why-inputstream-design-is-wrong.html&quot;&gt;over bloated&lt;/a&gt; class
&lt;a href=&quot;http://download.java.net/java/jdk9/docs/api/java/io/InputStream.html&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt;:
&lt;code&gt;transferTo()&lt;/code&gt;, &lt;code&gt;readNBytes()&lt;/code&gt;, and &lt;code&gt;readAllBytes()&lt;/code&gt;.
Now we are supposed to do this, when we want input stream to
copy to an output stream:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transferTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#39;s one of the most typical mistakes young OOP programmers are making: they
make their interfaces big. Just because they need more functionality. I guess the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interface_segregation_principle&quot;&gt;interface segregation principle&lt;/a&gt;
is part of the famous &lt;a href=&quot;/2017/03/28/solid.html&quot;&gt;SOLID&lt;/a&gt;
and is many years old. What&amp;#39;s wrong with you, Oracle?
What will the next step be? In Java&amp;nbsp;10 we will also have
&lt;code&gt;saveToFile()&lt;/code&gt; and &lt;code&gt;printToConsole()&lt;/code&gt;? How about &lt;code&gt;emailToAFriend()&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;This is how you would do the same with the
&lt;a href=&quot;https://commons.apache.org/proper/commons-io/javadocs/api-2.4/org/apache/commons/io/IOUtils.html&quot;&gt;&lt;code&gt;IOUtils&lt;/code&gt;&lt;/a&gt;
utility class from
&lt;a href=&quot;https://commons.apache.org/proper/commons-io/&quot;&gt;commons-io&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#39;s &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;not perfect&lt;/a&gt;,
but it&amp;#39;s better. The most object-oriented way is to use objects, not
utility classes and static methods. This is how it works in
&lt;a href=&quot;/2017/06/22/object-oriented-input-output-in-cactoos.html&quot;&gt;Cactoos&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LengthOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TeeInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is OOP.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;In my opinion, Java is getting &lt;strong&gt;uglier&lt;/strong&gt;, and this is a trend. Does it mean
that it&amp;#39;s time to quit? No! No matter how ugly you are, we will always love you
Java!&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><summary type="html">Java 9 was released
a few weeks ago. Check the
release notes,
they include many interesting features. However, I think that
not everything is as good as Oracle and Java adepts
seem to picture it.
I see three trends in the Java world, which are good, bad, and ugly,
respectively. Let&amp;#39;s start with the good one.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/10/birdman.jpg" /></entry><entry><title type="html">ThreeCopies.com—Server-Side Data Backup Service</title><link href="http://www.yegor256.com/2017/09/26/threecopies-server-data-backup.html" rel="alternate" type="text/html" title="ThreeCopies.com&amp;mdash;Server-Side Data Backup Service" /><published>2017-09-26T00:00:00+00:00</published><updated>2017-09-26T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/09/26/threecopies-server-data-backup</id><content type="html" xml:base="http://www.yegor256.com/2017/09/26/threecopies-server-data-backup.html">&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.threecopies.com&#39;&gt;&lt;img src=&#39;http://www.threecopies.com/images/logo.png&#39; style=&#39;width:64px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I have a number of data resources which exist in one place only and which
I don&amp;#39;t really want to lose. For example, I have a hosted PHP website,
and a MySQL database hosted at the same place. I also have
a NoSQL database at Amazon DynamoDB, a PostgreSQL database at
Heroku, and also... Well, there are many of them. How to back them up was always a
question for me.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Main picture&#39; src=&#39;/images/2017/09/threecopies.jpg&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;The most straightforward way is to rent a cheap $15/mo server
(or use an existing one) and configure Cron to run a custom bash
script, which will pull the data from the MySQL database, package it,
and upload it to some place where it will be safe, such as Amazon S3
bucket. Then, I would need another script for the PostgreSQL database, and another one
for the FTP file archive, etc.&lt;/p&gt;

&lt;p&gt;This is actually how I was doing it for years. The drawbacks
of this solution were always the same:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I needed to pay for the server.&lt;/li&gt;
&lt;li&gt;I needed to make sure the server was always up and running (Linux is far from reliable).&lt;/li&gt;
&lt;li&gt;I needed to back up my scripts too.&lt;/li&gt;
&lt;li&gt;I needed to SSH to the server every time I wanted to change a script, remember where they were, how they start, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The biggest issue is that every single owner of a data source faces
exactly the same set of problems. &amp;quot;Why can&amp;#39;t I create a hosted solution for
these scripts, to help everybody to back up their data,&amp;quot; I was asking myself
for years. &amp;quot;Well, I can,&amp;quot; was the answer just a few weeks ago, and
I created &lt;a href=&quot;http://www.threecopies.com&quot;&gt;ThreeCopies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a very simple hosted executor of bash scripts, which you edit
through a web interface. Then one of our servers starts a Docker
container (&lt;a href=&quot;https://hub.docker.com/r/yegor256/threecopies/&quot;&gt;yegor256/threecopies&lt;/a&gt; is the image, here is the
&lt;a href=&quot;https://github.com/yegor256/threecopies/blob/master/src/docker/Dockerfile&quot;&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt;)
and runs your script inside.&lt;/p&gt;

&lt;p&gt;The script starts every hour, every day and every week.
Hence the name: &amp;quot;three copies.&amp;quot; It&amp;#39;s good practice for data backup
to create separate copies with different regularities. Also, you might want to put
different data into different copies. To help your script understand which
copy is running at any particular time we pass the &lt;code&gt;$period&lt;/code&gt; environment variable into it, with
the value of either &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, or &lt;code&gt;week&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How your script pulls the data, packages it, and archives it, depends on the
data. I created a short cheat sheet for most common scenarios. This is how
I backup the MySQL database for &lt;a href=&quot;http://www.thepmp.com&quot;&gt;thePMP&lt;/a&gt;, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# I don&amp;#39;t want to back up every hour&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hour&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# I dump the entire database into the file&lt;/span&gt;
mysqldump --lock-tables&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; --host&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;db.thepmp.com &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --user&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;thepmp --password&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;********* &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --databases thepmp &amp;gt; thepmp.sql

&lt;span class=&quot;c1&quot;&gt;# I compress the file&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;tgz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s2&quot;&gt;&amp;quot;+%Y-%m-%d-%H-%M&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tgz&amp;quot;&lt;/span&gt;
tar czf &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tgz&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; thepmp.sql

&lt;span class=&quot;c1&quot;&gt;# I upload it to Amazon S3 bucket&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[default]&amp;quot;&lt;/span&gt; &amp;gt; ~/.s3cfg
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;access_key=AKIAICJKH*****CVLAFA&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.s3cfg
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;secret_key=yQv3g3ao654Ns**********H1xQSfZlTkseA0haG&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.s3cfg
s3cmd --no-progress put &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tgz&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;s3://backup.yegor256.com/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tgz&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The output of the script is available through the web interface and this
is yet another benefit of this solution. It&amp;#39;s easy to monitor what went
wrong and restart the script. All logs are available through the browser. No
SSH, no terminals.&lt;/p&gt;

&lt;p&gt;I would say that it&amp;#39;s a light version of
&lt;a href=&quot;https://aws.amazon.com/datapipeline/&quot;&gt;AWS Data Pipeline&lt;/a&gt;. &lt;a href=&quot;http://www.threecopies.com&quot;&gt;ThreeCopies&lt;/a&gt;
does exactly the same, but it&amp;#39;s easier to configure, and it&amp;#39;s cheaper.
I&amp;#39;m charging $0.01 per script execution hour. And I actually charge
per second, while AWS always charges for a full hour. For $5.00 you get
500 hours. For example, the script you see above takes about 5 minutes
to complete (the database is not huge). If you skip the hourly executions, like I did above, you
will consume 170 minutes of server time every month, which will cost you about
&lt;strong&gt;$0.34 per year&lt;/strong&gt;! This is much cheaper than a server and
its monitoring, I believe.&lt;/p&gt;

&lt;p&gt;One more thing before you go. ThreeCopies is written in Java&amp;nbsp;8 and is open source,
find it &lt;a href=&quot;https://github.com/yegor256/threecopies&quot;&gt;in GitHub&lt;/a&gt;. Feel free to
inspect the code, find bugs, and contribute with fixes or improvements.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="pets" /><summary type="html">I have a number of data resources which exist in one place only and which
I don&amp;#39;t really want to lose. For example, I have a hosted PHP website,
and a MySQL database hosted at the same place. I also have
a NoSQL database at Amazon DynamoDB, a PostgreSQL database at
Heroku, and also... Well, there are many of them. How to back them up was always a
question for me.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/09/threecopies.jpg" /></entry><entry><title type="html">What Motivates Me as a Programmer</title><link href="http://www.yegor256.com/2017/09/19/what-motivates-me.html" rel="alternate" type="text/html" title="What Motivates Me as a Programmer" /><published>2017-09-19T00:00:00+00:00</published><updated>2017-09-19T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/09/19/what-motivates-me</id><content type="html" xml:base="http://www.yegor256.com/2017/09/19/what-motivates-me.html">&lt;p&gt;I wrote a number of &lt;a href=&quot;/tag/sarcasm.html&quot;&gt;sarcastic articles&lt;/a&gt;
about management and motivation, where some traditional and very popular
practices were criticized. Now I&amp;#39;ve decided to think it all over
and summarize what actually motivates &lt;em&gt;me&lt;/em&gt; as a programmer when I&amp;#39;m
working for someone else. Let&amp;#39;s say you hire me tomorrow as a Java coder
and ask &amp;quot;What do you want us to do for you so
that you will be most productive?&amp;quot; This would be my wish list.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;300 (2006) by Zack Snyder&#39; src=&#39;/images/2017/09/300.jpg&#39; longdesc=&#39;#bf681782&#39;/&gt;&lt;figcaption id=&#39;bf681782&#39;&gt;300 (2006) by Zack Snyder&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The list is in no particular order.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remote work&lt;/strong&gt;.
I like to be
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;in the office&lt;/a&gt;,
but I hate it when I have to be there from 9 till 5.
It&amp;#39;s very important for me to have the ability to work from wherever
I want. Most companies
&lt;a href=&quot;/2017/05/02/remote-slaves.html&quot;&gt;declare that&lt;/a&gt;,
but in reality I will have to &amp;quot;inform&amp;quot; you
every time I decide to stay home. Instead, I want to inform
you when I decide to visit the office. In other words, my default state
should be &amp;quot;not in the office.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Isolation of tasks&lt;/strong&gt;.
I hate being responsible for someone else&amp;#39;s mistakes and I&amp;#39;m not really a good
&lt;a href=&quot;/2015/11/21/ringelmann-effect-vs-agile.html&quot;&gt;team player&lt;/a&gt;.
I want to solve problems on my own and be responsible for my own
successes and failures. That&amp;#39;s why clearly defined and isolated tasks motivate
me and help me stay focused and interested. I want to see them in writing
(as tickets) and I want to know exactly what the
&lt;a href=&quot;/2014/04/15/definition-of-done.html&quot;&gt;definition of done&lt;/a&gt; is.
Simply put, what should I do in order for a task to be considered as
completed?&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;I hate to be afraid, especially if I don&amp;#39;t really know what I&amp;#39;m supposed to be afraid of.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Responsibility borders&lt;/strong&gt;.
I hate to be afraid, especially if I don&amp;#39;t really know what I&amp;#39;m supposed to be
afraid of. I want to know what my possible
&lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;punishments&lt;/a&gt; are and when they will
occur. I need to know the
&lt;a href=&quot;/2015/10/13/competition-without-rules.html&quot;&gt;rules of the game&lt;/a&gt;.
Say I commit a bug into
the code and we lose $100,000. What will happen to me? Or say I don&amp;#39;t finish a
task by the deadline. Or I don&amp;#39;t answer an email. Or I miss a bug during
a code review. Or I break the &lt;code&gt;master&lt;/code&gt; branch. What are the consequences?
Their clear explanation will seriously boost my motivation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open source&lt;/strong&gt;.
I&amp;#39;m a big fan of &lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;open source&lt;/a&gt;.
If you are not, I most probably won&amp;#39;t like
working for you. If your company makes some code open and I am part of
that process, that will seriously affect my motivation, because I will achieve
two goals at the same time: make money and become more popular in the
open source world. Working in purely closed software projects is a demotivating
factor for me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project visibility&lt;/strong&gt;.
I&amp;#39;d love to see my name close to a project that is visible to the world.
And it doesn&amp;#39;t necessarily have to be Google or Facebook. Actually, in those companies
regular programmers are way less visible than in smaller startups. So, unless
you make me VP of Engineering, I won&amp;#39;t consider a position
in a big company interesting in that respect. The most interesting project
would be a small startup with an ambitious goal and high exposure in the media.
Being there even as a regular programmer will motivate me a lot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clear hierarchy&lt;/strong&gt;.
Yes, I&amp;#39;ve heard about
&lt;a href=&quot;/2016/02/18/holacracy-autocracy.html&quot;&gt;holacracy&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flat_organization&quot;&gt;flat&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flat_organization#Self-managing_teams&quot;&gt;self-managing&lt;/a&gt; teams, and
other modern ideas. I hate them all. I believe that any management is based
on
&lt;a href=&quot;/2016/09/27/command-control-innovate.html&quot;&gt;power and force&lt;/a&gt;,
and the best way to avoid negative aspects of these
rather violent concepts is to organize and structure them. Without a clear and well defined
hierarchy of roles a team very quickly turns into a
&lt;a href=&quot;/2015/10/13/competition-without-rules.html&quot;&gt;snake pit&lt;/a&gt;, with
politics, backstabbing and behind-the-scenes games. So, if you can&amp;#39;t tell me
exactly who is my boss and what the chain of command is in the group, I
simply won&amp;#39;t consider this place seriously and won&amp;#39;t be motivated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No Agile/Scrum, please&lt;/strong&gt;.
Do I need to say
&lt;a href=&quot;/2016/07/11/mistakes-in-agile-manifesto.html&quot;&gt;anything&lt;/a&gt;
else here?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Payment structure&lt;/strong&gt;.
I hate to guess about money, I prefer to know the numbers and the logic
behind them. I want to know
&lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;exactly&lt;/a&gt;
how much I&amp;#39;m going to get and when.
I want to know when the numbers will go up and how I can affect that. Also,
I&amp;#39;d like to know the payment policy of the company and, ideally, salaries
or rates of the people around me. Jealousy, which arises with the
surprising information that someone is getting more than I do, doesn&amp;#39;t
motivate at all, even if my pay is
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;decent&lt;/a&gt;.
It would be much easier for me
if I knew everything from the first day.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;I hate working for big ideas, if they are not mine.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Business transparency&lt;/strong&gt;.
I hate working for big ideas, if they are not mine. Mostly because I know
that almost all of them
&lt;a href=&quot;/2016/01/12/good-programmers-dont-work-for-equity.html&quot;&gt;fail&lt;/a&gt;.
Working for a failure and
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;being told&lt;/a&gt; that
our future is bright doesn&amp;#39;t really motivate me, at all. That&amp;#39;s why I would
expect you to tell me honestly why a meeting with investors took three hours
instead of one and why the door was so tightly closed. Also, I would want
to know why our CTO quit a few weeks ago and now works for our
competitors. I&amp;#39;d like to know our honest situation in the market
and why the web traffic stats are going down. In other words,
I&amp;#39;m either a &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;slave&lt;/a&gt;
kept in the dark, or I know
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;the truth&lt;/a&gt; and I&amp;#39;m motivated
(no matter how ugly the truth is).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Payments per results&lt;/strong&gt;.
I haven&amp;#39;t seen this anywhere, except with my own projects, but I believe it&amp;#39;s how
good teams should be structured: everybody must be paid
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;for results&lt;/a&gt;,
not per hour/week/month/year. If you want me to be truly motivated you have to
invent a payment structure where my paychecks will correspond to my results.
I do realize that this may require you to change the entire management
system, so I don&amp;#39;t absolutely insist. But you have to remember that as long as
you pay me only for my time I will try to do my best to &lt;del&gt;steal from you&lt;/del&gt; use
it for my
&lt;a href=&quot;/2017/01/24/career-advice.html&quot;&gt;own benefit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Career path&lt;/strong&gt;.
I have no problem starting as a junior developer, but I have to know exactly
what my future is and when it will happen. I want to become a CTO, no matter
what. And it&amp;#39;s not about the title. It&amp;#39;s about the amount of technical
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;authority&lt;/a&gt; and
&lt;a href=&quot;/2015/05/11/software-architect-responsibilities.html&quot;&gt;responsibility&lt;/a&gt;
I will have. I want it all. If I don&amp;#39;t see a clear path to
achieve that, I will be very demotivated and will treat my job as
temporary. I will always be looking for a &lt;a href=&quot;/2017/01/24/career-advice.html&quot;&gt;better place&lt;/a&gt;,
where it&amp;#39;s easier
to become a CTO. So it&amp;#39;s your job to make that career growth obvious for me.
If it will never be possible for me to become the CTO, make that obvious too.
The truth is better anyway.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;A strong manager is someone who is ready to fight for their own ideas, rights, thoughts, and decisions.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;A strong boss&lt;/strong&gt;.
This is probably the most important requirement I would have. I can&amp;#39;t work
under a &lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;weak manager&lt;/a&gt;,
it will seriously demotivate me from the first day.
I will probably write another blog post about what a &amp;quot;strong manager&amp;quot; is,
but in a nutshell it&amp;#39;s someone who is ready to fight for his or her
own ideas, rights, thoughts, decisions, etc. A weak manager is one who is
swimming with the current. Working under such a manager is a huge
frustration and a waste of time. I will be demotivated and no amount of money
will keep me interested.&lt;/p&gt;

&lt;p&gt;These things don&amp;#39;t matter at all, I won&amp;#39;t even ask about them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mission and vision of the company&lt;/li&gt;
&lt;li&gt;Business domain&lt;/li&gt;
&lt;li&gt;Tech stack&lt;/li&gt;
&lt;li&gt;Location&lt;/li&gt;
&lt;li&gt;Company size or structure&lt;/li&gt;
&lt;li&gt;Race, gender, sexual orientation, religious or political beliefs of people in the team&lt;/li&gt;
&lt;li&gt;Financial status of the company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, I don&amp;#39;t think that this list is applicable for everybody. Other programmers
may have some other points or may disagree with mine.&lt;/p&gt;

&lt;p&gt;P.S. I would most probably stay away from a business involved in something
I consider unethical, like corruption, gambling, crime, etc.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">I wrote a number of sarcastic articles
about management and motivation, where some traditional and very popular
practices were criticized. Now I&amp;#39;ve decided to think it all over
and summarize what actually motivates me as a programmer when I&amp;#39;m
working for someone else. Let&amp;#39;s say you hire me tomorrow as a Java coder
and ask &amp;quot;What do you want us to do for you so
that you will be most productive?&amp;quot; This would be my wish list.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/09/300.jpg" /></entry><entry><title type="html">Yet Another Evil Suffix For Object Names: Client</title><link href="http://www.yegor256.com/2017/09/12/evil-object-name-suffix-client.html" rel="alternate" type="text/html" title="Yet Another Evil Suffix For Object Names: Client" /><published>2017-09-12T00:00:00+00:00</published><updated>2017-09-12T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/09/12/evil-object-name-suffix-client</id><content type="html" xml:base="http://www.yegor256.com/2017/09/12/evil-object-name-suffix-client.html">&lt;p&gt;Some time ago we &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;were talking&lt;/a&gt;
about &amp;quot;-ER&amp;quot; suffixes in object and class
names. We agreed that they were evil and must be avoided if we want
our code to be truly object-oriented and our objects to be objects instead
of collections of procedures. Now I&amp;#39;m ready to introduce a new evil suffix:
&lt;code&gt;Client&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Sin noticias de Dios (2001) by Agustín Díaz Yanes&#39; src=&#39;/images/2017/09/dont-tempt-me.jpg&#39; longdesc=&#39;#467f4c9d&#39;/&gt;&lt;figcaption id=&#39;467f4c9d&#39;&gt;Sin noticias de Dios (2001) by Agustín Díaz Yanes&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let me give an example first. This is what an object with such a suffix may look like
(it&amp;#39;s a pseudo-code version of the
&lt;a href=&quot;http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/AmazonS3Client.html&quot;&gt;&lt;code&gt;AmazonS3Client&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;https://aws.amazon.com/sdk-for-java/&quot;&gt;AWS Java SDK&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AmazonS3Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;createBucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;deleteBucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;doesBucketExist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;getBucketAcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;getBucketPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;listBuckets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 160+ more methods here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All &amp;quot;clients&amp;quot; look similar: they encapsulate the destination URL
with some access credentials and expose a number of methods, which
transport the data to/from the &amp;quot;server.&amp;quot; Even though this design
looks like a &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;proper object&lt;/a&gt;,
it doesn&amp;#39;t really follow the true spirit of object-orientation.
That&amp;#39;s why it&amp;#39;s not as maintainable as it should be, for two reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Its scope is too broad&lt;/strong&gt;.
Since the client is an abstraction of a server, it inevitably has to
represent the server&amp;#39;s &lt;em&gt;entire&lt;/em&gt; functionality. When the functionality
is rather limited there is no issue. Take
&lt;a href=&quot;https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/client/HttpClient.html&quot;&gt;&lt;code&gt;HttpClient&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;https://hc.apache.org/&quot;&gt;Apache HttpComponents&lt;/a&gt; as an example.
However, when the server is more complex, the size of the client also
grows. There are over 160 (!) methods in &lt;code&gt;AmazonS3Client&lt;/code&gt; at the time of writing, while
it started with only a few dozen just a few &lt;del&gt;years&lt;/del&gt; hundred versions ago.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It is data focused&lt;/strong&gt;.
The very idea of a client-server relationship is about transferring
data. Take the HTTP RESTful API of the AWS S3 service as
an example. There are entities on the AWS side: buckets, objects, versions,
access control policies, etc., and the server turns them into JSON/XML
data. Then the &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;data&lt;/a&gt;
comes to us and the client on our side deals
with JSON or XML. It inevitably remains &lt;em&gt;data&lt;/em&gt; for us and never really becomes
buckets, objects, or versions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The consequences depend on the situation, but these are the most probable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Procedural code&lt;/strong&gt;.
Since the client returns the data, the code that works with that
data will &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;most likely&lt;/a&gt;
be procedural. Look at the results AWS SDK methods
return, they all look like
&lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;objects&lt;/a&gt;, but in reality they are just
data structures:
&lt;a href=&quot;http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/model/S3Object.html&quot;&gt;&lt;code&gt;S3Object&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/model/ObjectMetadata.html&quot;&gt;&lt;code&gt;ObjectMetadata&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/model/BucketPolicy.html&quot;&gt;&lt;code&gt;BucketPolicy&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/model/PutObjectResult.html&quot;&gt;&lt;code&gt;PutObjectResult&lt;/code&gt;&lt;/a&gt;, etc.
They are all &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;Data Transfer Objects&lt;/a&gt;
with only
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters and setters&lt;/a&gt;
inside.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Duplicated code&lt;/strong&gt;.
If we actually decide to stay object-oriented we will have to
turn the data the client returns to us into
&lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;objects&lt;/a&gt;. Most likely this
will lead to code duplication in multiple projects. I had that too,
when I started to work with S3 SDK. Very soon I realized that in order
to avoid duplication I&amp;#39;d better create a library that does the job
of converting S3 SDK data into objects: &lt;a href=&quot;https://github.com/jcabi/jcabi-s3&quot;&gt;jcabi-s3&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Difficulties with testing&lt;/strong&gt;.
Since the client is in most cases a rather big class/interface, mocking
it in unit tests or creating its &lt;a href=&quot;/2014/09/23/built-in-fake-objects.html&quot;&gt;test doubles/fakes&lt;/a&gt;
is a rather complex task.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Static problems&lt;/strong&gt;.
Client classes, even though their methods are not static, look very similar to
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;utility classes&lt;/a&gt;,
which are well known for being
&lt;a href=&quot;/2014/09/10/anti-patterns-in-oop.html&quot;&gt;anti-OOP&lt;/a&gt;. The issues we have
with utility classes are almost the same as those we have with &amp;quot;client&amp;quot; classes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extendability issues&lt;/strong&gt;.
Needless to say, it&amp;#39;s almost impossible to
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;decorate&lt;/a&gt; a client
object when it has 160+ methods and keeps on growing. The only possible
way to add new functionality to it is by creating new methods. Eventually
we get a &lt;a href=&quot;https://en.wikipedia.org/wiki/God_object&quot;&gt;monster class&lt;/a&gt;
that can&amp;#39;t be re-used anyhow without modification.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is the alternative?&lt;/p&gt;

&lt;p&gt;The right design would be to replace &amp;quot;clients&amp;quot; with client-side objects
that represent &lt;em&gt;entities&lt;/em&gt; of the server side, not the entire server. For example, with the S3 SDK,
that could be &lt;code&gt;Bucket&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Version&lt;/code&gt;, &lt;code&gt;Policy&lt;/code&gt;, etc. Each of them
exposes the functionality of real
&lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html&quot;&gt;buckets&lt;/a&gt;,
&lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html&quot;&gt;objects&lt;/a&gt; and
&lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectVersioning.html&quot;&gt;versions&lt;/a&gt;,
which the AWS S3 can expose.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;The right design would be to replace clients with client-side objects that represent entities of the server side.&lt;/aside&gt;

&lt;p&gt;Of course, we will need a high-level object that somehow represents the
entire API/server, but it should be small. For example, in the S3 SDK example
it could be called &lt;code&gt;Region&lt;/code&gt;, which means the entire
&lt;a href=&quot;http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region&quot;&gt;AWS region&lt;/a&gt; with buckets.
Then we could retrieve a bucket from it and won&amp;#39;t need a region anymore. Then,
to list objects in the bucket we ask the bucket to do it for us. No need to communicate
with the entire &amp;quot;server object&amp;quot; every time, even though technically such a communication
happens, of course.&lt;/p&gt;

&lt;p&gt;To summarize, the trouble is not exactly in the name suffix, but in the very idea
of representing the entire server on the client side rather than its &lt;em&gt;entities&lt;/em&gt;. Such
an abstraction is 1) too big and 2) very data driven.&lt;/p&gt;

&lt;p&gt;BTW, check out some of the &lt;a href=&quot;http://www.jcabi.com&quot;&gt;JCabi libraries&lt;/a&gt; (Java) for examples
of object-oriented clients without &amp;quot;client&amp;quot; objects:
&lt;a href=&quot;http://github.jcabi.com&quot;&gt;jcabi-github&lt;/a&gt;,
&lt;a href=&quot;http://dynamo.jcabi.com&quot;&gt;jcabi-dynamo&lt;/a&gt;,
&lt;a href=&quot;http://s3.jcabi.com&quot;&gt;jcabi-s3&lt;/a&gt;,
or &lt;a href=&quot;http://simpledb.jcabi.com&quot;&gt;jcabi-simpledb&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Some time ago we were talking
about &amp;quot;-ER&amp;quot; suffixes in object and class
names. We agreed that they were evil and must be avoided if we want
our code to be truly object-oriented and our objects to be objects instead
of collections of procedures. Now I&amp;#39;m ready to introduce a new evil suffix:
Client.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/09/dont-tempt-me.jpg" /></entry><entry><title type="html">ReHTTP.net—HTTP Repeater</title><link href="http://www.yegor256.com/2017/09/05/rehttp-http-repeater.html" rel="alternate" type="text/html" title="ReHTTP.net&amp;mdash;HTTP Repeater" /><published>2017-09-05T00:00:00+00:00</published><updated>2017-09-05T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/09/05/rehttp-http-repeater</id><content type="html" xml:base="http://www.yegor256.com/2017/09/05/rehttp-http-repeater.html">&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.rehttp.net&#39;&gt;&lt;img src=&#39;http://www.rehttp.net/images/logo.svg&#39; style=&#39;width:92px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I faced a problem a few weeks ago with
&lt;a href=&quot;http://www.0pdd.com&quot;&gt;0pdd.com&lt;/a&gt;, one of my web apps that is
supposed to receive HTTP requests (known as
&lt;a href=&quot;https://developer.github.com/webhooks/&quot;&gt;webhooks&lt;/a&gt;) from GitHub:
sometimes the app is down, GitHub gets an HTTP error, and never
sends the request again. The request simply gets lost. There is absolutely
no way to receive it again once the app is back up. I realized that I needed
a &lt;a href=&quot;https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/&quot;&gt;service mesh&lt;/a&gt;
between GitHub and my web app, to accept HTTP
requests and repeat them later if they can&amp;#39;t be delivered immediately.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I created &lt;a href=&quot;http://www.rehttp.net&quot;&gt;rehttp.net&lt;/a&gt; to do exactly that.&lt;/p&gt;

&lt;p&gt;See, the URL I&amp;#39;ve been giving to GitHub is this one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;http://www.0pdd.com/hook/github&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From now on a new URL has to be used:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;http://p.rehttp.net/http://www.0pdd.com/hook/github&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks very similar, but starts with &lt;code&gt;http://p.rehttp.net&lt;/code&gt;. GitHub sends
all webhook PUT/POST requests to the ReHTTP server, which stores
them in a temporary database (I&amp;#39;m using AWS DynamoDB).&lt;/p&gt;

&lt;p&gt;ReHTTP attempts to deliver them immediately. If something goes wrong and
the server HTTP response code is not in the 200-299 range, the next attempt is made
in about an hour. Then it retries every hour for about a day. If all
attempts fail, it abandons the request and that&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;What is interesting is that now I can see a summary of my API
&lt;a href=&quot;http://www.rehttp.net/i?u=http%3A%2F%2Fwww.0pdd.com%2Fhook%2Fgithub&quot;&gt;here&lt;/a&gt;.
I see how many requests were processed successfully over the last 24 hours
and how many of them failed. Also, I have this cute button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.rehttp.net/b?u=http%3A%2F%2Fwww.0pdd.com%2Fhook%2Fgithub&quot;/&gt;&lt;/p&gt;

&lt;p&gt;And I have a URL for checking the status of the entire API:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;http://www.rehttp.net/s?u=http%3A%2F%2Fwww.0pdd.com%2Fhook%2Fgithub&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I gave this URL to &lt;a href=&quot;https://www.statuscake.com/&quot;&gt;StatusCake&lt;/a&gt; to
ping it every five minutes. If and when
something goes wrong, StatusCake will email me and drop me a message
on the phone.&lt;/p&gt;

&lt;p&gt;ReHTTP is absolutely free. It is written in Java and the code is open.
See its &lt;a href=&quot;https://github.com/yegor256/rehttp&quot;&gt;GitHub repository&lt;/a&gt;
and contribute if you find any bugs or just want to add a feature.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="pet" /><summary type="html">I faced a problem a few weeks ago with
0pdd.com, one of my web apps that is
supposed to receive HTTP requests (known as
webhooks) from GitHub:
sometimes the app is down, GitHub gets an HTTP error, and never
sends the request again. The request simply gets lost. There is absolutely
no way to receive it again once the app is back up. I realized that I needed
a service mesh
between GitHub and my web app, to accept HTTP
requests and repeat them later if they can&amp;#39;t be delivered immediately.</summary></entry><entry><title type="html">XCOP — XML Style Checker</title><link href="http://www.yegor256.com/2017/08/29/xcop.html" rel="alternate" type="text/html" title="XCOP &amp;mdash; XML Style Checker" /><published>2017-08-29T00:00:00+00:00</published><updated>2017-08-29T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/08/29/xcop</id><content type="html" xml:base="http://www.yegor256.com/2017/08/29/xcop.html">&lt;p&gt;One of the biggest advantages of XML versus
&lt;a href=&quot;/2015/11/16/json-vs-xml.html&quot;&gt;many other&lt;/a&gt; data formats is that
it is human-readable. Well, to some extent, you may say. Indeed, a badly
formatted XML document may be rather difficult to digest. I&amp;#39;m not talking about
XML &lt;a href=&quot;https://en.wikipedia.org/wiki/Well-formed_document&quot;&gt;validity&lt;/a&gt;
now, but about its formatting style. Just like we format our
Java/Ruby/Python nicely and then check their &amp;quot;prettiness&amp;quot; with static analyzers,
we can also check our XML documents. Six years ago I asked the StackOverflow community
for such a tool, but unfortunately
&lt;a href=&quot;https://stackoverflow.com/questions/6091873/&quot;&gt;my question&lt;/a&gt;
was down-voted and closed
(you will need 10K+ reputation to see it).
Last week I finally decided to create a tool myself and I called it
&lt;a href=&quot;https://github.com/yegor256/xcop&quot;&gt;xcop&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;L&amp;#39;appartement (1996) by Gilles Mimouni&#39; src=&#39;/images/2017/08/lappartement.jpg&#39; longdesc=&#39;#470ac825&#39;/&gt;&lt;figcaption id=&#39;470ac825&#39;&gt;L&amp;#39;appartement (1996) by Gilles Mimouni&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#39;s a very simple command line
&lt;a href=&quot;https://rubygems.org/gems/xcop&quot;&gt;Ruby gem&lt;/a&gt;.
First, you install it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;$ gem install xcop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then you ask it to check your XML file, say &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;$ xcop pom.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the file is not &amp;quot;pretty,&amp;quot; &lt;code&gt;xcop&lt;/code&gt; will complain and
show what&amp;#39;s wrong. You can ask &lt;code&gt;xcop&lt;/code&gt; to fix the file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;$ xcop --fix pom.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Moreover, in most cases you may need your XML files to include a license
in their headers, especially if it&amp;#39;s open source. To enforce that, just
point &lt;code&gt;xcop&lt;/code&gt; to the file with the license:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;$ xcop --license&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;LICENSE.txt pom.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I believe it&amp;#39;s good practice to use &lt;code&gt;xcop&lt;/code&gt; together with
Checkstyle (for Java files), Rubocop (for Ruby files), and other static
analyzers, to ensure that your XML files always look pretty.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yegor256/xcop&quot;&gt;Read&lt;/a&gt; how you can integrate &lt;code&gt;xcop&lt;/code&gt; with
&lt;a href=&quot;https://github.com/ruby/rake&quot;&gt;Rake&lt;/a&gt;,
&lt;a href=&quot;https://maven.apache.org/&quot;&gt;Maven&lt;/a&gt;, and other builders.
I will appreciate it if you contribute your own integrations too.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="xml" /><summary type="html">One of the biggest advantages of XML versus
many other data formats is that
it is human-readable. Well, to some extent, you may say. Indeed, a badly
formatted XML document may be rather difficult to digest. I&amp;#39;m not talking about
XML validity
now, but about its formatting style. Just like we format our
Java/Ruby/Python nicely and then check their &amp;quot;prettiness&amp;quot; with static analyzers,
we can also check our XML documents. Six years ago I asked the StackOverflow community
for such a tool, but unfortunately
my question
was down-voted and closed
(you will need 10K+ reputation to see it).
Last week I finally decided to create a tool myself and I called it
xcop.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/08/lappartement.jpg" /></entry></feed>
