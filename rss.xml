<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014-2015</copyright>
    <lastBuildDate>Thu, 28 May 2015 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>There Can Be Only One Primary Constructor</title>
      <link>http://www.yegor256.com/2015/05/28/one-primary-constructor.html</link>
      <description>&lt;p&gt;I suggest classifying class constructors in OOP as &lt;strong&gt;primary&lt;/strong&gt;
and &lt;strong&gt;secondary&lt;/strong&gt;. A primary constructor is the one that constructs
an object and encapsulates other objects inside it. A secondary
one is simply a preparation step before calling a primary constructor and is not
really a constructor but rather an introductory layer in front of a real
constructing mechanism.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/05/the-matrix-agent-smith.jpg' style='width:600px;' alt='The Matrix (1999) by The Wachowski Brothers'/&gt;&lt;figcaption&gt;The Matrix (1999) by The Wachowski Brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is what I mean:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// secondary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// secondary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;USD&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// primary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// methods here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are three constructors in the class &amp;mdash; only one is
&lt;em&gt;primary&lt;/em&gt; and the other two are &lt;em&gt;secondary&lt;/em&gt;. My definition of a
secondary constructor is simple: It doesn&amp;#39;t do anything besides
calling a primary constructor, through &lt;code&gt;this(..)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My point here is that a
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;properly designed class&lt;/a&gt;
must have only one primary constructor, and it should be declared
after all secondary ones. Why? There is only one reason
behind this rule: It helps eliminate code duplication.&lt;/p&gt;

&lt;p&gt;Without such a rule, we may have this design for our class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// primary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;USD&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// primary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;USD&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// primary&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// methods here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;#39;s not a lot of code here, but the duplication is massive and ugly;
I hope you see it for yourself.&lt;/p&gt;

&lt;p&gt;By strictly following this suggested rule, all classes will have
a single entry point (point of construction), which is a primary
constructor, and it will always be easy to find because it stays
below all secondary constructors.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/28/one-primary-constructor.html</guid>
      <dc:date>2015-05-28T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>A Few Thoughts on Unit Test Scaffolding</title>
      <link>http://www.yegor256.com/2015/05/25/unit-test-scaffolding.html</link>
      <description>&lt;p&gt;When I start to repeat myself in unit test methods by creating
the same objects and preparing the data to run the test,
I feel disapointed in my design. Long test methods with a lot of code
duplication just don&amp;#39;t look right. To simplify and shorten them,
there are basically two options, at least in Java: 1) private properties
initialized through &lt;code&gt;@Before&lt;/code&gt; and &lt;code&gt;@BeforeClass&lt;/code&gt;, and 2) private static
methods. They both look anti-OOP to me, and I think there is an
alternative. Let me explain.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/05/leon-the-professional.jpg' style='width:600px;' alt='Léon: The Professional by Luc Besson'/&gt;&lt;figcaption&gt;Léon: The Professional by Luc Besson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;JUnit officially suggests a
&lt;a href=&quot;http://junit.org/faq.html#atests_2&quot;&gt;test fixture&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetricsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTempDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DiscFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;first.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;second.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Goodbye!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@After&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculatesTotalSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countsWordsInFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think it&amp;#39;s obvious what this test is doing. First, in &lt;code&gt;prepare()&lt;/code&gt;,
it creates a &amp;quot;test fixture&amp;quot; of type &lt;code&gt;Folder&lt;/code&gt;. That is used in all three
tests as an argument for the &lt;code&gt;Metrics&lt;/code&gt; constructor. The real class being
tested here is &lt;code&gt;Metrics&lt;/code&gt; while &lt;code&gt;this.folder&lt;/code&gt; is something we need
in order to test it.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s wrong with this test? There is one serious issue:
&lt;strong&gt;coupling&lt;/strong&gt; between test methods. Test methods (and all tests in general)
must be perfectly isolated from each other. This means that changing
one test must not affect any others. In this example, that is not the case.
When I want to change the &lt;code&gt;countsWords()&lt;/code&gt; test, I have to change the internals
of &lt;code&gt;before()&lt;/code&gt;, which will affect the other method in the test &amp;quot;class&amp;quot;.&lt;/p&gt;

&lt;p&gt;With all due respect to JUnit, the idea of creating test fixtures in
&lt;code&gt;@Before&lt;/code&gt; and &lt;code&gt;@After&lt;/code&gt; is wrong, mostly because it encourages
developers to couple test methods.&lt;/p&gt;

&lt;p&gt;Here is how we can improve our test and isolate test methods:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetricsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculatesTotalSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTempDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test-1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MetricsTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;first.txt:Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;second.txt:Goodbye!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countsWordsInFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTempDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test-2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MetricsTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;alpha.txt:Three words here&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;beta.txt:two words&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;gamma.txt:one!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DiscFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Does it look better now? We&amp;#39;re not there yet, but now our test
methods are perfectly isolated. If I want to change one of them,
I&amp;#39;m not going to affect the others because I pass all configuration
parameters to a private static utility (!) method &lt;code&gt;folder()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A utility method, huh? Yes,
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;it smells&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main issue with this design, even though it is way better than
the previous one, is that it doesn&amp;#39;t prevent code duplication between
test &amp;quot;classes&amp;quot;. If I need a similar test fixture of type &lt;code&gt;Folder&lt;/code&gt; in
another test case, I will have to move this static method there. Or
even worse, I will have to create a utility class.
Yes, there is &lt;a href=&quot;/2015/02/20/utility-classes-vs-functional-programming.html&quot;&gt;nothing worse&lt;/a&gt;
in object-oriented programming than utility classes.&lt;/p&gt;

&lt;p&gt;A much better design would be to use
&lt;a href=&quot;/2014/09/23/built-in-fake-objects.html&quot;&gt;&amp;quot;fake&amp;quot; objects&lt;/a&gt;
instead of private static utilities. Here is how. First, we create a fake class
and place it into &lt;code&gt;src/main/java&lt;/code&gt;. This class can be used in tests
and also in production code, if necessary (&lt;code&gt;Fk&lt;/code&gt; for &amp;quot;fake&amp;quot;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FkFolder&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Closeable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTempDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test-1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DiscFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how our test will look now:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetricsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculatesTotalSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;first.txt:Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;second.txt:Goodbye!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countsWordsInFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;alpha.txt:Three words here&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;beta.txt:two words&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;gamma.txt:one!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FkFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What do you think? Isn&amp;#39;t it better than what JUnit offers?
Isn&amp;#39;t it more reusable and extendable than utility methods?&lt;/p&gt;

&lt;p&gt;To summarize, I believe scaffolding in unit testing must be
done through
&lt;a href=&quot;/2014/09/23/built-in-fake-objects.html&quot;&gt;fake objects&lt;/a&gt;
that are shipped together with production code.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 25 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/25/unit-test-scaffolding.html</guid>
      <dc:date>2015-05-25T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Avoid a Software Outsourcing Disaster</title>
      <link>http://www.yegor256.com/2015/05/21/avoid-software-outsourcing-disaster.html</link>
      <description>&lt;p&gt;Software outsourcing is a disaster waiting to happen; we all know that. First, you find
a company that promises you everything you could wish for in a product &amp;mdash;
on-time and in-budget delivery, highest quality, beautiful user interface,
cutting-edge technologies, and hassle-free lifetime support. So you send the
first payment and your journey starts. The team hardly understands your needs,
the quality is terrible, all your time and budget expectations
are severely violated, and the level of frustration is skyrocketing. And the
&amp;quot;best&amp;quot; part is that you can&amp;#39;t get away or else all the money you&amp;#39;ve spent so far
will go down the drain and you will have to start from scratch. You have to
stay &amp;quot;married&amp;quot; to this team because you can&amp;#39;t afford a &amp;quot;divorce&amp;quot;. Is there
a way to do software outsourcing right?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/05/evil-cult.jpg' style='width:600px;' alt='The Evil Cult (1993) by Jing Wong'/&gt;&lt;figcaption&gt;The Evil Cult (1993) by Jing Wong&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Yes, it is possible to do it right and truly hassle-free, but you have
to be ready to twist your management philosophy.&lt;/p&gt;

&lt;p&gt;The basic fundamental principle here is that 1) you should openly and frequently
communicate your &lt;strong&gt;concerns&lt;/strong&gt; with the outsourcing team, and 2) they should
openly and frequently communicate &lt;strong&gt;risks and issues&lt;/strong&gt; with you. These are
two major success factors in software outsourcing that are very often neglected.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1937021033/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1937021033&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=S5KTMPGVOXPSCJN2'&gt;&lt;img src='http://www.yegor256.com/images/2015/05/wei-liao-zi-book.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I learned this principle from &lt;a href=&quot;https://en.wikipedia.org/wiki/Wei_Liaozi&quot;&gt;Wei Liao Zi&lt;/a&gt;.
He said, according to &lt;a href=&quot;http://www.amazon.com/gp/product/1937021033/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1937021033&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=S5KTMPGVOXPSCJN2&quot;&gt;Military Strategy Classics of Ancient China&lt;/a&gt;,
p.239:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When information from below reaches up high, and the concerns
of up high penetrate to below, this is the most ideal situation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me demonstrate a few practical examples of software outsourcing
disasters and explain how they can be avoided if you follow said
2,500-year-old principle.&lt;/p&gt;

&lt;h2 id=&quot;it-takes-forever-and-i&amp;#39;m-over-budget!&quot;&gt;It Takes Forever and I&amp;#39;m Over Budget!&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s always 95 percent ready, and you always have something that is not implemented
or is broken. They&amp;#39;ve done a lot of work, you&amp;#39;ve paid a lot of money,
but a market-ready product is not yet there. It takes week after week
and month after month; the backlog always has something, and you simply
can&amp;#39;t finish this. You&amp;#39;re starting to see this project in your nightmares,
and Prozac doesn&amp;#39;t help anymore. How does this sound? Familiar?&lt;/p&gt;

&lt;p&gt;I hope you do realize that no matter what kind of contract you signed with
your software outsourcing partner, how many schedules you&amp;#39;ve baselined,
or how many promises were made, they want to keep you as a client
forever. Well, for as long as you have something in your bank account.&lt;/p&gt;

&lt;p&gt;You want your business to succeed and flourish, right? They want the same for their
business. Your success means a product that is finished and launched to
end users. Their success means a neverending process of writing software
for you. These two goals have very little in common. I would even say
they contradict each other &amp;mdash; when you succeed, they fail.&lt;/p&gt;

&lt;p&gt;Of course, they will tell you they want to finish this product for
you and get new contracts in the future. They will say their primary
motiviation is to make you happy and obtain a good reference. They
will assure you that customer satisfaction is more important than money.
However, I&amp;#39;m suggesting you be strong enough to face the reality &amp;mdash;
it&amp;#39;s all lies.&lt;/p&gt;

&lt;p&gt;The majority of software outsourcing projects fail.
The vast majority (see the latest &lt;a href=&quot;http://www.csus.edu/indiv/v/velianitis/161/ChaosReport.pdf&quot;&gt;CHAOS report&lt;/a&gt;).
Software developers realize this better than you,
mostly because they see how it happens every day.
And your project is not an exception. Thus, let&amp;#39;s forget about these
beautiful promises and focus on the ugly reality &amp;mdash; you&amp;#39;re on your own.&lt;/p&gt;

&lt;p&gt;Keeping in mind the principle I mentioned above, here is my recommendation:
Make sure the team understands 1) your real time and scope constraints
and 2) the consequences of their violation. This is about the first
part of the principle &amp;mdash; &lt;em&gt;you should openly and frequently communicate
your concerns&lt;/em&gt;. What usually happens is that the outsourcing team remains
unaware of a real business situation and only hears &amp;quot;I need this ASAP&amp;quot; every
second day.&lt;/p&gt;

&lt;p&gt;&amp;quot;ASAP&amp;quot; is not a deadline. Moreover, it&amp;#39;s a very de-motivating subsitute
for a realistic milestone. When the team doesn&amp;#39;t know when exactly you need
the product, what exactly has to be ready by that date, and &lt;em&gt;why&lt;/em&gt;,
it starts to work against you. The emphasis here is on &amp;quot;why&amp;quot;. For most
business owners, it&amp;#39;s difficult to answer this question.&lt;/p&gt;

&lt;p&gt;Why do you need the product to be ready by the first of June?
Just because you are sick of waiting? This is not a reasonable
answer. You&amp;#39;re sick of it but you still have money in your bank
account. They will keep invoicing you, and they won&amp;#39;t respect
you. They won&amp;#39;t treat you as a strong and goal-oriented
business person. You either aren&amp;#39;t smart enough to identify your
time constraints or you&amp;#39;re hiding them from the team. In either case,
they won&amp;#39;t appreciate that behavior.&lt;/p&gt;

&lt;p&gt;Here is how a properly defined time and cost constraint may sound:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Features A, B, and D must be ready before the first of June,
because our marketing campaign starts on the fifth of June. If
we don&amp;#39;t have them ready, I will lose $25,000 in marketing
costs. If this happens, I will have to cut the monthly development
budget in half.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the software outsourcing company, your partner, hears this definition
of a deadline, it becomes a real partner of yours. Now its goals
are aligned with yours. If the milestone is missed, you will suffer
and they understand exactly how. Besides that, they see how your
suffering will be transferred to their shoulders too.&lt;/p&gt;

&lt;p&gt;Stop asking them to finish everything ASAP. Stop calling them twice a day
and yelling for an hour about their poor performance. Stop using language
in business emails. Stop making all this noise. It doesn&amp;#39;t help you anyway.
Moreover, it only makes the situation worse, because you&amp;#39;re losing respect
and they&amp;#39;re starting to treat you like a cash cow &amp;mdash; a rather stupid
and emotional one.&lt;/p&gt;

&lt;p&gt;Instead, do your homework and define your realistic milestones. Think
about your real time, scope, and budget limitations. Write them down in
very short and concise sentences. Make sure your constraints are realistic
and their descriptions answer the main question &amp;mdash; why.&lt;/p&gt;

&lt;p&gt;Why do you need this by the first of June? Why do you want to spend less than
$50,000? Why do you need all five features to be in version 1.0? Why
do you want your web app to be ready to handle 1K concurrent sessions?
Why do you need a mobile app in the first release?&lt;/p&gt;

&lt;p&gt;Answer for yourself and make sure your answers are understood by the
outsourcing company. Don&amp;#39;t hide this information.&lt;/p&gt;

&lt;h2 id=&quot;the-product-is-so-clumsy&quot;&gt;The Product Is So Clumsy&lt;/h2&gt;

&lt;p&gt;You want your web app to look like Pinterest, react fast, be easy to use,
and make you proud when you show it to your friends. But the product
they created for you is clumsy, slow, and to be honest, ugly. You&amp;#39;re
asking them to do something about it, and they keep giving you promises.
The project keeps consuming your money and its budget grows, but the look and feel
is not getting any better. It is far from Pinterest, very far. The frustration
is growing, and you don&amp;#39;t see any reasonable way out of this. The only
advice you&amp;#39;re getting from your friends is to re-do it all from scratch with
a new web development team. How does this sound? I bet it&amp;#39;s familiar.&lt;/p&gt;

&lt;p&gt;I believe the root cause of this dead-end situation is a fear
of conflict. At early stages in the project, you try to do everything you can
to keep a good relationship with the outsourcing company and not to offend anyone.
You don&amp;#39;t want to control anyone&amp;#39;s work because they may take it as an insult.
You don&amp;#39;t want to express your quality concerns because they may
de-motivate the team. You just hope they will improve the product in the future,
but when the future comes, it&amp;#39;s too late.&lt;/p&gt;

&lt;p&gt;Again, keeping the age-old principle in mind, I would recommend that from the first
day of the project, you establish a routine procedure of checking their
results and expressing your concerns. In our projects at
&lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, we ask our customers to be present
in GitHub, review our releases frequently, and report any inconsistencies
found as GitHub issues. We encourage project sponsors to be as pessimistic
and negative about our quality from the beginning of the project. We realize
this is how we can minimize the risk of a &amp;quot;piled-up frustration&amp;quot;.&lt;/p&gt;

&lt;p&gt;Try to do the same in your project that is outsourced to an offshore developer.
Don&amp;#39;t be afraid to offend them. Iterative and incremental criticism is a much
healthier approach than feedback-free peace that ends in war. Find a way
to keep your outsourcing team aware of your opinion about its results
on a regular basis. Don&amp;#39;t try to be nice to save a project. You&amp;#39;re doing
yourself a bad favor. Instead, be open about your concerns. Remember
the first part of the principle above &amp;mdash; you should openly and frequently
communicate your concerns. This is how you stabilize the project and minimize
risks.&lt;/p&gt;

&lt;p&gt;Also, it&amp;#39;s a very good practice, from time to time, to invite
technical reviewers to generate independent opinions about the product
under development. Read my other post about this subject:
&lt;a href=&quot;/2014/12/18/independent-technical-reviews.html&quot;&gt;You Do Need Independent Technical Reviews!&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;i-can&amp;#39;t-rely-on-their-promises&quot;&gt;I Can&amp;#39;t Rely on Their Promises&lt;/h2&gt;

&lt;p&gt;You call them, make plans, declare milestones, define features, set priorities,
agree about quality, and then hang up. In a few days, you realize it was
a total waste of time. They don&amp;#39;t keep their promises because there is
always something new happening. Someone is sick, some server is broken,
some piece of software appears to be malfunctional, some code is no
longer working, etc. You call again, express your frustration, make
strong accusations, restructure milestones, redefine features, reset
priorities, and in a few days start over. Been there, done that? Sound familiar?&lt;/p&gt;

&lt;p&gt;In my experience, this unpredictability and unreliability of a software
outsourcing team is in most cases caused by a project sponsor himself or herself.
This happens when you don&amp;#39;t listen to them or they are afraid to tell
you the truth, which is usually the same thing. Some call this
&amp;quot;fear-driven development&amp;quot;. The team is afraid of you, and in order to
keep you on board as a paying customer, has to lie to you.&lt;/p&gt;

&lt;p&gt;Basically, they are telling you what you want to hear &amp;mdash;
that the end of the project is close, that currently open bugs are
easy to fix, that performance problems are minor, that the quality
of the architecture is outstanding, and that the team is very motivated to work with you.
When you hear any of the above, question yourself &amp;mdash; Do you
encourage them to tell the truth? Do you reward them for bringing you
bad but honest news?&lt;/p&gt;

&lt;p&gt;Once again citing the fundamental principle mentioned above, I would recommend
you make sure your reasoning for awards and punishments is transparent to
your software outsourcing partner and is based on project objectives,
not your personal emotions.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;one of my previous posts&lt;/a&gt;,
I wrote that a happy customer is a false objective for a software development team.
A customer who is promoting this objective is a terrible customer who
is doomed to fail the project. If you reward your team when they
make you happy with good news, you are training them to lie to you. If you
expect them to deliver good news, you are discouraging them from telling
you the truth and from doing what is good for the project, not for you personally.&lt;/p&gt;

&lt;p&gt;You&amp;#39;re discouraging them from arguing with you. In other words, you&amp;#39;re
throttling the channel of information that is supposed to come to you
from the people working for you. You&amp;#39;re isolating yourself, and the team
is starting to work against you, not with you.&lt;/p&gt;

&lt;p&gt;Here is a practical recommendation. First, regularly announce your reasonable
objectives and constraints, like I explained above. Make sure the team
understands your business plans and the &amp;quot;why&amp;quot; reasoning behind them. Second,
regularly ask team members about risks and issues. Ask them why they think project
objectives may be compromised. Even better, let them document risks
regularly and report them back to you. Reward them for being honest in
this list of risks.&lt;/p&gt;

&lt;p&gt;Try it and you will be surprised by how many interesting things that risk list
will contain.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 21 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/21/avoid-software-outsourcing-disaster.html</guid>
      <dc:date>2015-05-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Cookie-Based Authentication Works in the Takes Framework</title>
      <link>http://www.yegor256.com/2015/05/18/cookie-based-authentication.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.takes.org'&gt;&lt;img src='http://www.takes.org/logo.png' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;When you enter your email and password into the Facebook login page,
you get into your account. Then, wherever you go in the site,
you always see your photo at the top right corner of the page. Facebook
remembers you and doesn&amp;#39;t ask for the password again and again. This works
thanks to &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_cookie&quot;&gt;HTTP cookies&lt;/a&gt;
and is called &lt;strong&gt;cookie-based authentication&lt;/strong&gt;. Even though this mechanism
often causes some security problems, it is very popular and simple.
Here is how &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes&lt;/a&gt; makes it possible in a few lines of code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, let&amp;#39;s see how it works. Moreover, let&amp;#39;s see how I believe it should work.&lt;/p&gt;

&lt;p&gt;Step one: The user enters an email and password and clicks &amp;quot;submit&amp;quot;. The server
receives a POST request with this information inside:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;POST / HTTP/1.1
Host: www.facebook.com
Content-Type: application/x-www-form-urlencoded

email=me@yegor256.com&amp;amp;password=itisasecret&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The server matches the provided information with its records and decides what to do.
If the information is invalid, it returns the same login page, asking you to
enter it all again. If the information is valid, the server returns something
like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HTTP/1.1 303 See Other
Location: www.facebook.com
Set-Cookie: user=me@yegor256.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since the response status code is 303, the browser goes to the page
specified in the &lt;code&gt;Location&lt;/code&gt; header and opens the front page of the site. This
is what it sends to the server:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET / HTTP/1.1
Host: www.facebook.com
Cookie: user=me@yegor256.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The server gets my email from the &lt;code&gt;Cookie&lt;/code&gt;
header and understands that it&amp;#39;s me again! No need to ask for the
password once more. The server trusts the informatiom from the cookie.
That&amp;#39;s it. That&amp;#39;s what cookie-based authentication is all about.&lt;/p&gt;

&lt;h2 id=&quot;wait-...-what-about-security?&quot;&gt;Wait ... What About Security?&lt;/h2&gt;

&lt;p&gt;Right, what about security? If the server trusts any browser request with
a user email in the &lt;code&gt;Cookie&lt;/code&gt; header, anyone would be able to send my email
from another place and get access to my account.&lt;/p&gt;

&lt;p&gt;The first step to prevent this is to encrypt the email with a secret
encryption key, known only to the server. Nobody except the server itself
will be able to encrypt it the same way the server needs to decrypt it.
The response would look like this, using an example of encryption
by &lt;a href=&quot;https://en.wikipedia.org/wiki/XOR_cipher&quot;&gt;XOR cipher&lt;/a&gt; with &lt;code&gt;bamboo&lt;/code&gt; as a secret key:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HTTP/1.1 303 See Other
Location: www.facebook.com
Set-Cookie: user=b1ccafd92c568515100f5c4d104671003cfa39&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is not the best encryption mechanism, though; for proper encryption, it&amp;#39;s better
to use something stronger like &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_Encryption_Standard&quot;&gt;DES&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This all sounds good, but what if someone hijacks the traffic between the server and the
browser and gets a hold of a properly encrypted email cookie? In this case,
the thief would be able to use the same cookie for authentication even without
knowing its content. The server would trust the information and let the
person into my account. This type of attack is called
&lt;a href=&quot;http://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;man-in-the-middle&lt;/a&gt; (MITM).
To prevent this from happening, we should use HTTPS and inform the browser
that the cookie is sensitive and should never be returned to the server without
SSL encryption. That&amp;#39;s done by an extra flag in the &lt;code&gt;Set-Cookie&lt;/code&gt; header:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HTTP/1.1 303 See Other
Location: www.facebook.com
Set-Cookie: user=me@yegor256.com; Secure&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is yet another type of attack associated with cookie-based authentication,
based on a browser&amp;#39;s ability to expose all cookies associated with a web page
to JavaScript executed inside it. An attacker may inject some malicious
JavaScript code into the page (Don&amp;#39;t ask me how ... this will happen only
if your entire HTML rendering is done wrong), and this code will gain access
to the cookie. Then, the code will send the cookie somewhere else so
the attacker can collect it. This type of attack is called
&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;cross-site scripting&lt;/a&gt; (XSS).
To prevent this, there is another flag for the &lt;code&gt;Set-Cookie&lt;/code&gt; header, called &lt;code&gt;HttpOnly&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HTTP/1.1 303 See Other
Location: www.facebook.com
Set-Cookie: user=me@yegor256.com; Secure; HttpOnly&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The presence of this flag will tell the browser that this particular cookie can
be transferred back to the server only through HTTP requests. JavaScript won&amp;#39;t
have access to it.&lt;/p&gt;

&lt;h2 id=&quot;how-it&amp;#39;s-done-in-takes&quot;&gt;How It&amp;#39;s Done in Takes&lt;/h2&gt;

&lt;p&gt;Here is how this cookie-based authentication mechanism is designed in the
&lt;a href=&quot;http://www.takes.org&quot;&gt;Takes&lt;/a&gt; framework. The entire framework consists of
&lt;em&gt;takes&lt;/em&gt;, which receive requests and produce responses
(&lt;a href=&quot;/2015/03/22/takes-java-web-framework.html&quot;&gt;this article&lt;/a&gt;
explains the framework in more detail). When the request comes in,
we should find the authentication cookie in the &lt;code&gt;Cookie&lt;/code&gt; header and translate
it to the user credentials. When the response goes out, we should add the
&lt;code&gt;Set-Cookie&lt;/code&gt; header to it with the encrypted user credentials. That&amp;#39;s it. Just
these two steps.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say we have an account page that is supposed to show the current user&amp;#39;s
balance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkAccount&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Balances&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get it from request&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsHTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;html&amp;gt;Your balance is %s&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;balances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Right after the &lt;code&gt;request&lt;/code&gt; comes in, we should retrieve the identity of
the user, encoded inside an authenticating cookie. To make this mechanism
reusable, we have the &lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/TkAuth.html&quot;&gt;&lt;code&gt;TkAuth&lt;/code&gt;&lt;/a&gt;
decorator, which wraps an existing &lt;em&gt;take&lt;/em&gt;,
decodes an incoming cookie, and adds a new &lt;code&gt;TkAuth&lt;/code&gt;
header to the request with the user&amp;#39;s identification information:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Codec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcHex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcXOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, when &lt;code&gt;TkAuth&lt;/code&gt; receives a request with an authenticating cookie inside,
it asks &lt;code&gt;pass&lt;/code&gt; to decode the cookie and return either a
valid &lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/Identity.html&quot;&gt;&lt;code&gt;Identity&lt;/code&gt;&lt;/a&gt;
or &lt;code&gt;Identity.ANONYMOUS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, when the response goes back to the browser, &lt;code&gt;TkAuth&lt;/code&gt; asks &lt;code&gt;pass&lt;/code&gt;
to encode the indentity back into a string and adds &lt;code&gt;Set-Cookie&lt;/code&gt; to the response.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/PsCookie.html&quot;&gt;&lt;code&gt;PsCookie&lt;/code&gt;&lt;/a&gt;
uses an instance of
&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/codecs/Codec.html&quot;&gt;&lt;code&gt;Codec&lt;/code&gt;&lt;/a&gt;
in order to do these backward and forward encoding operations.&lt;/p&gt;

&lt;p&gt;When our &lt;code&gt;TkAccount&lt;/code&gt; &lt;em&gt;take&lt;/em&gt; wants to retrieve a currently authenticated
user identity from the request, it can use
&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/RqAuth.html&quot;&gt;&lt;code&gt;RqAuth&lt;/code&gt;&lt;/a&gt;,
a utility decorator of &lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/Request.html&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkAccount&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RqAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// other manipulations with the user&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;RqAuth&lt;/code&gt; decorator uses the header, added by &lt;code&gt;PsCookie&lt;/code&gt;, in order
to authenticate the user and create an &lt;code&gt;Identity&lt;/code&gt; object.&lt;/p&gt;

&lt;h2 id=&quot;how-is-it-composable?&quot;&gt;How Is It Composable?&lt;/h2&gt;

&lt;p&gt;This mechanism is indeed very extendable and &amp;quot;composable&amp;quot;. Let&amp;#39;s say we
want to skip authentication during integration testing. Here is how:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// original application &amp;quot;take&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsFake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* if running integration tests */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcHex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcXOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/PsChain.html&quot;&gt;&lt;code&gt;PsChain&lt;/code&gt;&lt;/a&gt;
implements &lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/Pass.html&quot;&gt;&lt;code&gt;Pass&lt;/code&gt;&lt;/a&gt;
and attempts to authenticate the user by asking all encapsulated passes,
one by one. The first one in the chain is
&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/PsFake.html&quot;&gt;&lt;code&gt;PsFake&lt;/code&gt;&lt;/a&gt;.
Using a single boolean argument in its constructor, it makes a decision whether
to return a fake identity or return nothing. With just a single boolean
trigger, we can switch off the entire authentication mechanism in the app.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say you want to authenticate users through Facebook OAuth. Here is how:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// original application &amp;quot;take&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsByFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PsByFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PsFacebook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsFacebook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;... Facebook API key ...&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;... Facebook API secret ...&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcHex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcXOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When a user clicks on the login link on your site, the browser goes to &lt;code&gt;facebook.com&lt;/code&gt;,
where his or her identity is verified. Then, Facebook returns a &lt;code&gt;302&lt;/code&gt; redirection
response with a &lt;code&gt;Location&lt;/code&gt; header set to the URL we provide in the login link.
The link must include something like this: &lt;code&gt;?PsByFlag=PsFacebook&lt;/code&gt;. This will
tell &lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/PsByFlag.html&quot;&gt;&lt;code&gt;PsByFlag&lt;/code&gt;&lt;/a&gt;
that this request authenticates a user.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PsByFlag&lt;/code&gt; will iterate through all encapsulated &amp;quot;pairs&amp;quot; and try to find the
right one.
&lt;a href=&quot;http://www.takes.org/apidocs-0.15.1/org/takes/facets/auth/social/PsFacebook.html&quot;&gt;&lt;code&gt;PsFacebook&lt;/code&gt;&lt;/a&gt;
will be the first and the right one. It will connect to the Facebook API using the
provided credentials and will retrieve all possible information about the user.&lt;/p&gt;

&lt;p&gt;Here is how we can implement a logout mechanism:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TkAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// original application &amp;quot;take&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsByFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PsByFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PsFacebook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsFacebook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;... Facebook API key ...&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;... Facebook API secret ...&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PsByFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PsLogout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsLogout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PsCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcHex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcXOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CcPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we can add &lt;code&gt;?PsByFlag=PsLogout&lt;/code&gt; to any link on the site and it will
log the current user out.&lt;/p&gt;

&lt;p&gt;You can see how all this works in a real application by checking out the
&lt;a href=&quot;https://github.com/yegor256/rultor/blob/master/src/main/java/com/rultor/web/TkAppAuth.java&quot;&gt;&lt;code&gt;TkAppAuth&lt;/code&gt;&lt;/a&gt;
class in &lt;a href=&quot;http://www.rultor.com&quot;&gt;Rultor&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/18/cookie-based-authentication.html</guid>
      <dc:date>2015-05-18T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Two Instruments of a Software Architect</title>
      <link>http://www.yegor256.com/2015/05/13/two-instruments-of-software-architect.html</link>
      <description>&lt;p&gt;A &lt;a href=&quot;/&quot;&gt;software architect&lt;/a&gt;
is a key person in any software project, no matter how big or small it is.
An architect is personally responsible for the technical outcome of
the entire team. A good architect knows what needs to be done and how
it&amp;#39;s going to be done, both architecturally and design-wise. In order to enforce
this idea in practice, an architect uses two instruments:
&lt;strong&gt;bugs and reviews&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/05/rear-window.jpg' style='width:600px;' alt='Rear Window (1954) by Alfred Hitchcock'/&gt;&lt;figcaption&gt;Rear Window (1954) by Alfred Hitchcock&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;At &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, we discourage any communication
between developers unless they are formally attached to the tickets or tasks
we&amp;#39;re working on. Read more details about this approach in
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The same principle applies to an architect. We don&amp;#39;t use meetings,
stand-ups, Skype calls, IRC channels, or any other tools where information
flies in the air and stays in our heads. Instead, we put everything in writing and talk
only when we&amp;#39;re being explicitly asked to and paid to &amp;mdash; in tickets.&lt;/p&gt;

&lt;h2 id=&quot;bugs&quot;&gt;Bugs&lt;/h2&gt;

&lt;p&gt;With this in mind, a reasonable question may be asked: How can
a software architect enforce his or her technical vision for the team
if he can&amp;#39;t communicate with the team? Here is our answer:
the architect must use &lt;strong&gt;bugs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A bug is a ticket that has a reporter, a problem, and a resolver, just
like &lt;a href=&quot;/2014/11/24/principles-of-bug-tracking.html&quot;&gt;this post&lt;/a&gt; explains.
Say an architect reviews an existing technical solution and finds
something that contradicts his vision. When such a contradiction
is found, it is a good candidate for a bug. Sometimes there is just
not enough information in the code yet, and this is also a good candidate
for a bug.&lt;/p&gt;

&lt;p&gt;Thus, bugs reported by an architect serve as communication channels
between him and the team. An architect doesn&amp;#39;t explain what needs to be done
but asks the team to fix the product in a way he thinks is right.
If the ticket resolver, a member of the team, disagrees with that approach,
a discussion starts right in the ticket.&lt;/p&gt;

&lt;p&gt;Sometimes an architect has doubts and needs to discuss a few possible solutions
with the team or simply collect opinions. Again, we use bugs for that.
But these bugs don&amp;#39;t report problems in the source code; instead, they
complain about incomplete documentation. For example, say an architect
doesn&amp;#39;t know which database to use, MongoDB or Cassandra, and needs more
information about their pros and cons. A bug will sound like &amp;quot;our design documentation
doesn&amp;#39;t have a detailed comparison of existing NoSQL databases; please fix it&amp;quot;.
Whoever is assigned to this ticket will perform the comparison
and update the documentation.&lt;/p&gt;

&lt;p&gt;Bugs are a &lt;em&gt;proactive&lt;/em&gt; tool for an architect. Through reporting bugs,
an architect influences the project and &amp;quot;dictates his will&amp;quot;.&lt;/p&gt;

&lt;h2 id=&quot;reviews&quot;&gt;Reviews&lt;/h2&gt;

&lt;p&gt;In our projects, every ticket is implemented in its own branch. When
implementation is done, all tickets pass mandatory code peer review. In other
words, developers review each others&amp;#39; code. An architect is not involved
in this process.&lt;/p&gt;

&lt;p&gt;But when peer review is done, each ticket goes to an architect and he
has to give a final &amp;quot;OK&amp;quot; before the code goes to the &lt;code&gt;master&lt;/code&gt; branch through
Rultor, our &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;merge bot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is an architect&amp;#39;s opportunity for control. This is where he can
prevent his vision from being destroyed. When the code created by a developer
violates project design principles or any part of the entire technical idea,
the architect says &amp;quot;No&amp;quot; and the branch is rejected.&lt;/p&gt;

&lt;p&gt;Reviews are a &lt;em&gt;reactive&lt;/em&gt; instrument for an architect. Through strict and
non-compromising code reviews, an architect enforces his design and architectural
principles.&lt;/p&gt;

&lt;p&gt;PS. Here is how an architect is supposed to report to the project manager:
&lt;a href=&quot;/2015/05/11/software-architect-responsibilities.html&quot;&gt;Three Things I Expect From a Software Architect&lt;/a&gt;&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/13/two-instruments-of-software-architect.html</guid>
      <dc:date>2015-05-13T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Three Things I Expect From a Software Architect</title>
      <link>http://www.yegor256.com/2015/05/11/software-architect-responsibilities.html</link>
      <description>&lt;p&gt;A software architect is a key person in a software project, which I
explained in my &lt;a href=&quot;/&quot;&gt;What Does a Software Architect Do?&lt;/a&gt;
post a few months ago. The architect is personally responsible for
the technical quality of the product we&amp;#39;re developing. No matter how
good the team is, how complex the technology is, how messy the
requirements are, or how chaotic the project sponsor is,
we blame the architect and noone else. Of course, we also reward the architect
if we succeed. Here is what I, as project manager, expect from a good architect.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/05/dr-strangelove.jpg' style='width:600px;' alt='Dr. Strangelove (1964) by Stanley Kubrick'/&gt;&lt;figcaption&gt;Dr. Strangelove (1964) by Stanley Kubrick&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In all projects we run at &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, I expect
regular reports from software architects a few times a week. Each report
includes three mandatory parts: 1) scope status, 2) issues, and 3) risks.&lt;/p&gt;

&lt;h2 id=&quot;scope-status&quot;&gt;Scope Status&lt;/h2&gt;

&lt;p&gt;The first and most important type of information I&amp;#39;m looking for
is the scope status, which should be presented in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Product_breakdown_structure&quot;&gt;Product Breakdown Structure&lt;/a&gt;
(PBS) format. No matter how complex or how small the product is, a good architect
should be able to create a PBS of &lt;em&gt;four to eight items&lt;/em&gt;. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. MySQL persistence [done]
2. OAuth login [done]
3. Input parsing in XML [75%]
4. S3 data storage [none]
5. UI cross-platform testing [none]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#39;s the size of the report I&amp;#39;m expecting to receive from a good architect
every few days. The main goal for the architect here is to make sure
that nothing is missed. No matter how big the project is, all its
technical components must fit into this PBS.&lt;/p&gt;

&lt;p&gt;The architect is &lt;em&gt;personally&lt;/em&gt; responsible for not missing the information
in the PBS and making it as accurate as possible. If something is missed
or the report is delayed, that becomes a good reason to change the architect.&lt;/p&gt;

&lt;p&gt;The percentages of progress are also important here. Even though
individual tasks are managed with the &amp;quot;0/100 completion principle&amp;quot; in mind,
the architect must compile those percentages and make sure that compilation
is accurate. Again, a mistake here is unforgivable.&lt;/p&gt;

&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;/h2&gt;

&lt;p&gt;The second important part of a regular report from an architect is a list
of current issues the development team is facing. An issue is something
that has already happened and we&amp;#39;re suffering from it. Here are
a few practical examples:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. MySQL is too slow for our performance requirements
2. Java 1.6 doesn&amp;#39;t allow us to use library X
3. We don&amp;#39;t have a replacement for a Ruby guy who left us
4. Integration tests are not predictable&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, the list must include four to eight items (no more and no less), and the architect
should mention the most critical issues there.&lt;/p&gt;

&lt;h2 id=&quot;risks&quot;&gt;Risks&lt;/h2&gt;

&lt;p&gt;Now, the risks. A risk is something that hasn&amp;#39;t happened yet but may happen
soon, and if it happens, we&amp;#39;ll be in trouble. The architect is responsible
for keeping an eye on all potential risks and regularly reporting the most critical
ones to the project manager. Here is an example of
a brief risk report:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. Deployment platform may not support Java 8 [3/8]
2. Library X may take more than the two weeks planned [7/3]
3. We may lose a good Ruby developer soon [5/6]
4. Integration tests may not be safe enough [7/2]
5. We may fail to find an open source library [3/8]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A project manager may require additional information about each risk, but
that&amp;#39;s another story. What is most important is to keep the project manager
informed about the top of the list. Each risk has two numbers associated with
it: &lt;em&gt;probability&lt;/em&gt; and &lt;em&gt;impact&lt;/em&gt;, from 0 to 9. In the list above, the first
risk has a probability of 3 and impact of 8. This means the architect
believes that most likely this won&amp;#39;t happen, but if it does happen, we&amp;#39;ll be
in big trouble.&lt;/p&gt;

&lt;p&gt;Pay attention, as the key word in each risk description is &lt;em&gt;may&lt;/em&gt;. A risk
is something that hasn&amp;#39;t happened yet. That&amp;#39;s the biggest difference between
a risk and an issue. An issue is a risk that has already occurred.&lt;/p&gt;

&lt;p&gt;PS. Here is how an architect can enforce the principles
of design and architecture:
&lt;a href=&quot;/2015/05/13/two-instruments-of-software-architect.html&quot;&gt;Two Instruments of a Software Architect&lt;/a&gt;&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/11/software-architect-responsibilities.html</guid>
      <dc:date>2015-05-11T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Constructors Must Be Code-Free</title>
      <link>http://www.yegor256.com/2015/05/07/ctors-must-be-code-free.html</link>
      <description>&lt;p&gt;How much work should be done within a constructor? It seems reasonable
to do some computations inside a constructor and then encapsulate
results. That way, when the results are required by object methods, we&amp;#39;ll have them
ready. Sounds like a good approach? No, it&amp;#39;s not. It&amp;#39;s a bad idea
for one reason: It prevents composition of objects and makes them
unextendable.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/05/kill-bill.jpg' style='width:600px;' alt='Kill Bill: Vol. 2 (2004) by Quentin Tarantino'/&gt;&lt;figcaption&gt;Kill Bill: Vol. 2 (2004) by Quentin Tarantino&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s say we&amp;#39;re making an interface that would represent a name of a person:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty easy, right? Now, let&amp;#39;s try to implement it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnglishName&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnglishName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What&amp;#39;s wrong with this? It&amp;#39;s faster, right? It splits the name into
parts only once and encapsulates them. Then, no matter how many times we
call the &lt;code&gt;first()&lt;/code&gt; method, it will return the same value and won&amp;#39;t need
to do the splitting again. However, this is flawed thinking! Let me show
you the right way and explain:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnglishName&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnglishName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the right design. I can see you smiling, so let me prove my point.&lt;/p&gt;

&lt;p&gt;Before I start proving, though, let me ask you to read this article:
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;Composable Decorators vs. Imperative Utility Methods&lt;/a&gt;.
It explains the difference between a static method and composable decorators.
The first snippet above is very close to an imperative utility method, even
though it looks like an object. The second example is a true object.&lt;/p&gt;

&lt;p&gt;In the first example, we are abusing the &lt;code&gt;new&lt;/code&gt; operator and turning it into
a static method, which does all calculations for us &lt;em&gt;right here and now&lt;/em&gt;.
This is what &lt;em&gt;imperative&lt;/em&gt; programming is about. In imperative programming,
we do all calculations right now and return fully ready results. In declarative
programming, we are instead trying to delay calculations for
as long as possible.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s try to use our &lt;code&gt;EnglishName&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnglishName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NameInPostgreSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* something goes wrong */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;Hi, %s, we can&amp;#39;t proceed with your application&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the first line of this snippet, we are just making an instance of an object
and labeling it &lt;code&gt;name&lt;/code&gt;. We don&amp;#39;t want to go to the database yet and fetch
the full name from there, split it into parts, and encapsulate them
inside &lt;code&gt;name&lt;/code&gt;. We just want to create an instance of an object. Such a parsing
behavior would be a side effect for us and, in this case,
will slow down the application.
As you see, we may only need &lt;code&gt;name.first()&lt;/code&gt; if something goes wrong and
we need to construct an exception object.&lt;/p&gt;

&lt;p&gt;My point is that having &lt;strong&gt;any&lt;/strong&gt; computations done inside a constructor is a bad
practice and must be avoided because they are side effects and are not
requested by the object owner.&lt;/p&gt;

&lt;p&gt;What about performance during the re-use of &lt;code&gt;name&lt;/code&gt;, you may ask. If we make an
instance of &lt;code&gt;EnglishName&lt;/code&gt; and then call &lt;code&gt;name.first()&lt;/code&gt; five times, we&amp;#39;ll
end up with five calls to the &lt;code&gt;String.split()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;To solve that, we create another class,
a &lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;composable decorator&lt;/a&gt;,
which will help us solve this &amp;quot;re-use&amp;quot; problem:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CachedName&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CachedName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Cacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forever&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;#39;m using the &lt;a href=&quot;http://aspects.jcabi.com/annotation-cacheable.html&quot;&gt;&lt;code&gt;Cacheable&lt;/code&gt;&lt;/a&gt;
annotation from &lt;a href=&quot;http://aspects.jcabi.com/&quot;&gt;jcabi-aspects&lt;/a&gt;, but you can use any other
caching tools available in Java (or other languages), like
&lt;a href=&quot;https://code.google.com/p/guava-libraries/wiki/CachesExplained&quot;&gt;Guava Cache&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CachedName&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CacheBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CachedName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CachedName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But please don&amp;#39;t make &lt;code&gt;CachedName&lt;/code&gt; mutable and lazily loaded &amp;mdash;
it&amp;#39;s an anti-pattern, which I&amp;#39;ve discussed before in
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;Objects Should Be Immutable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is how our code will look now:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CachedName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnglishName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NameInPostgreSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s a very primitive example, but I hope you get the idea.&lt;/p&gt;

&lt;p&gt;In this design, we&amp;#39;re basically splitting the object into two parts. The first
one knows how to get the first name from the English name. The second one
knows how to cache the results of this calculation in memory. And now it&amp;#39;s
my decision, as a user of these classes, how exactly to use them. I will
decide whether I need caching or not. This is what object composition is all about.&lt;/p&gt;

&lt;p&gt;Let me reiterate that the only allowed statement inside
a constructor is an assignment. If you need to put something else there,
start thinking about refactoring &amp;mdash; your class definitely needs a redesign.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 07 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/07/ctors-must-be-code-free.html</guid>
      <dc:date>2015-05-07T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Protect a Business Idea While Outsourcing</title>
      <link>http://www.yegor256.com/2015/05/04/how-to-protect-business-idea.html</link>
      <description>&lt;p&gt;When you hire a programmer or a team of programmers to implement your
business idea, there is a significant risk of theft and accidental loss. They
may implement your idea (or its elements) without you using their own
resources. Also, they may disclose it to their friends, and those friends
may disclose it even further, until it is eventually implemented by
someone you don&amp;#39;t even know. This happens a lot &amp;mdash; and everywhere. I&amp;#39;ve
been on both sides. Here is my experience and a few recommendations.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/05/there-will-be-blood.jpg' style='width:600px;' alt='There Will Be Blood (2007) by Paul Thomas Anderson'/&gt;&lt;figcaption&gt;There Will Be Blood (2007) by Paul Thomas Anderson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are basically a few levels of protection you can obtain, and they are
listed below, from the simplest and least secure to the most expensive and
most secure.&lt;/p&gt;

&lt;p&gt;Very often, a software team you outsource programming to is located offshore
in a developing country where people care about laws much less than
in, say, the United States; corruption makes it possible for them to get away
with ignoring almost any violation. Let&amp;#39;s not forget this.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re not discussing here the risk of losing a product. This also happens
very often &amp;mdash; your programmers start working for you, you pay them,
they show you something, and then things go south. You find yourself in conflict
with them, and they don&amp;#39;t deliver you anything; they ask for extra money instead.
You end up with nothing or something that is broken and can&amp;#39;t be put on the market.
This is yet another risk, which I&amp;#39;ll try to describe in another article soon.&lt;/p&gt;

&lt;p&gt;In this article, we&amp;#39;re talking specifically about a situation where your
programmers are using your idea to implement something similar on their own.
Let&amp;#39;s say you want to create a new search engine that would be smarter and
more accurate than Google. You disclose your alrogithms to a group of
talented programmers and they just implement it on their own. You already
gave them a multi-billion-dollar idea; why would they work for you on the
payroll if they can create their own startup? This is the question you,
as a savvy entrepreneur, must be prepared to answer for yourself.&lt;/p&gt;

&lt;p&gt;By the way, I&amp;#39;m not a lawyer; I&amp;#39;m speaking here from practical experience only.&lt;/p&gt;

&lt;h2 id=&quot;non-disclosure-agreement-(nda)&quot;&gt;Non-Disclosure Agreement (NDA)&lt;/h2&gt;

&lt;p&gt;The first and easiest step is a so-called NDA. Here is a very simple
and useful example of one, from
&lt;a href=&quot;http://www.nolo.com/legal-encyclopedia/sample-confidentiality-agreement-nda-33343.html&quot;&gt;NOLO&lt;/a&gt;.
You put the name of your programmers into the document and ask them to sign it.
They won&amp;#39;t object, and you get a piece of paper with a signature; what&amp;#39;s next?&lt;/p&gt;

&lt;p&gt;If I&amp;#39;m a programmer, the document basically states that whatever you disclose
to me, I should keep in secret and never &amp;quot;use for my own benefit, publish, copy,
or otherwise disclose to others.&amp;quot; If you then give me your Google-killer idea
and I create my own product using its key principles, what will be your next steps?&lt;/p&gt;

&lt;p&gt;In a court of law in your country, you will have to prove that:
1) you disclosed your idea to me, 2) I used it to create the product,
3) I didn&amp;#39;t know about this idea beforehand, and 4) I didn&amp;#39;t invent it myself.
Until all of these criteria are proven, I&amp;#39;m innocent and &lt;em&gt;my&lt;/em&gt; product is online, working
and attracting customers.&lt;/p&gt;

&lt;p&gt;Will you be able to prove that you disclosed the idea to me? Probably, if
you sent me some documents. If you discussed it with me over the phone, you
won&amp;#39;t prove anything.&lt;/p&gt;

&lt;p&gt;Will you be able to prove that your exact idea was used in my product?
How will it technically be possible if I don&amp;#39;t disclose the source code?&lt;/p&gt;

&lt;p&gt;Can you prove that I didn&amp;#39;t know about something similar before meeting you?
Or maybe I was thinking about it on my own. Or I read about it somewhere else.&lt;/p&gt;

&lt;p&gt;What if I disclose your idea to my friends and they create a product? Will
you be able to prove the fact of that disclosure?&lt;/p&gt;

&lt;p&gt;There are many such questions. My point is that a signed NDA
is a very weak protection. It&amp;#39;s more like a lock on the bathroom door
&amp;mdash; anyone can break it with a kick from their leg, but for those with
good manners, it&amp;#39;s a sign that the restroom is occupied.&lt;/p&gt;

&lt;h2 id=&quot;non-compete-clause-(ncc)&quot;&gt;Non-Compete Clause (NCC)&lt;/h2&gt;

&lt;p&gt;The next level of protection is an agreement with a &lt;a href=&quot;http://en.wikipedia.org/wiki/Non-compete_clause&quot;&gt;Non-Compete Clause&lt;/a&gt;,
which explicitly prohibits me from engaging in the business that your
idea is about. For example, it may sound like this: &amp;quot;The developer
is not allowed to participate in any businesses related to online searching
for five years.&amp;quot;&lt;/p&gt;

&lt;p&gt;Will I sign this agreement? It depends. But if I show any reluctance
in signing it, you should think twice about my real intentions.&lt;/p&gt;

&lt;p&gt;Will this NCC protect you if I disclose your idea to my friends and they
implement it? No, it won&amp;#39;t.&lt;/p&gt;

&lt;p&gt;Also, I would recommend you put some explicit liability numbers into the
agreement. For example, it may sound like
&amp;quot;a minimum penalty for a proven breach of the non-compete clause is $50,000&amp;quot;.
In my experience, such explicit statements make contracts much more
valuable and help prevent them from being violated.&lt;/p&gt;

&lt;h2 id=&quot;copyright&quot;&gt;Copyright&lt;/h2&gt;

&lt;p&gt;Copyright is where the government starts to protect you, but you have to
pay us for it (by &amp;quot;us&amp;quot; I mean all of us, the society). Well, at least in
the United States. In the United Kingdom, it&amp;#39;s free, for example.&lt;/p&gt;

&lt;p&gt;In the U.S., you go to &lt;a href=&quot;http://www.copyright.gov&quot;&gt;copyright.gov&lt;/a&gt;,
click &amp;quot;register a copyright&amp;quot;,
fill in an online form,
post the description of your business idea in a plain text file,
pay $35, and you&amp;#39;re done.
In a few months, you will receive a confirmation that your &amp;quot;record&amp;quot;
is registered.&lt;/p&gt;

&lt;p&gt;What does it give you? In a court of law, you can claim that this idea
came to your mind on that specific date. Everyone who later made something
similar &lt;em&gt;probably&lt;/em&gt; stole it from you, including me, your programmer.&lt;/p&gt;

&lt;p&gt;Will you be able to prove that my product is actually based on your idea
and steals it? Maybe.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not a very strong protection either, but I would recommend you do it
together with an NDA and NCC.&lt;/p&gt;

&lt;h2 id=&quot;patent&quot;&gt;Patent&lt;/h2&gt;

&lt;p&gt;A patent is the best you can get to protect your idea. A patent is basically
a guarantee of safety that you buy from the government. To get that
guarantee, you have to do three things: 1) explain what exactly will be protected,
2) prove that it doesn&amp;#39;t belong to someone else, and 3) pay your dues regularly.
It&amp;#39;s very similar to what gangsters do when they &amp;quot;protect&amp;quot; you,
but here we&amp;#39;re dealing with intellectual property and there is only one
&amp;quot;gangster&amp;quot; per country :) The concept is pretty much the same.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1413320449/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1413320449&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=46F452ALSAXMPSW7'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/nolo-patent-it-yourself.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;First, you describe your idea in the format that patents are written. It is
not difficult at all, but it would help if you read one of those &amp;quot;how to file
a patent&amp;quot; books. I recommend
&lt;a href=&quot;http://www.amazon.com/gp/product/1413320449/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1413320449&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=46F452ALSAXMPSW7&quot;&gt;Patent It Yourself: Your Step-by-Step Guide to Filing at the U.S. Patent Office&lt;/a&gt;
by David Pressman and Thomas J. Tuytschaevers.&lt;/p&gt;

&lt;p&gt;Your application will likely amount to about 10 pages and should take a few days
of your time if you know your idea well. No need to hire any attorneys; that&amp;#39;s a
waste of money.&lt;/p&gt;

&lt;p&gt;Then you should do some research to make sure something similar already
exists &amp;mdash; but not exactly the same. For example, you can find Google patents
for searching algorithms and mention them in your patent in the list
of references.&lt;/p&gt;

&lt;p&gt;Finally, you pay $425 (if you&amp;#39;re a small company) and submit it to the
&lt;a href=&quot;http://www.uspto.gov&quot;&gt;USPTO&lt;/a&gt;. There is also an option to file a &amp;quot;provisional&amp;quot;
patent, but I would recommend you not do this, as it&amp;#39;s just an extra hassle. Simply
file a normal one.&lt;/p&gt;

&lt;p&gt;Once you&amp;#39;ve paid, your protection starts immediately. If I create a product
that uses the idea described in your patent, you can bring me to court
and ask me to share my profit with you. You will claim that I was making
money by using your brilliant idea, and now it&amp;#39;s time to share that success.
Legally speaking, you will
accuse me of &lt;a href=&quot;http://en.wikipedia.org/wiki/Patent_infringement&quot;&gt;patent infringement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, I will try to invalidate your patent, claiming that something
similar already existed before you filed a patent, called
&lt;a href=&quot;http://en.wikipedia.org/wiki/Prior_art&quot;&gt;prior art&lt;/a&gt;. If I succeed, the USPTO will
invalidate your patent without a refund, and I&amp;#39;ll walk away, paying you nothing.&lt;/p&gt;

&lt;p&gt;If I fail, I&amp;#39;ll try to prove that I didn&amp;#39;t infringe on your patent. I will say
that my product is not using your ideas but rather is designed with something else
in mind, just like Samsung &lt;a href=&quot;http://en.wikipedia.org/wiki/Apple_Inc._v._Samsung_Electronics_Co.&quot;&gt;did&lt;/a&gt;.
Maybe I&amp;#39;ll win, but my chances will be low.&lt;/p&gt;

&lt;p&gt;By the way, in a few years, you will receive a patent from the USPTO and put it on the shelf.
You will then have to pay $480 more. Also, at the end of three years, you will have to pay $800 just
to keep your guarantee alive. That escalates to $1,800 in seven years and $3,700 in 11 years
(see the &lt;a href=&quot;http://www.uspto.gov/learning-and-resources/fees-and-payment/uspto-fee-schedule&quot;&gt;fee schedule&lt;/a&gt;).
Told you; just like gangsters :)&lt;/p&gt;

&lt;p&gt;To summarize, getting a patent is the best instrument available at the moment
in developed countries that can protect your business idea.
However, as Apple vs. Samsung &lt;a href=&quot;http://en.wikipedia.org/wiki/Apple_Inc._v._Samsung_Electronics_Co.&quot;&gt;lawsuit&lt;/a&gt; demonstrates,
it is not a 100 percent guarantee either.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 04 May 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/05/04/how-to-protect-business-idea.html</guid>
      <dc:date>2015-05-04T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How to Implement an Iterating Adapter</title>
      <link>http://www.yegor256.com/2015/04/30/iterating-adapter.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html&quot;&gt;Iterator&lt;/a&gt;
is one of the fundamental Java interfaces, introduced in Java 1.2. It is supposed
to be very simple; however, in my experience, many Java developers don&amp;#39;t understand
how to implement a custom one, which should iterate a stream of data
coming from some other source. In other words, it becomes an &lt;strong&gt;adapter&lt;/strong&gt; of
another source of data, in the form of an iterator. I hope this example will help.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let&amp;#39;s say we have an object of this class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When we call &lt;code&gt;read()&lt;/code&gt;, it returns a new array of bytes that were retrieved
from somewhere. If there is nothing to retrieve, the array will be empty. Now,
we want to create an &lt;em&gt;adapter&lt;/em&gt; that would consume the bytes and let
us iterate them:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FluentData&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how it should look (it is not thread-safe!):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FluentData&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FluentData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoSuchElementException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Nothing left&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;It is read-only&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is no way to make it thread-safe because the iterating process
is outside the scope of the iterator. Even if we declare our methods
as &lt;code&gt;synchronized&lt;/code&gt;, this won&amp;#39;t guarantee that two threads won&amp;#39;t conflict
when they both call &lt;code&gt;hasNext()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt;. So don&amp;#39;t bother with it and
just document the iterator as not thread-safe, then let its users
synchronize one level higher when necessary.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/04/30/iterating-adapter.html</guid>
      <dc:date>2015-04-30T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>My Favorite Software Books</title>
      <link>http://www.yegor256.com/2015/04/22/favorite-software-books.html</link>
      <description>&lt;p&gt;There are plenty of books about software engineering, but only a few of them rank
among my favorites. I read all of those that do over and over again, and I might
just update this post in the future when I stumble upon something else that&amp;#39;s decent.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Note that I tried to put the most important books at the top of the list.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=T5AHAWGQIY5ZZK2Z'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-object-thinking.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=T5AHAWGQIY5ZZK2Z&quot;&gt;&lt;strong&gt;Object Thinking&lt;/strong&gt;&lt;/a&gt;
by David West.
This is the best book I&amp;#39;ve read about object-oriented
programming, and it totally changed my understanding of it. I would
recommend you read it a few times. But before reading, try to forget everything
you&amp;#39;ve heard about programming in the past. Try to start from scratch. Maybe it will
work for you too :)&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1932735658/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1932735658&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=C6OZC5OD2W2IPLCM'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-pmp-rita.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1932735658/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1932735658&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=C6OZC5OD2W2IPLCM&quot;&gt;&lt;strong&gt;PMP Exam Prep, Eighth Edition: Rita&amp;#39;s Course in a Book for Passing the PMP Exam&lt;/strong&gt;&lt;/a&gt;
by Rita Mulcahy.
This book is my favorite for project management. Even though it&amp;#39;s about the
PMI approach and PMBOK in particular, it is a must-read for everyone who
is interested in management. Ignore the PMBOK specifics and focus on
the philosophy of project management and the role of project manager in it.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1118031962/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1118031962&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=ZSPUL4X4IBFT6ZVJ'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-art-of-testing.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1118031962/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1118031962&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=ZSPUL4X4IBFT6ZVJ&quot;&gt;&lt;strong&gt;The Art of Software Testing&lt;/strong&gt;&lt;/a&gt;
by Glenford J. Myers et al.
You can read my short review of this book &lt;a href=&quot;/2014/08/22/art-of-software-testing.html&quot;&gt;here&lt;/a&gt;.
The book perfectly explains the philosophy of testing and destroys
many typical myths and stereotypes. No matter what your job description is,
if you&amp;#39;re working in the software industry, you should understand testing
and its fundamental principles. This is the only book you need in order to
get that understanding.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321503627&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=D5KJ4KQEDPXZVQMQ'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-goos.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321503627&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=D5KJ4KQEDPXZVQMQ&quot;&gt;&lt;strong&gt;Growing Object-Oriented Software, Guided by Tests&lt;/strong&gt;&lt;/a&gt;
by Steve Freeman and Nat Pryce.
All you need to know about your unit testing is in this book. I&amp;#39;m fully aware
that I didn&amp;#39;t include famous software engineer
&lt;a href=&quot;http://www.amazon.com/gp/product/0321146530/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321146530&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=S63Z5BJDORBGMZ2Z&quot;&gt;Kent Beck&amp;#39;s book&lt;/a&gt;
in this list because I don&amp;#39;t like it at all. You definitely should read
it, just to know what&amp;#39;s going on, but it won&amp;#39;t help you write good tests.
Read this one instead, and read it many times.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=D2WNVUW64RHDRGSC'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-legacy.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=D2WNVUW64RHDRGSC&quot;&gt;&lt;strong&gt;Working Effectively With Legacy Code&lt;/strong&gt;&lt;/a&gt;
by Michael Feathers.
This is awesome reading about modern software development, its pitfalls, and
typical failures. Most of the code we&amp;#39;re working on now is legacy (a.k.a. open source).
I read this book as a novel.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0321601912/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321601912&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=MPZUCBXBGNOIHDDI'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-continuous-delivery.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0321601912/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321601912&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=MPZUCBXBGNOIHDDI&quot;&gt;&lt;strong&gt;Continuous Delivery: Reliable Software Releases Through Build, Test, and Deployment Automation&lt;/strong&gt;&lt;/a&gt;
by Jez Humble and David Farley.
This is a perfect book about software delivery, continuous integration,
testing, packaging, versioning, and many other techniques involved in programming.
It&amp;#39;s definitely a must-read for anyone who is serious about software engineering.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0596007647/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0596007647&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=MWLP356M3CQZSBS7'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-xml-nutshell.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0596007647/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0596007647&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=MWLP356M3CQZSBS7&quot;&gt;&lt;strong&gt;XML in a Nutshell, Third Edition&lt;/strong&gt;&lt;/a&gt;
by Elliotte Rusty Harold and W. Scott Means.
XML is my favorite standard. And I hated it before I read this book. I didn&amp;#39;t
understand all the strange prefixes, namespaces, XPath expressions, and
schemas. Just this one book changed everything, and ever since reading it, I&amp;#39;ve used XML
everywhere. It is very well written and easy to read. It&amp;#39;s a must for everybody.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0321349601/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321349601&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=AN4H5FISUMRSU3XD'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-java-concurrency.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0321349601/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321349601&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=AN4H5FISUMRSU3XD&quot;&gt;&lt;strong&gt;Java Concurrency in Practice&lt;/strong&gt;&lt;/a&gt;
by Brian Goetz et al.
This is a very practical book about Java multi-threading, and at the same time,
it provides a lot of theoretical knowledge about concurrency in general. I highly
recommend you read it at least once.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1491903996/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1491903996&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=PUWBN5SFCGEQH3YH'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-c++.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1491903996/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1491903996&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=PUWBN5SFCGEQH3YH&quot;&gt;&lt;strong&gt;Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14&lt;/strong&gt;&lt;/a&gt;
by Scott Meyers.
No matter what language you&amp;#39;re using, this book is very interesting and
very useful. It makes many important suggestions about better C++ coding. If
you understand most of them, your Java/Ruby/Python/Scala coding skills will
improve significantly.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735619670&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=KWY7Y3BVH5URNCK3'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-code-complete.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735619670&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=KWY7Y3BVH5URNCK3&quot;&gt;&lt;strong&gt;Code Complete: A Practical Handbook of Software Construction, Second Edition&lt;/strong&gt;&lt;/a&gt;
by Steve McConnell.
Consider this the bible of clean coding. Read it a few times and use it as a reference
manual in debates with your colleagues. It mentions the most terrible anti-patterns
and worst practices you&amp;#39;ll see in modern programming. To be a good programmer,
you must know all of them.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/B00JDMPOVQ/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00JDMPOVQ&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=HDYS46EBUPXYSNDD'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-estimation.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/B00JDMPOVQ/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00JDMPOVQ&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=HDYS46EBUPXYSNDD&quot;&gt;&lt;strong&gt;Software Estimation: Demystifying the Black Art&lt;/strong&gt;&lt;/a&gt;
by Steve McConnell.
This one&amp;#39;s an interesting read about software engineering and its most tricky part &amp;mdash; estimations.
At the least, read it to be aware of the problem and possible solutions.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0201702258/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0201702258&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=VGRW6G3LUVKEB72C'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-use-cases.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0201702258/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0201702258&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=VGRW6G3LUVKEB72C&quot;&gt;&lt;strong&gt;Writing Effective Use Cases&lt;/strong&gt;&lt;/a&gt;
by Alistair Cockburn.
An old and very good book, you won&amp;#39;t actually use anything from this in your
real projects, but you will pick up the philosophy of use cases, which will
redirect your mind in the right direction. Don&amp;#39;t take this book as something
practical; these use cases are hardly used anywhere today, but the idea of
scoping functionality this way is absolutely right.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/B00JDMPMOA/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00JDMPMOA&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=PRSWJK34HNP355LK'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-requirements.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/B00JDMPMOA/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00JDMPMOA&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=PRSWJK34HNP355LK&quot;&gt;&lt;strong&gt;Software Requirements, Third Edition&lt;/strong&gt;&lt;/a&gt;
by Karl Wiegers (author) and Joy Beatty.
A superb book about requirements analysis, the first and most important
activity in any software project. Even if you&amp;#39;re not an analyst, this book
is a must-read.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1449316387/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1449316387&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=LTNZ7XPLDEG4MEJO'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-git.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1449316387/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1449316387&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=LTNZ7XPLDEG4MEJO&quot;&gt;&lt;strong&gt;Version Control With Git: Powerful Tools and Techniques for Collaborative Software Development&lt;/strong&gt;&lt;/a&gt;
by Jon Loeliger and Matthew McCullough.
This title serves as a practical guide for Git, a version control system. Read it from
cover to cover and you will save many hours of your time in the future.
Git is a de-facto standard in version control, and every programmer must
know its fundamental principles &amp;mdash; not from a cheat sheet but from an original source.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/B004XQX4K0/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B004XQX4K0&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=U37POLMQHPZMXXAP'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-javascript.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/B004XQX4K0/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B004XQX4K0&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=U37POLMQHPZMXXAP&quot;&gt;&lt;strong&gt;JavaScript: The Definitive Guide: Activate Your Web Pages&lt;/strong&gt;&lt;/a&gt;
by David Flanagan.
JavaScript is a language of the modern Web, and this book explains it very well.
No matter what kind of software you develop, you must know JavaScript. Don&amp;#39;t read
it as a practical guide (even though it&amp;#39;s called a guide) but rather as
food for thought. JavaScript offers a lot to learn for Java/Ruby/Python developers.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/B00457X7L8/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00457X7L8&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=PSW6X7D2VCCBS6OL'&gt;&lt;img src='http://www.yegor256.com/images/2015/04/book-css.jpg' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/B00457X7L8/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00457X7L8&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=PSW6X7D2VCCBS6OL&quot;&gt;&lt;strong&gt;CSS: The Definitive Guide&lt;/strong&gt;&lt;/a&gt;
by Eric A. Meyer.
CSS is not just about colors and shadows, and it&amp;#39;s not only for graphic designers.
CSS is a key language of the modern Web. Every developer must know it, whether
you&amp;#39;re working with a back-end, front-end, or desktop application in C++.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/04/22/favorite-software-books.html</guid>
      <dc:date>2015-04-22T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Software Quality Award</title>
      <link>http://www.yegor256.com/award.html</link>
      <description>&lt;p&gt;I&amp;#39;m a big fan of rules and discipline in software development; as an example, see
&lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;Are You a Hacker or a Designer?&lt;/a&gt;.
Also, I&amp;#39;m a big fan of object-oriented programming in its purest form; for example, see
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;Seven Virtues of a Good Object&lt;/a&gt;.
I&amp;#39;m also a co-founder and the CTO of &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;, a software development
company through which I put my admiration of discipline and clean design into practice.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I want to encourage you to share my passion &amp;mdash; not just by reading this blog
but through making real open source software in a disciplined way.
This award is for those who are brave enough to swim against the current and
value quality above everything else.&lt;/p&gt;

&lt;p&gt;Send me your own project for review and participate in the contest.&lt;/p&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One person can submit up to three projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Submissions are accepted until the &lt;strong&gt;September 1, 2015&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Submissions must be sent via email to &lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;me@yegor256.com&lt;/a&gt;.
All I need is your Github login and repository name; I will check the commit
history to make sure you&amp;#39;re the main contributor to the project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Results will be announced &lt;strong&gt;October 15&lt;/strong&gt; on this page and by email.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The best project will receive &lt;strong&gt;$4,096&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open source (in Github).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least 5,000 lines of code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least one year old.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object-oriented (that&amp;#39;s the only thing I understand).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best projects will feature:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Strict and visible principles of design.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continuous delivery.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Traceability of changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Self-documented source code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Strict rules of code formatting.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What doesn&amp;#39;t matter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don&amp;#39;t care about
popularity; quality is the key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it&amp;#39;s still eligible for the award. I don&amp;#39;t care about
your marketing position; quality is all.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;118 rojects submitted so far (in order of submission):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mdbs99/AWS&quot;&gt;mdbs99/AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FagnerMartinsBrack/WebStories&quot;&gt;FagnerMartinsBrack/WebStories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/robertop/triumph4php&quot;&gt;robertop/triumph4php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/blambeau/wlang&quot;&gt;blambeau/wlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alf-tool/alf-core&quot;&gt;alf-tool/alf-core&lt;/a&gt; by &lt;a href=&quot;https://github.com/blambeau&quot;&gt;@blambeau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/siom79/japicmp&quot;&gt;siom79/japicmp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tunabrain/tungsten&quot;&gt;tunabrain/tungsten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/AdamsLair/duality&quot;&gt;AdamsLair/duality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/openra/openra&quot;&gt;openra/openra&lt;/a&gt; by &lt;a href=&quot;https://github.com/chrisforbes&quot;&gt;@chrisforbes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ApiGen/ApiGen&quot;&gt;ApiGen/ApiGen&lt;/a&gt; by &lt;a href=&quot;https://github.com/TomasVotruba&quot;&gt;@TomasVotruba&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Pacmanfan/UVDLPSlicerController&quot;&gt;Pacmanfan/UVDLPSlicerController&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/openfurther/further-open-core&quot;&gt;openfurther/further-open-core&lt;/a&gt; by &lt;a href=&quot;https://github.com/rahuofu&quot;&gt;@rahuofu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bertram25/ValyriaTear&quot;&gt;Bertram25/ValyriaTear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/odoepner/typepad&quot;&gt;odoepner/typepad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vladmihalcea/flexy-pool&quot;&gt;vladmihalcea/flexy-pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/js-cookie/js-cookie&quot;&gt;js-cookie/js-cookie&lt;/a&gt; by &lt;a href=&quot;https://github.com/FagnerMartinsBrack&quot;&gt;@FagnerMartinsBrack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jOOQ/jOOQ&quot;&gt;jOOQ/jOOQ&lt;/a&gt; by &lt;a href=&quot;https://github.com/lukaseder&quot;&gt;@lukaseder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/raphw/byte-buddy&quot;&gt;raphw/byte-buddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/uniVocity/univocity-parsers&quot;&gt;uniVocity/univocity-parsers&lt;/a&gt; by &lt;a href=&quot;https://github.com/jbax&quot;&gt;@jbax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/arnaudroger/SimpleFlatMapper/&quot;&gt;arnaudroger/SimpleFlatMapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elBukkit/MagicPlugin&quot;&gt;elBukkit/MagicPlugin&lt;/a&gt; by &lt;a href=&quot;https://github.com/NathanWolf&quot;&gt;@NathanWolf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trade-manager/trade-manager&quot;&gt;trade-manager/trade-manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ParaPenguin/morphix&quot;&gt;ParaPenguin/morphix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com//tzaeschke/zoodb&quot;&gt;tzaeschke/zoodb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com//tzaeschke/critbit&quot;&gt;tzaeschke/critbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/praveendath92/MDroid&quot;&gt;praveendath92/MDroid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/DeqingSun/ESP8266-Dash-Button&quot;&gt;DeqingSun/ESP8266-Dash-Button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/javamonkey/beetl2.0&quot;&gt;javamonkey/beetl2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/81813780/HandyTabBar&quot;&gt;81813780/HandyTabBar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xionghuiCoder/clearpool&quot;&gt;xionghuiCoder/clearpool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/android-cjj/ComicReader&quot;&gt;android-cjj/ComicReader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Dreampie/icedog&quot;&gt;Dreampie/icedog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hujiaweibujidao/TinyWeibo&quot;&gt;hujiaweibujidao/TinyWeibo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hujiaweibujidao/XingShan&quot;&gt;hujiaweibujidao/XingShan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hujiaweibujidao/WeChat4j&quot;&gt;hujiaweibujidao/WeChat4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/beartung/tclip-android&quot;&gt;beartung/tclip-android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/beartung/insta-filter&quot;&gt;beartung/insta-filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wewoor/ZBLOG&quot;&gt;wewoor/ZBLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gulpjs/gulp&quot;&gt;gulpjs/gulp&lt;/a&gt; by &lt;a href=&quot;https://github.com/contra&quot;&gt;@contra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joedayz/titanic-javaee7&quot;&gt;joedayz/titanic-javaee7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TheCricket/Chisel-2&quot;&gt;TheCricket/Chisel-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddasilva/scheme-droid&quot;&gt;ddasilva/scheme-droid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chenjishi/SlideActivity&quot;&gt;chenjishi/SlideActivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yazeed44/MultiImagePicker&quot;&gt;yazeed44/MultiImagePicker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wbotelhos/raty&quot;&gt;wbotelhos/raty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/miku-nyan/Overchan-Android&quot;&gt;miku-nyan/Overchan-Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chylex/Hardcore-Ender-Expansion&quot;&gt;chylex/Hardcore-Ender-Expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lionsoul2014/jcseg&quot;&gt;lionsoul2014/jcseg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yfpeng/pengyifan-bioc&quot;&gt;yfpeng/pengyifan-bioc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/daimor/NBStudio&quot;&gt;daimor/NBStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sytolk/TaxiAndroidOpen&quot;&gt;sytolk/TaxiAndroidOpen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yaylas/AndroidFaceRecognizer&quot;&gt;yaylas/AndroidFaceRecognizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/omgware/fluid-simulator-v2&quot;&gt;omgware/fluid-simulator-v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wendykierp/JTransforms&quot;&gt;wendykierp/JTransforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zqq90/webit-script&quot;&gt;zqq90/webit-script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/markdenihan/owaspSecurityShepherd&quot;&gt;markdenihan/owaspSecurityShepherd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/subchen/jetbrick-template-2x&quot;&gt;subchen/jetbrick-template-2x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/subchen/snack-string&quot;&gt;subchen/snack-string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/restorer/gloomy-dungeons-2&quot;&gt;restorer/gloomy-dungeons-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/restorer/Gloomy-Dungeons-3D&quot;&gt;restorer/Gloomy-Dungeons-3D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/restorer/zame-haxe-particles&quot;&gt;restorer/zame-haxe-particles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mrzl/LeapMotionP5&quot;&gt;mrzl/LeapMotionP5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/relu91/niftyeditor&quot;&gt;relu91/niftyeditor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bparmentier/OpenBikeSharing&quot;&gt;bparmentier/OpenBikeSharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/graphhopper/graphhopper/&quot;&gt;graphhopper/graphhopper&lt;/a&gt; by &lt;a href=&quot;https://github.com/karussell&quot;&gt;@karussell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/t-oster/VisiCut&quot;&gt;t-oster/VisiCut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/arnaudroger/SimpleFlatMapper&quot;&gt;arnaudroger/SimpleFlatMapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Floens/Clover&quot;&gt;Floens/Clover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisshayan/TechLooper&quot;&gt;chrisshayan/TechLooper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bonigarcia/dualsub&quot;&gt;bonigarcia/dualsub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/blundell/WoodyFaceDetection&quot;&gt;blundell/WoodyFaceDetection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/blundell/QuickSand&quot;&gt;blundell/QuickSand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/blundell/ArrowLogger&quot;&gt;blundell/ArrowLogger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pushtorefresh/storio&quot;&gt;pushtorefresh/storio&lt;/a&gt; by &lt;a href=&quot;https://github.com/artem-zinnatullin&quot;&gt;@artem-zinnatullin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mangstadt/ez-vcard&quot;&gt;mangstadt/ez-vcard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jmyrland/DriSMo&quot;&gt;jmyrland/DriSMo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pmd/pmd&quot;&gt;pmd/pmd&lt;/a&gt; by &lt;a href=&quot;https://github.com/adangel&quot;&gt;@adangel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/javaslang/javaslang&quot;&gt;javaslang/javaslang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thothbot/parallax&quot;&gt;thothbot/parallax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jasonycw/MemeCreator&quot;&gt;jasonycw/MemeCreator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jasonycw/TyphoonTycoon&quot;&gt;jasonycw/TyphoonTycoon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ysc/QuestionAnsweringSystem&quot;&gt;ysc/QuestionAnsweringSystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ysc/word&quot;&gt;ysc/word&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/andot/hprose&quot;&gt;andot/hprose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/guikeller/jetty-runner&quot;&gt;guikeller/jetty-runner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/frizbog/gedcom4j&quot;&gt;frizbog/gedcom4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/h2oai/h2o-3&quot;&gt;h2oai/h2o-3&lt;/a&gt; by &lt;a href=&quot;https://github.com/srisatish&quot;&gt;@srisatish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Feng14/MiniWeChat-Server&quot;&gt;Feng14/MiniWeChat-Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tianzhijiexian/ActivityOptionsICS&quot;&gt;tianzhijiexian/ActivityOptionsICS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/swanson/stringer%E2%80%8B&quot;&gt;swanson/stringer​&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JayFang1993/DropDownMenu&quot;&gt;JayFang1993/DropDownMenu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/AizazAZ/Android-Ultra-Photo-Selector&quot;&gt;AizazAZ/Android-Ultra-Photo-Selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/patilswapnilv/TerminalIDE&quot;&gt;patilswapnilv/TerminalIDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zhaoqp2010/andbase&quot;&gt;zhaoqp2010/andbase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/omry/banana&quot;&gt;omry/banana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jackrex/AndroidCacheFoundation&quot;&gt;jackrex/AndroidCacheFoundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kaitoy/pcap4j&quot;&gt;kaitoy/pcap4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rgladwell/m2e-android&quot;&gt;rgladwell/m2e-android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/scireum/parsii&quot;&gt;scireum/parsii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/scireum/sirius-kernel&quot;&gt;scireum/sirius-kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yazeed44/GroceryShopping&quot;&gt;yazeed44/ResizableView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yazeed44/GroceryShopping&quot;&gt;yazeed44/GroceryShopping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MindMac/AndroidAppLog&quot;&gt;MindMac/AndroidAppLog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kpbird/chips-edittext-library&quot;&gt;kpbird/chips-edittext-library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spiffyui/spiffyui&quot;&gt;spiffyui/spiffyui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala&quot;&gt;coala-analyzer/coala&lt;/a&gt; by &lt;a href=&quot;https://github.com/sils1297&quot;&gt;@sils1297&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgarin/weblaf&quot;&gt;mgarin/weblaf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/conductor-framework/conductor&quot;&gt;conductor-framework/conductor&lt;/a&gt; by &lt;a href=&quot;https://github.com/ddavison&quot;&gt;@ddavison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ctron/package-drone&quot;&gt;ctron/package-drone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/markkerzner/FreeEed&quot;&gt;markkerzner/FreeEed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/morris/lessql&quot;&gt;morris/lessql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jitlogic/zorka&quot;&gt;jitlogic/zorka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sdorra/angular-dashboard-framework&quot;&gt;sdorra/angular-dashboard-framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iluwatar/java-design-patterns&quot;&gt;iluwatar/java-design-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chesterbr/ruby2600&quot;&gt;chesterbr/ruby2600&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/testinfected/molecule&quot;&gt;testinfected/molecule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/testinfected/simple-petstore&quot;&gt;testinfected/simple-petstore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pchab/AndroidRTC&quot;&gt;pchab/AndroidRTC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dolda2000/ashd&quot;&gt;dolda2000/ashd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MaigoAkisame/MCPDict&quot;&gt;MaigoAkisame/MCPDict&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/award.html</guid>
      <dc:date>2015-04-16T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Tacit, a CSS Framework Without Classes</title>
      <link>http://www.yegor256.com/2015/04/13/tacit-css-framework-for-dummies.html</link>
      <description>&lt;p&gt;I&amp;#39;ve been using &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;
for more than two years in multiple projects,
and my frustration has been building. First of all, it&amp;#39;s too massive for
a small web app. Second, it is not fully self-sufficient; no matter
how much you follow its principles of design, you end up with your
own CSS styles anyway. Third, and most importantly, its internal
design is messy. Having all this in mind, I created
&lt;a href=&quot;https://github.com/yegor256/tacit&quot;&gt;&lt;strong&gt;tacit&lt;/strong&gt;&lt;/a&gt;, my own CSS framework,
which immediately received positive feedback on
&lt;a href=&quot;https://news.ycombinator.com/item?id=9345271&quot;&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;em&gt;Tacit&lt;/em&gt;, according to Google, means &amp;quot;understood or implied without being stated&amp;quot;.
That&amp;#39;s exactly the idea of the &lt;a href=&quot;https://github.com/yegor256/tacit&quot;&gt;framework&lt;/a&gt;.
It doesn&amp;#39;t have a single
CSS class and can be applied to any valid HTML5 document. For example, you
have an HTML document:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Subscribe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Are you interested in learning more?&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Email:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Subscribe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how it looks in Safari:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/04/html-in-safari-without-tacit.jpg' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;Now, I add &lt;code&gt;tacit.min.css&lt;/code&gt; to it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Subscribe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://yegor256.github.io/tacit/tacit.min.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Are you interested in learning more?&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Email:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Subscribe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how it looks in the same Safari browser:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/04/html-in-safari-with-tacit.jpg' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;I hope you got the idea. The HTML itself wasn&amp;#39;t changed at all. All CSS
styles are applied to standard HTML elements. Unlike many other CSS frameworks,
in Tacit you don&amp;#39;t have to mention CSS classes in the HTML document. The HTML
stays clean and only exposes the data in a pure HTML5 way.&lt;/p&gt;

&lt;p&gt;The HTML document is still readable and usable, but it doesn&amp;#39;t have the
good-looking-graphics component. Tacit adds that component in a non-intrusive
manner.&lt;/p&gt;

&lt;p&gt;Of course, in many projects, the default layout features of Tacit won&amp;#39;t
be enough. In most cases, I still have to add my own CSS classes and inline
styles. But Tacit gives me an adequate foundation to start from. It solves
most of the problems associated with responsiveness of forms, appearance of
form controls, tables, fonts, and colors.&lt;/p&gt;

&lt;p&gt;Tacit allows me to focus on functionality from the first day of a project. And
the functionality immediately looks attractive. I have tried many other
frameworks, including &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;,
&lt;a href=&quot;http://imperavi.com/kube/&quot;&gt;Kube&lt;/a&gt;, and
&lt;a href=&quot;http://purecss.io/&quot;&gt;Pure&lt;/a&gt;. None of them are designed with this concept in mind.
They all put CSS in front of HTML. In all of them, CSS is the most important
element of web design, while HTML is something that assists.&lt;/p&gt;

&lt;p&gt;Tacit takes a different approach. In Tacit, HTML is king while CSS is a supportive
element that only makes data look better.&lt;/p&gt;

&lt;p&gt;Enjoy :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/04/13/tacit-css-framework-for-dummies.html</guid>
      <dc:date>2015-04-13T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Class Casting Is a Discriminating Anti-Pattern</title>
      <link>http://www.yegor256.com/2015/04/02/class-casting-is-anti-pattern.html</link>
      <description>&lt;p&gt;Type casting is a very useful technique when there is no time
or desire to think and design objects properly. Type casting (or
class casting) helps us work with provided objects differently,
based on the class they belong to or the interface they implement. Class
casting helps us &lt;strong&gt;discriminate&lt;/strong&gt; against the poor objects and &lt;strong&gt;segregate&lt;/strong&gt;
them by their race, gender, and religion. Can this be a good practice?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2015/03/gadkiy-utenok.jpg' style='width:600px;' alt='Гадкий утенок (1956) by Владимир Дегтярёв'/&gt;&lt;figcaption&gt;Гадкий утенок (1956) by Владимир Дегтярёв&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This is a very typical example of type casting (Google Guava is full
of it, for example &lt;a href=&quot;https://github.com/google/guava/blob/v18.0/guava/src/com/google/common/collect/Iterables.java#L104-L111&quot;&gt;&lt;code&gt;Iterables.size()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;sizeOf()&lt;/code&gt;  method calculates the size of an iterable. However, it
is smart enough to understand that if &lt;code&gt;items&lt;/code&gt; are also instances of &lt;code&gt;Collection&lt;/code&gt;,
there is no need to actually iterate them. It would be much faster to
cast them to &lt;code&gt;Collection&lt;/code&gt; and then call method &lt;code&gt;size()&lt;/code&gt;. Looks logical,
but what&amp;#39;s wrong with this approach? I see two practical problems.&lt;/p&gt;

&lt;p&gt;First, there is a &lt;strong&gt;hidden coupling&lt;/strong&gt; of &lt;code&gt;sizeOf()&lt;/code&gt; and &lt;code&gt;Collection&lt;/code&gt;. This
coupling is not visible to the clients of &lt;code&gt;sizeOf()&lt;/code&gt;. They don&amp;#39;t know that
method &lt;code&gt;sizeOf()&lt;/code&gt; relies on interface &lt;code&gt;Collection&lt;/code&gt;. If tomorrow we decide
to change it, &lt;code&gt;sizeOf()&lt;/code&gt; won&amp;#39;t work. And we&amp;#39;ll be very surprised, since
its signature says nothing about this dependency. This won&amp;#39;t happen with
&lt;code&gt;Collection&lt;/code&gt;, obviously, since it is part of the Java SDK, but with custom
classes, this may and will happen.&lt;/p&gt;

&lt;p&gt;The second problem is an inevitably &lt;strong&gt;growing complexity&lt;/strong&gt; of method &lt;code&gt;sizeOf()&lt;/code&gt;. The
more special types it has to treat differently, the more complex it will become.
This if/then forking is inevitable, since it has to check all possible
types and give them special treatment. Such complexity is a result
of a violation of the single responsibility principle. The method is not
only calculating the size of &lt;code&gt;Iterable&lt;/code&gt; but is also performing type
casting and forking based on that casting.&lt;/p&gt;

&lt;p&gt;What is the alternative? There are a few, but the most obvious
is method overloading (not available in semi-OOP languages like Ruby or PHP):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sizeOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Isn&amp;#39;t that more elegant?&lt;/p&gt;

&lt;p&gt;Philosophically speaking, type casting is discrimination  against the object
that comes into the method. The object complies with the contract provided by the
method signature. It implements the &lt;code&gt;Iterable&lt;/code&gt; interface, which
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;is a contract&lt;/a&gt;,
and it expects equal treatment with all other objects that come into
the same method. But the method discriminates objects by their types.
The method is basically asking the object about its ... race. Black
objects go right while white objects go left. That&amp;#39;s what this &lt;code&gt;instanceof&lt;/code&gt;
is doing, and that&amp;#39;s what discrimination is all about.&lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;instanceof&lt;/code&gt;, the method is segregating incoming objects by the
certain group they belong to. In this case, there are two groups: collections
and everybody else. If you are a collection, you get special treatment.
Even though you abide by the &lt;code&gt;Iterable&lt;/code&gt; contract, we still treat some objects
specially because they belong to an &amp;quot;elite&amp;quot; group called &lt;code&gt;Collection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may say that &lt;code&gt;Collection&lt;/code&gt; is just another contract that an object may
comply with. That&amp;#39;s true, but in this case, there should be another door through
which those who work by that contract should enter. You announced that
&lt;code&gt;sizeOf()&lt;/code&gt; accepts everybody who works on the &lt;code&gt;Iterable&lt;/code&gt; contract. I am an object,
and I do what the contract says. I enter the method and expect
equal treatment with everybody else who comes into the same method.
But, apparently, once inside the method, I realize that some objects have
some special privileges. Isn&amp;#39;t that discrimination?&lt;/p&gt;

&lt;p&gt;To conclude, I would consider &lt;code&gt;instanceof&lt;/code&gt; and class casting to be
anti-patterns and code smells. Once you see a need to use them,
start thinking about refactoring.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 02 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/04/02/class-casting-is-anti-pattern.html</guid>
      <dc:date>2015-04-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How AppVeyor Helps Me to Validate Pull Requests Before Rultor Merges Them</title>
      <link>http://www.yegor256.com/2015/03/29/rultor-with-appveyor.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.appveyor.com'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/appveyor.png' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.appveyor.com&quot;&gt;AppVeyor&lt;/a&gt; is a great cloud continuous integration service that builds
Windows projects. &lt;a href=&quot;http://www.rultor.com&quot;&gt;Rultor&lt;/a&gt; is a DevOps assistant, which automates
release, merge and deploy operations, using Docker containers. These posts
explain how Rultor works and what it&amp;#39;s for:
&lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;Rultor.com, a Merging Bot&lt;/a&gt;
and &lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;Master Branch Must Be Read-Only&lt;/a&gt;.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;The problem is that Rultor is running all scripts inside Docker containers
and Docker can&amp;#39;t build Windows projects. The only and the best logical solution
is to trigger AppVeyor before running all other scripts in Docker. If AppVeyor
gives a green light, we continue with our usual in-Docker script. Otherwise,
we fail the entire build. Below I explain how this automation was configured
in &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes framework&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, I got a token from my AppVeyor account (at the time
of writing it was &lt;a href=&quot;https://ci.appveyor.com/api-token&quot;&gt;here&lt;/a&gt;). I created
a text file &lt;code&gt;curl-appveyor.cfg&lt;/code&gt; with this content (it&amp;#39;s not my real token inside,
just an example):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--silent
--header &amp;quot;Authorization: Bearer 1hdmsfbs7xccb9x6g1y4&amp;quot;
--header &amp;quot;Content-Type: application/json&amp;quot;
--header &amp;quot;Accept: application/json&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, I encrypted this file, using &lt;a href=&quot;https://github.com/yegor256/rultor-remote&quot;&gt;&lt;code&gt;rultor&lt;/code&gt;&lt;/a&gt;
command line tool:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rultor encrypt -p yegor256/takes curl-appveyor.cfg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The file I creaeted was called
&lt;a href=&quot;https://github.com/yegor256/takes/blob/master/curl-appveyor.cfg.asc&quot;&gt;&lt;code&gt;curl-appveyor.cfg.asc&lt;/code&gt;&lt;/a&gt;.
I committed and pushed into &lt;a href=&quot;https://github.com/yegor256/takes&quot;&gt;yegor256/takes&lt;/a&gt;
Github repository.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add curl-appveyor.cfg.asc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -am &lt;span class=&quot;s1&quot;&gt;&amp;#39;CURL config for Appveyor&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, I configured AppVeyor &amp;quot;pinging&amp;quot; from Docker script.
This is what I did in &lt;a href=&quot;https://github.com/yegor256/takes/blob/master/.rultor.yml&quot;&gt;&lt;code&gt;.rultor.yml&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;curl-appveyor.cfg&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;repo/curl-appveyor.cfg.asc&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;|-&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;version=$(curl -K ../curl-appveyor.cfg --data &amp;quot;{accountName: &amp;#39;yegor256&amp;#39;, projectSlug: &amp;#39;takes&amp;#39;, pullRequestId: &amp;#39;${pull_id}&amp;#39;}&amp;quot; https://ci.appveyor.com/api/builds | jq -r &amp;#39;.version&amp;#39;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;while true&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;do status=$(curl -K ../curl-appveyor.cfg https://ci.appveyor.com/api/projects/yegor256/takes/build/${version} | jq -r &amp;#39;.build.status&amp;#39;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;if [ &amp;quot;${status}&amp;quot; == &amp;quot;success&amp;quot; ]; then break; fi&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;if [ &amp;quot;${status}&amp;quot; == &amp;quot;failed&amp;quot; ]; then echo &amp;quot;see https://ci.appveyor.com/project/yegor256/takes/build/${version}&amp;quot;; exit 1; fi&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;echo &amp;quot;waiting for AppVeyor build ${version}: ${status}&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;sleep 5s&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;done&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;mvn clean install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is no magic here, it&amp;#39;s very simple. First, I start a new build
using &lt;code&gt;/api/builds&lt;/code&gt; end-point of
&lt;a href=&quot;http://www.appveyor.com/docs/api/projects-builds#start-build-of-pull-request-github-only&quot;&gt;AppVeyor REST API&lt;/a&gt;.
&lt;code&gt;${pull_id}&lt;/code&gt; is an environment variable that is coming from Rultor,
it contains an integer number of current pull request.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m using &lt;a href=&quot;http://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt;
in order to parse AppVeyor JSON output.&lt;/p&gt;

&lt;p&gt;Once the build is started, I&amp;#39;m getting its unique &lt;code&gt;version&lt;/code&gt; and start
looping to check its status. I&amp;#39;m waiting for &lt;code&gt;success&lt;/code&gt; or &lt;code&gt;failed&lt;/code&gt;. Anything
else will mean that the build is still in progress and I should keep looping.&lt;/p&gt;

&lt;p&gt;You can see how it works in this pull request, for example:
&lt;a href=&quot;https://github.com/yegor256/takes/pull/93&quot;&gt;yegor256/takes#93&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/03/29/rultor-with-appveyor.html</guid>
      <dc:date>2015-03-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>JAXB Is Doing It Wrong; Try Xembly</title>
      <link>http://www.yegor256.com/2015/03/26/jaxb-vs-xembly.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.xembly.org'&gt;&lt;img src='http://img.xembly.org/logo-256x256.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_Architecture_for_XML_Binding&quot;&gt;JAXB&lt;/a&gt;
is a 10-year-old Java technology that allows us to
convert a Java object into an XML document (marshalling) and
back (unmarshalling). This technology is based on
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;setters and getters&lt;/a&gt;
and, in my opinion, violates key principles of object-oriented
programming by turning objects into &lt;strong&gt;passive data structures&lt;/strong&gt;. I would
recommend you use &lt;a href=&quot;http://www.xembly.org&quot;&gt;Xembly&lt;/a&gt;
instead for marshalling Java objects into XML documents.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This is how JAXB marshalling works. Say you have a &lt;code&gt;Book&lt;/code&gt; class that needs to be
marshalled into an XML document. You have to create getters and annotate them:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.xml.bind.annotation.XmlElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.xml.bind.annotation.XmlRootElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@XmlRootElement&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@XmlElement&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@XmlElement&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you create a marshaller and ask it to convert an instance of class
&lt;code&gt;Book&lt;/code&gt; into XML:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0132350882&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Clean Code&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Marshaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marshaller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jaxbContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createMarshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;marshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;marshal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should be expecting something like this in the output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;book&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;isbn&amp;gt;&lt;/span&gt;0132350882&lt;span class=&quot;nt&quot;&gt;&amp;lt;/isbn&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Clean Code&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/book&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So what&amp;#39;s wrong with it? Pretty much the same thing that&amp;#39;s wrong with
object-relational mapping, which is explained in
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;ORM Is an Offensive Anti-Pattern&lt;/a&gt;.
JAXB is treating an object as a bag of data, extracting the data
and converting it into XML the way JAXB wants. The object has no control
over this process. Therefore an object is not
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;an object&lt;/a&gt;
anymore but rather a passive bag of data.&lt;/p&gt;

&lt;p&gt;An ideal approach would be to redesign our class &lt;code&gt;Book&lt;/code&gt; this way:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toXML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create XML document and return&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, there are a few problems with this approach. First of all, there&amp;#39;s
massive code duplication. Building an XML document is a rather verbose
process in Java. If every class had to re-implement it in its
&lt;code&gt;toXML()&lt;/code&gt; method, we would have a big problem with duplicate code.&lt;/p&gt;

&lt;p&gt;The second problem is that we don&amp;#39;t know exactly what type of wrapping
our XML document should be delivered in. It may be a &lt;code&gt;String&lt;/code&gt; or an &lt;code&gt;InputStream&lt;/code&gt;
or maybe an instance of &lt;code&gt;org.w3c.dom.Document&lt;/code&gt;. Making many &lt;code&gt;toXML()&lt;/code&gt; methods
in each object would definitely be a disaster.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.xembly.org&quot;&gt;Xembly&lt;/a&gt; provides a solution. As I&amp;#39;ve
&lt;a href=&quot;/2014/04/09/xembly-intro.html&quot;&gt;mentioned before&lt;/a&gt;, it is
an imperative language for XML constructions and manipulations. Here is
how we can implement our &lt;code&gt;Book&lt;/code&gt; object with the help of Xembly:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.xembly.Directive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Directive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toXembly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Directives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;isbn&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, in order to build an XML document, we should use this code
outside the object:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0132350882&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Clean Code&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Xembler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toXembly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;a href=&quot;http://www.xembly.org/apidocs-0.21/org/xembly/Xembler.html&quot;&gt;&lt;code&gt;Xembler&lt;/code&gt;&lt;/a&gt;
class will convert Xembly directives into an XML document.&lt;/p&gt;

&lt;p&gt;The beauty of this solution is that the internals of the object are
not exposed via getters and the object is fully in charge of the XML
marshalling process. In addition, the compexity of these directives
may be very high &amp;mdash; much higher than the rather cumbersome annotations of JAXB.&lt;/p&gt;

&lt;p&gt;Xembly is an open-source project, so feel free to submit your questions
or corrections to &lt;a href=&quot;https://github.com/yegor256/xembly&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2015/03/26/jaxb-vs-xembly.html</guid>
      <dc:date>2015-03-26T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>