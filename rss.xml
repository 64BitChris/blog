<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"> <channel><title>yegor256.com</title><link>http://www.yegor256.com/</link> <description>RSS feed for yegor256.com</description> <pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate> <item><title>Rultor.com, Merging Bot</title><link>http://www.yegor256.com//2014/07/24/rultor-automated-merging.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://img.rultor.com/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;You get a Github pull request. You review it. It looks correct &amp;mdash; it&amp;#39;s time to merge it into &lt;code&gt;master&lt;/code&gt;. You post a comment in it, asking &lt;a href="https://github.com/rultor"&gt;@rultor&lt;/a&gt; to test and merge. Rultor starts a new &lt;a href="http://www.docker.io"&gt;Docker&lt;/a&gt; container, merges the pull request into &lt;code&gt;master&lt;/code&gt;, runs all tests and, if everything looks clean &amp;mdash; merges, pushes, and closes the request.&lt;/p&gt;&lt;p&gt;Then, you ask &lt;a href="https://github.com/rultor"&gt;@rultor&lt;/a&gt; to deploy the current version to production environment. It checks out your repository, starts a new Docker container, executes your deployment scripts and reports to you right there in the Github issue.&lt;/p&gt; </description> <pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/07/24/rultor-automated-merging.html</guid> <dc:date>2014-07-24T00:00:00+00:00</dc:date> </item> <item><title>Master Branch Must Be Read-Only</title><link>http://www.yegor256.com//2014/07/21/read-only-master-branch.html</link> <description>&lt;p&gt;Continuous integration is easy. Download Jenkins, install, create a job, click the button, and get a nice email saying that your build is broken (I assume your build is automated). Then, fix broken tests (I assume you have tests), and get a much better looking email saying that your build is clean.&lt;/p&gt;&lt;p&gt;Then, tweet about it, claiming that your team is using continuous integration.&lt;/p&gt;&lt;p&gt;Then, in a few weeks, start filtering out Jenkins alerts, into their own folder, so that they don&amp;#39;t bother you anymore. Anyway, your team doesn&amp;#39;t have the time or desire to fix all unit tests every time someone breaks them.&lt;/p&gt;&lt;p&gt;After all, we all know that unit testing is not for a team working with deadlines, right?&lt;/p&gt;&lt;p&gt;Wrong. Continuous integration can and must work.&lt;/p&gt; </description> <pubDate>Mon, 21 Jul 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/07/21/read-only-master-branch.html</guid> <dc:date>2014-07-21T00:00:00+00:00</dc:date> </item> <item><title>Liquibase with Maven</title><link>http://www.yegor256.com//2014/07/20/liquibase-in-maven.html</link> <description>&lt;p&gt;&lt;a href="http://www.liquibase.org"&gt;Liquibase&lt;/a&gt; is a migration management tool for relational databases. It versionalizes schema and data changes in a database; similar to the way Git or SVN works for source code. Thanks to their &lt;a href="http://www.liquibase.org/documentation/maven/"&gt;Maven plugin&lt;/a&gt;, Liquibase can be used as a part of a build automation scenario.&lt;/p&gt; </description> <pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/07/20/liquibase-in-maven.html</guid> <dc:date>2014-07-20T00:00:00+00:00</dc:date> </item> <item><title>How to Read MANIFEST.MF Files</title><link>http://www.yegor256.com//2014/07/03/how-to-read-manifest-mf.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://manifests.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Every Java package (JAR, WAR, EAR, etc.) has a &lt;a href="http://docs.oracle.com/javase/tutorial/deployment/jar/manifestindex.html"&gt;&lt;code&gt;MANIFEST.MF&lt;/code&gt;&lt;/a&gt; file in the &lt;code&gt;META-INF&lt;/code&gt; directory. The file contains a list of attributes, which describe this particular package. For example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;Manifest-Version: 1.0 Created-By: 1.7.0_06 (Oracle Corporation) Main-Class: MyPackage.MyClass&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When your application has multiple JAR dependencies, you have multiple &lt;code&gt;MANIFEST.MF&lt;/code&gt; files in your class path. All of them have the same location: &lt;code&gt;META-INF/MANIFEST.MF&lt;/code&gt;. Very often it is necessary to go through all of them in runtime and find the attribute by its name.&lt;/p&gt;&lt;p&gt;&lt;a href="http://manifests.jcabi.com"&gt;jcabi-manifests&lt;/a&gt; makes it possible with a one-liner:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.jcabi.manifests.Manifests&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Manifests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Created-By&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; </description> <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/07/03/how-to-read-manifest-mf.html</guid> <dc:date>2014-07-03T00:00:00+00:00</dc:date> </item> <item><title>Custom Pygments Lexer in Jekyll</title><link>http://www.yegor256.com//2014/06/29/custom-lexer-in-jekyll.html</link> <description>&lt;p&gt;I needed to create a custom syntax highlighting for &lt;a href="http://www.requs.org"&gt;requs.org&lt;/a&gt; on which I&amp;#39;m using Jekyll for site rendering.&lt;/p&gt;&lt;p&gt;This is how my code blocks look in markdown pages:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;{ % highlight requs %} User is a &amp;quot;human being&amp;quot;. { % endhighlight %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I created a custom &lt;a href="http://pygments.org/docs/lexerdevelopment/"&gt;Pygments lexer&lt;/a&gt;:&lt;/p&gt; </description> <pubDate>Sun, 29 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/06/29/custom-lexer-in-jekyll.html</guid> <dc:date>2014-06-29T00:00:00+00:00</dc:date> </item> <item><title>SASS in Java Webapp</title><link>http://www.yegor256.com//2014/06/26/sass-in-java-webapp.html</link> <description>&lt;p&gt;&lt;a href="http://sass-lang.com/"&gt;SASS&lt;/a&gt; is a powerful and very popular language for writing &lt;a href="http://www.w3.org/Style/CSS/Overview.en.html"&gt;CSS&lt;/a&gt; style sheets. This is how I&amp;#39;m using SASS in my Maven projects.&lt;/p&gt;&lt;p&gt;First, I change the extensions of &lt;code&gt;.css&lt;/code&gt; files to &lt;code&gt;.scss&lt;/code&gt; and move them from &lt;code&gt;src/main/webapp/css&lt;/code&gt; to &lt;code&gt;src/main/scss&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Then, I configure the &lt;a href="https://github.com/Jasig/sass-maven-plugin"&gt;sass-maven-plugin&lt;/a&gt; (get its latest versions in &lt;a href="http://search.maven.org/"&gt;Maven Central&lt;/a&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.jasig.maven&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;sass-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;generate-css&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;generate-resources&lt;span class="nt"&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;update-stylesheets&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;sassSourceDirectory&amp;gt;&lt;/span&gt;${basedir}/src/main/scss&lt;span class="nt"&gt;&amp;lt;/sassSourceDirectory&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;destination&amp;gt;&lt;/span&gt;${project.build.directory}/css&lt;span class="nt"&gt;&amp;lt;/destination&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; </description> <pubDate>Thu, 26 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/06/26/sass-in-java-webapp.html</guid> <dc:date>2014-06-26T00:00:00+00:00</dc:date> </item> <item><title>XML+XSLT in a Browser</title><link>http://www.yegor256.com//2014/06/25/xml-and-xslt-in-browser.html</link> <description>&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Separation_of_presentation_and_content"&gt;Separating data and their presentation&lt;/a&gt; is a great concept. Take HTML and CSS for example. HTML is supposed to have pure data and CSS is supposed to format that data in order to make it readable by a human. Years ago, that was probably the intention of HTML/CSS, but in reality it doesn&amp;#39;t work like that. Mostly because CSS is not powerful enough.&lt;/p&gt;&lt;p&gt;We still have to format our data using HTML tags, while CSS can help slightly with positioning and decorating.&lt;/p&gt;&lt;p&gt;On the other hand, XML with &lt;a href="http://en.wikipedia.org/wiki/XSLT"&gt;XSLT&lt;/a&gt; implements perfectly the idea of separating data and presentation. XML documents, like HTML, are supposed to contain data only without any information about positioning or formatting. XSL stylesheets position and decorate the data. XSL is a much more powerful language. That&amp;#39;s why it&amp;#39;s possible to avoid any formatting inside XML.&lt;/p&gt;&lt;p&gt;The latest versions of Chrome, Safari, FireFox and IE all support this mechanism. When a browser retrieves an XML document from a server, and the document has an XSL stylesheet &lt;a href="http://www.w3.org/TR/xml-stylesheet/"&gt;associated&lt;/a&gt; with it &amp;mdash; the browser transforms XML into HTML on-fly.&lt;/p&gt; </description> <pubDate>Wed, 25 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/06/25/xml-and-xslt-in-browser.html</guid> <dc:date>2014-06-25T00:00:00+00:00</dc:date> </item> <item><title>Deploy Jekyll to Github Pages</title><link>http://www.yegor256.com//2014/06/22/jekyll-github-deploy.html</link> <description>&lt;p&gt;This blog is written in &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; and is hosted at &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;. It uses half a dozen custom plugins, which &lt;a href="https://help.github.com/articles/using-jekyll-plugins-with-github-pages"&gt;are not allowed there&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Here is how I deploy it:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;jgd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;#39;s it. &lt;a href="http://rubygems.org/gems/jgd"&gt;jgd&lt;/a&gt; is my Ruby gem (stands for &amp;quot;Jekyll Github Deploy&amp;quot;), which does the trick. Here is &lt;a href="https://github.com/yegor256/jekyll-github-deploy/blob/master/bash/deploy.sh"&gt;what it does&lt;/a&gt;:&lt;/p&gt; </description> <pubDate>Sun, 22 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/06/22/jekyll-github-deploy.html</guid> <dc:date>2014-06-22T00:00:00+00:00</dc:date> </item> <item><title>CasperJS Tests in Maven Build</title><link>http://www.yegor256.com//2014/06/21/casperjs-with-maven.html</link> <description>&lt;p&gt;I&amp;#39;m a big fan of automated testing in general and integration testing in particular. I strongly believe that effort spent on writing tests are direct investments into quality and stability of the product under development.&lt;/p&gt;&lt;p&gt;&lt;a href="http://casperjs.org/"&gt;CasperJS&lt;/a&gt; is a testing framework on top of &lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;, which is a headless browser. Using CasperJS, we can ensure that our application responds correctly to requests sent by a regular web browser.&lt;/p&gt; </description> <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/06/21/casperjs-with-maven.html</guid> <dc:date>2014-06-21T00:00:00+00:00</dc:date> </item> <item><title>Limit Java Method Execution Time</title><link>http://www.yegor256.com//2014/06/20/limit-method-execution-time.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://aspects.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Say, you want to allow a Java method to work for a maximum of five seconds and want an exception to be thrown if the timeframe is exceeded. Here is how you can do it with &lt;a href="http://aspects.jcabi.com"&gt;jcabi-aspects&lt;/a&gt; and &lt;a href="http://eclipse.org/aspectj/"&gt;AspectJ&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Resource&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Timeable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SECONDS&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;openConnection&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getContent&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; </description> <pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/06/20/limit-method-execution-time.html</guid> <dc:date>2014-06-20T00:00:00+00:00</dc:date> </item> <item><title>Avoid String Concatenation</title><link>http://www.yegor256.com//2014/06/19/avoid-string-concatenation.html</link> <description>&lt;p&gt;This is &amp;quot;string concatentation&amp;quot;, and it is a bad practice:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="c1"&gt;// bad practice, don&amp;#39;t reuse!&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why? Some may say that it is slow, mostly because parts of the resulting string are copied multiple times. Indeed, on every &lt;code&gt;+&lt;/code&gt; operator, &lt;code&gt;String&lt;/code&gt; class allocates a new block in memory and copies everything it has into it; plus a suffix being concatenated. This is true, but this is not the point here.&lt;/p&gt; </description> <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/06/19/avoid-string-concatenation.html</guid> <dc:date>2014-06-19T00:00:00+00:00</dc:date> </item> <item><title>Objects Should Be Immutable</title><link>http://www.yegor256.com//2014/06/09/objects-should-be-immutable.html</link> <description>&lt;p&gt;In object-oriented programming, an object is &lt;a href="http://en.wikipedia.org/wiki/Immutable_object"&gt;immutable&lt;/a&gt; if its state can&amp;#39;t be modified after it is created.&lt;/p&gt;&lt;p&gt;In Java, a good example of an immutable object is &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html"&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. Once created, we can&amp;#39;t modify its state. We can request that it creates new strings, but its own state will never change.&lt;/p&gt;&lt;p&gt;However, there are not so many immutable classes in JDK. Take, for example, class &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/util/Date.html"&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;. It is possible to modify its state using &lt;code&gt;setTime()&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I don&amp;#39;t know why the JDK designers decided to make these two very similar classes differently. However, I believe that the design of a mutable &lt;code&gt;Date&lt;/code&gt; has a many flaws, while the immutable &lt;code&gt;String&lt;/code&gt; is much more in the spirit of the object-oriented paradigm.&lt;/p&gt;&lt;p&gt;Moreover, I think that &lt;strong&gt;all classes should be immutable in a perfect object-oriented world&lt;/strong&gt;. Unfortunately, sometimes, it is technically not possible due to limitations in JVM. Nevertheless, we should always aim for the best.&lt;/p&gt;&lt;p&gt;This is an incomplete list of arguments in favor of immutability:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;immutable objects are simpler to construct, test, and use&lt;/li&gt; &lt;li&gt;truly immutable objects are always thread-safe&lt;/li&gt; &lt;li&gt;they help to avoid temporal coupling&lt;/li&gt; &lt;li&gt;their usage is side-effect free (no defensive copies)&lt;/li&gt; &lt;li&gt;identity mutability problem is avoided&lt;/li&gt; &lt;li&gt;they always have failure atomicity&lt;/li&gt; &lt;li&gt;they are much easier to cache&lt;/li&gt; &lt;li&gt;they prevent NULL references, &lt;a href="/2014/05/13/why-null-is-bad.html"&gt;which are bad&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Let&amp;#39;s discuss the most important arguments one by one.&lt;/p&gt; </description> <pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/06/09/objects-should-be-immutable.html</guid> <dc:date>2014-06-09T00:00:00+00:00</dc:date> </item> <item><title>Java Method Logging with AOP and Annotations</title><link>http://www.yegor256.com//2014/06/01/aop-aspectj-java-method-logging.html</link> <description>&lt;p&gt;Sometimes, I want to log (through &lt;a href="http://www.slf4j.org"&gt;slf4j&lt;/a&gt; and &lt;a href="http://logging.apache.org/log4j/2.x/"&gt;log4j&lt;/a&gt;) every execution of a method, seeing what arguments it receives, what it returns and how much time every execution takes. This is how I&amp;#39;m doing it, with help of &lt;a href="http://eclipse.org/aspectj/"&gt;AspectJ&lt;/a&gt;, &lt;a href="http://aspects.jcabi.com"&gt;jcabi-aspects&lt;/a&gt; and Java 6 annotations:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Loggable&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;power&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is what I see in log4j output:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;[INFO] com.example.Foo #power(2, 10): 1024 in 12μs [INFO] com.example.Foo #power(3, 3): 27 in 4μs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nice, isn&amp;#39;t it? Now, let&amp;#39;s see how it works.&lt;/p&gt; </description> <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/06/01/aop-aspectj-java-method-logging.html</guid> <dc:date>2014-06-01T00:00:00+00:00</dc:date> </item> <item><title>Object-Oriented Java Adapter of Amazon S3 SDK</title><link>http://www.yegor256.com//2014/05/26/amazon-s3-java-oop-adapter.html</link> <description>&lt;figure class='badge'&gt;&lt;img src='http://img.yegor256.com/2014/05/s3-logo.png' style='width:150px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;I&amp;#39;m a big fan of Amazon Web Services (AWS). I&amp;#39;m using them in almost all of my projects. One of their most popular services is &lt;a href="http://aws.amazon.com/s3/"&gt;Simple Storage Service (S3)&lt;/a&gt;. It is a storage for binary objects (files) with unique names, accessible through HTTP or RESTful API.&lt;/p&gt;&lt;p&gt;Using S3 is very simple. You create a &amp;quot;bucket&amp;quot; with a unique name, upload your &amp;quot;object&amp;quot; into the bucket through their web interface or through RESTful API, and then download it again (either through HTTP or the API.)&lt;/p&gt;&lt;p&gt;Amazon ships the &lt;a href="https://aws.amazon.com/sdkforjava/"&gt;Java SDK&lt;/a&gt; that wraps their RESTful API. However, this SDK is not object-oriented at all. It is purely imperative and procedural &amp;mdash; it just mirrors the API.&lt;/p&gt;&lt;p&gt;For example, in order to download an existing object &lt;code&gt;doc.txt&lt;/code&gt; from bucket &lt;code&gt;test-1&lt;/code&gt;, you have to do something like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;AWSCredentials&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;BasicAWSCredentials&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;AmazonS3&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AmazonS3Client&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;S3Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GetObjectRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test-1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;doc.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getObjectContent&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IOUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure class='badge'&gt;&lt;img src='http://img.jcabi.com/logo-square.png' style='width:64px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;As always, procedural programming has its inevitable disadvantages. To overcome them all, I designed &lt;a href="http://s3.jcabi.com"&gt;jcabi-s3&lt;/a&gt;, which is a small object-oriented adapter for Amazon SDK. This is how the same object-reading task can be accomplished with &lt;a href="http://s3.jcabi.com"&gt;jcabi-s3&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Simple&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Bucket&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test-1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Ocket&lt;/span&gt; &lt;span class="n"&gt;ocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ocket&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;doc.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Ocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ocket&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why is this approach better? Well, there are a number of obvious advantages.&lt;/p&gt; </description> <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/05/26/amazon-s3-java-oop-adapter.html</guid> <dc:date>2014-05-26T00:00:00+00:00</dc:date> </item> <item><title>Get Rid of Java Static Loggers</title><link>http://www.yegor256.com//2014/05/23/avoid-java-static-logger.html</link> <description>&lt;p&gt;This is a very common practice in Java (using &lt;a href="http://www.slf4j.org/apidocs/org/slf4j/LoggerFactory.html"&gt;&lt;code&gt;LoggerFactory&lt;/code&gt;&lt;/a&gt; from &lt;a href="http://www.slf4j.org/"&gt;slf4j&lt;/a&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="n"&gt;LOGGER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// save the file&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isInfoEnabled&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file {} saved successfuly&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What&amp;#39;s wrong with it? Code duplication.&lt;/p&gt; </description> <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/05/23/avoid-java-static-logger.html</guid> <dc:date>2014-05-23T00:00:00+00:00</dc:date> </item> <item><title>MySQL Maven Plugin</title><link>http://www.yegor256.com//2014/05/21/mysql-maven-plugin.html</link> <description>&lt;p&gt;I was using MySQL in a few Java web projects and found out there was no Maven plugin that would help me to test my DAO classes against a real MySQL server. There are plenty of mechanisms to mock a database persistence layer both in memory and on disc. However, it is always good to make sure that your classes are tested against a database identical to the one you have in production environment.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://mysql.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I&amp;#39;ve created my own Maven plugin, &lt;a href="http://mysql.jcabi.com"&gt;jcabi-mysql-maven-plugin&lt;/a&gt;, that does exactly two things: starts a MySQL server on &lt;code&gt;pre-integration-test&lt;/code&gt; phase and shuts it down on &lt;code&gt;post-integration-test&lt;/code&gt;.&lt;/p&gt; </description> <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/05/21/mysql-maven-plugin.html</guid> <dc:date>2014-05-21T00:00:00+00:00</dc:date> </item> <item><title>Atomic Counters at Stateful.co</title><link>http://www.yegor256.com//2014/05/18/cloud-autoincrement-counters.html</link> <description>&lt;figure class='badge'&gt;&lt;img src='http://img.yegor256.com/2014/04/dynamodb-logo.jpg' style='width:150px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;Amazon DynamoDB is a great NoSQL cloud database. It is cheap, highly reliable and rather powerful. I&amp;#39;m using it in many web systems.&lt;/p&gt;&lt;p&gt;There is one feature that it lacks, though &amp;mdash; auto-increment attributes.&lt;/p&gt;&lt;p&gt;Say that you have a table with a list of messages:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;+------+----------------------------+ | id | Attributes | +------+----------------------------+ | 205 | author=&amp;quot;jeff&amp;quot;, text=&amp;quot;...&amp;quot; | | 206 | author=&amp;quot;bob&amp;quot;, text=&amp;quot;...&amp;quot; | | 207 | author=&amp;quot;alice&amp;quot;, text=&amp;quot;...&amp;quot; | +------+----------------------------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every time you add a new item to the table, a new value of &lt;code&gt;id&lt;/code&gt; has to be set. And this has to be done with concurrency in mind. SQL databases like PostgreSQL, Oracle, MySQL and others support auto-increment features. When you add a new record to the table, the value of the primary key is omitted and the server retrieves the next one automatically. If a number of &lt;code&gt;INSERT&lt;/code&gt; requests arrive at the same time the server guarantees that the numbers won&amp;#39;t be duplicated.&lt;/p&gt;&lt;p&gt;However, DynamoDB doesn&amp;#39;t have this feature. Instead, DynamoDB has &lt;a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html#WorkingWithItems.AtomicCounters"&gt;Atomic Counters&lt;/a&gt; and &lt;a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html#WorkingWithItems.ConditionalUpdate"&gt;Conditional Updates&lt;/a&gt;, which are very similar features. Still, they&amp;#39;re not exactly the same.&lt;/p&gt;&lt;p&gt;In case of an atomic counter, you should create a supplementary table and keep the latest value of &lt;code&gt;id&lt;/code&gt; in it.&lt;/p&gt;&lt;p&gt;In case of conditional updates, you should retry a few times in case of collisions.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;img src='http://img.stateful.co/pomegranate.svg' style='width:128px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;To make life easier in a few of my applications, I created a simple web service &amp;mdash; &lt;a href="http://www.stateful.co"&gt;stateful.co&lt;/a&gt;. It provides a simple atomic counter feature through its RESTful API.&lt;/p&gt; </description> <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/05/18/cloud-autoincrement-counters.html</guid> <dc:date>2014-05-18T00:00:00+00:00</dc:date> </item> <item><title>Object-Oriented Github API</title><link>http://www.yegor256.com//2014/05/14/object-oriented-github-java-sdk.html</link> <description>&lt;figure class='badge'&gt;&lt;img src='http://img.yegor256.com/2014/05/github-logo.png' style='width:128px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.github.com"&gt;Github&lt;/a&gt; is an awesome platform for maintaining Git sources and tracking project issues. I moved all my projects (both private and public) to Github about three years ago and have no regrets. Moreover, Github gives access to almost all of its features through RESTful JSON API.&lt;/p&gt;&lt;p&gt;There are &lt;a href="https://developer.github.com/libraries/"&gt;a few&lt;/a&gt; Java SDKs that wrap and expose the API. I tried to use them, but faced a number of issues:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;They are not really object-oriented (even though one of them has a description that says it is)&lt;/li&gt; &lt;li&gt;They are not based on JSR-353 (JSON Java API)&lt;/li&gt; &lt;li&gt;They provide no mocking instruments&lt;/li&gt; &lt;li&gt;They don&amp;#39;t cover the entire API and can&amp;#39;t be extended&lt;/li&gt; &lt;/ul&gt;&lt;figure class='badge'&gt;&lt;img src='http://img.jcabi.com/logo-square.png' style='width:64px;' alt='badge'/&gt;&lt;/figure&gt;&lt;p&gt;Keeping in mind all those drawbacks, I created my own library &amp;mdash; &lt;a href="http://github.jcabi.com"&gt;jcabi-github&lt;/a&gt;. Let&amp;#39;s look at its most important advantages.&lt;/p&gt; </description> <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/05/14/object-oriented-github-java-sdk.html</guid> <dc:date>2014-05-14T00:00:00+00:00</dc:date> </item> <item><title>Why NULL is Bad?</title><link>http://www.yegor256.com//2014/05/13/why-null-is-bad.html</link> <description>&lt;p&gt;A simple example of &lt;code&gt;NULL&lt;/code&gt; usage in Java:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;1 2 3 4 5 6 7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="nf"&gt;getByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;What is wrong with this method?&lt;/p&gt; </description> <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/05/13/why-null-is-bad.html</guid> <dc:date>2014-05-13T00:00:00+00:00</dc:date> </item> <item><title>OOP Alternative to Utility Classes</title><link>http://www.yegor256.com//2014/05/05/oop-alternative-to-utility-classes.html</link> <description>&lt;p&gt;A utility class (aka helper class) is a &amp;quot;structure&amp;quot; that has only static methods and encapsulates no state. &lt;code&gt;StringUtils&lt;/code&gt;, &lt;code&gt;IOUtils&lt;/code&gt;, &lt;code&gt;FileUtils&lt;/code&gt; from &lt;a href="http://commons.apache.org/"&gt;Apache Commons&lt;/a&gt;; &lt;code&gt;Iterables&lt;/code&gt; and &lt;code&gt;Iterators&lt;/code&gt; from &lt;a href="https://code.google.com/p/guava-libraries/"&gt;Guava&lt;/a&gt;, and &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html"&gt;&lt;code&gt;Files&lt;/code&gt;&lt;/a&gt; from JDK7 are perfect examples of utility classes.&lt;/p&gt;&lt;p&gt;This design idea is very popular in the Java world (as well as C#, Ruby, etc.) because utility classes provide common functionality used everywhere.&lt;/p&gt;&lt;p&gt;Here, we want to follow the &lt;a href="http://en.wikipedia.org/wiki/Don&amp;#x27;t_repeat_yourself"&gt;DRY principle&lt;/a&gt; and avoid duplication. Therefore, we place common code blocks into utility classes and reuse them when necessary:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="c1"&gt;// This is a terrible design, don&amp;#39;t reuse&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NumberUtils&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Indeed, this a very convenient technique!?&lt;/p&gt; </description> <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/05/05/oop-alternative-to-utility-classes.html</guid> <dc:date>2014-05-05T00:00:00+00:00</dc:date> </item> <item><title>DynamoDB Local Maven Plugin</title><link>http://www.yegor256.com//2014/05/01/dynamodb-local-maven-plugin.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://aws.amazon.com/dynamodb'&gt;&lt;img src='http://img.yegor256.com/2014/04/dynamodb-logo.jpg' style='width:150px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.html"&gt;DynamoDB Local&lt;/a&gt; is a locally running copy of Amazon DynamoDB server. Amazon developed the tool and based it on SQLite. It acts as a real DynamoDB service through the RESTful API.&lt;/p&gt;&lt;p&gt;I guess, DynamoDB Local is meant to be used in integration testing and this is how we&amp;#39;re going to use it below.&lt;/p&gt;&lt;p&gt;I use Maven to run all of my Java integration testing using &lt;a href="http://maven.apache.org/surefire/maven-failsafe-plugin/"&gt;maven-failsafe-plugin&lt;/a&gt;. The philosophy of integration testing with Maven is that you start all your supplementary test stubs during the &lt;code&gt;pre-integration-test&lt;/code&gt; phase, run your tests in the &lt;code&gt;integration-test&lt;/code&gt; phase and then shutdown all stubs during the &lt;code&gt;post-integration-test&lt;/code&gt;.&lt;/p&gt;&lt;figure class='badge'&gt;&lt;a href='http://dynamodb.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;It would be great if it were possible to use DynamoDB Local that way. I didn&amp;#39;t find any Maven plugins for that purpose, so I decided to create my own &amp;mdash;&lt;a href="https://github.com/jcabi/jcabi-dynamodb-maven-plugin"&gt;jcabi-dynamodb-maven-plugin&lt;/a&gt;.&lt;/p&gt; </description> <pubDate>Thu, 01 May 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/05/01/dynamodb-local-maven-plugin.html</guid> <dc:date>2014-05-01T00:00:00+00:00</dc:date> </item> <item><title>W3C Java Validators</title><link>http://www.yegor256.com//2014/04/29/w3c-java-validators.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://w3c.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;A few years ago, I created two Java wrappers for W3C validators: (&lt;a href="http://validator.w3.org/"&gt;HTML&lt;/a&gt; and &lt;a href="http://jigsaw.w3.org/css-validator/"&gt;CSS&lt;/a&gt;). Both wrappers seemed to be working fine and were even listed by W3C on &lt;a href="http://validator.w3.org/docs/api.html"&gt;their website&lt;/a&gt; in the API section. Until recently, these wrappers have always been part of &lt;a href="http://www.rexsl.com"&gt;ReXSL&lt;/a&gt; library.&lt;/p&gt;&lt;p&gt;A few days ago, though, I took the wrappers out of ReXSL and published them as a standalone library &amp;mdash; &lt;a href="http://w3c.jcabi.com"&gt;jcabi-w3c&lt;/a&gt;. Consequently, now seems to be a good time to write a few words about them.&lt;/p&gt;&lt;p&gt;Below is an example that demonstrates how you can validate an HTML document against W3C compliancy rules:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;1 2 3 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.jcabi.w3c.ValidatorBuilder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;ValidatorBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;html&amp;gt;hello, world!&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valid&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; </description> <pubDate>Tue, 29 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/29/w3c-java-validators.html</guid> <dc:date>2014-04-29T00:00:00+00:00</dc:date> </item> <item><title>XML/XPath Matchers for Hamcrest</title><link>http://www.yegor256.com//2014/04/28/xml-xpath-hamcrest-matchers.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://matchers.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="https://github.com/hamcrest/JavaHamcrest"&gt;Hamcrest&lt;/a&gt; is my favorite instrument in unit testing. It replaces the JUnit procedural assertions of &lt;code&gt;org.junit.Assert&lt;/code&gt; with an object-oriented mechanism. However, I will discuss that subject in more detail sometime later.&lt;/p&gt;&lt;p&gt;Now, though, I want to demonstrate a new library published today on Github and Maven Central: &lt;a href="http://matchers.jcabi.com"&gt;jcabi-matchers&lt;/a&gt;. jcabi-matchers is a collection of Hamcrest matchers to make XPath assertions in XML and XHTML documents.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s say, for instance, a class that is undergoing testing produces an XML that needs to contain a single &lt;code&gt;&amp;lt;message&amp;gt;&lt;/code&gt; element with the content &lt;code&gt;&amp;quot;hello, world!&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This is how that code would look in a unit test:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.jcabi.matchers.XhtmlMatchers&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.hamcrest.MatcherAssert&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Test&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;hasWelcomeMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MatcherAssert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;createXml&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;XhtmlMatchers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasXPaths&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/document[count(message)=1]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/document/message[.=&amp;#39;hello, world!&amp;#39;]&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; </description> <pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/28/xml-xpath-hamcrest-matchers.html</guid> <dc:date>2014-04-28T00:00:00+00:00</dc:date> </item> <item><title>Typical Mistakes in Java Code</title><link>http://www.yegor256.com//2014/04/27/typical-mistakes-in-java-code.html</link> <description>&lt;p&gt;This page contains most typical mistakes I see in the Java code of people working with me. Static analysis (we&amp;#39;re using &lt;a href="http://www.qulice.com"&gt;qulice&lt;/a&gt; can&amp;#39;t catch all of the mistakes for obvious reasons, and that&amp;#39;s why I decided to list them all here.&lt;/p&gt; </description> <pubDate>Sun, 27 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/27/typical-mistakes-in-java-code.html</guid> <dc:date>2014-04-27T00:00:00+00:00</dc:date> </item> <item><title>Java XML Parsing Made Easy</title><link>http://www.yegor256.com//2014/04/24/java-xml-parsing-and-traversing.html</link> <description>&lt;p&gt;Unlike with many other modern languages, parsing XML in Java requires more than one line of code. XML traversing using XPath takes even more code, and I find this is unfair and annoying.&lt;/p&gt;&lt;p&gt;I&amp;#39;m a big fan of XML and use it it in almost every Java application. Some time ago, I decided to put all of that XML-to-DOM parsing code into a small library &amp;mdash;&lt;a href="http://xml.jcabi.com"&gt;jcabi-xml&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Put simply, the library is a convenient wrapper for JDK-native DOM manipulations. That&amp;#39;s why it is small and dependency-free. With the following example, you can see just how simple XML parsing can be:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.jcabi.xml.XML&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.jcabi.xml.XMLDocument&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;XMLDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;root&amp;gt;&amp;lt;a&amp;gt;hello&amp;lt;/a&amp;gt;&amp;lt;b&amp;gt;world!&amp;lt;/b&amp;gt;&amp;lt;/root&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; </description> <pubDate>Thu, 24 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/24/java-xml-parsing-and-traversing.html</guid> <dc:date>2014-04-24T00:00:00+00:00</dc:date> </item> <item><title>Basic HTTP Auth for S3 Buckets</title><link>http://www.yegor256.com//2014/04/21/s3-http-basic-auth.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.s3auth.com'&gt;&lt;img src='http://img.s3auth.com/logo.png' style='width:200px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt; is a simple and very useful storage of binary objects (aka &amp;quot;files&amp;quot;). To use it, you create a &amp;quot;bucket&amp;quot; there with a unique name and upload your objects.&lt;/p&gt;&lt;p&gt;Afterwards, AWS guarantees your object will be available for download through their &lt;a href="http://docs.aws.amazon.com/AmazonS3/latest/API/APIRest.html"&gt;RESTful API&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;A few years ago, AWS introduced a S3 feature S3 called &lt;a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html"&gt;static website hosting&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;With static website hosting, you simply turn on the feature and all objects in your bucket become available through public HTTP. This is an awesome feature for hosting static content, such as images, JavaScript files, video and audio content.&lt;/p&gt;&lt;p&gt;When using the hosting, you need to change the CNAME record in your DNS so that it points to &lt;code&gt;www.example.com.aws.amazon.com&lt;/code&gt;. After changing the DNS entry, your static website is available at &lt;code&gt;www.example.com&lt;/code&gt; just as it would be normally.&lt;/p&gt;&lt;p&gt;When using Amazon S3, though, it is not possible to protect your website because the content is purely static. This means you can&amp;#39;t have a login page on the front end. With the service, you can either make your objects either absolutely public &amp;mdash; so that anyone can see them online &amp;mdash; or assign access rights to them &amp;mdash; but only for users connected through RESTful API.&lt;/p&gt; </description> <pubDate>Mon, 21 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/21/s3-http-basic-auth.html</guid> <dc:date>2014-04-21T00:00:00+00:00</dc:date> </item> <item><title>Mocking of HTTP Server in Java</title><link>http://www.yegor256.com//2014/04/18/jcabi-http-server-mocking.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Recently, I explained a &lt;a href="/2014/04/11/jcabi-http-intro.html"&gt;fluent Java HTTP client&lt;/a&gt; created (mostly) to make HTTP interactions more object-oriented than with other available clients,including: &lt;a href="http://hc.apache.org/httpclient-3.x/"&gt;Apache Client&lt;/a&gt;, &lt;a href="https://jersey.java.net/documentation/latest/client.html"&gt;Jersey Client&lt;/a&gt; and plain old &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/net/HttpURLConnection.html"&gt;&lt;code&gt;HttpURLConnection&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This client ships in the &lt;a href="http://http.jcabi.com"&gt;jcabi-http&lt;/a&gt; Maven artifact. However, the client part is not the only benefit of using &lt;a href="http://http.jcabi.com"&gt;jcabi-http&lt;/a&gt;. Jcabi also includes a server component that can help you in unit and integration testing of your HTTP clients.&lt;/p&gt; </description> <pubDate>Fri, 18 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/18/jcabi-http-server-mocking.html</guid> <dc:date>2014-04-18T00:00:00+00:00</dc:date> </item> <item><title>Object-Oriented DynamoDB API</title><link>http://www.yegor256.com//2014/04/14/jcabi-dynamo-java-api-of-aws-dynamodb.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://dynamo.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I&amp;#39;m a big fan of cloud computing in general and of &lt;a href="http://aws.amazon.com/"&gt;Amazon Web Services&lt;/a&gt; in particular. I honestly believe that in a few years big providers will host all, or almost all, computing and storage resources. When this is the case, we won&amp;#39;t have to worry too much anymore about downtime, backups and system administrators. &lt;a href="http://aws.amazon.com/dynamodb/"&gt;DynamoDB&lt;/a&gt; is one of the steps towards this future.&lt;/p&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;This looks cool - jcabi-dynamo - a &lt;a href="https://twitter.com/search?q=%23Java&amp;amp;src=hash"&gt;#Java&lt;/a&gt; Object layer atop the &lt;a href="https://twitter.com/search?q=%23DynamoDB&amp;amp;src=hash"&gt;#DynamoDB&lt;/a&gt; SDK - &lt;a href="http://t.co/khRFR2joKX"&gt;http://t.co/khRFR2joKX&lt;/a&gt; &lt;a href="https://twitter.com/search?q=%23aws&amp;amp;src=hash"&gt;#aws&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeff Barr (@jeffbarr) &lt;a href="https://twitter.com/jeffbarr/statuses/380813867971915777"&gt;September 19, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;DynamoDB is a &lt;a href="http://en.wikipedia.org/wiki/NoSQL"&gt;NoSQL&lt;/a&gt; database accessible through &lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer"&gt;RESTful&lt;/a&gt; JSON API. Its design is relatively simple. There are tables, which basically are collections of data structs, or in AWS terminology, &amp;quot;items.&amp;quot;&lt;/p&gt;&lt;p&gt;Every item has a mandatory &amp;quot;hash,&amp;quot; an optional &amp;quot;range&amp;quot; and a number of other optional attributes. For instance, take the example table &lt;code&gt;depts&lt;/code&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;+------+--------+---------------------------+ | dept | worker | Attributes | +------+--------+---------------------------+ | 205 | Jeff | job=&amp;quot;manager&amp;quot;, sex=&amp;quot;male&amp;quot; | | 205 | Bob | age=43, city=&amp;quot;Chicago&amp;quot; | | 398 | Alice | age=27, job=&amp;quot;architect&amp;quot; | +------+--------+---------------------------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Java, Amazon provides an &lt;a href="https://aws.amazon.com/documentation/sdkforjava/"&gt;SDK&lt;/a&gt;, which mirrors all RESTful calls to Java methods. The SDK works fine, but is designed in a pure &lt;a href="http://en.wikipedia.org/wiki/Procedural_programming"&gt;procedural&lt;/a&gt; style.&lt;/p&gt;&lt;p&gt;Let&amp;#39;s say we want to add a new item to the table above. RESTful call &lt;a href="http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html"&gt;&lt;code&gt;putItem&lt;/code&gt;&lt;/a&gt; looks like (in essence):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;putItem: tableName: depts item: dept: 435 worker: &amp;quot;William&amp;quot; job: &amp;quot;programmer&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is what the Amazon server needs to know in order to create a new item in the table. This is how you&amp;#39;re supposed to make this call through the AWS Java SDK:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt; 1 2 3 4 5 6 7 8 9 10 11 12 13&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PutItemRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PutItemRequest&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setTableName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;depts&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeValue&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dept&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AttributeValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;435&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;worker&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AttributeValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;William&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;job&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AttributeValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;programmer&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;AmazonDynamoDB&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// instantiate it with credentials&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shutdown&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The above script works fine, but there is one major drawback &amp;mdash; it is not object oriented. It is a perfect example of an imperative &lt;a href="http://en.wikipedia.org/wiki/Procedural_programming"&gt;procedural programming&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;To allow you to compare, let me show what I&amp;#39;ve done with &lt;a href="http://dynamo.jcabi.com"&gt;jcabi-dynamo&lt;/a&gt;. Here is my code, which does exactly the same thing, but in an &lt;a href="http://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object-oriented&lt;/a&gt; way:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;1 2 3 4 5 6 7 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// instantiate it with credentials&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;depts&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dept&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;435&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;worker&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;William&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;job&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;programmer&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; </description> <pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/14/jcabi-dynamo-java-api-of-aws-dynamodb.html</guid> <dc:date>2014-04-14T00:00:00+00:00</dc:date> </item> <item><title>Fluent Java Http Client</title><link>http://www.yegor256.com//2014/04/11/jcabi-http-intro.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;In the world of Java, there are plenty of HTTP clients from which to choose. Nevertheless, I decided to create a new one because none of the other clients satisfied fully all of my requirements. Maybe, I&amp;#39;m too demanding. Still, this is how my &lt;a href="http://http.jcabi.com/"&gt;jcabi-http&lt;/a&gt; client interacts when you make an HTTP request and expect a successful HTML page in return:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;1 2 3 4 5 6 7 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JdkRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://www.google.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/users&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;queryParam&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;333&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;back&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Accept&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RestResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpURLConnection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;HTTP_OK&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;I designed this new client with the following requirements in mind:&lt;/p&gt; </description> <pubDate>Fri, 11 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/11/jcabi-http-intro.html</guid> <dc:date>2014-04-11T00:00:00+00:00</dc:date> </item> <item><title>Xembly, an Assembly for XML</title><link>http://www.yegor256.com//2014/04/09/xembly-intro.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.xembly.org'&gt;&lt;img src='http://img.xembly.org/logo-256x256.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I use XML in almost every one of my projects. And, despite all the fuss about JSON/YAML, I honestly believe that XML is one of the greatest languages ever invented. Also, I believe that the beauty of XML reveals itself when used in combination with related technologies.&lt;/p&gt;&lt;p&gt;For example, you can expose your data in XML and render it for the end-user using &lt;a href="http://www.w3.org/Style/XSL/"&gt;XSL stylesheet&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Another example would be when you validate the same data, before rendering, to ensure that the structure is correct. You can do this with the &lt;a href="http://www.w3.org/TR/xmlschema11-1/"&gt;XSD&lt;/a&gt; schema. Alternatively, you can pick specific data elements from the entire document by using &lt;a href="http://www.w3.org/TR/xpath/"&gt;XPath&lt;/a&gt; queries.&lt;/p&gt;&lt;p&gt;Essentially, these three technologies, XSL, XSD schema and XPath, are what makes XML so powerful.&lt;/p&gt;&lt;p&gt;However, there can be times when XML falls short. For instance, imagine you have an existing document that needs to be modified just slightly. For example, let&amp;#39;s use the following:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;accounts&amp;gt;&lt;/span&gt; [...] &lt;span class="nt"&gt;&amp;lt;acc&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;34&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Jeffrey&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;balance&amp;gt;&lt;/span&gt;305&lt;span class="nt"&gt;&amp;lt;/balance&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/acc&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;acc&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;35&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Walter&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;balance&amp;gt;&lt;/span&gt;50090&lt;span class="nt"&gt;&amp;lt;/balance&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/acc&amp;gt;&lt;/span&gt; [...] &lt;span class="nt"&gt;&amp;lt;/accounts&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code represents a list of accounts. Each account has its own &lt;code&gt;id&lt;/code&gt; and several child elements. In our example, we need to find the account belonging to &lt;code&gt;Jeffrey&lt;/code&gt; and increase its balance by &lt;code&gt;500&lt;/code&gt;. How would we do this?&lt;/p&gt;&lt;p&gt;Well, there are a few possible solutions:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;SAX-parse the document, change the balance and save the stream;&lt;/li&gt; &lt;li&gt;DOM-parse it, find the element with XPath, change the value and then print it;&lt;/li&gt; &lt;li&gt;apply a parametrized XSL stylesheet;&lt;/li&gt; &lt;li&gt;apply XQuery small script to make changes&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;All of these methods have their own drawbacks. However, all of them have one particular problem in common &amp;mdash; they are very verbose. With each of the above methods, you need at least a page of code to perform this rather simple operation. Furthermore, if the logic of the operation becomes more complex, the amount of needed code grows much faster than you may expect.&lt;/p&gt;&lt;p&gt;Simply put, XML lacks a tool for primitive data manipulations within a document. Perhaps, it is this shortcoming that makes XML unpopular with some.&lt;/p&gt;&lt;p&gt;Anyway, here is a tool I created a few month ago: &lt;a href="http://www.xembly.org"&gt;Xembly&lt;/a&gt;. It is an imperative language with a few simple directives and resembles &lt;a href="http://en.wikipedia.org/wiki/Assembly_language"&gt;Assembly&lt;/a&gt; in style. Thus, the name - Xembly. With Xembly, there are no loops, conditions or variables - just a sequence of directives with arguments.&lt;/p&gt; </description> <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/09/xembly-intro.html</guid> <dc:date>2014-04-09T00:00:00+00:00</dc:date> </item> <item><title>Phantomjs as an HTML Validator</title><link>http://www.yegor256.com//2014/04/06/phandom.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.phandom.org'&gt;&lt;img src='http://img.phandom.org/logo-256x256.png' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I created &lt;a href="http://www.phandom.org"&gt;phandom.org&lt;/a&gt; a few months ago, but yesterday finally found the time to make some needed changes to it. So, now is a good time to explain how I&amp;#39;m using Phandom in some of my unit tests.&lt;/p&gt;&lt;p&gt;Before I get started, though, I should say a few words about &lt;a href="http://phantomjs.org/"&gt;phantomjs&lt;/a&gt;, which is a JavaScript interface for WebKit. WebKit, on the other hand, is a web browser without a user interface. WebKit is a C++ library that enables manipulation of HTML content, through DOM calls. For example, this is a simple JavaScript located code in &lt;code&gt;example.js&lt;/code&gt;:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;1 2 3 4 5 6 7 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;webpage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://google.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loaded!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;phantom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;We run phantomjs from the command line with the following code:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;phantomjs example.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Phantomjs creates a &lt;code&gt;page&lt;/code&gt; object (provided by &lt;a href="https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage"&gt;webpage&lt;/a&gt; module inside phantomjs), and then asks it to &lt;code&gt;open()&lt;/code&gt; a Web page. The object communicates with WebKit and converts this call into DOM instructions. After which, the page loads. The phantomjs engine then terminates on line 6.&lt;/p&gt; </description> <pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/06/phandom.html</guid> <dc:date>2014-04-06T00:00:00+00:00</dc:date> </item> <item><title>Movies for Thanasis</title><link>http://www.yegor256.com//2014/04/06/movies-for-thanasis.html</link> <description>&lt;p&gt;Sometime ago, I recommended a list of movies to a friend of mine after he told me was losing all interest in &amp;quot;Hollywood.&amp;quot;&lt;/p&gt;&lt;p&gt;Level C titles are supposed to be impossible to understand unless you&amp;#39;ve seen (and understood) their prequels -- listed in sections A and B. So, start browsing the lists in sections A and post your comments if you have any. :)&lt;/p&gt;&lt;p&gt;Level A&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0108399/"&gt;True Romance (1993)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0110912/"&gt;Pulp Fiction (1994)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0266697/"&gt;Kill Bill (2003)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0118996/"&gt;Doberman (1997)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0144201/"&gt;La fille sur le pont (1999)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0290673/"&gt;Irreversible (2002)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0120669/"&gt;Fear and Loathing in Las Vegas (1998)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0119879/"&gt;Perdita Durango (1997)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0107165/"&gt;Golden Balls (1993)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0120753/"&gt;The Million Dollar Hotel (2000)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0245574/"&gt;Y Tu Mamá También (2001)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0105236/"&gt;Reservoir Dogs (1992)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0117951/"&gt;Trainspotting (1996)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0137523/"&gt;Fight Club (1999)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0106307/"&gt;Arizona Dream (1992)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0118843/"&gt;Black Cat, White Cat (1998)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0118789/"&gt;Buffalo &amp;#39;66 (1998)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0104545/"&gt;Jamon Jamon (1992)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0110632/"&gt;Natural Born Killers (1994)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0124901/"&gt;Thursday (1998)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.imdb.com/title/tt0115781/"&gt;Bullet (1996)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </description> <pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/06/movies-for-thanasis.html</guid> <dc:date>2014-04-06T00:00:00+00:00</dc:date> </item> <item><title>First Post</title><link>http://www.yegor256.com//2014/04/06/introduction.html</link> <description>&lt;p&gt;This is the first post on my new blog. Therefore, it&amp;#39;s not about anything in particular - just an introduction and my way of saying hello. This blog will be primarily about software development ideas. As my &lt;a href="/about-me.html"&gt;About Me&lt;/a&gt; page says, I&amp;#39;m passionate about software quality, and will write solely about my ideas and views on it.&lt;/p&gt;&lt;p&gt;Anyway, welcome to my new blog. Together, let&amp;#39;s see how this works out! :)&lt;/p&gt;&lt;p&gt;ps. BTW, I purchased the &lt;a href="http://www.myfonts.com/fonts/ascender/cambria/"&gt;Cambria font&lt;/a&gt; just for this new blog. It cost, &amp;euro;98. Nevertheless, I think its a good investment for this new venture.&lt;/p&gt; </description> <pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com//2014/04/06/introduction.html</guid> <dc:date>2014-04-06T00:00:00+00:00</dc:date> </item> <dc:date>2014-07-24T00:00:00+00:00</dc:date> </channel> </rss>