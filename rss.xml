<?xml version="1.0"?> <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"> <channel><title>yegor256.com</title><link>http://www.yegor256.com</link> <description>Yegor Bugayenko About Programming</description> <language>en-us</language> <copyright>Yegor Bugayenko, 2014</copyright> <lastBuildDate>Thu, 25 Sep 2014 00:00:00 +0000</lastBuildDate> <image> <url>/images/icon-128x128.png</url><title>yegor256.com</title><link>http://www.yegor256.com/rss.xml</link> </image> <item><title>DI Containers are Code Polluters</title><link>http://www.yegor256.com/2014/09/25/di-containers-are-evil.html</link> <description>&lt;p&gt;While &lt;a href="http://martinfowler.com/articles/injection.html"&gt;dependency injection&lt;/a&gt; (aka, &amp;quot;DI&amp;quot;) is a natural technique of composing objects in OOP (known long before the term was &lt;a href="http://www.martinfowler.com/articles/injection.html"&gt;introduced by Martin Fowler&lt;/a&gt;), &lt;a href="http://www.spring.io"&gt;Spring IoC&lt;/a&gt;, &lt;a href="https://code.google.com/p/google-guice/"&gt;Google Guice&lt;/a&gt;, &lt;a href="http://docs.oracle.com/javaee/6/tutorial/doc/giwhl.html"&gt;Java EE6 CDI&lt;/a&gt;, &lt;a href="http://square.github.io/dagger/"&gt;Dagger&lt;/a&gt; and other &lt;a href="https://en.wikipedia.org/wiki/Dependency_injection"&gt;DI frameworks&lt;/a&gt; turn it into an anti-pattern.&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;I&amp;#39;m not going to discuss obvious arguments against &amp;quot;setter injections&amp;quot; (like in &lt;a href="http://www.springbyexample.org/examples/intro-to-ioc-basic-setter-injection.html"&gt;Spring IoC&lt;/a&gt;) and &amp;quot;field injections&amp;quot; (like in &lt;a href="http://picocontainer.codehaus.org/annotated-field-injection.html"&gt;PicoContainer&lt;/a&gt;). These mechanisms simply violate basic principles of object-oriented programming and encourage us to create incomplete, mutable objects, that get stuffed with data during the course of application execution. Remember: ideal objects &lt;a href="%7B%20%%20post_url%202014/jun/2014-06-09-objects-should-be-immutable%20%%7D"&gt;must be immutable&lt;/a&gt; and &lt;a href="%7B%20%%20post_url%202014/sep/2014-09-16-getters-and-setters-are-evil%20%%7D"&gt;may not contain setters&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Instead, let&amp;#39;s talk about &amp;quot;constructor injection&amp;quot; (like in &lt;a href="https://github.com/google/guice/wiki/Injections#constructor-injection"&gt;Google Guice&lt;/a&gt;) and its use with &lt;strong&gt;dependency injection containers&lt;/strong&gt;. I&amp;#39;ll try to show why I consider these containers a redundancy, at least.&lt;/p&gt;&lt;h2 id="what-is-dependency-injection?"&gt;What is Dependency Injection?&lt;/h2&gt;&lt;p&gt;This is what dependency injection is (not really different from a plain old object composition):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Budget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Budget&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;total&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cell&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SELECT SUM(cost) FROM ledger&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The object &lt;code&gt;data&lt;/code&gt; is called a &amp;quot;dependency&amp;quot;.&lt;/p&gt;&lt;p&gt;A &lt;code&gt;Budget&lt;/code&gt; doesn&amp;#39;t know what kind of database it is working with. All it needs from the database is its ability to fetch a cell, using an arbitrary SQL query, via method &lt;code&gt;cell()&lt;/code&gt;. We can instantiate a &lt;code&gt;Budget&lt;/code&gt; with a PostgreSQL implementation of the &lt;code&gt;DB&lt;/code&gt; interface, for example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Budget&lt;/span&gt; &lt;span class="n"&gt;budget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Budget&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Postgres&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jdbc:postgresql:5740/main&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Total is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;budget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, we&amp;#39;re &amp;quot;injecting&amp;quot; a dependency into a new object &lt;code&gt;budget&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;An alternative to this &amp;quot;dependency injection&amp;quot; approach would be to let &lt;code&gt;Budget&lt;/code&gt; decide what database it wants to work with:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Budget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Postgres&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jdbc:postgresql:5740/main&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// class methods&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is very dirty and leads to 1) code duplication, 2) inability to reuse, and 3) inability to test, etc. No need to discuss why. It&amp;#39;s obvious.&lt;/p&gt;&lt;p&gt;Thus, dependency injection via a constructor is an amazing technique. Well, not even a technique, really. More like a feature of Java and all other object-oriented languages. It&amp;#39;s expected that almost any object will want to encapsulate some knowledge (aka, a &amp;quot;state&amp;quot;). That&amp;#39;s what constructors are for.&lt;/p&gt;&lt;h2 id="what-is-a-di-container?"&gt;What is a DI Container?&lt;/h2&gt;&lt;p&gt;So far so good, but here comes the dark side &amp;mdash; a dependency injection container. Here is how it works (let&amp;#39;s use Google Guice as an example):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.inject.Inject&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Budget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nd"&gt;@Inject&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Budget&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// same methods as above&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pay attention: the constructor is annotated with &lt;a href="http://docs.oracle.com/javaee/6/api/javax/inject/Inject.html"&gt;&lt;code&gt;@Inject&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Then, we&amp;#39;re supposed to configure a container somewhere, when the application starts:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Injector&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Guice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createInjector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AbstractModule&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Postgres&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jdbc:postgresql:5740/main&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some frameworks even allow us to configure the injector in an XML file.&lt;/p&gt;&lt;p&gt;From now on, we are not allowed to instantiate &lt;code&gt;Budget&lt;/code&gt; through the &lt;code&gt;new&lt;/code&gt; operator, like we did before. Instead, we should use the injector we just created:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Injection&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// as we just did in the previous snippet&lt;/span&gt; &lt;span class="n"&gt;Budget&lt;/span&gt; &lt;span class="n"&gt;budget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Budget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Total is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;budget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The injection automatically finds out that in order to instantiate a &lt;code&gt;Budget&lt;/code&gt; it has to provide an argument for its constructor. It will use an instance of class &lt;code&gt;Postgres&lt;/code&gt;, which we instantiated in the injector.&lt;/p&gt;&lt;p&gt;This is the right and recommended way to use Guice. There are a few even darker patterns, though, which are possible but not recommended. For example, you can make your injector a singleton and use it right inside the &lt;code&gt;Budget&lt;/code&gt; class. These mechanisms are considered wrong even by DI container makers, however, so let&amp;#39;s ignore them and focus on the recommended scenario.&lt;/p&gt;&lt;h2 id="what-is-this-for?"&gt;What Is This For?&lt;/h2&gt;&lt;p&gt;Let me reiterate and summarize the scenarios of &lt;strong&gt;incorrect usage&lt;/strong&gt; of dependency injection containers:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;p&gt;Field injection&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Setter injection&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Passing injector as a dependency&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Making injector a global singleton&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;If we put all of them aside, all we have left is the constructor injection explained above. And how does that help us? Why do we need it? Why can&amp;#39;t we use plain old &lt;code&gt;new&lt;/code&gt; in the main class of the application?&lt;/p&gt;&lt;p&gt;The container we created simply adds more lines to the code base, or even more files, if we use XML. And it doesn&amp;#39;t add anything, except an additional complexity. We should always remember this if we have the question: &amp;quot;What database is used as an argument of a Budget?&amp;quot;&lt;/p&gt;&lt;h2 id="the-right-way"&gt;The Right Way&lt;/h2&gt;&lt;p&gt;Now, let me show you a real life example of using &lt;code&gt;new&lt;/code&gt; to construct an application. This is how we create a &amp;quot;thinking engine&amp;quot; in &lt;a href="http://www.rultor.com"&gt;rultor.com&lt;/a&gt; (full class is in &lt;a href="https://github.com/yegor256/rultor/blob/1.34/src/main/java/com/rultor/agents/Agents.java"&gt;&lt;code&gt;Agents.java&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt;&lt;script src="https://gist.github.com/c76c06baee1f74e3100e.js?file=Agents.java"&gt; &lt;/script&gt;&lt;p&gt;Impressive? This is a true object composition. I believe this is how a proper object-oriented application should be instantiated.&lt;/p&gt;&lt;p&gt;And DI containers? In my opinion, they just add unnecessary noise.&lt;/p&gt; </description> <pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/25/di-containers-are-evil.html</guid> </item> <item><title>Why Monetary Awards Don't Work?</title><link>http://www.yegor256.com/2014/09/24/why-monetary-awards-dont-work.html</link> <description>&lt;p&gt;Monetary rewards for employees. Do they work? Should we use them? Can money motivate creative minds? Will a programmer work better if he gets paid only when he reaches his goals and objectives?&lt;/p&gt;&lt;div class="video"&gt; &lt;iframe width="640" height="360" src="//www.youtube.com/embed/XJRHkbrZuO8?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt; &lt;/div&gt;&lt;p&gt;Much research has already been done on this subject, and most of it proves that connecting results with money is a very demotivating approach. For example, Ian Larkin &lt;a href="http://hbswk.hbs.edu/item/7215.html"&gt;says&lt;/a&gt; that the most productive workers &amp;quot;suffered a 6-8% decrease in productivity after the award was instituted&amp;quot;.&lt;/p&gt;&lt;p&gt;I believe this is completely true. Money may become a terrible de-motivator for all modern employees (not just programmers).&lt;/p&gt;&lt;p&gt;My question is &amp;mdash; why is this so?&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;Why doesn&amp;#39;t money work, even when it was invented to be a universal instrument to measure our labor? Why can&amp;#39;t an American dollar, which has been used for centuries as a trading tool between working people, be used anymore?&lt;/p&gt;&lt;p&gt;Why, in a modern office, do we try to hide monetary motivation and replace it with &lt;a href="http://www.hrworld.com/features/25-employee-rewards/"&gt;everything else&lt;/a&gt;, like free lunches, team building events, paid vacations, etc. Why don&amp;#39;t we just say &amp;mdash; &amp;quot;Jeff completed his task faster than everybody else. This is his $500 check. Whoever completes the next task gets $300,&amp;quot; out loud in the office?... Sounds uncomfortable, doesn&amp;#39;t it?&lt;/p&gt;&lt;p&gt;Why does money as a motivator scare us?&lt;/p&gt;&lt;p&gt;I have an answer.&lt;/p&gt;&lt;p&gt;Money doesn&amp;#39;t work when there are no ground rules.&lt;/p&gt;&lt;p&gt;When we say that Jeff will get a $500 bonus if he finishes his task on time, but don&amp;#39;t say what he should do when someone distracts him &amp;mdash; Jeff gets frustrated. He also doesn&amp;#39;t understand who his boss is anymore. Does he just work for the bonus, or should he also satisfy a CTO who comes to his desk asking him to do something else urgently? Is Jeff allowed to tell the CTO &amp;quot;to get lost&amp;quot; because he&amp;#39;s working towards his own personal objective (the bonus)?&lt;/p&gt;&lt;p&gt;In all cases I&amp;#39;ve seen myself and in all research cases I&amp;#39;ve read about, people keep repeating the same mistake. They create a rewards program (monetary or not) without setting ground rules for the team. By doing so, they encourage people to play wild-wild west, where the fastest gets the cash bag. Obviously, the Bad and the Ugly get to the prize faster, while the Good gets demotivated and depressed.&lt;/p&gt;&lt;figure&gt;&lt;img src='/images/2014/09/rules-with-and-without-rewards.png' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;&lt;p class="note"&gt; In a clockwise direction from the top left corner: The Good, the Bad and the Ugly (1966) by Sergio Leone; Roger Federer; A Serious Man (2009) by Ethan Coen and Joel Coen; Two and a Half Men (TV Series). &lt;/p&gt;&lt;p&gt;What do I mean by ground rules?&lt;/p&gt;&lt;p&gt;It should be a simple document (&lt;a href="http://www.pmi.org/PMBOK-Guide-and-Standards.aspx"&gt;PMBOK&lt;/a&gt; calls it a Staffing Management Plan) that helps me, as a team member, answer at least these basic questions:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;p&gt;How my personal results are measured?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Who gives me tasks and who do I report to?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How should I resolve conflicts between tasks?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What are my personal deadlines for every task?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Do I have measurable quality expectations for my deliverables?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do my mistakes affect my performance grade?&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The ground rules document should be superior to your boss. If the document says that your results get an A+ grade, the boss should have no say. If she doesn&amp;#39;t like you personally, it doesn&amp;#39;t matter. You get an A+ grade, and you are the best. That&amp;#39;s it.&lt;/p&gt;&lt;p&gt;Does your team have such a document? Can you answer all of these questions? If not, you&amp;#39;re not ready for a rewards program. It will only make your management situation worse, just like all the scientific research says. Rewards will motivate the most cunning to take advantage of the most hard working and good-natured. Team spirit will suffer, big time.&lt;/p&gt;&lt;p&gt;On the other hand, if you have that &amp;quot;ground rules&amp;quot; document and you strictly follow it, giving monetary rewards to your workers will significantly increase their performance and motivation. They will know exactly what needs to be done to get the rewards, and they won&amp;#39;t have any distraction. Your team won&amp;#39;t be a group of wild west gunslingers anymore, but more like players in a sports arena. The best players will go further, and the worst will know exactly what needs to be done to improve. Fair competition will lead to a better cumulative result.&lt;/p&gt;&lt;p&gt;Moreover, if your ground rules are strict and explicit, you can use not only rewards, but also punishments. And your team will gladly accept them, because they will help emphasize what (and who) works best and help get rid of the waste.&lt;/p&gt;&lt;p&gt;I&amp;#39;m speaking from experience here. In &lt;a href="http://www.xdsd.org"&gt;XDSD&lt;/a&gt; we&amp;#39;re not only rewarding programmers with money, but we also never pay for anything except delivered results. We manage to do this mostly because our groud rules are very strict and non-ambiguous. And we never break them.&lt;/p&gt; </description> <pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/24/why-monetary-awards-dont-work.html</guid> </item> <item><title>Built-in Fake Objects</title><link>http://www.yegor256.com/2014/09/23/built-in-fake-objects.html</link> <description>&lt;p&gt;While mock objects are perfect instruments for unit testing, mocking through mock frameworks may turn your unit tests into an unmaintainable mess. Thanks to them we often hear that &amp;quot;mocking is bad&amp;quot; and &amp;quot;mocking is evil&amp;quot;.&lt;/p&gt;&lt;p&gt;The root cause of this complexity is that our objects are too big. They have many methods and these methods return other objects, which also have methods. When we pass a mock version of such an object as a parameter, we should make sure that all of its methods return valid objects.&lt;/p&gt;&lt;p&gt;This leads to inevitable complexity, which turns unit tests to &lt;a href="https://news.ycombinator.com/item?id=7353767"&gt;waste&lt;/a&gt; almost impossible to maintain.&lt;/p&gt;&lt;!--more--&gt;&lt;h2 id="object-hierarchy"&gt;Object Hierarchy&lt;/h2&gt;&lt;p&gt;Take the &lt;code&gt;Region&lt;/code&gt; interface from &lt;a href="http://dynamo.jcabi.com"&gt;jcabi-dynamo&lt;/a&gt; as an example (this snippet and all others in this article are simplified, for the sake of brevity):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Region&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt; &lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Its &lt;code&gt;table()&lt;/code&gt; method returns an instance of the &lt;code&gt;Table&lt;/code&gt; interface, which has its own methods:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Table&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Frame&lt;/span&gt; &lt;span class="nf"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Attributes&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="nf"&gt;region&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Interface &lt;code&gt;Frame&lt;/code&gt;, returned by the &lt;code&gt;frame()&lt;/code&gt; method, also has its own methods. And so on. In order to create a properly mocked instance of interface &lt;code&gt;Region&lt;/code&gt;, one would normally create a dozen other mock objects. With &lt;a href="http://www.mockito.org"&gt;Mockito&lt;/a&gt; it will look like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testMe&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// many more lines here...&lt;/span&gt; &lt;span class="n"&gt;Frame&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doReturn&lt;/span&gt;&lt;span class="o"&gt;(...).&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;anyString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And all of this is just a scaffolding before the actual testing.&lt;/p&gt;&lt;h2 id="sample-use-case"&gt;Sample Use Case&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s say, you&amp;#39;re developing a project that uses jcabi-dynamo for managing data in DynamoDB. Your class may look similar to this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;empl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;dynamo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;empl&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dynamo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;region&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;employees&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getN&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can imagine how difficult it will be to unit test this class, using Mockito, for example. First, we have to mock the &lt;code&gt;Region&lt;/code&gt; interface. Then, we have to mock a &lt;code&gt;Table&lt;/code&gt; interface and make sure it is returned by the &lt;code&gt;table()&lt;/code&gt; method. Then, we have to mock a &lt;code&gt;Frame&lt;/code&gt; interface, etc.&lt;/p&gt;&lt;p&gt;The unit test will be much longer than the class itself. Besides that, its real purpose, which is to test the retrieval of an employee&amp;#39;s salary, will not be obvious to the reader.&lt;/p&gt;&lt;p&gt;Moreover, when we need to test a similar method of a similar class, we will need to restart this mocking from scratch. Again, multiple lines of code, which will look very similar to what we have already written.&lt;/p&gt;&lt;h2 id="fake-classes"&gt;Fake Classes&lt;/h2&gt;&lt;p&gt;The solution is to create fake classes and ship them together with real classes. This is what &lt;a href="http://dynamo.jcabi.com"&gt;jcabi-dynamo&lt;/a&gt; is doing. Just look at its &lt;a href="http://dynamo.jcabi.com/apidocs-0.16.1/index.html"&gt;JavaDoc&lt;/a&gt;. There is a package called &lt;code&gt;com.jcabi.dynamo.mock&lt;/code&gt; that contains only fake classes, suitable only for unit testing.&lt;/p&gt;&lt;p&gt;Even though their sole purpose is to optimize unit testing, we ship them together with production code, in the same JAR package.&lt;/p&gt;&lt;p&gt;This is what a test will look like, when a fake class &lt;code&gt;MkRegion&lt;/code&gt; is used:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EmployeeTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;canFetchSalaryFromDynamoDb&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Region&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MkRegion&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;H2Data&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;employees&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;employees&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AttributeValue&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;withN&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="n"&gt;emp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This test looks obvious to me. First, we create a fake DynamoDB region, which works on top of &lt;code&gt;H2Data&lt;/code&gt; storage (in-memory H2 database). The storage will be ready for a single &lt;code&gt;employees&lt;/code&gt; table with a hash key &lt;code&gt;name&lt;/code&gt; and a single &lt;code&gt;salary&lt;/code&gt; attribute.&lt;/p&gt;&lt;p&gt;Then, we put a record into the table, with a hash &lt;code&gt;Jeff&lt;/code&gt; and a salary &lt;code&gt;50000&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Finally, we create an instance of class &lt;code&gt;Employee&lt;/code&gt; and check how it fetches the salary from DynamoDB.&lt;/p&gt;&lt;p&gt;I&amp;#39;m currently doing the same thing in almost every open source library I&amp;#39;m working with. I&amp;#39;m creating a collection of fake classes, that simplify testing inside the library and for its users.&lt;/p&gt;&lt;p&gt;BTW, a great article on the same subject: &lt;a href="http://nedbatchelder.com/blog/201206/tldw_stop_mocking_start_testing.html"&gt;tl;dw: Stop mocking, start testing&lt;/a&gt; by Ned Batchelder.&lt;/p&gt; </description> <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/23/built-in-fake-objects.html</guid> </item> <item><title>Remote Programming in Teamed.io</title><link>http://www.yegor256.com/2014/09/22/remote-programming-interview.html</link> <description>&lt;p&gt;Here is an interview taken by Lisette Sutherland from &lt;a href="http://www.collaborationsuperpowers.com"&gt;www.CollaborationSuperpowers.com&lt;/a&gt;, a few hours ago, which I enjoyed to give :)&lt;/p&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/TWBBZK_XRNU?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;!--more--&gt;&lt;p&gt;I answered these questions (approximately):&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;p&gt;How Teamed.io differs from other software companies (0:50)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do we control programmers remotely (1:59)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Do we compare ourselves with open source (3:52)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do we build a network of programmers (5:10)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Why people like to work with us (5:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What happens when a programmer fails (7:50)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How can it be financially successful (9:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do we organize &amp;quot;team building&amp;quot; (11:50)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What challenges do we have (14:50)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What about micro-management (17:55)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Can this work in a non-IT sector (19:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What do you do to manage the team (20:48)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Isn&amp;#39;t it difficult to manage so many tasks (24:18)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Do we have cultural issues (25:35)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Is it true that people are not enough result-oriented (27:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Are there any other challenges (29:12)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What do I like personally about it (30:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do we scale our teams when we need more programmers (32:01)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What an &amp;quot;unlimited pool of talents&amp;quot; means (34:40)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;What advice do I have for those who work remotely (37:50)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Where do I work from, personally (39:10)?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How do we find clients (42:29)?&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Enjoy :)&lt;/p&gt; </description> <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/22/remote-programming-interview.html</guid> </item> <item><title>Getters/Setters. Evil. Period.</title><link>http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html</link> <description>&lt;p&gt;There is an old debate, started in 2003 by Allen Holub in this &lt;a href="http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html"&gt;Why getter and setter methods are evil&lt;/a&gt; famous article, about whether getters/setters is an anti-pattern and should be avoided or if it is something we inevitably need in object-oriented programming. I&amp;#39;ll try to add my two cents to this discussion.&lt;/p&gt;&lt;p&gt;The gist of the following text is this: getters and setters is a terrible practice and those who use it can&amp;#39;t be excused. Again, to avoid any misunderstanding, I&amp;#39;m not saying that get/set should be avoided when possible. No. I&amp;#39;m saying that you should &lt;strong&gt;never&lt;/strong&gt; have them near your code.&lt;/p&gt;&lt;!--more--&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT'&gt;&lt;img src='/images/2014/09/object-thinking-by-david-west.png' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Arrogant enough to catch your attention? You&amp;#39;ve been using that get/set pattern for 15 years and you&amp;#39;re a respected Java architect? And you don&amp;#39;t want to hear that nonsense from a stranger? Well, I understand your feelings. I felt almost the same when I stumbled upon &lt;a href="http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT"&gt;Object Thinking&lt;/a&gt; by David West, the best book about object-oriented programming I&amp;#39;ve read so far. So please. Calm down and try to understand while I try to explain.&lt;/p&gt;&lt;h2 id="existing-arguments"&gt;Existing Arguments&lt;/h2&gt;&lt;p&gt;There are a few arguments against &amp;quot;accessors&amp;quot; (another name for getters and setters), in an object-oriented world. All of them, I think, are not strong enough. Let&amp;#39;s briefly go through them.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tell, Don&amp;#39;t Ask&lt;/strong&gt; Allen Holub says, &amp;quot;Don&amp;#39;t ask for the information you need to do the work; ask the object that has the information to do the work for you&amp;quot;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Violated Encapsulation Principle&lt;/strong&gt; An object can be teared apart by other objects, since they are able to inject any new data into it, through setters. The object simply can&amp;#39;t encapsulate its own state safely enough, since anyone can alter it.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Exposed Implementation Details&lt;/strong&gt; If we can get an object out of another object, we are relying too much on the first object&amp;#39;s implementation details. If tomorrow it will change, say, the type of that result, we have to change our code as well.&lt;/p&gt;&lt;p&gt;All these justifications are reasonable, but they are missing the main point.&lt;/p&gt;&lt;h2 id="fundamental-misbelief"&gt;Fundamental Misbelief&lt;/h2&gt;&lt;p&gt;Most programmers believe that an object is a data structure with methods. I&amp;#39;m quoting &lt;a href="http://java.dzone.com/articles/getters-and-setters-are-not"&gt;Getters and Setters Are Not Evil&lt;/a&gt;, an article by Bozhidar Bozhanov:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;But the majority of objects for which people generate getters and setters are simple data holders.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;This misconception is the consequence of a huge misunderstanding! Objects are not &amp;quot;simple data holders&amp;quot;. Objects are &lt;strong&gt;not&lt;/strong&gt; data structures with attached methods. This &amp;quot;data holder&amp;quot; concept came to object-oriented programming from procedural languages, especially C and COBOL. I&amp;#39;ll say it again: an object is &lt;strong&gt;not&lt;/strong&gt; a set of data elements and functions that manipulate them. An object is &lt;strong&gt;not&lt;/strong&gt; a data entity.&lt;/p&gt;&lt;p&gt;What is it then?&lt;/p&gt;&lt;h2 id="a-ball-and-a-dog"&gt;A Ball and A Dog&lt;/h2&gt;&lt;p&gt;In true object-oriented programming, objects are living creatures, like you and me. They are living organisms, with their own behaviour, properties and a life cycle.&lt;/p&gt;&lt;p&gt;Can a living organism have a setter? Can you &amp;quot;set&amp;quot; a ball to a dog? Not really. But that is exactly what the following piece of software is doing:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Ball&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How does that sound?&lt;/p&gt;&lt;p&gt;Can you get a ball from a dog? Well, you probably can, if she ate it and you&amp;#39;re doing surgery. In that case, yes, we can &amp;quot;get&amp;quot; a ball from a dog. This is what I&amp;#39;m talking about:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;Ball&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBall&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or an even more ridiculous example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setWeight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;23kg&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Can you imagine this transaction in the real world? :)&lt;/p&gt;&lt;p&gt;Does it look similar to what you&amp;#39;re writing every day? If yes, then you&amp;#39;re a procedural programmer. Admit it. And this is what David West has to say about it, on page 30 of his book:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Step one in the transformation of a successful procedural developer into a successful object developer is a lobotomy.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;Do you need a lobotomy? Well, I definitely needed one and received it, while reading West&amp;#39;s &lt;a href="http://www.amazon.com/gp/product/0735619654/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735619654&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=NQQHJZPHOKM6BTCT"&gt;Object Thinking&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="object-thinking"&gt;Object Thinking&lt;/h2&gt;&lt;p&gt;Start thinking like an object and you will immediately rename those methods. This is what you will probably get:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;take&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Ball&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="n"&gt;Ball&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;give&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we&amp;#39;re treating the dog as a real animal, who can take a ball from us and can give it back, when we ask. Worth mentioning is that the dog can&amp;#39;t give &lt;code&gt;NULL&lt;/code&gt; back. Dogs simply don&amp;#39;t know what &lt;code&gt;NULL&lt;/code&gt; is :) Object thinking immediately eliminates &lt;a href="/2014/05/13/why-null-is-bad.html"&gt;NULL references&lt;/a&gt; from your code.&lt;/p&gt;&lt;figure&gt;&lt;img src='/images/2014/09/fish-called-wanda.png' style='width:600px;' alt='A Fish Called Wanda (1988) by Charles Crichton'/&gt;&lt;figcaption&gt;A Fish Called Wanda (1988) by Charles Crichton&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Besides that, object thinking will lead to object immutability, like in the &amp;quot;weight of the dog&amp;quot; example. You would re-write that like this instead:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;23kg&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The dog is an immutable living organism, which doesn&amp;#39;t allow anyone from the outside to change her weight, or size, or name, etc. She can tell, on request, her weight or name. There is nothing wrong with public methods that demonstrate requests for certain &amp;quot;insides&amp;quot; of an object. But these methods are not &amp;quot;getters&amp;quot; and they should never have the &amp;quot;get&amp;quot; prefix. We&amp;#39;re not &amp;quot;getting&amp;quot; anything from the dog. We&amp;#39;re not getting her name. We&amp;#39;re asking her to tell us her name. See the difference?&lt;/p&gt;&lt;p&gt;We&amp;#39;re not talking semantics here, either. We are differentiating the procedural programming mindset from an object-oriented one. In procedural programming, we&amp;#39;re working with data, manipulating them, getting, setting, and deleting when necessary. We&amp;#39;re in charge, and the data is just a passive component. The dog is nothing to us &amp;mdash; it&amp;#39;s just a &amp;quot;data holder&amp;quot;. It doesn&amp;#39;t have its own life. We are free to get whatever is necessary from it and set any data into it. This is how C, COBOL, Pascal and many other procedural languages work(ed).&lt;/p&gt;&lt;p&gt;On the contrary, in a true object-oriented world, we treat objects like living organisms, with their own date of birth and a moment of death &amp;mdash; with their own identity and habits, if you wish. We can ask a dog to give us some piece of data (for example, her weight), and she may return us that information. But we always remember that the dog is an active component. She decides what will happen after our request.&lt;/p&gt;&lt;p&gt;That&amp;#39;s why, &lt;strong&gt;it is conceptually incorrect to have any methods starting with &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;get&lt;/code&gt; in an object&lt;/strong&gt;. And it&amp;#39;s not about breaking encapsulation, like many people argue. It is whether you&amp;#39;re thinking like an object or you&amp;#39;re still writing COBOL in Java syntax.&lt;/p&gt;&lt;p&gt;PS. Yes, you may ask, &amp;mdash; what about JavaBeans, JPA, JAXB, and many other Java APIs that rely on the get/set notation? What about Ruby&amp;#39;s built-in feature that simplies the creation of accessors? Well, all of that is our misfortune. It is much easier to stay in a primitive world of procedural COBOL than to truly understand and appreciate the beautiful world of true objects.&lt;/p&gt;&lt;p&gt;PPS. Forgot to say, yes, dependency injection via setters is also a terrible anti-pattern. About it, in one of the next posts :)&lt;/p&gt; </description> <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html</guid> </item> <item><title>Deploying to Heroku, in One Click</title><link>http://www.yegor256.com/2014/09/13/deploying-to-heroku.html</link> <description>&lt;p&gt;There were a few articles already about our usage of Rultor for automating continuous delivery cycles of Java and Ruby projects, including &lt;a href="http://www.yegor256.com/2014/08/26/publish-to-rubygems.html"&gt;Rubygems&lt;/a&gt;, &lt;a href="http://www.yegor256.com/2014/08/25/deploy-to-cloudbees.html"&gt;CloudBees&lt;/a&gt; and &lt;a href="http://www.yegor256.com/2014/08/19/how-to-release-to-maven-central.html"&gt;MavenCentral&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This one describes how Heroku deployment can be automated. When I need to deploy a new version of an Aintshy web application, all I do is create one message in a Github ticket. I just say &lt;code&gt;@rultor release 0.1.4&lt;/code&gt; and version 0.1.4 gets deployed to Heroku. See Github ticket &lt;a href="https://github.com/aintshy/hub/issues/5"&gt;#5&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You can do the same, with the help of &lt;a href="http://www.rultor.com"&gt;Rultor.com&lt;/a&gt;, a free hosted DevOps assistant.&lt;/p&gt;&lt;!--more--&gt;&lt;h2 id="create-heroku-project"&gt;Create Heroku Project&lt;/h2&gt;&lt;p&gt;Create a new project at &lt;a href="http://www.heroku.com"&gt;Heroku.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Then install their &lt;a href="https://toolbelt.heroku.com/"&gt;command line toolbelt&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="authenticate-at-heroku"&gt;Authenticate at Heroku&lt;/h2&gt;&lt;p&gt;You should authenticate your public SSH key at Heroku, using their command line toolbelt. The process is explained &lt;a href="https://devcenter.heroku.com/articles/authentication"&gt;here&lt;/a&gt;, but it is not much of a process. You just run &lt;code&gt;heroku login&lt;/code&gt; and enter your login credentials. As a result, you will get your existing key (located at &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;) authenticated by Heroku.&lt;/p&gt;&lt;p&gt;If you didn&amp;#39;t have the key before, it will be created automatically.&lt;/p&gt;&lt;h2 id="encrypt-ssh-key"&gt;Encrypt SSH Key&lt;/h2&gt;&lt;p&gt;Now, encrypt &lt;code&gt;id_rsa&lt;/code&gt; and &lt;code&gt;id_rsa.pub&lt;/code&gt; (they are in the &lt;code&gt;~/.ssh&lt;/code&gt; directory) with a &lt;a href="https://github.com/yegor256/rultor-remote"&gt;rultor remote&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;$ gem install rultor $ rultor encrypt -p me/test id_rsa $ rultor encrypt -p me/test id_rsa.pub&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of &lt;code&gt;me/test&lt;/code&gt; use the name of your Github project.&lt;/p&gt;&lt;p&gt;You will get two new files &lt;code&gt;id_rsa.asc&lt;/code&gt; and &lt;code&gt;id_rsa.pub.asc&lt;/code&gt;. Add them to the root directory of your project, commit and push. These files contain your secret information, but only the Rultor server can decrypt them.&lt;/p&gt;&lt;h2 id="create-rultor-config"&gt;Create Rultor Config&lt;/h2&gt;&lt;p&gt;Create a &lt;code&gt;.rultor.yml&lt;/code&gt; file in the root directory of your project (&lt;a href="http://doc.rultor.com/reference.html"&gt;reference page&lt;/a&gt; explains this format in detail):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="l-Scalar-Plain"&gt;decrypt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;id_rsa&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repo/id_rsa.asc&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;id_rsa.pub&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repo/id_rsa.pub.asc&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;release&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt; &lt;span class="no"&gt;mvn versions:set &amp;quot;-DnewVersion=${tag}&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;git commit -am &amp;quot;${tag}&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;mvn clean install -Pqulice --errors&lt;/span&gt; &lt;span class="no"&gt;git remote add heroku git@heroku.com:aintshy.git&lt;/span&gt; &lt;span class="no"&gt;mkdir ~/.ssh&lt;/span&gt; &lt;span class="no"&gt;mv ../id_rsa ../id_rsa.pub ~/.ssh&lt;/span&gt; &lt;span class="no"&gt;chmod -R 600 ~/.ssh/*&lt;/span&gt; &lt;span class="no"&gt;echo -e &amp;quot;Host *\n StrictHostKeyChecking no\n UserKnownHostsFile=/dev/null&amp;quot; &amp;gt; ~/.ssh/config&lt;/span&gt; &lt;span class="no"&gt;git push -f heroku $(git symbolic-ref --short HEAD):master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can compare your file with live Rultor &lt;a href="https://github.com/aintshy/hub/blob/master/.rultor.yml"&gt;configuration of aintshy/hub&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="run-it!"&gt;Run It!&lt;/h2&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Now it&amp;#39;s time to see how it all works. Create a new ticket in the Github issue tracker, and post something like this into it (read more about &lt;a href="http://doc.rultor.com/basics.html"&gt;Rultor commands&lt;/a&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;@rultor release, tag is `0.1`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will get a response in a few seconds. The rest will be done by Rultor.&lt;/p&gt;&lt;p&gt;Enjoy :)&lt;/p&gt;&lt;p&gt;BTW, if something doesn&amp;#39;t work as I&amp;#39;ve explained, don&amp;#39;t hesitate to submit a ticket to the &lt;a href="https://github.com/yegor256/rultor/issues"&gt;Rultor issue tracker&lt;/a&gt;. I will try to help you.&lt;/p&gt; </description> <pubDate>Sat, 13 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/13/deploying-to-heroku.html</guid> </item> <item><title>Deployment Script vs. Rultor</title><link>http://www.yegor256.com/2014/09/11/deployment-script-vs-rultor.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;When I explain how &lt;a href="http://www.rultor.com"&gt;Rultor&lt;/a&gt; automates deployment/release processes, very often I hear something like:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;But I already have a script that deploys everything automatically.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;This response is very common, so I decided to summarize my three main arguments for automated Rultor deployment/release processes in one article: 1) isolated docker containers, 2) visibility of logs and 3) security of credentials.&lt;/p&gt;&lt;p&gt;Read about them and see what Rultor gives you on top of &lt;strong&gt;your existing&lt;/strong&gt; deployment script(s).&lt;/p&gt;&lt;!--more--&gt;&lt;figure&gt;&lt;img src='/images/2014/09/charlie-and-chocolate-factory-father.png' style='width:600px;' alt='Charlie and the Chocolate Factory (2005) by Tim Burton'/&gt;&lt;figcaption&gt;Charlie and the Chocolate Factory (2005) by Tim Burton&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Before we start with the arguments, let me emphasize that Rultor is a useful interface to your custom scripts. When you decide to automate deployment with Rultor, you don&amp;#39;t throw away any of your existing scripts. You just teach Rultor how to call them.&lt;/p&gt;&lt;h2 id="isolated-docker-containers"&gt;Isolated Docker Containers&lt;/h2&gt;&lt;p&gt;The first advantage you get once you start calling your deployment scripts from Rultor is the &lt;a href="/2014/07/29/docker-in-rultor.html"&gt;usage of Docker&lt;/a&gt;. I&amp;#39;m sure you know what &lt;a href="http://www.docker.io"&gt;Docker&lt;/a&gt; is, but for those who don&amp;#39;t &amp;mdash; it is a manager of virtual Linux &amp;quot;machines&amp;quot;. It&amp;#39;s a command line script that you call when you need to run some script in a new virtual machine (aka &amp;quot;container&amp;quot;). Docker starts the container almost immediately and runs your script. The beauty of Docker is that every container is a perfectly isolated Linux environment, with its own file system, memory, processes, etc.&lt;/p&gt;&lt;p&gt;When you tell Rultor to run your deployment script, it starts a new Docker container and runs your script there. But what benefit does this give me, you ask?&lt;/p&gt;&lt;p&gt;The main benefit is that the container gets destroyed right after your script is done. This means that you can do all pre-configuration inside the container without any fear of conflict with your main working platform. Let me give an example.&lt;/p&gt;&lt;p&gt;I&amp;#39;m developing on MacBook, where I install and remove packages which I need for development. At the same time, I have a project that, in order to be deployed, requires PHP 5.3, MySQL 5.6, phing, phpunit, phpcs and xdebug. Every MacOS version needs to be configured specifically to get these applications up and running, and it&amp;#39;s a time-consuming job.&lt;/p&gt;&lt;p&gt;I can change laptops, and I can change MacOS versions, but the project stays the same. It still requires the same set of packages in order to run its deployment script successfully. And the project is not in active development any more. I simply don&amp;#39;t need these packages for my day-to-day work, since I&amp;#39;m working with Java more now. But, when I need to make a minor fix to that PHP project and deploy it, I have to install all the required PHP packages and configure them. Only after that can I deploy that minor fix.&lt;/p&gt;&lt;p&gt;It is annoying, to say the least.&lt;/p&gt;&lt;p&gt;Docker gives me the ability to automate all of this together. My &lt;strong&gt;existing&lt;/strong&gt; deployment script will get a preamble, which will install and configure all necessary PHP-related packages in a clean Ubuntu container. This preamble will be executed on every run of my deployment script, &lt;strong&gt;inside&lt;/strong&gt; a Docker container. For example, it may look like this:&lt;/p&gt;&lt;p&gt;My deployment script looked like this before I started to use Rultor:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;1 2 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt; phing &lt;span class="nb"&gt;test&lt;/span&gt; git ftp push --user &lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --passwd &lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --syncroot php/src ftp://ftp.example.com/ &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Just two lines. The first one is a full run of unit tests. The second one is an FTP deployment to the production server. Very simple. But this script will only work if PHP 5.3, MySQL, phing, xdebug, phpcs and phpunit are installed. Again, it&amp;#39;s a lot of work to install and configure them every time I upgrade my MacOS or change a laptop.&lt;/p&gt;&lt;p&gt;Needless to say, that if/when someone joins the project and tries to run my scripts, he/she will have to do this pre-installation work again.&lt;/p&gt;&lt;p&gt;So, here is a new script, which I&amp;#39;m using now. It is being executed inside a new Docker container, every time:&lt;/p&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt; 1 2 3 4 5 6 7 8 9 10 11 12 13&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt; &lt;span class="c"&gt;# First, we install all prerequisites&lt;/span&gt; sudo apt-get install -y php5 php5-mysql mysql sudo apt-get install php-pear sudo pear channel-discover pear.phpunit.de sudo pear install phpunit/PHPUnit sudo pear install PHP_CodeSniffer sudo pecl install xdebug sudo pear channel-discover pear.phing.info sudo pear install phing/phing &lt;span class="c"&gt;# And now the same script I had before&lt;/span&gt; phing &lt;span class="nb"&gt;test&lt;/span&gt; git ftp push --user &lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --passwd &lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt; --syncroot php/src ftp://ftp.example.com/ &lt;/pre&gt;&lt;/div&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Obviously, running this script on my MacBook (without virtualization) would cause a lot of trouble. Well, I don&amp;#39;t even have &lt;code&gt;apt-get&lt;/code&gt; here :)&lt;/p&gt;&lt;p&gt;Thus, the first benefit that Rultor gives you is an isolation of your deployment script in its own virtual environment. We have this mostly thanks to Docker.&lt;/p&gt;&lt;h2 id="visibility-of-logs"&gt;Visibility of Logs&lt;/h2&gt;&lt;p&gt;Traditionally, we keep deployment scripts in some &lt;code&gt;~/deploy&lt;/code&gt; directory and run them with a magic set of parameters. In a small project, you do this yourself and this directory is on your own laptop. In a bigger project, there is a &amp;quot;deployment&amp;quot; server, that has that magic directory with a set of scripts that can be executed only by a few trusted senior developers. I&amp;#39;ve seen this setup many times.&lt;/p&gt;&lt;p&gt;The biggest issue here is traceability. It&amp;#39;s almost impossible to find out who deployed what and why some particular deployment failed. The senior deployment gurus simply SSH to the server and run those magic scripts with magic parameters. Logs are usually lost and problem tracking is very difficult or impossible.&lt;/p&gt;&lt;p&gt;Rultor offers something different. With Rultor, there is no SSH access to deployment scripts any more. All scripts stay in the &lt;code&gt;.rultor.yml&lt;/code&gt; configuration file, and you start them by posting messages in your issue tracking system (for example Github, JIRA or Trac). Rultor runs the script and publishes its full log right to your ticket. The log stays with your project forever. You can always get back to the ticket you were working with and check why deployment failed and what instructions were actually executed.&lt;/p&gt;&lt;p&gt;For example, check out this Github issue, where I was deploying a new version of Rultor itself, and failed a few times: &lt;a href="https://github.com/yegor256/rultor/issues/563"&gt;yegor256/rultor#563&lt;/a&gt;. All my failed attempts are protocolled. I can always get back to them and investigate. For a big project this information is vital.&lt;/p&gt;&lt;p&gt;Thus, the second benefit of Rultor versus a standalone deployment script is visibility of every single operation.&lt;/p&gt;&lt;h2 id="security-of-credentials"&gt;Security of Credentials&lt;/h2&gt;&lt;p&gt;When you have a custom script sitting in your laptop or in that secret team deployment server, your production credentials stay close to it. There is just no other way. If your software works with a database, it has to know login credentials (user name, password, DB name, port number, etc.). Well, in the worst case, some people just hard code that information right into the source code. We aren&amp;#39;t even going to discuss this case, that&amp;#39;s how bad it is.&lt;/p&gt;&lt;p&gt;But let&amp;#39;s say you separate your DB credentials from the source code. You will have something like a &lt;code&gt;db.properties&lt;/code&gt; or &lt;code&gt;db.ini&lt;/code&gt; file, which will be attached to the application right before deployment. You can also keep that file directly in the production server, which is even better, but not always possible, especially with PaaS deployments, for example.&lt;/p&gt;&lt;p&gt;A similar problem exists with deployments of artifacts to repositories. Say, you&amp;#39;re regularly deploying to RubyGems.org. Your &lt;code&gt;~/.gem/credentials&lt;/code&gt; will contain your secret API key.&lt;/p&gt;&lt;p&gt;So, very often, your deployment scripts are accompanied by some files with sensitive and secure information. And these files have this information in a plain, open format. No encryption, no protection. Just user names, passwords, codes and tokens in plain text.&lt;/p&gt;&lt;p&gt;Why is this bad? Well, for a single developer with a single laptop this doesn&amp;#39;t sound like a problem. Although, I don&amp;#39;t like the idea of losing a laptop somewhere in an airport with all credentials open and ready to be used. You may argue that there are disc protection tools, like FileVault for MacOS or BestCrypt for Windows. Yes, maybe.&lt;/p&gt;&lt;p&gt;But let&amp;#39;s see what happens when we have a team of developers, working together and sharing those deployment scripts &lt;strong&gt;and&lt;/strong&gt; files with credentials. Once you give access to your deployment scripts to a new member of the team, you have to share all that sensitive data. There is just no way around it. In order to use the scripts he/she has to be able to open files with credentials.&lt;/p&gt;&lt;p&gt;This is a problem, if you care about the security of your data.&lt;/p&gt;&lt;p&gt;Rultor solves this problem by offering an on-the-fly GPG decryption of your sensitive data, right before they are used by your deployment scripts. In the &lt;code&gt;.rultor.yml&lt;/code&gt; configuration file you just say:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="l-Scalar-Plain"&gt;decrypt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;db.ini&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repo/db.ini.asc&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;deploy&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;ftp put db.ini production&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, you encrypt your &lt;code&gt;db.ini&lt;/code&gt; using a Rultor GPG key, and fearlessly commit &lt;code&gt;db.ini.asc&lt;/code&gt; to the repository. Nobody will be able to open and read that file, except the Rultor server itself, right before running the deployment script.&lt;/p&gt;&lt;p&gt;Thus, the third benefit of Rultor versus a standalone deployment script is proper security of sensitive data.&lt;/p&gt; </description> <pubDate>Thu, 11 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/11/deployment-script-vs-rultor.html</guid> </item> <item><title>Anti-Patterns in OOP</title><link>http://www.yegor256.com/2014/09/10/anti-patterns-in-oop.html</link> <description>&lt;p&gt;Here they come:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;a href="/2014/05/13/why-null-is-bad.html"&gt;NULL References&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href="/2014/05/05/oop-alternative-to-utility-classes.html"&gt;Utility Classes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href="/2014/06/09/objects-should-be-immutable.html"&gt;Mutable Objects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href="/2014/09/16/getters-and-setters-are-evil.html"&gt;Getters and Setters&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Singletons&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Controllers, Managers, Validators&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Public Static Methods&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Avoid them at all cost.&lt;/p&gt; </description> <pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/10/anti-patterns-in-oop.html</guid> </item> <item><title>RESTful API and a Web Site in the Same URL</title><link>http://www.yegor256.com/2014/09/09/restful-web-sites.html</link> <description>&lt;p&gt;Look at Github RESTful API, for example. To get information about a repository you should make a GET request to &lt;a href="https://api.github.com/repos/yegor256/rultor"&gt;api.github.com/repos/yegor256/rultor&lt;/a&gt;. In response, you will get a JSON document with all the details of the &lt;code&gt;yegor256/rultor&lt;/code&gt; repository. Try it, the URL doesn&amp;#39;t require any authentication.&lt;/p&gt;&lt;p&gt;To open the same repository in a nice HTML+CSS page, you should use a different URL: &lt;a href="https://github.com/yegor256/rultor"&gt;github.com/yegor256/rultor&lt;/a&gt;. The URL is different, the server-side is definitely different, but the nature of the data is exactly the same. The only thing that changes is a representation layer.&lt;/p&gt;&lt;p&gt;In the first case, we get JSON; in the second &amp;mdash; HTML.&lt;/p&gt;&lt;p&gt;How about combining them? How about using the same URL and the same server-side processing mechanism for both of them? How about shifting the whole rendering task to the client-side (the browser) and letting the server work solely with the data?&lt;/p&gt;&lt;!--more--&gt;&lt;figure&gt;&lt;img src='/images/2014/09/good_bad_weird.png' style='width:600px;' alt='The Good, the Bad, The Wierd (2008) by Kim Jee-woon'/&gt;&lt;figcaption&gt;The Good, the Bad, The Wierd (2008) by Kim Jee-woon&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;XSLT is the technology that can help us do this. In &lt;a href="/2014/06/25/xml-and-xslt-in-browser.html"&gt;&amp;quot;XML+XSLT in a Browser&amp;quot;&lt;/a&gt; I explained briefly how it works in a browser. In a nutshell, the server returns an XML with some data and a link to the XSL stylesheet. The stylesheet, being executed in a browser, converts XML to HTML. XSL language is as powerful as any other rendering engine, like JSP, JSF, Tiles, or what have you. Actually, it is much more powerful.&lt;/p&gt;&lt;p&gt;Using this approach we literally remove the entire rendering layer (&amp;quot;View&amp;quot; in the MVC paradigm) from the server and move it to the browser.&lt;/p&gt;&lt;p&gt;If we can make it possible, the web server will exponse just a RESTful API, and every response page will have an XSL stylesheet attached. What do we gain? We&amp;#39;ll discuss later, at the end of the post. Now, let&amp;#39;s see what problems we will face:&lt;/p&gt;&lt;ol&gt; &lt;li&gt;&lt;p&gt;JSON doesn&amp;#39;t have a rendering layer. There is no such thing as XSLT for JSON. So, we will have to forget about JSON and stay with XML only. For me, this sounds perfectly all right. Others don&amp;#39;t like XML and prefer to work with JSON only. Never understood them :)&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;XSLT 2.0 is not supported by all browsers. Even XSLT 1.0 is only supported by some of them. For example, Internet Explorer 8 doesn&amp;#39;t support XSLT at all.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Browsers support only &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; HTTP methods, while traditional RESTful APIs exploit also, at least, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;The first problem is not really a problem. It&amp;#39;s just a matter of taste (and level of education). The last two problems are much more serious. Let&amp;#39;s discuss them.&lt;/p&gt;&lt;h2 id="xsl-transformation-on-the-server"&gt;XSL Transformation on the Server&lt;/h2&gt;&lt;p&gt;XSLT is not supported by some browsers. How do we solve this?&lt;/p&gt;&lt;p&gt;I think that the best approach is to parse the &lt;code&gt;User-Agent&lt;/code&gt; HTTP header in every request and make a guess, whether this particular version of the browser supports XSLT or not. It&amp;#39;s not so difficult to do, since this compatibility information is public.&lt;/p&gt;&lt;p&gt;If the browser doesn&amp;#39;t support XSLT, we can do the transformation on the server side. We already have the XML with data, generated by the server, and we already have the XSL attached to it. All we need to do is to apply the latter to the former and obtain an HTML page. Then, we return the HTML to the browser.&lt;/p&gt;&lt;p&gt;Besides that, we can also pay attention to the &lt;code&gt;Accept&lt;/code&gt; header. If it is set to &lt;code&gt;application/xml&lt;/code&gt; or &lt;code&gt;text/xml&lt;/code&gt;, we return XML, no matter what &lt;code&gt;User-Agent&lt;/code&gt; is saying. This means, basically, that some API client is talking to us, not a browser. And this client is not interested in HTML, but in pure data in XML format.&lt;/p&gt;&lt;h2 id="post-instead-of-put"&gt;POST Instead of PUT&lt;/h2&gt;&lt;p&gt;There is no workaround for this. Browsers don&amp;#39;t know anything about &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt;. So, we should also forget them in our RESTful APIs. We should design our API using only two methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;. Is this even possible? Yes. Why not? It won&amp;#39;t look as fancy as with all six methods (some APIs also use &lt;code&gt;OPTIONS&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt;), but it will work.&lt;/p&gt;&lt;h2 id="what-do-we-gain?"&gt;What Do We Gain?&lt;/h2&gt;&lt;p&gt;OK, here is the question &amp;mdash; why do we need this? What&amp;#39;s wrong with the way most people work now? Why can&amp;#39;t we make a web site separate from the API? What benefits do we get if we combine them?&lt;/p&gt;&lt;p&gt;I&amp;#39;ve been combining them in all web applications I&amp;#39;ve worked with since 2011. And the biggest advantage I&amp;#39;m experiencing is avoiding code duplication.&lt;/p&gt;&lt;p&gt;It is obvious that in the server we don&amp;#39;t duplicate controllers (in the case of MVC). We have one layer of controllers, and they control both the API and the web site (since they are one thing now).&lt;/p&gt;&lt;p&gt;Avoiding code duplication is a very important achievement. Moreover, I believe that it is the most important target for any software project.&lt;/p&gt;&lt;p&gt;These small web apps work exactly as explained above: &lt;a href="http://www.s3auth.com"&gt;s3auth.com&lt;/a&gt;, &lt;a href="http://www.stateful.co"&gt;stateful.co&lt;/a&gt;, &lt;a href="http://www.bibrarian.com"&gt;bibrarian.com&lt;/a&gt;. They are all open source, and you can see their source code in Github.&lt;/p&gt; </description> <pubDate>Tue, 09 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/09/restful-web-sites.html</guid> </item> <item><title>Simple Java SSH Client</title><link>http://www.yegor256.com/2014/09/02/java-ssh-client.html</link> <description>&lt;p&gt;An execution of a shell command via SSH can be done in Java, in just a few lines, using &lt;a href="http://ssh.jcabi.com"&gt;jcabi-ssh&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Plain&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SSH&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ssh.example.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;yegor&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;echo &amp;#39;Hello, world!&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="http://ssh.jcabi.com"&gt;jcabi-ssh&lt;/a&gt; is a convenient wrapper of &lt;a href="http://www.jcraft.com/jsch/"&gt;JSch&lt;/a&gt;, a well-known pure Java implementation of SSH2.&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;Here is a more complex scenario, where I upload a file via SSH and then read back its grepped content:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;Shell shell = new SSH( &amp;quot;ssh.example.com&amp;quot;, 22, &amp;quot;yegor&amp;quot;, &amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot; ); File file = new File(&amp;quot;/tmp/data.txt&amp;quot;); new Shell.Safe(shell).exec( &amp;quot;cat &amp;gt; d.txt &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; grep &amp;#39;some text&amp;#39; d.txt&amp;quot;, new FileInputStream(file), Logger.stream(Level.INFO, this), Logger.stream(Level.WARNING, this) );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Class &lt;code&gt;SSH&lt;/code&gt;, which implements interface &lt;code&gt;Shell&lt;/code&gt;, has only one method, &lt;code&gt;exec&lt;/code&gt;. This method accepts four arguments:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;interface Shell { int exec( String cmd, InputStream stdin, OutputStream stdout, OutputStream stderr ); }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think it&amp;#39;s obvious what these arguments are about.&lt;/p&gt;&lt;p&gt;There are also a few convenient decorators that make it easier to operate with simple commands.&lt;/p&gt;&lt;h2 id="shell.safe"&gt;Shell.Safe&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Shell.Safe&lt;/code&gt; decorates an instance of &lt;code&gt;Shell&lt;/code&gt; and throws an exception if the &lt;code&gt;exec&lt;/code&gt; exit code is not equal to zero. This may be very useful when you want to make sure that your command executed successfully, but don&amp;#39;t want to duplicate &lt;code&gt;if/throw&lt;/code&gt; in many places of your code.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;Shell ssh = new Shell.Safe( new SSH( &amp;quot;ssh.example.com&amp;quot;, 22, &amp;quot;yegor&amp;quot;, &amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot; ) );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="shell.verbose"&gt;Shell.Verbose&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Shell.Verbose&lt;/code&gt; decorates an instance of &lt;code&gt;Shell&lt;/code&gt; and copies &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; to the slf4j logging facility (using &lt;a href="http://log.jcabi.com"&gt;jcabi-log&lt;/a&gt;). Of course, you can combine decorators, for example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;Shell ssh = new Shell.Verbose( new Shell.Safe( new SSH( &amp;quot;ssh.example.com&amp;quot;, 22, &amp;quot;yegor&amp;quot;, &amp;quot;-----BEGIN RSA PRIVATE KEY-----...&amp;quot; ) ) );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="shell.plain"&gt;Shell.Plain&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Shell.Plain&lt;/code&gt; is a wrapper of &lt;code&gt;Shell&lt;/code&gt; that introduces a new &lt;code&gt;exec&lt;/code&gt; method with only one argument, a command to execute. It also doesn&amp;#39;t return an exit code, but &lt;code&gt;stdout&lt;/code&gt; instead. This should be very convenient when you want to execute a simple command and just get its output (I&amp;#39;m combining it with &lt;code&gt;Shell.Safe&lt;/code&gt; for safety):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;String login = new Shell.Plain(new Shell.Safe(ssh)).exec(&amp;quot;whoami&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="download"&gt;Download&lt;/h2&gt;&lt;p&gt;You need a single dependency &lt;a href="http://repo1.maven.org/maven2/com/jcabi/jcabi-ssh"&gt;&lt;code&gt;jcabi-ssh.jar&lt;/code&gt;&lt;/a&gt; in your Maven project (get its latest version in &lt;a href="http://search.maven.org/"&gt;Maven Central&lt;/a&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.jcabi&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jcabi-ssh&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The project is in &lt;a href="https://github.com/jcabi/jcabi-ssh"&gt;Github&lt;/a&gt;. If you have any problems, just submit an issue. I&amp;#39;ll try to help.&lt;/p&gt; </description> <pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/09/02/java-ssh-client.html</guid> </item> <item><title>How We Run as a Non-Root Inside Docker Container</title><link>http://www.yegor256.com/2014/08/29/docker-non-root.html</link> <description>&lt;p&gt;Docker starts a process inside its container as a &amp;quot;root&amp;quot; user. In some cases, this is not convenient though. For example, &lt;code&gt;initdb&lt;/code&gt; from PostgreSQL doesn&amp;#39;t like to be started as root and will fail. In &lt;a href="http://www.rultor.com"&gt;rultor.com&lt;/a&gt;, a DevOps team assistant, &lt;a href="/2014/07/29/docker-in-rultor.html"&gt;we&amp;#39;re using Docker&lt;/a&gt; as a virtualization technology for every build we run.&lt;/p&gt;&lt;p&gt;Here is how we change the user inside a running container, right after it is started.&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;First, this is how we start a new Docker container:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo docker run -i -t --rm -v &lt;span class="s2"&gt;&amp;quot;$(pwd):/main&amp;quot;&lt;/span&gt; yegor256/rultor /main/entry.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two files in the current directory: &lt;code&gt;entry.sh&lt;/code&gt; and &lt;code&gt;script.sh&lt;/code&gt;. &lt;code&gt;entry.sh&lt;/code&gt; is the file being executed by Docker on start, and it contains the following:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt; adduser --disabled-password --gecos &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; r adduser r sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%sudo ALL=(ALL) NOPASSWD:ALL&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sudoers su -m r -c /home/r/script.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;script.sh&lt;/code&gt; will be executed as a user &lt;code&gt;r&lt;/code&gt; inside the container. And this &lt;code&gt;r&lt;/code&gt; user will have &lt;code&gt;sudo&lt;/code&gt; permissions. This is exactly what all projects, managing their DevOps procedures with &lt;a href="http://www.rultor.com"&gt;rultor.com&lt;/a&gt;, need.&lt;/p&gt; </description> <pubDate>Fri, 29 Aug 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/08/29/docker-non-root.html</guid> </item> <item><title>How to Publish to Rubygems, in One Click</title><link>http://www.yegor256.com/2014/08/26/publish-to-rubygems.html</link> <description>&lt;p&gt;When I release a new version of &lt;a href="https://github.com/yegor256/jekyll-github-deploy"&gt;jgd&lt;/a&gt;, a Ruby gem, to Rubygems.org, it takes 30 seconds of my time. Here is how I released a bug fix for version 1.5.1, in &lt;a href="https://github.com/yegor256/jekyll-github-deploy/issues/6"&gt;Github issue #6&lt;/a&gt;:&lt;/p&gt;&lt;figure&gt;&lt;img src='/images/2014/08/github-ticket-6.png' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;&lt;p&gt;As you see, I gave a command to &lt;a href="http://www.rultor.com"&gt;Rultor&lt;/a&gt;, and it released a new version to Rubygems. I didn&amp;#39;t do anything else.&lt;/p&gt;&lt;p&gt;Now let&amp;#39;s see how you can do the same. How you can configure your project so that the release of its new version to Rubygems.org takes just a few seconds of your time.&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;By the way, I assume that you&amp;#39;re hosting your project in Github. If not, this entire tutorial won&amp;#39;t work. If you are still not in Github, I would strongly recommend moving there.&lt;/p&gt;&lt;h2 id="create-rubygems-account"&gt;Create Rubygems Account&lt;/h2&gt;&lt;p&gt;Create an account in &lt;a href="http://www.rubygems.org"&gt;Rubygems.org&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="create-rubygems.yml"&gt;Create rubygems.yml&lt;/h2&gt;&lt;p&gt;Create a &lt;code&gt;rubygems.yml&lt;/code&gt; file (you may already have it as &lt;code&gt;~/.gem/credentials&lt;/code&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="l-Scalar-Plain"&gt;:rubygems_api_key&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;d355d8940bb031bfe9acf03ed3da4c0d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should get this API key from Rubygems. To find your API key, click on your username when logged in to RubyGems.org and then click on &amp;quot;Edit Profile&amp;quot;.&lt;/p&gt;&lt;h2 id="encrypt-rubygems.yml"&gt;Encrypt rubygems.yml&lt;/h2&gt;&lt;p&gt;Now, encrypt &lt;code&gt;rubygems.yml&lt;/code&gt; with a &lt;a href="https://github.com/yegor256/rultor-remote"&gt;rultor remote&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;$ gem install rultor $ rultor encrypt -p me/test rubygems.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of &lt;code&gt;me/test&lt;/code&gt; use the name of your Github project.&lt;/p&gt;&lt;p&gt;You will get a new file &lt;code&gt;rubygems.yml.asc&lt;/code&gt;. Add this file to the root directory of your project, commit and push. The file contains your secret information, but only the Rultor server can decrypt it.&lt;/p&gt;&lt;h2 id="prepare-gemspec"&gt;Prepare Gemspec&lt;/h2&gt;&lt;p&gt;In your &lt;code&gt;gemspec&lt;/code&gt; file, make sure you use &lt;code&gt;1.0.snapshot&lt;/code&gt; as a version number:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-ruby" data-lang="ruby"&gt;&lt;span class="c1"&gt;# coding: utf-8&lt;/span&gt; &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Specification&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="c1"&gt;# ...&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.0.snapshot&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# ...&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This version name will be replaced by Rultor during deployment.&lt;/p&gt;&lt;h2 id="configure-rultor"&gt;Configure Rultor&lt;/h2&gt;&lt;p&gt;Create a &lt;code&gt;.rultor.yml&lt;/code&gt; file in the root directory of your project:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="l-Scalar-Plain"&gt;decrypt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;rubygems.yml&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repo/rubygems.yml.asc&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;release&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt; &lt;span class="no"&gt;rm -rf *.gem&lt;/span&gt; &lt;span class="no"&gt;sed -i &amp;quot;s/1.0.snapshot/${tag}/g&amp;quot; foo.gemspec&lt;/span&gt; &lt;span class="no"&gt;gem build foo.gemspec&lt;/span&gt; &lt;span class="no"&gt;chmod 0600 /home/r/rubygems.yml&lt;/span&gt; &lt;span class="no"&gt;gem push *.gem --config-file /home/r/rubygems.yml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, replace &lt;code&gt;foo&lt;/code&gt; with the name of your gem.&lt;/p&gt;&lt;h2 id="run-it!"&gt;Run It!&lt;/h2&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Now it&amp;#39;s time to see how it all works. Create a new ticket in the Github issue tracker, and post something like that into it (read more about &lt;a href="http://doc.rultor.com/basics.html"&gt;Rultor commands&lt;/a&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;@rultor release, tag is `0.1`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will get a response in a few seconds. The rest will be done by Rultor.&lt;/p&gt;&lt;p&gt;Enjoy :)&lt;/p&gt;&lt;p&gt;BTW, if something doesn&amp;#39;t work as I&amp;#39;ve explained, don&amp;#39;t hesitate to submit a ticket to &lt;a href="https://github.com/yegor256/rultor/issues"&gt;Rultor issue tracker&lt;/a&gt;. I will try to help you.&lt;/p&gt; </description> <pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/08/26/publish-to-rubygems.html</guid> </item> <item><title>How to Deploy to CloudBees, in One Click</title><link>http://www.yegor256.com/2014/08/25/deploy-to-cloudbees.html</link> <description>&lt;p&gt;When I deploy a new version of &lt;a href="http://www.stateful.co"&gt;stateful.co&lt;/a&gt;, a Java web application, to CloudBees, it takes 30 seconds of my time. Maybe even less. Recently, I deployed version 1.6.5. You can see how it all happened, in &lt;a href="https://github.com/sttc/stateful/issues/6"&gt;Github issue #6&lt;/a&gt;:&lt;/p&gt;&lt;figure&gt;&lt;img src='/images/2014/08/github-sttc-issue-6.png' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;&lt;p&gt;As you see, I gave a command to &lt;a href="http://www.rultor.com"&gt;Rultor&lt;/a&gt;, and it packaged, tested and deployed a new version to CloudBees. I didn&amp;#39;t do anything else.&lt;/p&gt;&lt;p&gt;Now let&amp;#39;s see how you can do the same. How you can configure your project so that the deployment of its new version to CloudBees takes just a few seconds of your time.&lt;/p&gt;&lt;!--more--&gt;&lt;p style="border:1px solid gray;padding:1em;"&gt; Since CloudBees is [shutting down its PaaS service](http://www.cloudbees.com/press/cloudbees-becomes-enterprise-jenkins-company) by the end of December, 2014, this article will have no sense after that. &lt;/p&gt;&lt;h2 id="configure-the-cloudbees-maven-plugin"&gt;Configure the CloudBees Maven Plugin&lt;/h2&gt;&lt;p&gt;Add this profile to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;project&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;profile&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;cloudbees&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;activation&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;property&amp;gt;&amp;lt;name&amp;gt;&lt;/span&gt;bees.appId&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/activation&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;pluginRepositories&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;pluginRepository&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;cloudbees-public-release&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://repository-cloudbees.forge.cloudbees.com/public-release&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/pluginRepository&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/pluginRepositories&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;pluginManagement&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-deploy-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;skip&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/skip&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/pluginManagement&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.cloudbees&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;bees-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.3.2&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;appid&amp;gt;&lt;/span&gt;${bees.id}&lt;span class="nt"&gt;&amp;lt;/appid&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;apikey&amp;gt;&lt;/span&gt;${bees.key}&lt;span class="nt"&gt;&amp;lt;/apikey&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;secret&amp;gt;&lt;/span&gt;${bees.secret}&lt;span class="nt"&gt;&amp;lt;/secret&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;deploy-to-production&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;deploy&lt;span class="nt"&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;deploy&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This plugin is not in Maven Central (unfortunately). That&amp;#39;s why we have to specify that &lt;code&gt;&amp;lt;pluginRepository&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Pay attention to the fact that we&amp;#39;re also disabling &lt;code&gt;maven-deploy-plugin&lt;/code&gt;, since it would try to deploy your WAR package to the repository from the &lt;code&gt;&amp;lt;distributionManagement&amp;gt;&lt;/code&gt; section. We want to avoid this.&lt;/p&gt;&lt;p&gt;The profile gets activated only when the &lt;code&gt;bees.id&lt;/code&gt; property is defined. This won&amp;#39;t happen during your normal development and testing, but it will occur during the deployment cycle initiated by Rultor, because we will define this property in &lt;code&gt;settings.xml&lt;/code&gt; (discussed below).&lt;/p&gt;&lt;h2 id="secure-access-to-cloudbees"&gt;Secure Access to CloudBees&lt;/h2&gt;&lt;p&gt;Create an account in CloudBees and register your web application there. CloudBees is free, as long as you don&amp;#39;t need too much computing power. I believe that web applications should be light-weight by definition, so CloudBees&amp;#39; free layer is an ideal choice.&lt;/p&gt;&lt;p&gt;Create a &lt;code&gt;settings.xml&lt;/code&gt; file (but don&amp;#39;t commit it to your repo!):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;settings&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;profile&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;cloudbees&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;bees.id&amp;gt;&lt;/span&gt;stateful/web&lt;span class="nt"&gt;&amp;lt;/bees.id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;bees.key&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- your key --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/bees.key&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;bees.secret&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- your secret --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/bees.secret&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Encrypt this file using &lt;a href="https://github.com/yegor256/rultor-remote"&gt;rultor remote&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;$ gem install rultor $ rultor encrypt -p me/test settings.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of &lt;code&gt;me/test&lt;/code&gt; use the name of your Github project.&lt;/p&gt;&lt;p&gt;You should get a &lt;code&gt;settings.xml.asc&lt;/code&gt; file; add it to the root directory of your project, commit and push. This file contains your CloudBees credentials, but in an encrypted format. Nobody can read it, except the Rultor server.&lt;/p&gt;&lt;h2 id="configure-versions-plugin"&gt;Configure Versions Plugin&lt;/h2&gt;&lt;p&gt;I recommend using &lt;a href="jcabi-parent"&gt;http://parent.jcabi.com&lt;/a&gt;. It configures the required plugin out-of-the-box. If you&amp;#39;re using it, skip this step.&lt;/p&gt;&lt;p&gt;Otherwise, add this plugin to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;project&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.codehaus.mojo&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;versions-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;generateBackupPoms&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/generateBackupPoms&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="configure-rultor"&gt;Configure Rultor&lt;/h2&gt;&lt;p&gt;Create a &lt;code&gt;.rultor.yml&lt;/code&gt; file in the root directory of your project (this &lt;a href="http://doc.rultor.com/reference.html"&gt;reference page&lt;/a&gt; explains this format in detail):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="l-Scalar-Plain"&gt;decrypt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;settings.xml&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repo/settings.xml.asc&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;release&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt; &lt;span class="no"&gt;mvn versions:set &amp;quot;-DnewVersion=${tag}&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;git commit -am &amp;quot;${tag}&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;mvn clean deploy --settings /home/r/settings.xml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can compare your file with live Rultor &lt;a href="https://github.com/sttc/stateful/blob/master/.rultor.yml"&gt;configuration of stateful.co&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="run-it!"&gt;Run It!&lt;/h2&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Now it&amp;#39;s time to see how it all works. Create a new ticket in the Github issue tracker, and post something like that into it (read more about &lt;a href="http://doc.rultor.com/basics.html"&gt;Rultor commands&lt;/a&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;@rultor release, tag is `0.1`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will get a response in a few seconds. The rest will be done by Rultor.&lt;/p&gt;&lt;p&gt;Enjoy :)&lt;/p&gt;&lt;p&gt;BTW, if something doesn&amp;#39;t work as I&amp;#39;ve explained, don&amp;#39;t hesitate to submit a ticket to the &lt;a href="https://github.com/yegor256/rultor/issues"&gt;Rultor issue tracker&lt;/a&gt;. I will try to help you.&lt;/p&gt;&lt;p&gt;Also, a similar configuration can be performed for Heroku (using &lt;a href="http://heroku.jcabi.com"&gt;jcabi-heroku-maven-plugin&lt;/a&gt;) and for AWS Elastic Beanstalk (using &lt;a href="http://beanstalk.jcabi.com"&gt;jcabi-beanstalk-maven-plugin&lt;/a&gt;). I&amp;#39;ll probably dedicate individual posts to them, as well.&lt;/p&gt; </description> <pubDate>Mon, 25 Aug 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/08/25/deploy-to-cloudbees.html</guid> </item> <item><title>The Art of Software Testing by Glenford Myers</title><link>http://www.yegor256.com/2014/08/22/art-of-software-testing.html</link> <description>&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1118031962/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1118031962&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=RFPKLHVYE6E27XYO'&gt;&lt;img src='/images/2014/08/art-of-software-testing.png' style='width:96px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="http://www.amazon.com/gp/product/1118031962/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1118031962&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=RFPKLHVYE6E27XYO"&gt;&amp;quot;The Art of Software Testing&amp;quot;&lt;/a&gt; by Glenford J. Myers, Tom Badgett and Corey Sandler is one of my favorite books concerning testing and software engineering in general. In this article, I will provide an overview of the book, as well as highlight the ideas and quotes that I found to be the most interesting.&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;There were three editions of the book. The first one was published in 1979, when I was just too young to appreciate it. The second one was published in 2004 &amp;mdash; I read it first in 2007. The third one was published just two years ago, in 2012. I bought this edition also, and read it like it was my first time. This book is still one of the top books in the software testing domain, despite its age and some content that is rather out-dated.&lt;/p&gt;&lt;h2 id="out-dated-content"&gt;Out-dated Content&lt;/h2&gt;&lt;p&gt;First, let&amp;#39;s filter out what is not worth reading (in my opinion).&lt;/p&gt;&lt;p&gt;There are eleven chapters, but you can easily skim through nine of them. This is because those chapter discuss concepts that are discussed elsewhere in the book with a more robust level of detail or on a much higher level of abstraction.&lt;/p&gt;&lt;p&gt;For example, Chapter 3 contains an eleven-page checklist to be used by a code reviewer in order to find programming mistakes. This list is definitely not comprehensive and it can&amp;#39;t compete with, say, &lt;a href="http://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0735619670&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=2H4TSJALESCE7Z7I"&gt;&amp;quot;Code Complete&amp;quot;&lt;/a&gt; by Steve McConnell. I believe, this checklist had significant value twenty years ago, but now it is out of date.&lt;/p&gt;&lt;p&gt;Chapter 5 discusses basic principles and strategies of unit testing. However, the discussion is not abstract enough for a short 25-page summary, and is not specific enough for a detailed discussion. Again, twenty years ago this information may have had some value. Nowadays, &lt;a href="http://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0321503627&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=OW3LHYHVBT2G7ZWF"&gt;&amp;quot;Growing Object-Oriented Softare, Guided by Tests&amp;quot;&lt;/a&gt; by Steven Freeman and Nat Pryce is a much better source for this subject.&lt;/p&gt;&lt;p&gt;There are also articles about usability testing, debugging, web application testing, and mobile testing. Here we have the same issue &amp;mdash; they are not abstract enough and they are much too outdated to be relevant to the current issues in software testing. I would recommend readers to briefly skim those subjects for background information, but to not read too much into it.&lt;/p&gt;&lt;h2 id="psychology-of-testing"&gt;Psychology of Testing&lt;/h2&gt;&lt;p&gt;The most important and valuable part of the book is Chapter 2. It is full of priceless quotes that can also be very practical. For example, on page 6:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Testing is a destructive, even sadistic, process, which explains why most people find it difficult&lt;/p&gt; &lt;/blockquote&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.amazon.com/gp/product/1118031962/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1118031962&amp;amp;linkCode=as2&amp;amp;tag=yegor256com-20&amp;amp;linkId=RFPKLHVYE6E27XYO'&gt;&lt;img src='/images/2014/08/glenford-myers.png' style='width:200px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;In Chapter 2, Dr. Myers discusses the psychology of testing and a very common and crucial misunderstanding of testing objectives. He claims that it is commonly accepted that the goal of software testing is &amp;quot;to show that a program performs its intended functions correctly&amp;quot; (p.5). Testers are hired to check whether the software functions as expected. They then report back to management whether all tests have successfully passed and whether the program can be delivered to end users.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Despite the plethora of software testing tomes available on the market today, many developers seem to have an attitude that is counter to extensive testing&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;This is what Dr. Myers says on the second page, and I can humbly confirm that in all software groups I&amp;#39;ve been worked in thus far, almost everyone, including testers, project managers, and programmers, share this philosophy. They all believe that &amp;quot;testing is the process of demonstrating that errors are not present&amp;quot; (p.5)&lt;/p&gt;&lt;p&gt;However, &amp;quot;these definitions are upside down&amp;quot; (p.6). The psychology of testing should be viewed as the opposite. There are two quotes that support this theory and I feel that they make the entire book.&lt;/p&gt;&lt;p&gt;The first one, on page 6, defines the goal of software testing:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Testing is the process of executing a program with the intent of finding errors&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;The second one, on the following page, further refines the first goal:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;An unsuccessful test case is one that causes a program to produce the correct results without finding any errors&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;Dr. Myers comes back to these two thoughts in every chapter. He reiterates over and over again that we should change the underlying psychology of how we view testing, in order to change our testing results. We should focus on breaking the software instead of confirming that it works. Because testing is a &amp;quot;sadistic process&amp;quot; (p.6) of breaking things. It is a &amp;quot;destructive process&amp;quot; (p.8).&lt;/p&gt;&lt;p&gt;If you read Chapter2 very carefully and truly understand its underlying ideas, it may change your entire life :) This chapter should be a New Testament of every tester.&lt;/p&gt;&lt;h2 id="test-completion-criteria"&gt;Test Completion Criteria&lt;/h2&gt;&lt;p&gt;In Chapter 2, Dr. Myers also mentions that a program, no matter how simple, contains an unlimited number of errors. He says that &amp;quot;you cannot test a program to guarantee that it is error free&amp;quot; (p.10) and that &amp;quot;it is impractical, often impossible, to find all the errros in a program&amp;quot; (p.8).&lt;/p&gt;&lt;p&gt;Furthermore, at the end of Chapter 6, he makes an important observation (p.135):&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;One of the most difficult questions to answer when testing a program is determining when to stop, since there is no way of knowing if the error just detected is the last remaining error&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;The problem is obvious. Since any program contains an unlimited number of errors, it doesn&amp;#39;t matter how long we test, we won&amp;#39;t find all of them. So when do we stop? What goals do we set for our testers? And even more importantly, when do we pay them and how much (this question is important to me since I only work with contractors and am required to define measurable and achievable goals)?&lt;/p&gt;&lt;p&gt;The answer Dr. Myers gives is brilliant (p.136):&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Since the goal of testing is to find errors, why not make the completion criterion the detection of some predefined number of errors?&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;He then goes on to discuss exactly how this &amp;quot;predefined number&amp;quot; can be estimated. I find this idea very interesting. I have even applied it to a few projects I&amp;#39;ve had in the last few years. It works. However it can also cause serious psychological problems for the team. Most people simply resent the goal of &amp;quot;testing until you find a required number of bugs.&amp;quot; The most common response is &amp;quot;what if there are no bugs any more?&amp;quot;.&lt;/p&gt;&lt;p&gt;However, after a few fights, the team eventually begins to appreciate the concept and get used to it. So, I can humbly confirm that Dr. Myers is right in his suggestion. You can successful plan testing based on a predefined number of errors.&lt;/p&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;I consider this book a fundamental writing in the area of software testing. This is mostly due to Chapter 2 of the book. In fact, there are just three pages of text that build the foundation of the entire book. They are the skeleton of the other two hundred pages.&lt;/p&gt;&lt;p&gt;Unfortunately, since 1979, this skeleton hasn&amp;#39;t become the backbone of the software testing industry. Most of us are still working against these principles.&lt;/p&gt; </description> <pubDate>Fri, 22 Aug 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/08/22/art-of-software-testing.html</guid> </item> <item><title>How to Release to Maven Central, in One Click</title><link>http://www.yegor256.com/2014/08/19/how-to-release-to-maven-central.html</link> <description>&lt;p&gt;When I release a new version of &lt;a href="http://aspects.jcabi.com"&gt;jcabi-aspects&lt;/a&gt;, a Java open source library, to Maven Central, it takes 30 seconds of my time. Maybe even less. Recently, I released version 0.17.2. You can see how it all happened, in &lt;a href="https://github.com/jcabi/jcabi-aspects/issues/80"&gt;Github issue #80&lt;/a&gt;:&lt;/p&gt;&lt;figure&gt;&lt;img src='/images/2014/08/github-ticket-80.png' style='width:600px;' alt='figure'/&gt;&lt;/figure&gt;&lt;p&gt;As you see, I gave a command to &lt;a href="http://www.rultor.com"&gt;Rultor&lt;/a&gt;, and it released a new version to Maven central. I didn&amp;#39;t do anything else.&lt;/p&gt;&lt;p&gt;Now let&amp;#39;s see how you can do the same. How you can configure your project so that the release of its new version to Maven Central takes just a few seconds of your time.&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;By the way, I assume that you&amp;#39;re hosting your project in Github. If not, this entire tutorial won&amp;#39;t work. If you are still not in Github, I would strongly recommend moving there.&lt;/p&gt;&lt;h2 id="prepare-your-pom"&gt;Prepare Your POM&lt;/h2&gt;&lt;p&gt;Make sure your &lt;code&gt;pom.xml&lt;/code&gt; contains all elements required by Sonatype, explained in &lt;a href="https://docs.sonatype.org/display/Repository/Central+Sync+Requirements"&gt;Central Sync Requirements&lt;/a&gt;. We will deploy to Sonatype, and they will syncronize all JAR (and not only) artifacts to Maven Central.&lt;/p&gt;&lt;h2 id="register-a-project-with-sonatype"&gt;Register a Project With Sonatype&lt;/h2&gt;&lt;p&gt;Create an account in &lt;a href="https://issues.sonatype.org/"&gt;Sonatype JIRA&lt;/a&gt; and raise a ticket, asking to approve your groupId. This &lt;a href="http://central.sonatype.org/pages/ossrh-guide.html"&gt;OSSRH Guide&lt;/a&gt; explains this step in more detail.&lt;/p&gt;&lt;h2 id="create-and-distribute-a-gpg-key"&gt;Create and Distribute a GPG Key&lt;/h2&gt;&lt;p&gt;Create a GPG key and distribute it, as explained in this &lt;a href="http://central.sonatype.org/pages/working-with-pgp-signatures.html"&gt;Working with PGP Signatures&lt;/a&gt; article.&lt;/p&gt;&lt;p&gt;When this step is done, you should have two files: &lt;code&gt;pubring.gpg&lt;/code&gt; and &lt;code&gt;secring.gpg&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="create-settings.xml"&gt;Create settings.xml&lt;/h2&gt;&lt;p&gt;Create &lt;code&gt;settings.xml&lt;/code&gt;, next to the two &lt;code&gt;.gpg&lt;/code&gt; files created in the previous step:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;settings&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;profile&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;foo&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- give it the name of your project --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;gpg.homedir&amp;gt;&lt;/span&gt;/home/r&lt;span class="nt"&gt;&amp;lt;/gpg.homedir&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;gpg.keyname&amp;gt;&lt;/span&gt;9A105525&lt;span class="nt"&gt;&amp;lt;/gpg.keyname&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;gpg.passphrase&amp;gt;&lt;/span&gt;my-secret&lt;span class="nt"&gt;&amp;lt;/gpg.passphrase&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;servers&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;server&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;sonatype&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;username&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Sonatype JIRA user name --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/username&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;password&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Sonatype JIRA pwd --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/password&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/server&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/servers&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, &lt;code&gt;9A105525&lt;/code&gt; is the ID of your public key, and &lt;code&gt;my-secret&lt;/code&gt; is the pass phrase you have used while generating the keys.&lt;/p&gt;&lt;h2 id="encrypt-security-assets"&gt;Encrypt Security Assets&lt;/h2&gt;&lt;p&gt;Now, encrypt these three files with a &lt;a href="https://github.com/yegor256/rultor-remote"&gt;rultor remote&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;$ gem install rultor $ rultor encrypt -p me/test pubring.gpg $ rultor encrypt -p me/test secring.gpg $ rultor encrypt -p me/test settings.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of &lt;code&gt;me/test&lt;/code&gt; you should use the name of your Github project.&lt;/p&gt;&lt;p&gt;You will get three new files: &lt;code&gt;pubring.gpg.asc&lt;/code&gt;, &lt;code&gt;secring.gpg.asc&lt;/code&gt; and &lt;code&gt;settings.xml.asc&lt;/code&gt;. Add them to the root directory of your project, commit and push. The files contain your secret information, but only the Rultor server can decrypt them.&lt;/p&gt;&lt;h2 id="add-sonatype-repositories"&gt;Add Sonatype Repositories&lt;/h2&gt;&lt;p&gt;I would recommend using &lt;a href="http://parent.jcabi.com"&gt;jcabi-parent&lt;/a&gt;, as a parent pom for your project. This will make many further steps unnecessary. If you&amp;#39;re using jcabi-parent, skip this step.&lt;/p&gt;&lt;p&gt;However, if you don&amp;#39;t use jcabi-parent, you should add these two repositories to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;project&amp;gt;&lt;/span&gt; [...] &lt;span class="nt"&gt;&amp;lt;distributionManagement&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;repository&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;oss.sonatype.org&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;snapshotRepository&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;oss.sonatype.org&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/snapshotRepository&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/distributionManagement&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="configure-gpg-plugin"&gt;Configure GPG Plugin&lt;/h2&gt;&lt;p&gt;Again, I&amp;#39;d recommend using &lt;a href="jcabi-parent"&gt;http://parent.jcabi.com&lt;/a&gt;, which configures this plugin automatically. If you&amp;#39;re using it, skip this step.&lt;/p&gt;&lt;p&gt;Otherwise, add this plugin to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;project&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-gpg-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;sign-artifacts&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;verify&lt;span class="nt"&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;sign&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="configure-versions-plugin"&gt;Configure Versions Plugin&lt;/h2&gt;&lt;p&gt;Once again, I recommend using &lt;a href="jcabi-parent"&gt;http://parent.jcabi.com&lt;/a&gt;. It configures all required plugins out-of-the-box. If you&amp;#39;re using it, skip this step.&lt;/p&gt;&lt;p&gt;Otherwise, add this plugin to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;project&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.codehaus.mojo&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;versions-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;generateBackupPoms&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/generateBackupPoms&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="configure-sonatype-plugin"&gt;Configure Sonatype Plugin&lt;/h2&gt;&lt;p&gt;Yes, you&amp;#39;re right, &lt;a href="jcabi-parent"&gt;http://parent.jcabi.com&lt;/a&gt; will help you here as well. If you&amp;#39;re using it, skip this step too.&lt;/p&gt;&lt;p&gt;Otherwise, add these four plugins to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="nt"&gt;&amp;lt;project&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt; [..] &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-deploy-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;skip&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/skip&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-source-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;package-sources&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;jar&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-javadoc-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;package-javadoc&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;package&lt;span class="nt"&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;jar&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.sonatype.plugins&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;nexus-staging-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.6&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;serverId&amp;gt;&lt;/span&gt;oss.sonatype.org&lt;span class="nt"&gt;&amp;lt;/serverId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;nexusUrl&amp;gt;&lt;/span&gt;https://oss.sonatype.org/&lt;span class="nt"&gt;&amp;lt;/nexusUrl&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;${project.version}&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;deploy-to-sonatype&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;deploy&lt;span class="nt"&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;deploy&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;release&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="create-rultor-config"&gt;Create Rultor Config&lt;/h2&gt;&lt;p&gt;Create a &lt;code&gt;.rultor.yml&lt;/code&gt; file in the root directory of your project (&lt;a href="http://doc.rultor.com/reference.html"&gt;reference page&lt;/a&gt; explains this format in details):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="l-Scalar-Plain"&gt;decrypt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;settings.xml&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repo/settings.xml.asc&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pubring.gpg&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repo/pubring.gpg.asc&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;secring.gpg&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repo/secring.gpg.asc&amp;quot;&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;release&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt; &lt;span class="no"&gt;mvn versions:set &amp;quot;-DnewVersion=${tag}&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;git commit -am &amp;quot;${tag}&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;mvn clean deploy --settings /home/r/settings.xml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can compare your file with live Rultor &lt;a href="https://github.com/jcabi/jcabi-aspects/blob/master/.rultor.yml"&gt;configuration of jcabi-aspects&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="run-it!"&gt;Run It!&lt;/h2&gt;&lt;figure class='badge'&gt;&lt;a href='http://www.rultor.com'&gt;&lt;img src='http://doc.rultor.com/images/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Now it&amp;#39;s time to see how it all works. Create a new ticket in the Github issue tracker, and post something like that into it (read more about &lt;a href="http://doc.rultor.com/basics.html"&gt;Rultor commands&lt;/a&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text" data-lang="text"&gt;@rultor release, tag is `0.1`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will get a response in a few seconds. The rest will be done by Rultor.&lt;/p&gt;&lt;p&gt;Enjoy :)&lt;/p&gt;&lt;p&gt;BTW, if something doesn&amp;#39;t work as I&amp;#39;ve explained, don&amp;#39;t hesitate to submit a ticket to &lt;a href="https://github.com/yegor256/rultor/issues"&gt;Rultor issue tracker&lt;/a&gt;. I will try to help you.&lt;/p&gt;&lt;p&gt;Yeah, forgot to mention, Rultor is also doing two important things. First, it creates a Github release with a proper description. Second, it posts a tweet about the release, which you can retweet, to make an announcement to your followers. Both features are very convenient for me. For example:&lt;/p&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;DynamoDB Local Maven Plugin, 0.7.1 released &lt;a href="https://t.co/C3KULouuKS"&gt;https://t.co/C3KULouuKS&lt;/a&gt;&lt;/p&gt;&amp;mdash; rultor.com (@rultors) &lt;a href="https://twitter.com/rultors/statuses/501617747269517312"&gt;August 19, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; </description> <pubDate>Tue, 19 Aug 2014 00:00:00 +0000</pubDate> <guid>http://www.yegor256.com/2014/08/19/how-to-release-to-maven-central.html</guid> </item> <generator>Jekyll</generator> </channel> </rss>