<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://www.yegor256.com/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2018-02-15T15:33:39+00:00</updated><id>http://www.yegor256.com/</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Microvesting</title><link href="http://www.yegor256.com/2018/02/13/micro-vesting.html" rel="alternate" type="text/html" title="Microvesting" /><published>2018-02-13T00:00:00+00:00</published><updated>2018-02-13T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/02/13/micro-vesting</id><content type="html" xml:base="http://www.yegor256.com/2018/02/13/micro-vesting.html">&lt;p&gt;Most startups don&amp;#39;t have enough cash to pay programmers as much as
they deserve, &lt;a href=&quot;/2016/01/12/good-programmers-dont-work-for-equity.html&quot;&gt;unfortunately&lt;/a&gt;
(or maybe not). Instead of cash, startups give their early employees
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stock#Shares&quot;&gt;shares of stock&lt;/a&gt;, which they will be able to either 1)
sell in a few years and become &lt;del&gt;millionaires&lt;/del&gt; billionaires,
or 2) throw away and remain nobodies. It&amp;#39;s a
&lt;a href=&quot;https://www.quora.com/Do-founders-vest/answer/Charlie-Cheever&quot;&gt;common practice&lt;/a&gt;.
The question, however, is what
is the right procedure, and the optimal algorithm, to transfer those shares to programmers.
When exactly do they become shareholders? What is the formula?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;La comunidad (2000) by Álex de la Iglesia&#39; src=&#39;/images/2018/02/la-comunidad.jpg&#39; longdesc=&#39;#c6f3e007&#39;/&gt;&lt;figcaption id=&#39;c6f3e007&#39;&gt;La comunidad (2000) by Álex de la Iglesia&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are a few typical approaches.&lt;/p&gt;

&lt;p&gt;One of the most &lt;a href=&quot;https://www.feld.com/archives/2005/05/term-sheet-vesting.html&quot;&gt;popular&lt;/a&gt; is
&amp;quot;&lt;a href=&quot;https://thenextweb.com/entrepreneur/2013/07/21/startup-founders-heres-why-vesting-is-your-best-friend/&quot;&gt;four years with a one-year cliff&lt;/a&gt;,&amp;quot;
which means that if they had 50% equity and leave after two years
they will only retain 25%. The longer they stay, the larger the percentage of
their equity that will be vested until they become fully vested in the 48th month.
However, because they have a one year cliff, if they leave before the 12th month,
they get nothing. There could be
&lt;a href=&quot;https://medium.com/@ipaullee/let-s-revise-the-vesting-schedule-for-startup-founders-and-employees-7817fcb301ea&quot;&gt;slight modifications&lt;/a&gt;
to the numbers, of course.&lt;/p&gt;

&lt;p&gt;The disadvantage of this approach is that their primary motivation is
to stay in the company, instead of achieving results. This vesting
formula is perfectly aligned with the popular
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;be nice&lt;/a&gt;
paradigm and is not beneficial, either to the company or to
its &lt;del&gt;slaves&lt;/del&gt; employees.&lt;/p&gt;

&lt;p&gt;Another option is &lt;a href=&quot;https://techcrunch.com/2015/12/09/milestone-based-vesting-for-startup-founders/&quot;&gt;milestone-based&lt;/a&gt;
vesting, which defines a set of value milestones, each of which unlocks
an additional part of the programmer&amp;#39;s equity.&lt;/p&gt;

&lt;p&gt;On top of the &lt;a href=&quot;https://medium.com/swlh/why-milestone-based-agreements-are-bad-for-early-stage-startups-15c759995121&quot;&gt;inability&lt;/a&gt;
to predict milestones accurately, this vesting formula
promotes group responsibility, which, in my opinion,
is &lt;a href=&quot;/2015/11/21/ringelmann-effect-vs-agile.html&quot;&gt;the least&lt;/a&gt;
effective way to motivate. Programmers writing Java classes can&amp;#39;t be
responsible for the &amp;quot;next round of VC funding,&amp;quot; simply because they
don&amp;#39;t have any idea how to make that round happen. It&amp;#39;s not their job,
not their responsibility.&lt;/p&gt;

&lt;p&gt;You may say that writing those Java classes is exactly how we make the next
round happen, but it&amp;#39;s far from being true, in most cases. We all know that
investments come to those who can &lt;del&gt;fool&lt;/del&gt;
&lt;a href=&quot;/2016/03/28/unspoken-secrets-of-elevator-pitch.html&quot;&gt;pitch&lt;/a&gt; an investor,
not to those who write the best Java code. Thus, the work programmers do
and the &amp;quot;value events&amp;quot; the startup is aiming to reach are pretty much disconnected.&lt;/p&gt;

&lt;p&gt;A more logical formula is &lt;strong&gt;microvesting&lt;/strong&gt;, which we practice in projects managed
by &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;. It is as simple as that: A company has
a valuation, which is set by its founders; let&amp;#39;s say, it&amp;#39;s $1,000,000. A programmer
has an hourly rate, say, $40. Thus, when a &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;one-hour&lt;/a&gt;
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;fixed-budget&lt;/a&gt; task is completed, the
programmer earns 0.004% of equity ($40 / $1,000,000). Our software calculates
it all automatically, increasing their shares after each completed task.&lt;/p&gt;

&lt;p&gt;Using these two variables&amp;mdash;valuation and hourly rate&amp;mdash;the company
can influence programmers&amp;#39; motivation.&lt;/p&gt;

&lt;p&gt;No need to &lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;lie&lt;/a&gt; to
them about big-money milestones or keep them in the office
for four years. Just let them be focused on the results they can produce and
give them back what they deserve. Incrementally. That&amp;#39;s it.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="startup" /><summary type="html">Most startups don&amp;#39;t have enough cash to pay programmers as much as
they deserve, unfortunately
(or maybe not). Instead of cash, startups give their early employees
shares of stock, which they will be able to either 1)
sell in a few years and become millionaires billionaires,
or 2) throw away and remain nobodies. It&amp;#39;s a
common practice.
The question, however, is what
is the right procedure, and the optimal algorithm, to transfer those shares to programmers.
When exactly do they become shareholders? What is the formula?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/02/la-comunidad.jpg" /></entry><entry><title type="html">More Bugs, Please</title><link href="http://www.yegor256.com/2018/02/06/where-to-find-more-bugs.html" rel="alternate" type="text/html" title="More Bugs, Please" /><published>2018-02-06T00:00:00+00:00</published><updated>2018-02-06T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/02/06/where-to-find-more-bugs</id><content type="html" xml:base="http://www.yegor256.com/2018/02/06/where-to-find-more-bugs.html">&lt;p&gt;A &lt;a href=&quot;/2015/06/11/wikipedia-bug-definition.html&quot;&gt;bug&lt;/a&gt;
is something we find in a software product that &amp;quot;doesn&amp;#39;t look right&amp;quot; (this
is my personal definition). A bug can be hidden or visible; it can be
&amp;quot;already fixed&amp;quot; or &amp;quot;still present&amp;quot;; it can be critical or cosmetic; it
can be urgent or of a low priority. What is important is that the
&lt;a href=&quot;/2017/05/23/unlimited-number-of-bugs.html&quot;&gt;more&lt;/a&gt;
bugs we are able to find and fix before our customers see them, the higher
the perceived &lt;a href=&quot;/2017/12/26/software-quality-formula.html&quot;&gt;quality&lt;/a&gt;
of the software. Simply put, bugs are a
&lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;very good thing&lt;/a&gt;,
if they are found by us, not our customers.
&lt;a href=&quot;http://www.zerocracy.com&quot;&gt;We&lt;/a&gt; pay our programmers for
&lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;each bug&lt;/a&gt;
they find. Here is a cheat sheet for them, showing where
and how they can find those bugs, to make more money.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;American Honey (2016) by Andrea Arnold&#39; src=&#39;/images/2018/02/american-honey.jpg&#39; longdesc=&#39;#02df6b04&#39;/&gt;&lt;figcaption id=&#39;02df6b04&#39;&gt;American Honey (2016) by Andrea Arnold&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Obviously, if something is broken, it&amp;#39;s a bug; no need to mention it here.
However, when a product is &lt;a href=&quot;/2017/03/24/tdd-that-works.html&quot;&gt;more or less stable&lt;/a&gt;,
not too many things are
visibly broken. But we still pay for bugs. What should you look out for? Read on. This
list (in no particular order) will help you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of functionality&lt;/strong&gt;.
If a class
(&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/558&quot;&gt;yegor256/cactoos#558&lt;/a&gt;)
or the entire module
(&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/399&quot;&gt;yegor256/cactoos#399&lt;/a&gt;)
doesn&amp;#39;t provide the functionality you &lt;em&gt;expect&lt;/em&gt; it to have,
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of tests&lt;/strong&gt;.
If a class doesn&amp;#39;t have a unit test
(&lt;a href=&quot;https://github.com/yegor256/takes/issues/43&quot;&gt;yegor256/takes#43&lt;/a&gt;)
or
the existing test doesn&amp;#39;t cover some critical aspects of the class
(&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/375&quot;&gt;yegor256/cactoos#375&lt;/a&gt;),
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of documentation&lt;/strong&gt;.
If, say, a Javadoc block for a class does not clearly explain to you
how to use the class, or the entire module is not documented well
(&lt;a href=&quot;https://github.com/yegor256/takes/issues/790&quot;&gt;yegor256/takes#790&lt;/a&gt;),
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suboptimal implementation&lt;/strong&gt;.
If a piece of code doesn&amp;#39;t look good to you, and you think it can be
refactored to look better, it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Design inconsistency&lt;/strong&gt;.
If the design doesn&amp;#39;t look logical to you
(&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/436&quot;&gt;yegor256/cactoos#436&lt;/a&gt;)
and you know how it can be improved,
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Naming is weird&lt;/strong&gt;.
If class, variable or package names don&amp;#39;t look consistent and
obvious to you, and you know how they can be fixed
(&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/274&quot;&gt;yegor256/cactoos#274&lt;/a&gt;),
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unstable test&lt;/strong&gt;.
If a unit test fails sporadically
(&lt;a href=&quot;https://github.com/yegor256/takes/issues/506&quot;&gt;yegor256/takes#506&lt;/a&gt;)
or doesn&amp;#39;t work in some particular environment
(&lt;a href=&quot;https://github.com/yegor256/jpeek/issues/151&quot;&gt;yegor256/jpeek#151&lt;/a&gt;),
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;Also, it&amp;#39;s worth mentioning that minor, cosmetic, or poorly formulated
bug reports will most likely be rejected or not paid for. If you want us to pay for your bug reports,
make sure they &lt;a href=&quot;/2014/11/24/principles-of-bug-tracking.html&quot;&gt;sound right&lt;/a&gt;,
in order to help us move the project forward to a better state.&lt;/p&gt;

&lt;!--

There are some examples of minor bugs, which are not worth paying
for, even though they are valid:

  * [yegor256/jpeek#158](https://github.com/yegor256/jpeek/issues/158)

Cosmetic bugs are those that

--&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html">A bug
is something we find in a software product that &amp;quot;doesn&amp;#39;t look right&amp;quot; (this
is my personal definition). A bug can be hidden or visible; it can be
&amp;quot;already fixed&amp;quot; or &amp;quot;still present&amp;quot;; it can be critical or cosmetic; it
can be urgent or of a low priority. What is important is that the
more
bugs we are able to find and fix before our customers see them, the higher
the perceived quality
of the software. Simply put, bugs are a
very good thing,
if they are found by us, not our customers.
We pay our programmers for
each bug
they find. Here is a cheat sheet for them, showing where
and how they can find those bugs, to make more money.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/02/american-honey.jpg" /></entry><entry><title type="html">Are You a Coder or a Developer?</title><link href="http://www.yegor256.com/2018/01/23/sociotech-skills.html" rel="alternate" type="text/html" title="Are You a Coder or a Developer?" /><published>2018-01-23T00:00:00+00:00</published><updated>2018-01-23T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/23/sociotech-skills</id><content type="html" xml:base="http://www.yegor256.com/2018/01/23/sociotech-skills.html">&lt;p&gt;Software development and coding are two different things. Usually,
the former includes the latter, but not always. Coding produces
lines of code, while software development creates products. Unfortunately,
the majority of programmers joining &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;
now are &lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;coders&lt;/a&gt;.
Even though they claim to be developers, in reality they are lacking the very
important &lt;a href=&quot;https://en.wikipedia.org/wiki/Sociotechnical_system&quot;&gt;sociotechnical&lt;/a&gt;
skills that differentiate product creators from lines-of-code writers.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Hard Men (1996) by J.K. Amalou&#39; src=&#39;/images/2018/01/hardmen.jpg&#39; longdesc=&#39;#716b804f&#39;/&gt;&lt;figcaption id=&#39;716b804f&#39;&gt;Hard Men (1996) by J.K. Amalou&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let me show you the symptoms first.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s call him Mario. He is a very skilled
Java developer, as his &lt;a href=&quot;/2016/03/08/pimp-up-your-resume.html&quot;&gt;resume&lt;/a&gt;
says. He&amp;#39;s been in the industry for ten years or so,
done a few enterprise projects; he seems to be very seasoned. We give him
access to the project and assign a few GitHub tickets.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Dude, I love you like a brother, but I don&amp;#39;t have time to answer your questions.&lt;/aside&gt;

&lt;p&gt;In a few hours I get a Facebook message a page long. It says that
he is very glad to be on the project, but &lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;doesn&amp;#39;t understand&lt;/a&gt;
a thing yet
and needs help. Here is a list of questions he prepared and he&amp;#39;s ready for
a phone call to get them answered.&lt;/p&gt;

&lt;p&gt;I reply: &amp;quot;Dude, I love you like a brother, but I don&amp;#39;t have time to answer
your questions. Not because I&amp;#39;m lazy or don&amp;#39;t appreciate your work... Actually,
yes, exactly because of that. I am lazy and don&amp;#39;t want to answer any questions over Messenger.
My answers will be totally wasted, if you, for example, quit the project
tomorrow. Or if someone else joins us in a week and has
exactly the same set of questions. Do I have to explain all over again? I&amp;#39;m too
&lt;del&gt;old&lt;/del&gt; lazy for that.&amp;quot;&lt;/p&gt;

&lt;p&gt;He most probably thinks that I&amp;#39;m an &lt;a href=&quot;/testimonials.html&quot;&gt;arrogant prick&lt;/a&gt;, but what can he do? He
reads &lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;my article&lt;/a&gt;
on this very subject and says &amp;quot;OK, I got it.&amp;quot;&lt;/p&gt;

&lt;p&gt;In half an hour Mario submits a ticket to another (!) repository. The title
is &amp;quot;The problem&amp;quot; and the description says &amp;quot;Help me understand the project.&amp;quot;&lt;/p&gt;

&lt;p&gt;What do I do, as an architect of the project? I close the ticket with a quick
message: &amp;quot;Please, make your tickets more specific.&amp;quot; My response is just one
step away from &amp;quot;Get lost,&amp;quot; but what else can I say? Mario doesn&amp;#39;t know
&lt;a href=&quot;/2014/11/24/principles-of-bug-tracking.html&quot;&gt;how to use&lt;/a&gt;
the ticketing system. He&amp;#39;s most probably been working all his life
in a &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;cozy office&lt;/a&gt;,
where everybody around was his friend. Not even using
chat, just asking questions across the table. I&amp;#39;m asking him to
do something he has never done before. Of course, he doesn&amp;#39;t know how.
He feels ashamed, I suspect.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;The bottom line is that Mario is not a software developer, he&amp;#39;s a coder.&lt;/aside&gt;

&lt;p&gt;What happens next? He comes right back at me in Messenger, with the same
set of questions. Actually, his reaction will depend on his personality.
It may either be anger, confusion, or
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;something else&lt;/a&gt;. But the bottom line
is that Mario is not a software developer, he&amp;#39;s a coder.
He doesn&amp;#39;t understand the dynamics of a modern software project, he doesn&amp;#39;t
know how to use its
&lt;a href=&quot;/2016/08/23/communication-maturity.html&quot;&gt;communication&lt;/a&gt;
instruments, and he has no sociotechnical skills:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Searching for, and finding, information&lt;/li&gt;
&lt;li&gt;Submitting questions, collecting answers&lt;/li&gt;
&lt;li&gt;Adding knowledge to the repository&lt;/li&gt;
&lt;li&gt;Submitting code changes&lt;/li&gt;
&lt;li&gt;Arguing in writing, reviewing changes&lt;/li&gt;
&lt;li&gt;Closing tickets and preventing them from closing&lt;/li&gt;
&lt;li&gt;Maintaining discipline in repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same happens to almost everybody who joins us, unfortunately.&lt;/p&gt;

&lt;p&gt;A modern software project is much more a social activity than code writing.
Knowing how to interact with the team and deal with information
is much more important than knowing how to use design patterns. The only
way to learn these skills is &lt;em&gt;practice&lt;/em&gt;. I&amp;#39;ve &lt;a href=&quot;https://www.facebook.com/yegor256/videos/10214943124281537/&quot;&gt;said it&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=GS45LzE3LPQ&quot;&gt;many times&lt;/a&gt;,
let me repeat it again: If you are not an
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;open source&lt;/a&gt;
and StackOverflow
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;activist&lt;/a&gt;, you most
likely won&amp;#39;t have these skills.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Software development and coding are two different things. Usually,
the former includes the latter, but not always. Coding produces
lines of code, while software development creates products. Unfortunately,
the majority of programmers joining Zerocracy
now are coders.
Even though they claim to be developers, in reality they are lacking the very
important sociotechnical
skills that differentiate product creators from lines-of-code writers.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/hardmen.jpg" /></entry><entry><title type="html">The Educational Aspect of Static Analysis</title><link href="http://www.yegor256.com/2018/01/16/educational-aspect-of-static-analysis.html" rel="alternate" type="text/html" title="The Educational Aspect of Static Analysis" /><published>2018-01-16T00:00:00+00:00</published><updated>2018-01-16T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/16/educational-aspect-of-static-analysis</id><content type="html" xml:base="http://www.yegor256.com/2018/01/16/educational-aspect-of-static-analysis.html">&lt;p&gt;&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/544&quot;&gt;Very often&lt;/a&gt;
new programmers who join our projects ask us whether we
have auto-formatting instruments to make Java code look exactly
the way &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;Qulice&lt;/a&gt;
expects. (Qulice is the static analyzer we use.) I always reply that having
such an automated code polisher would only be harmful and wouldn&amp;#39;t help
the project and its members improve and grow. Here is why I think so.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Blind Fury (1989) by Phillip Noyce&#39; src=&#39;/images/2018/01/blind-fury.jpg&#39; longdesc=&#39;#5789f117&#39;/&gt;&lt;figcaption id=&#39;5789f117&#39;&gt;Blind Fury (1989) by Phillip Noyce&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Static analysis, the way we do it in combination with
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;read-only master branch&lt;/a&gt;,
is a fully automated uncompromising review of your pull request, mostly
intended to spot code formatting mistakes. Say we want Java code in
our entire repository to look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, you refactor it as part of a bigger task, and submit a pull request like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For some of you this may not seem like a big difference, since both code snippets
compile without issues and work exactly the same way. However, for us,
the repository maintainers, it is a big deal. We do want our classes to always be
&lt;code&gt;final&lt;/code&gt;, we do want them to be immutable (so all attributes should also be &lt;code&gt;final&lt;/code&gt;),
we want to prefix all attribute references with &lt;code&gt;this.&lt;/code&gt;, and we want the
code to be formatted the same way, since we believe that the uniformity
of the code seriously increases its maintainability.&lt;/p&gt;

&lt;p&gt;Of course, we could create a tool which you could then use to re-format
the code, to make it look the way we want. But in that case you would
never &lt;em&gt;learn&lt;/em&gt; what the project wants from you and &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You will not know the reasoning behind our rules. You will never think about them.
You will not really care about them. But they are not only about the formatting
of spaces and brackets. There are &lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;over 900&lt;/a&gt;
of them in &lt;a href=&quot;http://www.qulice.com&quot;&gt;Qulice&lt;/a&gt; and some of
them were designed especially for the object-oriented philosophy
&lt;a href=&quot;http://www.elegantobjects.org&quot;&gt;we&lt;/a&gt; are preaching.&lt;/p&gt;

&lt;p&gt;Thus, simply put, we don&amp;#39;t want you to go through the static analysis phase easily.
We want you to suffer in order to learn.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="quality" /><summary type="html">Very often
new programmers who join our projects ask us whether we
have auto-formatting instruments to make Java code look exactly
the way Qulice
expects. (Qulice is the static analyzer we use.) I always reply that having
such an automated code polisher would only be harmful and wouldn&amp;#39;t help
the project and its members improve and grow. Here is why I think so.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/blind-fury.jpg" /></entry><entry><title type="html">Five Stages of Microbudgeting</title><link href="http://www.yegor256.com/2018/01/09/micro-budgeting.html" rel="alternate" type="text/html" title="Five Stages of Microbudgeting" /><published>2018-01-09T00:00:00+00:00</published><updated>2018-01-09T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/09/micro-budgeting</id><content type="html" xml:base="http://www.yegor256.com/2018/01/09/micro-budgeting.html">&lt;p&gt;Microtasking, which &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;I explained&lt;/a&gt;
in an earlier post, works only when each task has a very specific reward
for success and a punishment for failure.
I &lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;believe&lt;/a&gt;
that the best reward and punishment instrument is money. The budget
is fixed, the programmer gets it only when the task is completed (reward), no matter
how much time it cost; if it is not completed, there is no money at all
(punishment). Pure and simple. However, a logical question arises: how can we
know upfront what is the right budget? Who sets it?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Taxi Driver (1976) by Martin Scorsese&#39; src=&#39;/images/2018/01/taxi-driver.jpg&#39; longdesc=&#39;#1d81308e&#39;/&gt;&lt;figcaption id=&#39;1d81308e&#39;&gt;Taxi Driver (1976) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;When we started to play with microtasking in our projects, in 2009, we were
asking programmers to estimate each task. It did work, but only with very
simple and obvious tasks. More complex ones almost always suffered
from either under-estimating or padding&amp;mdash;numbers were either very small
and task performers were complaining in the end, or they were too big and
customers were asking for refunds. It was not a manageable situation.&lt;/p&gt;

&lt;p&gt;Then, we realized that it would be better if all tasks were rather
small, with exactly the same budget. We tried to use two hours as a universal
and fixed estimate. Everything else that didn&amp;#39;t fit&amp;mdash;programmers were allowed
to reject. This model didn&amp;#39;t really work either, because our managers had
to deal with a very large amount of rejected tasks and didn&amp;#39;t know how to make
them smaller, since they were not programmers.&lt;/p&gt;

&lt;p&gt;Finally, in March 2010 we found a solution, which was labeled
&lt;a href=&quot;/2010/03/04/pdd.html&quot;&gt;Puzzle Driven Development&lt;/a&gt; (PDD). According to
this concept: 1) Any task has a very small fixed budget (we use 30 minutes);
2) The task performer is allowed to complete only part of the task;
3) The code that is being returned to &lt;code&gt;master&lt;/code&gt; must include &lt;code&gt;@todo&lt;/code&gt; markers, called &amp;quot;puzzles&amp;quot;;
4) Puzzles are automatically converted to new tasks.&lt;/p&gt;

&lt;p&gt;The beauty of this approach is that the most complicated part of the software
project management&amp;mdash;scope decomposition&amp;mdash;is moved to the shoulders
of those who are the best at it: programmers.&lt;/p&gt;

&lt;p&gt;We are using PDD in all our projects now and have even created a public instrument
for GitHub repositories, which allows anyone to play with PDD at no cost:
&lt;a href=&quot;/2017/04/05/pdd-in-action.html&quot;&gt;0pdd.com&lt;/a&gt;. This is exactly
the same tool we are using in our commercial projects.&lt;/p&gt;

&lt;p&gt;However, if and when you decide to apply microbudgeting to your project,
together with PDD, there will be problems. Psychological ones mostly. In my
experience, people go through five stages when they face microbudgeting
for the first time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Denial&lt;/strong&gt;.
They ask &amp;quot;How is it possible?&amp;quot; and then refuse to hear any explanations.
There are many reasons why microbudgeting and microtasking may not
work&amp;mdash;you will hear them all. Very often they demand a traditional
model of payment, especially if they were invited. They just say that
our model is insane, and if we want to see them work on our projects we have to
pay for as much time as they spend. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Anger&lt;/strong&gt;.
Some of them decide to try. Thanks to their previous multi-year experience,
they expect to be
paid by the end of the day/week/month, no matter what they were doing. Very soon they
realize that the total income for the first day of work was $0.00, even though
they were doing something. They get very angry. They call us crooks, fraudsters,
and many other names. Asking them to read the &lt;a href=&quot;http://datum.zerocracy.com/pages/policy.html&quot;&gt;policy&lt;/a&gt;
again doesn&amp;#39;t help. They simply can&amp;#39;t believe that we are
not going to pay them anything, even
though they were doing something. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bargaining&lt;/strong&gt;.
Almost everybody at this stage recommends we change the model. They
explain why it&amp;#39;s not really effective and how great it would be if we
would pay them the traditional way. They give us examples of their previous
projects, send references from previous employees, and criticize
my blog posts. With some of them I try to argue, when their criticism
is constructive. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Depression&lt;/strong&gt;.
Most programmers are used to doing work because they feel guilty
if the task is not done or the bug is not fixed. Microbudgeting requires
a completely opposite attitude: we all are supposed to work because
we are greedy. Money has to motivate us, not guilt. If there is no money,
we don&amp;#39;t work. Most people, when they see this new motivational paradigm
and don&amp;#39;t see the usual guilt, lose coordination and don&amp;#39;t know what to do.
They can&amp;#39;t really achieve anything, because there is no traditional manager
standing behind them and pushing them forward. They are supposed to go for
the money. They don&amp;#39;t, and so they don&amp;#39;t make any money. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Acceptance&lt;/strong&gt;.
Finally, the best of them realize that the model can work if they
follow the rules, which are very simple: be greedy, selfish, egoistic,
money-driven, result-oriented, lazy, misanthropic, heartless, and arrogant.
They accept the fact that they lose, compete, work, and make money only
when they produce results. They start enjoying meritocracy at its best.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You understand already that the vast majority of those who try to work with us
can&amp;#39;t really get to the final point&amp;mdash;they quit somewhere in the middle.
Most probably something very similar will happen on your projects too.&lt;/p&gt;

&lt;p&gt;What is the solution? I don&amp;#39;t really know.&lt;/p&gt;

&lt;p&gt;Statistically speaking, three to five people out of a hundred manage to survive and
become effective and productive. Thus, to build a team of twenty people
you will have to screen and try at least 400.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="xdsd" /><summary type="html">Microtasking, which I explained
in an earlier post, works only when each task has a very specific reward
for success and a punishment for failure.
I believe
that the best reward and punishment instrument is money. The budget
is fixed, the programmer gets it only when the task is completed (reward), no matter
how much time it cost; if it is not completed, there is no money at all
(punishment). Pure and simple. However, a logical question arises: how can we
know upfront what is the right budget? Who sets it?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/taxi-driver.jpg" /></entry><entry><title type="html">Operator new() is Toxic</title><link href="http://www.yegor256.com/2018/01/02/operator-new-is-toxic.html" rel="alternate" type="text/html" title="Operator new() is Toxic" /><published>2018-01-02T00:00:00+00:00</published><updated>2018-01-02T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/02/operator-new-is-toxic</id><content type="html" xml:base="http://www.yegor256.com/2018/01/02/operator-new-is-toxic.html">&lt;p&gt;To instantiate objects, in most object-oriented languages,
including Java, Ruby, and C++, we use operator &lt;code&gt;new()&lt;/code&gt;. Well, unless
we use static factory methods, which we don&amp;#39;t use because
&lt;a href=&quot;/2017/11/14/static-factory-methods.html&quot;&gt;they are evil&lt;/a&gt;.
Even though it looks so easy to make a new object any time we need it,
I would recommend to be more careful with this rather toxic operator.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;The Gift (2015) by Joel Edgerton&#39; src=&#39;/images/2018/01/the-gift.jpg&#39; longdesc=&#39;#63533835&#39;/&gt;&lt;figcaption id=&#39;63533835&#39;&gt;The Gift (2015) by Joel Edgerton&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m sure you understand that the problem with this operator is that
it couples objects, making testing and reuse very difficult or even impossible.
Let&amp;#39;s say there is a story in a file that we need to read as a UTF-8 text
(I&amp;#39;m using
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.25.6/org/cactoos/text/TextOf.html&quot;&gt;&lt;code&gt;TextOf&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It seems super simple, but the problem is obvious: class &lt;code&gt;Story&lt;/code&gt; can&amp;#39;t
be reused. It can only read one particular file. Moreover, testing it
will be rather difficult, since it reads the content from exactly one place,
which can&amp;#39;t be changed at all. More formally this problem is known as an
&lt;em&gt;unbreakable dependency&lt;/em&gt;&amp;mdash;we can&amp;#39;t break the link between &lt;code&gt;Story&lt;/code&gt;
and &lt;code&gt;/tmp/story.txt&lt;/code&gt;&amp;mdash;they are together forever.&lt;/p&gt;

&lt;p&gt;To solve this we need to introduce a constructor and let &lt;code&gt;Story&lt;/code&gt; accept
the location of the content as an argument:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, each user of the &lt;code&gt;Story&lt;/code&gt; has to know the name of the file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#39;s not really
convenient, especially for those users who were using &lt;code&gt;Story&lt;/code&gt; before, knowing
nothing about the file path. To help them we introduce
a &lt;a href=&quot;/2015/05/28/one-primary-constructor.html&quot;&gt;secondary constructor&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Here!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we just make an instance through a no-arguments constructor, just like
we did before:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m sure you&amp;#39;re well aware of this technique, which is also known
as &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;dependency injection&lt;/a&gt;.
I&amp;#39;m actually not saying anything new. What I want you to pay attention to here is
the location and the amount of &lt;code&gt;new&lt;/code&gt; operators in all three code snippets.&lt;/p&gt;

&lt;p&gt;In the first snippet both &lt;code&gt;new&lt;/code&gt; operators are in the method &lt;code&gt;text()&lt;/code&gt;.
In the second snippet we lost one of them. In the third snippet one operator
is in the method, while the second one moved up, to the constructor.&lt;/p&gt;

&lt;p&gt;Remember this fact and let&amp;#39;s move on.&lt;/p&gt;

&lt;p&gt;What if the file is not in UTF-8 encoding but in &lt;a href=&quot;https://en.wikipedia.org/wiki/KOI8-R&quot;&gt;KOI8-R&lt;/a&gt;?
Class &lt;code&gt;TextOf&lt;/code&gt; and then method &lt;code&gt;Story.text()&lt;/code&gt; will throw an exception.
However, class &lt;code&gt;TextOf&lt;/code&gt; is capable of reading in any encoding, it just
needs to have a secondary argument for its constructor:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;KOI8_R&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to make &lt;code&gt;Story&lt;/code&gt; capable of using different encodings, we need to
introduce a few additional secondary constructors and modify its primary
constructor:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardEncodings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#39;s just dependency injection, but pay attention to the locations
of the operator &lt;code&gt;new&lt;/code&gt;. They are all in the
constructors now and none of them are left in the method &lt;code&gt;text()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The tendency here is obvious to me: the more the &lt;code&gt;new&lt;/code&gt; operators stay in the
methods, the less reusable and testable is the class.&lt;/p&gt;

&lt;p&gt;In other words, operator &lt;code&gt;new&lt;/code&gt; is a rather toxic thing, so try to keep its
usage to a minimum in your methods. Make sure you instantiate everything
or almost everything in your secondary constructors.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">To instantiate objects, in most object-oriented languages,
including Java, Ruby, and C++, we use operator new(). Well, unless
we use static factory methods, which we don&amp;#39;t use because
they are evil.
Even though it looks so easy to make a new object any time we need it,
I would recommend to be more careful with this rather toxic operator.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/the-gift.jpg" /></entry><entry><title type="html">The Formula for Software Quality</title><link href="http://www.yegor256.com/2017/12/26/software-quality-formula.html" rel="alternate" type="text/html" title="The Formula for Software Quality" /><published>2017-12-26T00:00:00+00:00</published><updated>2017-12-26T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/12/26/software-quality-formula</id><content type="html" xml:base="http://www.yegor256.com/2017/12/26/software-quality-formula.html">&lt;p&gt;How do you define the quality of a software product? There is definitely an
intrinsic emotional component to it, which means satisfaction for the user,
willingness to pay, appreciation, positive attitude, and all that. However,
if we put emotions aside, how can we really measure it?
The IEEE &lt;a href=&quot;https://standards.ieee.org/findstds/standard/610.12-1990.html&quot;&gt;says&lt;/a&gt; that
quality is the degree to which a product meets its requirements or
user expectations. But what is the formula? Can we say that it
satisfies requirements and expectations to, say, 73%?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Coco Chanel &amp;amp; Igor Stravinsky (2009) by Jan Kounen&#39; src=&#39;/images/2017/12/coco-chanel-and-igor-stravinsky.jpg&#39; longdesc=&#39;#f962b2fa&#39;/&gt;&lt;figcaption id=&#39;f962b2fa&#39;&gt;Coco Chanel &amp;amp; Igor Stravinsky (2009) by Jan Kounen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is the formula and the logic I&amp;#39;m suggesting.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/2017/05/23/unlimited-number-of-bugs.html&quot;&gt;we know&lt;/a&gt;,
any software product has an unlimited number of bugs. Some of them
are discovered and fixed by the development team, let&amp;#39;s call them &lt;em&gt;F&lt;/em&gt;.
Some of them are discovered by the end users, let&amp;#39;s call them &lt;em&gt;U&lt;/em&gt;. Thus,
the total amount of bugs we are aware of, out of an infinity of them, is &lt;em&gt;F+U&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Obviously, the smaller &lt;em&gt;U&lt;/em&gt; is, the higher the quality. Ideally, &lt;em&gt;U&lt;/em&gt; has
to be zero, which will mean that users don&amp;#39;t see any bugs at all. How can
we achieve that, if the total amount of bugs is infinite? The only possible
way to do it is to increase &lt;em&gt;F&lt;/em&gt;, hoping that &lt;em&gt;U&lt;/em&gt; will decrease automatically.&lt;/p&gt;

&lt;p&gt;Thus, the quality of a product can be measured as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://latex.codecogs.com/svg.latex?$$Q%20=%20%5Cfrac%7BF%7D%7BF%20+%20U%7D$$&#39;/&gt;&lt;/p&gt;

&lt;p&gt;We simply divide the amount of bugs found by the total amount of bugs
visible. Thus, the more bugs we manage to find before our users see them, the higher the
quality.&lt;/p&gt;

&lt;p&gt;A quality of 100% means that no bugs are found by the users. A quality
of 0% means that all bugs are found by them.&lt;/p&gt;

&lt;p&gt;Does it make sense?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="quality" /><category term="management" /><summary type="html">How do you define the quality of a software product? There is definitely an
intrinsic emotional component to it, which means satisfaction for the user,
willingness to pay, appreciation, positive attitude, and all that. However,
if we put emotions aside, how can we really measure it?
The IEEE says that
quality is the degree to which a product meets its requirements or
user expectations. But what is the formula? Can we say that it
satisfies requirements and expectations to, say, 73%?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/12/coco-chanel-and-igor-stravinsky.jpg" /></entry><entry><title type="html">SRP is a Hoax</title><link href="http://www.yegor256.com/2017/12/19/srp-is-hoax.html" rel="alternate" type="text/html" title="SRP is a Hoax" /><published>2017-12-19T00:00:00+00:00</published><updated>2017-12-19T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/12/19/srp-is-hoax</id><content type="html" xml:base="http://www.yegor256.com/2017/12/19/srp-is-hoax.html">&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Single Responsibility Principle&lt;/a&gt;,
according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;&gt;Robert Martin&lt;/a&gt;&amp;#39;s
&lt;a href=&quot;http://amzn.to/2m7LmaA&quot;&gt;Clean Code&lt;/a&gt;,
means that &amp;quot;a class should have only one reason to change.&amp;quot;
Let&amp;#39;s try to decrypt this rather vague statement and see how it
helps us design better object-oriented software. If it does.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;The Thomas Crown Affair (1999) by John McTiernan&#39; src=&#39;/images/2017/12/the-thomas-crown-affair.jpg&#39; longdesc=&#39;#e55eaeb4&#39;/&gt;&lt;figcaption id=&#39;e55eaeb4&#39;&gt;The Thomas Crown Affair (1999) by John McTiernan&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I mentioned SRP once in &lt;a href=&quot;/2017/03/28/solid.html&quot;&gt;my post about SOLID&lt;/a&gt;,
saying that it doesn&amp;#39;t really help programmers understand the good old
&amp;quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29&quot;&gt;high cohesion&lt;/a&gt;&amp;quot;
concept, which was introduced by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Larry_Constantine&quot;&gt;Larry Constantine&lt;/a&gt;
back in 1974. Now let&amp;#39;s see it by example and analyze how we can
improve a class, with the SRP in mind, and whether it will become
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;more object-oriented&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s try the class &lt;a href=&quot;https://github.com/jcabi/jcabi-s3/blob/0.18/src/main/java/com/jcabi/s3/AwsOcket.java&quot;&gt;&lt;code&gt;AwsOcket&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;http://s3.jcabi.com&quot;&gt;jcabi-s3&lt;/a&gt; (I&amp;#39;ve simplified the code):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AwsOcket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Correct me if I&amp;#39;m wrong, but according to SRP this class is responsible for
too many things:
1) checking the existence of an object in AWS S3,
2) reading its content, and
3) modifying its content.
Right? It&amp;#39;s not a good design and it must be changed.&lt;/p&gt;

&lt;p&gt;In order to change it and make it responsible for just one thing we must introduce
a getter, which will return an AWS client and then create three new classes:
&lt;code&gt;ExistenceChecker&lt;/code&gt;, &lt;code&gt;ContentReader&lt;/code&gt;, and &lt;code&gt;ContentWriter&lt;/code&gt;. They will check,
read, and write. Now, in order to read the content and print it to the
console I&amp;#39;m currently doing this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tomorrow, if I refactor the class, I will be doing this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExistenceChecker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aside from the fact that these checkers, readers, and writers are not really
classes, but pure holders of procedures, the usage of this &lt;code&gt;ocket&lt;/code&gt; turns
into a nightmare. We can&amp;#39;t really know anymore what will happen with it
when we pass it somewhere. We can&amp;#39;t, for example, guarantee that the content
that is coming from it is decrypted or decoded on the fly. We simply can&amp;#39;t
decorate it. It is not an object anymore, but a holder of an AWS client,
which is used by some other classes somewhere.&lt;/p&gt;

&lt;p&gt;Yes, now it is responsible for only one thing: encapsulating the reference
to the AWS client. It is a perfect class as far as SRP is concerned. But it
is not an object anymore.&lt;/p&gt;

&lt;p&gt;The same will happen with any class if you apply the SRP principle to its
full extent: it will become a holder of data or of other objects, with a
collection of setters and getters on top of them. Maybe with one extra
method in addition to those.&lt;/p&gt;

&lt;p&gt;My point is that SRP is a wrong idea.&lt;/p&gt;

&lt;p&gt;Making classes small and cohesive is a good
idea, but making them responsible &amp;quot;for one thing&amp;quot; is a misleading simplification
of a &amp;quot;high cohesion&amp;quot; concept. It only turns them into dumb carriers of something
else, instead of being encapsulators and decorators of smaller entities, to
construct bigger ones.&lt;/p&gt;

&lt;p&gt;In our fight for this fake SRP idea we lose a much more important principle,
which really is about true object-oriented programming and thinking:
encapsulation. It is much less important how many things an object is
responsible for than how tightly it protects the entities it encapsulates.
A monster object with a hundred methods is much less of a problem than a DTO with five pairs of
getters and setters! This is because a DTO spreads the problem all over the code,
where we can&amp;#39;t even find it, while the monster object is always right in front
of us and we can always refactor it into smaller pieces.&lt;/p&gt;

&lt;p&gt;Encapsulation comes first, size goes next, if ever.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">The Single Responsibility Principle,
according to Robert Martin&amp;#39;s
Clean Code,
means that &amp;quot;a class should have only one reason to change.&amp;quot;
Let&amp;#39;s try to decrypt this rather vague statement and see how it
helps us design better object-oriented software. If it does.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/12/the-thomas-crown-affair.jpg" /></entry><entry><title type="html">Alan Kay Was Wrong About Him Being Wrong</title><link href="http://www.yegor256.com/2017/12/12/alan-kay-was-wrong.html" rel="alternate" type="text/html" title="Alan Kay Was Wrong About Him Being Wrong" /><published>2017-12-12T00:00:00+00:00</published><updated>2017-12-12T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/12/12/alan-kay-was-wrong</id><content type="html" xml:base="http://www.yegor256.com/2017/12/12/alan-kay-was-wrong.html">&lt;p&gt;From time to time someone asks me what I think about what
&lt;a href=&quot;https://en.wikipedia.org/wiki/Alan_Kay&quot;&gt;Alan Kay&lt;/a&gt;, the father of OOP,
the designer of &lt;a href=&quot;https://en.wikipedia.org/wiki/Smalltalk&quot;&gt;Smalltalk&lt;/a&gt;,
the first object-oriented language,
&lt;a href=&quot;http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html&quot;&gt;said&lt;/a&gt;
in 1998 about OOP. He literally said that the very
term &amp;quot;object&amp;quot; was misleading and a more appropriate one would be &amp;quot;messaging.&amp;quot;
Here is what I think.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Rain Man (1988) by Barry Levinson&#39; src=&#39;/images/2017/12/rain-man.jpg&#39; longdesc=&#39;#7b3f07bb&#39;/&gt;&lt;figcaption id=&#39;7b3f07bb&#39;&gt;Rain Man (1988) by Barry Levinson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I believe that there are two orthogonal means of interaction between objects:
messaging and composition. Let&amp;#39;s say, we have a point and a canvas:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is how messaging would look:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with messaging is that it keeps objects on the same
level of abstraction. They communicate
as equal and independent &amp;quot;modules,&amp;quot; sending
&lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;data messages&lt;/a&gt; to each other.
Even though they look object-oriented, the entire communication pattern
is very procedural. We try to encapsulate as much as we can inside a single
object, however inevitably still having to expose a lot of its data in order to
be able to &amp;quot;connect&amp;quot; it with other objects.&lt;/p&gt;

&lt;p&gt;We turn objects into &amp;quot;little computers,&amp;quot; as &lt;a href=&quot;http://amzn.to/2npiZZQ&quot;&gt;some books&lt;/a&gt; refer to them. They
expect data to come in, they process the data, and return back some new data.
The maintainability problem is not really solved with this approach&amp;mdash;we
still have to deal with a lot of data, remembering its semantic outside of
the objects. In other words, there is no true encapsulation.&lt;/p&gt;

&lt;p&gt;On the other hand, this is how composition would look instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintedOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every time we need objects to communicate we create a bigger object that
encapsulates more primitive ones, letting them interact inside. Of course,
the data will also go from object to object, but that will happen
inside a bigger object. We can even make the encapsulator
and the encapsulated &amp;quot;friends,&amp;quot; as &lt;a href=&quot;/2016/12/20/can-objects-be-friends.html&quot;&gt;I suggested before&lt;/a&gt;,
to make that interaction more transparent and avoid data exposure through
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters&lt;/a&gt; or
even
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;printers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me
&lt;a href=&quot;http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html&quot;&gt;quote&lt;/a&gt;
Alan Kay again:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The key in making great and growable systems is much more to design how
  its modules communicate rather than what their internal properties
  and behaviors should be.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems to me that he means &lt;em&gt;modules&lt;/em&gt;, which are not objects. These are
different things. Modules are elements of the architecture, while objects
are elements of the design. These are two different levels. At the level of
architecture we obviously need messages and Kay&amp;#39;s statement is perfectly correct.
However, at the level of design we need composable structures,
to increase maintainability and messaging is not what can help us achieve
this goal.&lt;/p&gt;

&lt;p&gt;Thus, I believe Alan Kay was right when he invented objects, called them
objects, and gave their programming style the &amp;quot;object-oriented&amp;quot; title.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><summary type="html">From time to time someone asks me what I think about what
Alan Kay, the father of OOP,
the designer of Smalltalk,
the first object-oriented language,
said
in 1998 about OOP. He literally said that the very
term &amp;quot;object&amp;quot; was misleading and a more appropriate one would be &amp;quot;messaging.&amp;quot;
Here is what I think.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/12/rain-man.jpg" /></entry><entry><title type="html">DAO is Yet Another OOP Shame</title><link href="http://www.yegor256.com/2017/12/05/data-access-object.html" rel="alternate" type="text/html" title="DAO is Yet Another OOP Shame" /><published>2017-12-05T00:00:00+00:00</published><updated>2017-12-05T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/12/05/data-access-object</id><content type="html" xml:base="http://www.yegor256.com/2017/12/05/data-access-object.html">&lt;p&gt;Someone asked me what I think about DAO and I realized that, even
though I wrote about
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;ORM&lt;/a&gt;,
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTO&lt;/a&gt;,
and
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters&lt;/a&gt;,
I haven&amp;#39;t had a chance
yet to mention DAO. Here is my take on it: it&amp;#39;s as much of a shame
as its friends&amp;mdash;ORM, DTO, and getters. In a nutshell,
a &lt;a href=&quot;http://www.oracle.com/technetwork/java/dataaccessobject-138824.html&quot;&gt;Data Access Object&lt;/a&gt;
is an object &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_access_object&quot;&gt;that&lt;/a&gt;
&amp;quot;provides an abstract interface to some type of database or other
persistence mechanism.&amp;quot; The purpose is noble, but the implementation
is terrible.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Requiem for a Dream (2000) by Darren Aronofsky&#39; src=&#39;/images/2017/12/requiem-for-a-dream.jpg&#39; longdesc=&#39;#edf81e4e&#39;/&gt;&lt;figcaption id=&#39;edf81e4e&#39;&gt;Requiem for a Dream (2000) by Darren Aronofsky&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is how it &lt;a href=&quot;https://stackoverflow.com/a/19154487/187141&quot;&gt;may look&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookDAO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Other methods here ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The idea is simple&amp;mdash;method &lt;code&gt;find()&lt;/code&gt; creates
a &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTO&lt;/a&gt;
&lt;code&gt;Book&lt;/code&gt;, someone else injects new data into it and calls &lt;code&gt;update()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BookDAO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BookDAOFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBookDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Don Quixote&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What is wrong, you ask? Everything that was wrong with
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;ORM&lt;/a&gt;,
but instead of a &amp;quot;session&amp;quot; we have this DAO. The problem remains the
same: the &lt;code&gt;book&lt;/code&gt; is not an object, but a data container. I quote
my own three-year-old statement from the &lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;ORM article&lt;/a&gt;,
with a slight change in the name:
&amp;quot;DAO, instead of encapsulating database interaction inside an object,
extracts it away, literally tearing a solid and cohesive living organism apart.&amp;quot;
For more details, please check that article.&lt;/p&gt;

&lt;p&gt;However, I have to say that I have something like DAOs in most of my
&lt;a href=&quot;/pets.html&quot;&gt;pet projects&lt;/a&gt;, but they
don&amp;#39;t return or accept DTOs. Instead, they return objects and sometimes accept
operations on them. Here are a few examples. Look at this
&lt;a href=&quot;https://github.com/yegor256/wring/blob/0.17.4/src/main/java/io/wring/model/Pipes.java&quot;&gt;&lt;code&gt;Pipes&lt;/code&gt;&lt;/a&gt;
interface from
&lt;a href=&quot;/2016/03/15/wring-dispatcher-github-notifications.html&quot;&gt;Wring.io&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pipes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Pipe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Its method &lt;a href=&quot;https://github.com/yegor256/wring/blob/0.17.4/src/main/java/io/wring/model/Pipes.java#L55&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;
creates a new item in the &amp;quot;collection&amp;quot; and method
&lt;a href=&quot;https://github.com/yegor256/wring/blob/0.17.4/src/main/java/io/wring/model/Pipes.java#L62&quot;&gt;&lt;code&gt;pipe()&lt;/code&gt;&lt;/a&gt;
returns a single object from the collection. The
&lt;a href=&quot;https://github.com/yegor256/wring/blob/0.17.4/src/main/java/io/wring/model/Pipe.java&quot;&gt;&lt;code&gt;Pipe&lt;/code&gt;&lt;/a&gt;
is not a DTO, it is
a normal object that is fully capable of doing all necessary database
operations, without any help from a DAO. For example, there is
&lt;a href=&quot;https://github.com/yegor256/wring/blob/0.17.4/src/main/java/io/wring/model/Pipe.java#L63&quot;&gt;&lt;code&gt;Pipe.status(String)&lt;/code&gt;&lt;/a&gt;
method to update its status. I&amp;#39;m not going to use &lt;code&gt;Pipes&lt;/code&gt; for that, I just do
&lt;code&gt;pipe.status(&amp;quot;Hello, world!&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is yet another example from
&lt;a href=&quot;/2016/03/30/jare-instant-free-cdn.html&quot;&gt;Jare.io&lt;/a&gt;: interface
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.11/src/main/java/io/jare/model/Base.java&quot;&gt;&lt;code&gt;Base&lt;/code&gt;&lt;/a&gt;
which returns a list of objects of type
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.11/src/main/java/io/jare/model/Domain.java&quot;&gt;&lt;code&gt;Domain&lt;/code&gt;&lt;/a&gt;.
Then, when we want to delete a domain, we just call
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.11/src/main/java/io/jare/model/Domain.java#L54&quot;&gt;&lt;code&gt;domain.delete()&lt;/code&gt;&lt;/a&gt;.
The domain is fully capable of doing all necessary database manipulations.&lt;/p&gt;

&lt;p&gt;The problem with DAO is right in its name, I believe. It says that we are
accessing &amp;quot;data&amp;quot; and does exactly that: goes to the database, retrieves
some data, and returns &lt;em&gt;data&lt;/em&gt;. Not an object, but data, also known as a
&amp;quot;data transfer object.&amp;quot; As we &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;discussed before&lt;/a&gt;,
direct data manipulations are what break encapsulation and make
object-oriented code procedural and unmaintainable.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Someone asked me what I think about DAO and I realized that, even
though I wrote about
ORM,
DTO,
and
getters,
I haven&amp;#39;t had a chance
yet to mention DAO. Here is my take on it: it&amp;#39;s as much of a shame
as its friends&amp;mdash;ORM, DTO, and getters. In a nutshell,
a Data Access Object
is an object that
&amp;quot;provides an abstract interface to some type of database or other
persistence mechanism.&amp;quot; The purpose is noble, but the implementation
is terrible.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/12/requiem-for-a-dream.jpg" /></entry></feed>
