<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2016-12-07T10:24:19+00:00</updated><id>http://www.yegor256.com/</id><title>Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><entry><title>How to Pay Programmers Less</title><link href="http://www.yegor256.com/2016/12/06/how-to-pay-programmers-less.html" rel="alternate" type="text/html" title="How to Pay Programmers Less" /><published>2016-12-06T00:00:00+00:00</published><updated>2016-12-06T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/12/06/how-to-pay-programmers-less</id><content type="html" xml:base="http://www.yegor256.com/2016/12/06/how-to-pay-programmers-less.html">&lt;p&gt;To create software, you need programmers. Unfortunately. They are expensive,
lazy, and almost impossible to control. The software they create either works or doesn&amp;#39;t, but
you still have to pay them, every month. Of course, it&amp;#39;s always better to pay less.
However, sometimes they may figure out they are being
underpaid and quit. How do you prevent that? &lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;Unfortunately&lt;/a&gt;,
we can&amp;#39;t use violence any more, but there are some other mechanisms. Let me
share.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F12%2Fben-hur.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Ben-Hur (1959) by William Wyler&#39;/&gt;&lt;figcaption&gt;Ben-Hur (1959) by William Wyler&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Keep salaries secret&lt;/strong&gt;.
It&amp;#39;s obvious: Don&amp;#39;t let them discuss
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;salaries&lt;/a&gt;. They must keep this information
secret. Warn them or even sign
&lt;a href=&quot;/2015/05/04/how-to-protect-business-idea.html&quot;&gt;NDAs&lt;/a&gt; prohibiting any talks about wages, bonuses,
compensation plans, etc. They must feel that this information is toxic and
never even talk to each other about salaries. If they don&amp;#39;t know how much
their coworkers are getting, they won&amp;#39;t raise salary questions for much longer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give raises randomly&lt;/strong&gt;.
There should be no system behind your salary upgrades or
&lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;firing decisions&lt;/a&gt;. You give
them raises when you feel like it, not when they are being more productive
or effective. Try to make your decisions unpredictable. Unpredictability creates
fear, and this is exactly what you need. They will be afraid of you and will
not complain about being underpaid for a long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No conferences&lt;/strong&gt;.
Don&amp;#39;t allow them to attend meetups or
conferences. They may meet &lt;a href=&quot;/2015/09/29/mayonnaise.html&quot;&gt;recruiters&lt;/a&gt; there
and find out that their salaries are not
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;fair enough&lt;/a&gt;. Promote the idea
that conferences are just a waste of time. It&amp;#39;s better to organize events in the
&lt;a href=&quot;/2016/08/05/distributed-teams-are-higher-quality.html&quot;&gt;office&lt;/a&gt;.
They always have to stay together, never free to meet programmers from other companies.
The less they know, the safer you are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spy on them&lt;/strong&gt;.
Make sure they all use your email server, computers, servers, and even mobile phones.
Install software that tracks all their messages. Ideally, you should have
a security department watching all of them and regularly informing
you about abnormal or suspicious behavior. Any contact with other
companies should be considered suspicious. Employees must know you&amp;#39;re spying on them.
Extra fear is always helpful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make a deal with competitors&lt;/strong&gt;.
Contact your major competitors in the region and agree to not head-hunt
their programmers if they don&amp;#39;t touch yours. If they reject
this deal, try to recruit a few of their key engineers. Just offer to double
their salaries. You won&amp;#39;t really hire them, of course, but this move will definitely shake
your local market, and competitors will be afraid of you. They will agree to never
touch your &lt;del&gt;slaves&lt;/del&gt; developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promote corporate values&lt;/strong&gt;.
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;Brainwash&lt;/a&gt;
them regularly by communicating how great your company is, how big its
mission is, and how important their contribution is. The numbers on their
paychecks will look way less important compared to the multi-billion-dollar
market the team is trying to dominate. They will sacrifice for a while.
For quite a long time, this trick will work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stress them&lt;/strong&gt;.
They must not feel relaxed, it&amp;#39;s not in your favor. Make sure they
have tight deadlines, complex problems to solve, and enough guilt on
their shoulders. They won&amp;#39;t ask for a raise, constantly feeling guilty
for letting you down with project goals. Try to make them responsible
for failures as much as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cushion chairs and tennis tables&lt;/strong&gt;.
Spend just a little on all those funny office things, and they will
pay you back big time, through the ability to underpay your programmers.
A fancy and professional coffee machine will cost you $1,000 and make
it possible to save $200 to $300 on each programmer monthly. Do the math.
Make yourself a rule that instead of giving someone a raise, it&amp;#39;s always
better to buy a new PlayStation for the office. Also, let them bring
their &lt;del&gt;spouses&lt;/del&gt; pets to the office&amp;mdash;they will &lt;del&gt;work&lt;/del&gt; stay
longer for less money.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give them sound titles&lt;/strong&gt;.
Call them Vice Presidents, for example VP of Engineering, VP of Technology,
VP of Whatever. Not a big deal for you, but very important for them. The salary
will be much less valuable than the title they can put on their LinkedIn
profiles. If you&amp;#39;re running out of Vice Presidents, try
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;Senior Architect&lt;/a&gt;,
Lead Technical Lead, Chief Scientist, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Help them survive&lt;/strong&gt;.
Most programmers are rather stupid when it comes to managing money. They simply don&amp;#39;t
know how to buy insurance, how to plan a retirement fund, or even how to
pay taxes. You help them, to your own benefit, of course. They will be
happy to feel safe in your hands, and won&amp;#39;t leave you. They won&amp;#39;t ask
for a raise, either, because they will feel bad about even starting such a negotiation.
You must be the &amp;quot;parent,&amp;quot; and they will be the &amp;quot;kids.&amp;quot; It&amp;#39;s a good old model.
It works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be a friend&lt;/strong&gt;.
This is the last and most powerful technique. You have to be a friend
to your programmers. It&amp;#39;s very difficult to negotiate money with a friend&amp;mdash;they
won&amp;#39;t be able to do it easily. They will keep working for you for less money
just because you&amp;#39;re good friends. How do you become friends? Well, meet their
families, invite them over for dinner at your house, give them birthday
gifts&amp;mdash;all those tricks. They will save you a lot of money.&lt;/p&gt;

&lt;p&gt;Did I forget anything?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="mood" /><category term="sarcasm" /><summary>To create software, you need programmers. Unfortunately. They are expensive,
lazy, and almost impossible to control. The software they create either works or doesn&amp;#39;t, but
you still have to pay them, every month. Of course, it&amp;#39;s always better to pay less.
However, sometimes they may figure out they are being
underpaid and quit. How do you prevent that? Unfortunately,
we can&amp;#39;t use violence any more, but there are some other mechanisms. Let me
share.</summary></entry><entry><title>EO</title><link href="http://www.yegor256.com/2016/11/29/eolang.html" rel="alternate" type="text/html" title="EO" /><published>2016-11-29T00:00:00+00:00</published><updated>2016-11-29T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/11/29/eolang</id><content type="html" xml:base="http://www.yegor256.com/2016/11/29/eolang.html">&lt;p&gt;It&amp;#39;s time to do it! We&amp;#39;ve started work on a new programming language. Its
name is &lt;strong&gt;EO&lt;/strong&gt; (as in
&lt;a href=&quot;/elegant-objects.html&quot;&gt;Elegant Objects&lt;/a&gt; or in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Esperanto&quot;&gt;Esperanto&lt;/a&gt;): &lt;a href=&quot;http://www.eolang.org&quot;&gt;eolang.org&lt;/a&gt;.
It&amp;#39;s open source and community driven:
&lt;a href=&quot;https://github.com/yegor256/eo&quot;&gt;yegor256/eo&lt;/a&gt; GitHub repo. It&amp;#39;s still in
very early draft form, but the direction is more or less clear: It has to be
truly object-oriented, with no compromises. You&amp;#39;re welcome to join us.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F11%2Fvicky-cristina-barcelona.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Vicky Cristina Barcelona (2008) by Woody Allen&#39;/&gt;&lt;figcaption&gt;Vicky Cristina Barcelona (2008) by Woody Allen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Why yet another language? Because there are no object-oriented languages
on the market that are really object-oriented, to my knowledge. Here are the
things I think do not belong in a pure object-oriented language:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;static methods&lt;/li&gt;
&lt;li&gt;classes (only types and objects)&lt;/li&gt;
&lt;li&gt;implementation inheritance&lt;/li&gt;
&lt;li&gt;mutability&lt;/li&gt;
&lt;li&gt;NULL&lt;/li&gt;
&lt;li&gt;reflection&lt;/li&gt;
&lt;li&gt;constants&lt;/li&gt;
&lt;li&gt;type casting&lt;/li&gt;
&lt;li&gt;annotations&lt;/li&gt;
&lt;li&gt;flow control (&lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many other minor mistakes that Java and C++ are full of.&lt;/p&gt;

&lt;p&gt;At the moment, we think that EO will compile into Java. Not into byte-code,
but into &lt;code&gt;.java&lt;/code&gt; files, later compilable to byte-code.&lt;/p&gt;

&lt;p&gt;I really count on your contribution. Please submit your ideas as
tickets and pull request to the
&lt;a href=&quot;https://github.com/yegor256/eo&quot;&gt;yegor256/eo&lt;/a&gt; GitHub repo.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>It&amp;#39;s time to do it! We&amp;#39;ve started work on a new programming language. Its
name is EO (as in
Elegant Objects or in
Esperanto): eolang.org.
It&amp;#39;s open source and community driven:
yegor256/eo GitHub repo. It&amp;#39;s still in
very early draft form, but the direction is more or less clear: It has to be
truly object-oriented, with no compromises. You&amp;#39;re welcome to join us.</summary></entry><entry><title>Encapsulation Covers Up Naked Data</title><link href="http://www.yegor256.com/2016/11/21/naked-data.html" rel="alternate" type="text/html" title="Encapsulation Covers Up Naked Data" /><published>2016-11-21T00:00:00+00:00</published><updated>2016-11-21T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/11/21/naked-data</id><content type="html" xml:base="http://www.yegor256.com/2016/11/21/naked-data.html">&lt;p&gt;Encapsulation is the core principle of object-oriented programming
that makes objects solid, cohesive, trustworthy, etc. But
what exactly is encapsulation? Does it only protect against access
to private attributes from outside an object? I think it&amp;#39;s much more.
Encapsulation leads to the absence of &lt;em&gt;naked&lt;/em&gt; data on all levels and in all forms.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F11%2Fborat.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Borat: Cultural Learnings of America for Make Benefit Glorious Nation of Kazakhstan (2006) by Larry Charles&#39;/&gt;&lt;figcaption&gt;Borat: Cultural Learnings of America for Make Benefit Glorious Nation of Kazakhstan (2006) by Larry Charles&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This is what naked data is (C code):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The temperature is %d F&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here &lt;code&gt;t&lt;/code&gt; is the data, which is publicly accessible by the code around it.
Anyone can modify it or read it.&lt;/p&gt;

&lt;p&gt;Why is that bad? For one reason: tight and hidden coupling.&lt;/p&gt;

&lt;p&gt;The code around &lt;code&gt;t&lt;/code&gt; inevitably makes a lot of assumptions about the data. For
example, both lines after &lt;code&gt;int t&lt;/code&gt; decided that the temperature is in Fahrenheit.
At the moment of writing, this may be true, but this assumption couples the
code with the data. If tomorrow we change &lt;code&gt;t&lt;/code&gt; to Celsius, the code won&amp;#39;t know
about this change. That&amp;#39;s why I call this coupling &lt;em&gt;hidden&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we change the type of &lt;code&gt;t&lt;/code&gt; from &lt;code&gt;int&lt;/code&gt; to, say, &lt;code&gt;double&lt;/code&gt;, the &lt;code&gt;printf&lt;/code&gt;
line won&amp;#39;t print anything after the decimal point. Again, the coupling is
there, but it&amp;#39;s hidden. Later on, we simply won&amp;#39;t be able to find all the places in our
code where we made these or other assumptions about &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will seriously affect maintainability.&lt;/p&gt;

&lt;p&gt;And this is not a solution, as you can imagine (Java now):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks like an object, but the data is still naked. Anyone can retrieve
&lt;code&gt;t&lt;/code&gt; from the object and decide whether it&amp;#39;s Fahrenheit or Celsius, whether
it has digits after the dot or not, etc. This is not encapsulation yet!&lt;/p&gt;

&lt;p&gt;The only way to encapsulate &lt;code&gt;t&lt;/code&gt; is to make sure nobody can touch
it either directly or by retrieving it from an object. How do we do that?
Just stop exposing data and start exposing functionality. Here is how,
for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d F&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We don&amp;#39;t allow anyone to retrieve &lt;code&gt;t&lt;/code&gt; anymore. All they can do is
convert temperature to text. If and when we decide to change &lt;code&gt;t&lt;/code&gt; to Celsius,
we will do it just once and in one place: in the class &lt;code&gt;Temperature&lt;/code&gt;.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Any data elements that escape objects are naked and lead to maintainability problems&lt;/aside&gt;

&lt;p&gt;If we need other functions in the future, like math operations or conversion
to Celsius, we add more methods to class &lt;code&gt;Temperature&lt;/code&gt;. But we never
let anyone touch or know about &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This idea is close to
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;&amp;quot;printers instead of getters&amp;quot;&lt;/a&gt;,
which we discussed earlier, though from a much wider perspective.
Here I&amp;#39;m saying that any data elements that escape objects are &lt;em&gt;naked&lt;/em&gt;
and lead to maintainability problems.&lt;/p&gt;

&lt;p&gt;The question is how we can work entirely without naked data, right? Eventually
we have to let objects exchange data, don&amp;#39;t we? Yes, that&amp;#39;s true. But not entirely.
I&amp;#39;ll explain that in my next post.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><category term="java" /><summary>Encapsulation is the core principle of object-oriented programming
that makes objects solid, cohesive, trustworthy, etc. But
what exactly is encapsulation? Does it only protect against access
to private attributes from outside an object? I think it&amp;#39;s much more.
Encapsulation leads to the absence of naked data on all levels and in all forms.</summary></entry><entry><title>Software Conferences to Attend</title><link href="http://www.yegor256.com/2016/11/18/software-conferences-to-attend.html" rel="alternate" type="text/html" title="Software Conferences to Attend" /><published>2016-11-18T00:00:00+00:00</published><updated>2016-11-18T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/11/18/software-conferences-to-attend</id><content type="html" xml:base="http://www.yegor256.com/2016/11/18/software-conferences-to-attend.html">&lt;p&gt;This is &lt;em&gt;my&lt;/em&gt; list of software conferences that are worth attending,
as a speaker and a listener; with a focus on Java and project management.
I will try to update this list regularly, mostly not to forget where
I have to submit my talks. Hopefully the list will help you too,
to make the right choice and never miss their CFP deadlines.&lt;/p&gt;

&lt;!--more--&gt;

&lt;table&gt;
&lt;colgroup&gt;
  &lt;col class=&quot;x-name&quot;/&gt;
  &lt;col class=&quot;x-place&quot;/&gt;
  &lt;col class=&quot;x-when&quot;/&gt;
  &lt;col class=&quot;x-cfp&quot;/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
  &lt;td&gt;Name&lt;/td&gt;
  &lt;td&gt;Place&lt;/td&gt;
  &lt;td&gt;When&lt;/td&gt;
  &lt;td&gt;CFP&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td colspan=&quot;4&quot; class=&quot;x-hr&quot;&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://jeeconf.com/&quot;&gt;JEEConf&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Kiev&lt;/td&gt;
  &lt;td&gt;May&lt;/td&gt;
  &lt;td&gt;Jan&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://agileee.org/&quot;&gt;AgileEE&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Kiev&lt;/td&gt;
  &lt;td&gt;Apr&lt;/td&gt;
  &lt;td&gt;Jan&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://geekout.ee/&quot;&gt;GeekOUT&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Tallinn&lt;/td&gt;
  &lt;td&gt;Jun&lt;/td&gt;
  &lt;td&gt;Feb&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;San Francisco&lt;/td&gt;
  &lt;td&gt;Sep&lt;/td&gt;
  &lt;td&gt;Mar&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://www.devoxx.com/&quot;&gt;Devoxx&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Antwerp&lt;/td&gt;
  &lt;td&gt;Nov&lt;/td&gt;
  &lt;td&gt;Apr&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://javazone.no/&quot;&gt;JavaZone&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Oslo&lt;/td&gt;
  &lt;td&gt;Sep&lt;/td&gt;
  &lt;td&gt;Apr&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.oredev.org/&quot;&gt;Øredev&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Malmö&lt;/td&gt;
  &lt;td&gt;Nov&lt;/td&gt;
  &lt;td&gt;Apr&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://qconsf.com/&quot;&gt;QCon&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;San Francisco&lt;/td&gt;
  &lt;td&gt;Nov&lt;/td&gt;
  &lt;td&gt;May&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.jfokus.se/&quot;&gt;JFokus&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Stockholm&lt;/td&gt;
  &lt;td&gt;Feb&lt;/td&gt;
  &lt;td&gt;Jun&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://jpoint.ru/en/&quot;&gt;JPoint&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Moscow&lt;/td&gt;
  &lt;td&gt;Apr&lt;/td&gt;
  &lt;td&gt;Dec&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://geecon.org/&quot;&gt;GeeCON&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Krakow&lt;/td&gt;
  &lt;td&gt;May&lt;/td&gt;
  &lt;td&gt;Dec&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Did I forget anything?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="conferences" /><summary>This is my list of software conferences that are worth attending,
as a speaker and a listener; with a focus on Java and project management.
I will try to update this list regularly, mostly not to forget where
I have to submit my talks. Hopefully the list will help you too,
to make the right choice and never miss their CFP deadlines.</summary></entry><entry><title>Why I Don’t Publish E-Books</title><link href="http://www.yegor256.com/2016/11/09/why-no-ebooks.html" rel="alternate" type="text/html" title="Why I Don&#39;t Publish E-Books" /><published>2016-11-09T00:00:00+00:00</published><updated>2016-11-09T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/11/09/why-no-ebooks</id><content type="html" xml:base="http://www.yegor256.com/2016/11/09/why-no-ebooks.html">&lt;p&gt;Very often readers of &lt;a href=&quot;/books.html&quot;&gt;my books&lt;/a&gt; ask me why
I don&amp;#39;t publish them in digital format as e-books for Amazon Kindle,
EPUB, FB2, or simply PDF. There are a few reasons. It&amp;#39;s time
to summarize them all and explain why dead trees are the only way
to go if you want to read my content.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F11%2Faddams-family.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The Addams Family (1991) by Barry Sonnenfeld&#39;/&gt;&lt;figcaption&gt;The Addams Family (1991) by Barry Sonnenfeld&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First of all, there is a simple technical reason:&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/2fBsTPn&#39;&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F11%2Fctan-lion.jpg&#39; style=&#39;width:92px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;I don&amp;#39;t know how to format them&lt;/strong&gt;.
I type all my books in &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt;.
To my knowledge, it&amp;#39;s the best and
most powerful typesetting software. If you don&amp;#39;t use it yet, you
absolutely must read
&lt;a href=&quot;http://amzn.to/2fBsTPn&quot;&gt;The TeX Book&lt;/a&gt; by Donald Knuth. Even if you&amp;#39;re not
going to become a book writer or publisher, you must read the book.
You will enjoy reading and will simply fall in love with TeX. The only
problem with TeX is that it formats texts for a fixed page size, unlike
HTML and many other digital formats. When I write my books, I know exactly
the size of their pages, and everything is formatted to look perfect
on paper. I simply don&amp;#39;t know how to do the same for all digital formats.
I&amp;#39;m sure it&amp;#39;s possible, but I don&amp;#39;t know how.&lt;/p&gt;

&lt;p&gt;Second, there is an emotional reason:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I don&amp;#39;t like digital books&lt;/strong&gt;.
Call me old school, but I don&amp;#39;t like to read on screen. I like how
books feel, how they smell, and how they become &amp;quot;friends&amp;quot;. I like
to make notes, bookmarks, fold pages, etc. I believe what&amp;#39;s very important is
not just the content, but the way you &amp;quot;feel&amp;quot; it. With a digital book,
this emotional aspect of reading is gone; all books are the same. You don&amp;#39;t
feel a book at all, because it&amp;#39;s just a Kindle in your hands. You may say
that not everybody is like me. Well, yes, but I want the world to be
the way I like it. Not the way it is.&lt;/p&gt;

&lt;p&gt;All other reasons are derived from the fact that a digital book will
inevitably be stolen and posted on torrents or somewhere
else, for free download. A digital book will become a &lt;em&gt;free&lt;/em&gt; book very quickly.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Let&amp;#39;s just agree that a digital book means a free book&lt;/aside&gt;

&lt;p&gt;Let me tell you a funny story. I received an email a few months ago from a &amp;quot;Korean
book publisher&amp;quot;. The email said it was very interested in translating
&lt;a href=&quot;/elegant-objects.html&quot;&gt;Elegant Objects&lt;/a&gt; into Korean and publishing in its
local market. To start the process, the email said, the company needed my book in PDF.
I replied that I was ready to send a printed copy, which was
definitely enough for a translator to work on. The sender disappeared. I&amp;#39;ve checked
its website and found no real evidence of previously published books. I guess it
was just a scam, an attempt to get a digital copy of the book. Funny, huh?&lt;/p&gt;

&lt;p&gt;Thus, let&amp;#39;s just agree that a digital book means a free book at the moment
of writing, in this world. And here is why I don&amp;#39;t want my books to be free:&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Not only because I&amp;#39;m greedy, but because I want you to take my books seriously&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;I want to earn&lt;/strong&gt;.
Not only because I need to pay my bills, but mostly because I want
to stay motivated. I&amp;#39;ve made almost $12,000 by selling the first volume of
&lt;a href=&quot;/elegant-objects.html&quot;&gt;Elegant Objects&lt;/a&gt; over the last 10 months. Do you
think I&amp;#39;m motivated enough to write the second volume. Of course I am!
Would I be as motivated as I am now if I would have made $500 instead? I don&amp;#39;t think
so. Most probably, you would never see any more books from me.
And it&amp;#39;s not just about dollars.
It&amp;#39;s mostly about the appreciation I feel from you. Every payment
I get from Amazon tells me that I definitely deliver something valuable.
With a free book, I will get no appreciation and no cash.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I want you to pay&lt;/strong&gt;.
Not only because I&amp;#39;m greedy, but mostly because I want you to take my
books seriously. As a reader myself, I pay almost no attention to
books that cost $1.99 or nothing. I understand that their authors themselves
were not serious about them. Why are they cheap or free? They were so easy to write?
Their authors don&amp;#39;t believe that anyone would pay any decent money for them?
Their authors are afraid of refunds? Probably a combination of all that.
I strongly believe that good products must cost good money. If it&amp;#39;s free,
it&amp;#39;s bad (or there are some hidden costs or concealed promotion of something else).&lt;/p&gt;

&lt;p&gt;Because of all that, you get no digital books. Only printed ones.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="mood" /><summary>Very often readers of my books ask me why
I don&amp;#39;t publish them in digital format as e-books for Amazon Kindle,
EPUB, FB2, or simply PDF. There are a few reasons. It&amp;#39;s time
to summarize them all and explain why dead trees are the only way
to go if you want to read my content.</summary></entry><entry><title>Software Quality Award, 2017</title><link href="http://www.yegor256.com/2016/10/23/award-2017.html" rel="alternate" type="text/html" title="Software Quality Award, 2017" /><published>2016-10-23T00:00:00+00:00</published><updated>2016-10-23T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/10/23/award-2017</id><content type="html" xml:base="http://www.yegor256.com/2016/10/23/award-2017.html">&lt;p&gt;This is the third year of the
&lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. The prize
is still the same&amp;mdash;&lt;strong&gt;$4,096&lt;/strong&gt;.
The rules are still the same. Read on.
Previous years are here:
&lt;a href=&quot;/2015/04/16/award.html&quot;&gt;2015&lt;/a&gt;,
&lt;a href=&quot;/2015/10/17/award-2016.html&quot;&gt;2016&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Registration is open! Fill
&lt;a href=&quot;https://docs.google.com/forms/d/1QCRWPAyqnuecBSWAexDcVklNhclI4R6ckhNY5CzE9x4&quot;&gt;this form&lt;/a&gt;
to submit.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One person can submit &lt;strong&gt;only one&lt;/strong&gt; project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Submissions are accepted until the &lt;strong&gt;September 1, 2017&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I will check the commit history to make sure you&amp;#39;re the main contributor to the project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Results will be announced &lt;strong&gt;October 15, 2017&lt;/strong&gt; on this page and by email.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The best project will receive &lt;strong&gt;$4,096&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Winners that received any cash prizes in previous years can&amp;#39;t submit again.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open source (in GitHub).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least 10,000 lines of code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least one year old.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object-oriented (that&amp;#39;s the only thing I understand).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best project is selected using this &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;criteria&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What doesn&amp;#39;t matter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don&amp;#39;t care about
popularity; quality is the key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it&amp;#39;s still eligible for the award. I don&amp;#39;t care about
your marketing position; quality is all.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;These projects submitted so far (in order of submission):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SimonKagstrom/kcov&quot;&gt;SimonKagstrom/kcov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JnRouvignac/AutoRefactor&quot;&gt;JnRouvignac/AutoRefactor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/javaslang/javaslang&quot;&gt;javaslang/javaslang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/HDouss/jeometry&quot;&gt;HDouss/jeometry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="quality" /><summary>This is the third year of the
Software Quality Award. The prize
is still the same&amp;mdash;$4,096.
The rules are still the same. Read on.
Previous years are here:
2015,
2016.

Registration is open! Fill
this form
to submit.</summary></entry><entry><title>Command, Control, and Innovate</title><link href="http://www.yegor256.com/2016/09/27/command-control-innovate.html" rel="alternate" type="text/html" title="Command, Control, and Innovate" /><published>2016-09-27T00:00:00+00:00</published><updated>2016-09-27T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/09/27/command-control-innovate</id><content type="html" xml:base="http://www.yegor256.com/2016/09/27/command-control-innovate.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Command_and_control&quot;&gt;Command and control&lt;/a&gt;
has worked effectively in military units across the world
for thousands of years. But apparently we&amp;#39;ve just discovered
that the best companies are built on different verbs, which
are inspire, delegate, trust, lead, innovate, etc. The question is
whether we really uncovered something new that our
predecessors failed to understand for ages or something
else is going on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F09%2Fandrei-rublev.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Andrei Rublev (1966) by Andrei Tarkovsky&#39;/&gt;&lt;figcaption&gt;Andrei Rublev (1966) by Andrei Tarkovsky&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;We are lazy and greedy animals. To work and produce something
for someone, we need two things: motivation and punishment. The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Carrot_and_stick&quot;&gt;carrot and stick&lt;/a&gt;
has been a dominating principle in management for thousands of years.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Colosseum&quot;&gt;The Colosseum&lt;/a&gt;
was built not because people enjoyed building it
but rather thanks to a simple rule: Good slaves ate, and bad ones were beaten to death.
A primitive form of command-and-control management was most
effective at that time, both in civil and military arenas.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;The external strength of any army is ensured by its internal discipline&lt;/aside&gt;

&lt;p&gt;Once slavery became illegal in the 19th century,
the simple rule changed: Good workers were paid, while
bad ones were fired. 150 years ago in most countries, losing a
job literally meant starvation and sometimes death, so it was not really
far away from beating slaves to death.
Because a hundred years ago there were nearly no mechanisms for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Social_protection&quot;&gt;social protection&lt;/a&gt;,
capitalists were allowed to do almost anything
they wanted. A slightly more advanced but still rather primitive form
of command and control was the best management paradigm.&lt;/p&gt;

&lt;p&gt;Besides that, the armies of all time have always been built as hierarchies
with very strict and deterministic definitions of responsibilities
and authorities. Since the time of &lt;a href=&quot;https://en.wikipedia.org/wiki/Sun_Tzu&quot;&gt;Sun Tzu&lt;/a&gt;, the external
strength of any army was ensured by its internal discipline, which
was always about a clear and explicit chain of commands, rewards, and
punishments.&lt;/p&gt;

&lt;p&gt;The situation started to change only recently, in the 20th century.
Three trends dramatically influenced the balance of power between
employers and employees, masters and slaves, managers and managees:
socialism, computers, and education.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First of all, socialism is slowly taking over capitalism.
Workers gradually obtain more rights and protections
while employers lose them every year.
Losing a job is not a tragedy for us anymore.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Second, the complexity of the tasks we perform at our workplaces
is growing, mostly thanks to computers.
We are not as easily replaceable as we were a few hundred years ago.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Third, we are getting smarter every year. Most of us know how to read
and write. We learn more, faster, partially due to the Internet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to these three major trends, it&amp;#39;s almost impossible to apply
the same primitive command-and-control management anymore: Modern workers
are not the same as those who built the Colosseum in ancient Rome.
We are very different, and our carrots and sticks must also be very
different in order to be effective. Still, giving us carrots
and sticks is absolutely necessary, because we are still lazy and greedy,
just like the guys who built the Colosseum. Likewise,
we need motivation and punishment in order to produce
something for someone.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;They still adhere to command and control but mask it as inspire and trust&lt;/aside&gt;

&lt;p&gt;What about creativity and inspiration? Just like the architects of
the Colosseum, we need people today to create iPads and Facebooks,
but management and coordination are what really make projects happen.
And command and control is the only working mechanism for coordinating
humans.&lt;/p&gt;

&lt;p&gt;However, what management is doing now is absolutely evil and unethical.
They still adhere to command and control but mask it as inspire and trust. They
use carrots and sticks but redefine them as appreciation and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Peer_pressure&quot;&gt;peer pressure&lt;/a&gt;.
They lie to us that we are not animals anymore and don&amp;#39;t
need command and control, while at the same time doing
&lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;exactly that&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The primary victim of this slick approach is our mental health.
A thousand years ago, masters physically damaged their slaves;
today they damage us &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;mentally&lt;/a&gt;.
Which one is worse? Where are we heading?
I predict serious problems in the near future.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><summary>Command and control
has worked effectively in military units across the world
for thousands of years. But apparently we&amp;#39;ve just discovered
that the best companies are built on different verbs, which
are inspire, delegate, trust, lead, innovate, etc. The question is
whether we really uncovered something new that our
predecessors failed to understand for ages or something
else is going on.</summary></entry><entry><title>OOP Without Classes?</title><link href="http://www.yegor256.com/2016/09/20/oop-without-classes.html" rel="alternate" type="text/html" title="OOP Without Classes?" /><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/09/20/oop-without-classes</id><content type="html" xml:base="http://www.yegor256.com/2016/09/20/oop-without-classes.html">&lt;p&gt;I &lt;a href=&quot;https://www.youtube.com/watch?v=s-hdZZzMCac&quot;&gt;interviewed&lt;/a&gt;
David West, the author of the &lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;Object Thinking&lt;/a&gt; book,
a few weeks ago, and he said that classes were not meant to be in
object-oriented programming at all. He actually said that
&lt;a href=&quot;https://www.youtube.com/watch?v=RdE-d_EhzmA&quot;&gt;earlier&lt;/a&gt;; I just didn&amp;#39;t
understand him then. The more I&amp;#39;ve thought about this, the more it appears
obvious that we indeed do not need classes.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F09%2Fbattleship-potemkin.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Battleship Potemkin (1925) by Sergei M. Eisenstein&#39;/&gt;&lt;figcaption&gt;Battleship Potemkin (1925) by Sergei M. Eisenstein&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is a prototype.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say we have only &lt;em&gt;types&lt;/em&gt; and &lt;em&gt;objects&lt;/em&gt;. First, we define a type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;type Book {
  void print();
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we &lt;em&gt;create&lt;/em&gt; an object (pay attention; we don&amp;#39;t &amp;quot;instantiate&amp;quot;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Book b1 = create Book(&amp;quot;Object Thinking&amp;quot;) {
  String title;
  Book(String t) {
    this.title = t;
  }
  public void print() {
    print(&amp;quot;My title: &amp;quot; + this.title);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we create another object, which will behave similarly
to the one we already have but with different constructor arguments.
We &lt;em&gt;copy&lt;/em&gt; an existing one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Book b2 = copy b1(&amp;quot;Elegant Objects&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Libraries will deliver us objects, which we can copy.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;No &lt;a href=&quot;/2016/09/13/inheritance-is-procedural.html&quot;&gt;implementation inheritance&lt;/a&gt;
and no &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;static methods&lt;/a&gt;,
of course.
Only &lt;a href=&quot;https://en.wikipedia.org/wiki/Subtyping&quot;&gt;subtyping&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why not?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>I interviewed
David West, the author of the Object Thinking book,
a few weeks ago, and he said that classes were not meant to be in
object-oriented programming at all. He actually said that
earlier; I just didn&amp;#39;t
understand him then. The more I&amp;#39;ve thought about this, the more it appears
obvious that we indeed do not need classes.</summary></entry><entry><title>Inheritance Is a Procedural Technique for Code Reuse</title><link href="http://www.yegor256.com/2016/09/13/inheritance-is-procedural.html" rel="alternate" type="text/html" title="Inheritance Is a Procedural Technique for Code Reuse" /><published>2016-09-13T00:00:00+00:00</published><updated>2016-09-13T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/09/13/inheritance-is-procedural</id><content type="html" xml:base="http://www.yegor256.com/2016/09/13/inheritance-is-procedural.html">&lt;p&gt;We all know that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)&quot;&gt;inheritance&lt;/a&gt;
is bad and that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;composition over inheritance&lt;/a&gt;
is a
&lt;a href=&quot;http://programmers.stackexchange.com/questions/65179&quot;&gt;good idea&lt;/a&gt;,
but do we really understand why?
In &lt;del&gt;most&lt;/del&gt; all articles
&lt;a href=&quot;https://www.google.com/search?q=inheritance+is+bad&quot;&gt;I&amp;#39;ve found&lt;/a&gt;
addressing this subject, authors have said that inheritance may be harmful
to your code, so it&amp;#39;s better not to use it. This &amp;quot;better&amp;quot; part is what bothers me;
does it mean that sometimes inheritance makes sense?
I interviewed &lt;a href=&quot;http://davewest.us/&quot;&gt;David West&lt;/a&gt;
(the author of &lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;Object Thinking&lt;/a&gt;, my favorite book about OOP)
a few weeks ago, and he said that inheritance should not exist in
object-oriented programming at all (&lt;a href=&quot;https://www.youtube.com/watch?v=s-hdZZzMCac&quot;&gt;full video&lt;/a&gt;).
Maybe Dr. West is right and we should totally forget &lt;code&gt;extends&lt;/code&gt; keyword in Java,
for example.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F09%2Fdeath-at-a-funeral.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Death at a Funeral (2007) by Frank Oz&#39;/&gt;&lt;figcaption&gt;Death at a Funeral (2007) by Frank Oz&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I think we should. And I think I know the reason why.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not because we introduce unnecessary coupling, as Allen Holub said in his
&lt;a href=&quot;http://www.javaworld.com/article/2073649/core-java/why-extends-is-evil.html&quot;&gt;Why extends is evil&lt;/a&gt; article.
He was definitely right, but I believe it&amp;#39;s not the root cause of the problem.&lt;/p&gt;

&lt;p&gt;&amp;quot;Inherit&amp;quot;, as an English verb, has a number of meanings.
&lt;a href=&quot;http://www.oxforddictionaries.com/us/definition/american_english/inherit&quot;&gt;This one&lt;/a&gt;
is what inheritance inventors in &lt;a href=&quot;https://en.wikipedia.org/wiki/Simula&quot;&gt;Simula&lt;/a&gt; had in mind, I guess:
&amp;quot;Derive (a quality, characteristic, or predisposition) genetically from one&amp;#39;s parents or ancestors&amp;quot;.&lt;/p&gt;

&lt;p&gt;Deriving a characteristic from another object is a great idea, and it&amp;#39;s called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Subtyping&quot;&gt;subtyping&lt;/a&gt;.
It perfectly fits into OOP and actually enables
&lt;a href=&quot;https://en.wikipedia.org/wiki/Polymorphism_%28computer_science%29&quot;&gt;polymorphism&lt;/a&gt;:
An object of class &lt;code&gt;Article&lt;/code&gt; inherits all characteristics of objects in class &lt;code&gt;Manuscript&lt;/code&gt;
and adds its own. For example, it &lt;em&gt;inherits&lt;/em&gt; an ability to print itself
and &lt;em&gt;adds&lt;/em&gt; an ability to submit itself to a conference:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Manuscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Manuscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is &lt;em&gt;subtyping&lt;/em&gt;, and it&amp;#39;s a perfect technique; whenever a
manuscript is required, we can provide an article and nobody will
notice anything, because type &lt;code&gt;Article&lt;/code&gt; is a subtype of type &lt;code&gt;Manuscript&lt;/code&gt;
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;Liskov substitution principle&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But what does &lt;em&gt;copying&lt;/em&gt; methods and attributes from a parent class to a child
one have to do with &amp;quot;deriving characteristics&amp;quot;? Implementation inheritance
is exactly that&amp;mdash;copying&amp;mdash;and it has nothing to do with the meaning
of the word &amp;quot;inherit&amp;quot; I quoted above.&lt;/p&gt;

&lt;p&gt;Implementation inheritance is much closer to a different
&lt;a href=&quot;http://www.oxforddictionaries.com/us/definition/american_english/inherit&quot;&gt;meaning&lt;/a&gt;:
&amp;quot;Receive (money, property, or a title) as an heir at the death of the previous holder&amp;quot;.
Who is dead, you ask? An object is dead if it allows other objects to
&lt;em&gt;inherit&lt;/em&gt; its encapsulated code and data. This is implementation
inheritance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Manuscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Manuscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Class &lt;code&gt;Article&lt;/code&gt; &lt;strong&gt;copies&lt;/strong&gt; method &lt;code&gt;print()&lt;/code&gt; and attribute &lt;code&gt;body&lt;/code&gt;
from class &lt;code&gt;Manuscript&lt;/code&gt;, as if it&amp;#39;s not a
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;living organism&lt;/a&gt;, but rather a dead
one from which we can inherit its parts, &amp;quot;money, properties, or a title.&amp;quot;&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/266oJr4&#39;&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2015%2F04%2Fbook-object-thinking.jpg&#39; style=&#39;width:96px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Implementation inheritance was created as a mechanism for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_reuse&quot;&gt;code reuse&lt;/a&gt;,
and it doesn&amp;#39;t fit into OOP at all. Yes, it may look convenient in the
beginning, but it is absolutely wrong in terms of &lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;object thinking&lt;/a&gt;.
Just like &lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters and setters&lt;/a&gt;,
implementation inheritance turns
objects into &lt;em&gt;containers&lt;/em&gt; with data and procedures. Of course, it&amp;#39;s
convenient to copy some of those data and procedures to a new object
in order to avoid code duplication. But this is not what objects are about. They
are not dead; they are alive!&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t &lt;strong&gt;kill&lt;/strong&gt; them with inheritance :)&lt;/p&gt;

&lt;p&gt;Thus, I think inheritance is bad because it is a &lt;em&gt;procedural&lt;/em&gt; technique for &lt;em&gt;code reuse&lt;/em&gt;.
It comes as no surprise that it introduces all the problems people have been talking about for years.
Because it is procedural!
That&amp;#39;s why it doesn&amp;#39;t fit into object-oriented programming.&lt;/p&gt;

&lt;p&gt;By the way, we &lt;a href=&quot;https://gitter.im/yegor256/elegantobjects?at=57bcd2e4cd00bdff6e745584&quot;&gt;discussed&lt;/a&gt;
this problem in our
&lt;a href=&quot;https://gitter.im/yegor256/elegantobjects&quot;&gt;Gitter chat&lt;/a&gt;
a week ago, and that&amp;#39;s when it became obvious to me what exactly is
wrong with inheritance. Take a look at our discussion there.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>We all know that
inheritance
is bad and that
composition over inheritance
is a
good idea,
but do we really understand why?
In most all articles
I&amp;#39;ve found
addressing this subject, authors have said that inheritance may be harmful
to your code, so it&amp;#39;s better not to use it. This &amp;quot;better&amp;quot; part is what bothers me;
does it mean that sometimes inheritance makes sense?
I interviewed David West
(the author of Object Thinking, my favorite book about OOP)
a few weeks ago, and he said that inheritance should not exist in
object-oriented programming at all (full video).
Maybe Dr. West is right and we should totally forget extends keyword in Java,
for example.</summary></entry><entry><title>Gradients of Immutability</title><link href="http://www.yegor256.com/2016/09/07/gradients-of-immutability.html" rel="alternate" type="text/html" title="Gradients of Immutability" /><published>2016-09-07T00:00:00+00:00</published><updated>2016-09-07T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/09/07/gradients-of-immutability</id><content type="html" xml:base="http://www.yegor256.com/2016/09/07/gradients-of-immutability.html">&lt;p&gt;Good objects are immutable, but not necessarily constants.
I tried to explain it &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;/2014/12/09/immutable-object-state-and-behavior.html&quot;&gt;here&lt;/a&gt;, and
&lt;a href=&quot;/2014/12/22/immutable-objects-not-dumb.html&quot;&gt;here&lt;/a&gt;,
but now it&amp;#39;s time to make another attempt. Actually, the more I think about it,
the more I realize that immutability is not black or white&amp;mdash;there
are a few more gradients; let&amp;#39;s take a look.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F09%2Ftwelve-monkeys.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Twelve Monkeys (1995) by Terry Gilliam&#39;/&gt;&lt;figcaption&gt;Twelve Monkeys (1995) by Terry Gilliam&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;As we agreed &lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;here&lt;/a&gt;,
an object is a &lt;strong&gt;representative&lt;/strong&gt; of someone else
(some entity or entities, other object(s), data, memory, files, etc.).
Let&amp;#39;s examine a number of objects that look exactly the same
to us but &lt;strong&gt;represent&lt;/strong&gt; different things, then analyze how
immutable they are and why.&lt;/p&gt;

&lt;h2 id=&quot;constant&quot;&gt;Constant&lt;/h2&gt;

&lt;p&gt;This is &lt;strong&gt;constant&lt;/strong&gt;; it doesn&amp;#39;t allow any modifications
to the encapsulated entity and always returns the same text
(I&amp;#39;ve skipped constructors for the sake of brevity):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is what we usually have in mind when talking about immutable
objects. Such a class is very close to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure function&lt;/a&gt;,
which means that no matter how many times we instantiate it with
the same initial values, the result of &lt;code&gt;title()&lt;/code&gt; will be the same.&lt;/p&gt;

&lt;h2 id=&quot;not-a-constant&quot;&gt;Not a Constant&lt;/h2&gt;

&lt;p&gt;Check out this one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;%s (as of %tR)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The object is still immutable, but it is not a pure
function anymore because of the method &lt;code&gt;title()&lt;/code&gt;&amp;mdash;it returns different values if we call it
multiple times with at least a one-minute interval. The object
is immutable; it&amp;#39;s just not a constant anymore.&lt;/p&gt;

&lt;h2 id=&quot;represented-mutability&quot;&gt;Represented Mutability&lt;/h2&gt;

&lt;p&gt;How about this one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;StandardOpenOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CREATE&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAllBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;em&gt;immutable&lt;/em&gt; object keeps the book title in a file. It&amp;#39;s not a constant,
because its method &lt;code&gt;title()&lt;/code&gt; may return different values on every
second call. Moreover, the represented entity (the file) is not a constant.
We can&amp;#39;t say whether it&amp;#39;s mutable or immutable, as we don&amp;#39;t know how &lt;code&gt;Files.write()&lt;/code&gt;
is implemented. But we know for sure that it&amp;#39;s not a constant, because it
accepts change requests.&lt;/p&gt;

&lt;h2 id=&quot;encapsulated-mutability&quot;&gt;Encapsulated Mutability&lt;/h2&gt;

&lt;p&gt;An immutable object may not only represent but even
encapsulate a mutable one. Just like in the
previous example, a mutable file was encapsulated. Even though it
was represented by the immutable class &lt;code&gt;Path&lt;/code&gt;, the real file on disk
was mutable. We can do the same, but in memory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The object is still &lt;em&gt;immutable&lt;/em&gt;. Is it thread-safe? No. Is it a constant?
No. Is it immutable? Yes. Confused? You bet.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;My point is that immutability is not &lt;em&gt;binary&lt;/em&gt;; there are many
forms of it. The most simple one is, of course, a
constant. Constants are almost the same as pure functions in functional
programming. But object-oriented programming allows us to take
a few steps forward and give immutable objects more permissions
and flexibility. In OOP, we may have many more forms of immutability.&lt;/p&gt;

&lt;p&gt;What is common among all these examples is that our objects are
&lt;strong&gt;loyal&lt;/strong&gt; to the entities they encapsulate. There are no
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;setters&lt;/a&gt;
that could change them. All encapsulated objects are &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is the only quality that differentiates mutable objects from
immutable ones. The latter are always loyal to the entities they
encapsulate and represent. For all the rest ... it depends.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>Good objects are immutable, but not necessarily constants.
I tried to explain it here,
here, and
here,
but now it&amp;#39;s time to make another attempt. Actually, the more I think about it,
the more I realize that immutability is not black or white&amp;mdash;there
are a few more gradients; let&amp;#39;s take a look.</summary></entry></feed>
