<?xml version="1.0"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Yegor Bugayenko</title>
    <link>http://www.yegor256.com</link>
    <description>Yegor Bugayenko</description>
    <language>en-us</language>
    <copyright>(c) Yegor Bugayenko, 2014</copyright>
    <lastBuildDate>Thu, 18 Dec 2014 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon-128x128.png</url>
      <title>yegor256.com</title>
      <link>http://www.yegor256.com</link>
    </image>
    <item>
      <title>You Do Need Independent Technical Reviews!</title>
      <link>http://www.yegor256.com/2014/12/18/independent-technical-reviews.html</link>
      <description>&lt;p&gt;Do you have a team of brilliant and enthusiastic programmers? Of course! You&amp;#39;ve carefully
chosen them from a hundred candidates! Are they passionate about the product?
Absolutely! They use cutting-edge technologies, never sleep, and hardly eat or drink 
anything except coffee! Do they believe in your business success? No doubts about it;
they live and breathe all those features, releases, continuous delivery, user
experience, etc. Are you sure they are developing the product correctly?
Well, yes, you&amp;#39;re pretty sure; why wouldn&amp;#39;t they? ...&lt;/p&gt;

&lt;p&gt;Does this sound familiar? I can&amp;#39;t count how many times I&amp;#39;ve heard
these stories told by startup founders. Most of them are in love with their teams ...
until that day when it&amp;#39;s time to hire a new one. There could be many
possible reasons for such a fiasco, but one of them is a lack of
regular, systematic, and independent &lt;strong&gt;technical reviews&lt;/strong&gt;.
Nothing demotivates a development team more than a lack of attention
to their deliverables. On the other hand, a regular
reconciliation of their results and your quality expectations is one
of the key factors that will guarantee technical success for your
startup. Below I summarize my experience with organizing such technical reviews.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/arizona-dream-car-shop.png' style='width:600px;' alt='Arizona Dream (1992) by Emir Kusturica'/&gt;&lt;figcaption&gt;Arizona Dream (1992) by Emir Kusturica&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;An independent review is when you ask someone outside of your team
to look at your source code and other technical resources
and give you an objective opinion about them.
Every modern software team should also use internal code reviews, which is
is something else entirely. An internal review occurs when one programmer
shows his code to other peers on the team and asks their opinion. This usually
happens as a daily activity and has nothing to do with independent
reviews.&lt;/p&gt;

&lt;p&gt;An independent review is performed by a programmer who knows nothing about your team.
He comes on board, checks out the code from your repository, spends a few hours
(or days) looking at it and trying to understand what it does. Then, he
tells you what is wrong and where. He explains how he would do it better,
where he would change it, and what he would do instead. Then, you pay him 
and he leaves. You may never see him again, but his conclusions and suggestions 
help you &lt;em&gt;check the reality&lt;/em&gt; of your code and evaluate how your team is really doing.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.teamed.io'&gt;&lt;img src='http://img.teamed.io/logo.svg' style='width:160px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;We, at &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;, do independent reviews
with every project of ours, and this is a list of principles we use:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Independent Reviews Systematic&lt;/strong&gt;.
This is the first and most important rule &amp;mdash; organize
such technical reviews regularly. Moreover, inform your team about the schedule,
and let them be prepared for the reviews. Once a month is a good practice,
according to my experience. Depending on your source code size, a full
review should take from &lt;strong&gt;two to eight hours&lt;/strong&gt;. Don&amp;#39;t spend more than eight hours;
there is no point in going too deep into the code during independent reviews.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pay for Bugs Found&lt;/strong&gt;.
We &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;always&lt;/a&gt;
pay for bugs, not for the time spent finding them. We ask our reviewers
to look at the code and report as many bugs as we think we need. For each
bug, we pay 15 minutes for their time. In other words, we assume that
a good reviewer can find and report approximately four problems in one hour. For example,
a reviewer charges $150 per hour. We hire him and ask him to find and report the 20 most
criticial issues he can discover. Our estimate is that he should spend five hours on this
work. Thus, he will get $750 when we have 20 bugs in our tracking system
reported by him. If he finds fewer, he gets proportionally less money.
This payment schedule will help you focus your reviewer on the main
objective of the review process &amp;mdash; finding and reporting issues. There
are no other goals. The only thing you&amp;#39;re interested in is knowing what
the issues with your current technical solution are. That&amp;#39;s what you&amp;#39;re paying for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hire the Best and Pay Well&lt;/strong&gt;.
My experience tells me that the position of an independent reviewer is a very
important one. He is not just a programmer but more of
&lt;a href=&quot;/&quot;&gt;an architect&lt;/a&gt;
who is capable of looking at the solution from a very high level of abstraction,
while at the same time paying a lot of attention to details; he should be very
good at designing similar systems; he should know how to report a bug
correctly and with enough detail; he should understand your business domain; etc.
Besides all that, he should be
well motivated to help you. You&amp;#39;re not hiring him for full-time work but
rather just for a few-hour gig. My advice is to try to get
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;the best guys&lt;/a&gt;,
and pay them as much as they ask, usually over $100 per hour. Don&amp;#39;t negotiate,
just pay. It&amp;#39;s just a few hundred dollars for you, but the effect of their
contribution will be huge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask For and Expect Criticism&lt;/strong&gt;.
It is a very common mistake to ask a reviewer, &amp;quot;Do you like our code?&amp;quot;
Don&amp;#39;t expect him to tell you how great your code is. This is not what you&amp;#39;re
paying him for! You already have a full team of programmers for cheering you up; they can tell
you a lot about the code they are creating and how awesome it is. You don&amp;#39;t want
to hear this again from the reviewer. Instead, you want to know what
is wrong and needs to be fixed. So your questions should sound like,
&amp;quot;What problems do you think we should fix first?&amp;quot; Some reviewers will try
to please you with positive comments, but ignore that flattery and bring them back
to the main goal &amp;mdash; bugs. The payment schedule explained above should help.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regularly Change Reviewers&lt;/strong&gt;.
Try not to use the same reviewer more than once on the same project (I mean the
same code base). I believe the reason here is obvious, but let me re-iterate:
You don&amp;#39;t need your reviewer to be nice to you and tell you how
great your code is. You want him to be objective and focused on problems,
not on bright sides. If you hire the same person again and again,
psychologically you make him engaged to the source code. He&amp;#39;s seen it once;
now he has to see it again. He already told you about some problem, and
now he has to repeat it again. He won&amp;#39;t feel comfortable doing it. Instead,
he will start feeling like a member of the team and will feel
responsible for the source code and its mistakes. He, as any other
team member, will start hiding issues instead of revealing them. Thus,
for every independent technical review, get a new person.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be Polite and Honest With Your Team&lt;/strong&gt;.
Independent reviews can be rather offensive to your programmers. They may
think that you don&amp;#39;t trust them. They may feel that you don&amp;#39;t respect them
as technical specialists. They may even decide that you&amp;#39;re getting ready
to fire them all and are currently looking for new people. This is a very
possible and very destructive side effect of an independent review. How do you avoid it?
I can&amp;#39;t give you universal advice, but the best suggestion I can give is this:
be honest with them. Tell them that the quality of the product is critical for you
and your business. Explain to them that the business is paying them for their
work and that in order to keep paychecks coming, you have to stress quality
control &amp;mdash; regularly, objectively, independently, and honestly. In the end,
if you manage to organize reviews as this article explains, the team will
be very thankful to you. They will gain a lot of new ideas and thoughts from every
review and will ask you to repeat them regularly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Review From Day One&lt;/strong&gt;.
Don&amp;#39;t wait until the end of the project! I&amp;#39;ve seen this mistake many times.
Very often startup founders think that until the product is done and ready
for the market, they shouldn&amp;#39;t distract their team. They think they should
let the team work toward project milestones and take care of quality
later, &amp;quot;when we have a million visitors per day&amp;quot;. This day will never come
if you let your team run without control! Start conducting independent reviews
from the moment your Git repository has its first file. Until the repository
is big enough, you may only spend $300 once a month to receive an objective,
independent opinion about its quality. Will this ruin your budget?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prohibit Discussions, and Ask for Formal Reporting&lt;/strong&gt;.
Don&amp;#39;t let your reviewers talk to the team. If you do, the entire
idea of a review being independent falls apart. If a reviewer is able
to ask informal questions and discuss your system design with your programmers,
their answers will satisfy him, and he will move on. But you,
the owner of the business, will stay exactly where you were before the review.
The point of the review is not to make the reviewer happy. It is exactly the
opposite. You want to make him confused! If he is confused, your
design is wrong and he feels the need to report a bug. The source code
should speak for itself, and it should be easy enough for a stranger (the
reviewer) to understand how it works. If this is not the case, there is
something wrong that should be fixed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Treat Any Question as a Bug&lt;/strong&gt;.
Don&amp;#39;t expect a review to produce any bugs in functionality, like
&amp;quot;I click this button and the system crashes&amp;quot;. This will happen rarely, if ever.
Your team is very good at discovering these issues and fixing them. Independent
reviews are not about that kind of bugs. The main goal of an independent review is to
discover bugs in the architecture and design. Your product may work, but its
architecture may have serious design flaws that won&amp;#39;t allow you, for example,
to handle exponential growth in web traffic. An independent reviewer will help you
find those flaws and address them sooner than later. In order to get bugs
of that kind from the reviewer, you should encourage him to report
&lt;em&gt;anything&lt;/em&gt; he doesn&amp;#39;t like &amp;mdash; unmotivated use of a technology,
lack of documentation, unclear purpose of a file, absence of
a unit test, etc. Remember, the reviewer is not a member of your team and has his
own ideas about the technologies you&amp;#39;re using and software development in general.
You&amp;#39;re interested in matching his vision with your team&amp;#39;s. Then, you&amp;#39;re
interested in fixing all critical mismatches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Review Everything, Not Just Source Code&lt;/strong&gt;.
Let your reviewer look at all technical resources you have, not just
source code files (&lt;code&gt;.java&lt;/code&gt;, &lt;code&gt;.rb&lt;/code&gt;, &lt;code&gt;.php&lt;/code&gt;, etc.) Give him access to the
database schema, continuous integration panel, build environment,
issue tracking system, plans and schedules, work agendas, uptime reports,
deployment pipeline, production logs,
customer bug reports, statistics, etc. Everything that
could help him understand how your system works, and more importantly,
where and how it breaks, is very useful. Don&amp;#39;t limit the reviewer to the
source code only &amp;mdash; this is simply not enough! Let him see the big
picture, and you will get a much more detailed and professional report.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Track How Inconsistencies Are Resolved&lt;/strong&gt;.
Once you get a report from the reviewer, make sure that the most important
issues immediately get into your team&amp;#39;s backlog. Then, make sure they are
addressed and closed. That doesn&amp;#39;t mean you should fix them all and listen
to everything said by the reviewer. Definitely not! Your
&lt;a href=&quot;/&quot;&gt;architect&lt;/a&gt;
runs the show, not the reviewer. Your architect should decide what is right
and what is wrong in the technical implementation of the product. But it&amp;#39;s
important to make him resolve all concerns raised by the reviewer. Very often
you will get answers like these from him: &amp;quot;We don&amp;#39;t care about it now&amp;quot;, &amp;quot;we won&amp;#39;t
fix it until the next release&amp;quot;, or &amp;quot;he is wrong; we&amp;#39;re doing it better&amp;quot;. These
answers are perfectly valid, but they have to be given
(reviewers are people and they also make mistakes). The answers will help
you, the founder, understand what your team is doing and how well they
understand their business.&lt;/p&gt;

&lt;p&gt;If you can offer more suggestions, based on your experience, please post
them below in the comments, and I&amp;#39;ll add them to the list. I&amp;#39;m still
thinking that I may have forgotten something important :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/18/independent-technical-reviews.html</guid>
      <dc:date>2014-12-18T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Much Your Objects Encapsulate?</title>
      <link>http://www.yegor256.com/2014/12/15/how-much-your-objects-encapsulate.html</link>
      <description>&lt;p&gt;Which line do you like more, the first or the second:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What is the difference? The first class &lt;code&gt;HTTP&lt;/code&gt; encapsulates a URL,
while the second one expects it as an argument of method &lt;code&gt;read()&lt;/code&gt;. Technically,
both objects do exactly the same thing: they read the content of the Google home page.
Which one is the right design? Usually I hate to say this, but in
this case I have to &amp;mdash; it depends.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/truman-show-universe.png' style='width:600px;' alt='The Truman Show (1998) by Peter Weir'/&gt;&lt;figcaption&gt;The Truman Show (1998) by Peter Weir&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;As &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;we discussed before&lt;/a&gt;,
a good object is a representative of a real-life entity. Such an entity
exists outside of the object&amp;#39;s living environment. The object knows
how to access it and how to communicate with it.&lt;/p&gt;

&lt;p&gt;What is that real-life entity in the example above? Each class
gives its own answer. And the answer is given by the list
of arguments its constructors accept. The first class accepts
a single URL as an argument of its constructor. This tells us
that the object of this class, after being constructed, will represent
a web page. The second class accepts no arguments, which tells us
that the object of it will represent ... the Universe.&lt;/p&gt;

&lt;p&gt;I think this principle is applicable to all classes in
object-oriented programming &amp;mdash; in order to understand what
real-life entity an object represents, look at its constructor. All
arguments passed into the constructor and encapsulated by the object identify
a real-life entity accessed and managed by the object.&lt;/p&gt;

&lt;p&gt;Of course, I&amp;#39;m talking about
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;good objects&lt;/a&gt;,
which are immutable and
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;don&amp;#39;t have setters and getters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pay attention that I&amp;#39;m talking about arguments encapsulated by the object. The
following class doesn&amp;#39;t represent the Universe, even though it does have
a no-arguments constructor:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;msec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This class has two constructors. One of them is the main one, and one is
supplementary. We&amp;#39;re interested in the main one, which implements
the &lt;em&gt;encapsulation&lt;/em&gt; of arguments.&lt;/p&gt;

&lt;p&gt;Now, the question is which is better: to represent a web page
or the Universe? It depends, but I think that in general, the smaller the
real-life entity we represent, the more solid and cohesive design
we give to the object.&lt;/p&gt;

&lt;p&gt;On the other hand, sometimes we have to have an object that represents
the Universe. For example, we may have this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// read via HTTP and return&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;online&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// check whether we&amp;#39;re online&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is not an elegant design, but it demonstrates when it may be
necessary to represent the entire Universe. An object of this &lt;code&gt;HTTP&lt;/code&gt; class can read
any web page from the entire web (it is almost as big as the Universe, isn&amp;#39;t it?),
and it can check whether the entire web is accessible by it. Obviously,
in this case, we don&amp;#39;t need it to encapsulate anything.&lt;/p&gt;

&lt;p&gt;I believe that objects representing the Universe are not good objects,
mostly because there is only one Universe; why do we need many
representatives of it? :)&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/15/how-much-your-objects-encapsulate.html</guid>
      <dc:date>2014-12-15T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How an Immutable Object Can Have State and Behavior?</title>
      <link>http://www.yegor256.com/2014/12/09/immutable-object-state-and-behavior.html</link>
      <description>&lt;p&gt;I often hear this argument against
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutable objects&lt;/a&gt;:
&amp;quot;Yes, they are useful when the state doesn&amp;#39;t change. However, in
our case, we deal with frequently changing objects. We simply
can&amp;#39;t afford to create a new &lt;code&gt;document&lt;/code&gt; every time we just
need to change its &lt;code&gt;title&lt;/code&gt;.&amp;quot; Here is where I disagree: object
title is &lt;strong&gt;not a state&lt;/strong&gt; of a document, if you need to change it frequently.
Instead, it is a document&amp;#39;s &lt;strong&gt;behavior&lt;/strong&gt;. A &lt;code&gt;document&lt;/code&gt; can and must be immutable,
if it is a &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;good object&lt;/a&gt;,
even when its title is changed frequently. Let me explain how.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/once-upon-a-time-in-the-west.png' style='width:600px;' alt='Once Upon a Time in the West (1968) by Sergio Leone'/&gt;&lt;figcaption&gt;Once Upon a Time in the West (1968) by Sergio Leone&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;identity,-state,-and-behavior&quot;&gt;Identity, State, and Behavior&lt;/h2&gt;

&lt;p&gt;Basically, there are three elements in every object:
identity, state, and behavior. &lt;em&gt;Identity&lt;/em&gt; is what distinguishes our &lt;code&gt;document&lt;/code&gt;
from other objects, &lt;em&gt;state&lt;/em&gt; is what a document
knows about itself (a.k.a. &amp;quot;encapsulated knowledge&amp;quot;), and
&lt;em&gt;behavior&lt;/em&gt; is what a document can do for us on request.
For example, this is a mutable document:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;doc #%d about &amp;#39;%s&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#39;s try to use this mutable object:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How to grill a sandwich&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How to grill a sandwich&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// FALSE&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%s is equal to %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we&amp;#39;re creating two objects and then modifying their encapsulated
states. Obviously, &lt;code&gt;first.equals(second)&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; because
the two objects have different identities, even though they encapsulate the
same state.&lt;/p&gt;

&lt;p&gt;Method &lt;code&gt;toString()&lt;/code&gt; exposes the document&amp;#39;s behavior &amp;mdash; the document can
convert itself to a string.&lt;/p&gt;

&lt;p&gt;In order to modify a document&amp;#39;s title, we just call its &lt;code&gt;setTitle()&lt;/code&gt;
once again:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook pasta&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simply put, we can reuse the object many times, modifying its
internal state. It is fast and convenient, isn&amp;#39;t it? Fast, yes.
Convenient, not really. Read on.&lt;/p&gt;

&lt;h2 id=&quot;immutable-objects-have-no-identity&quot;&gt;Immutable Objects Have No Identity&lt;/h2&gt;

&lt;p&gt;As I&amp;#39;ve &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;mentioned before&lt;/a&gt;,
immutability is one of the virtues of a good
object, and a very important one. A good object is immutable, and good
software contains only immutable objects. The main difference between
immutable and mutable objects is that
an immutable one doesn&amp;#39;t have an identity and its state never changes.
Here is an immutable variant of the same document:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;doc #%d about &amp;#39;%s&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This document is immutable, and its state (&lt;code&gt;id&lt;/code&gt; ad &lt;code&gt;title&lt;/code&gt;) is its identity. Let&amp;#39;s
see how we can use this immutable class
(by the way, I&amp;#39;m using &lt;a href=&quot;/&quot;&gt;&lt;code&gt;@Immutable&lt;/code&gt;&lt;/a&gt; annotation
from &lt;a href=&quot;/&quot;&gt;jcabi-aspects&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to grill a sandwich&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to grill a sandwich&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// TRUE&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%s is equal to %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can&amp;#39;t modify a document any more. When we need to change the title,
we have to create a new document:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to grill a sandwich&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook pasta&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every time we want to modify its encapsulated state, we have to modify
its identity too, because there is no identity. State is the identity.
Look at the code of the &lt;code&gt;equals()&lt;/code&gt; method above &amp;mdash; it compares documents
by their IDs and titles. Now ID+title of a document is its identity!&lt;/p&gt;

&lt;h2 id=&quot;what-about-frequent-changes?&quot;&gt;What About Frequent Changes?&lt;/h2&gt;

&lt;p&gt;Now I&amp;#39;m getting to the question we started with: What about performance
and convenience? We don&amp;#39;t want to change the entire document every time we
have to modify its title. If the document is big enough, that would be
a huge obligation. Moreover, if an immutable object encapsulates other immutable
objects, we have to change the entire hierarchy when modifying even a single
string in one of them.&lt;/p&gt;

&lt;p&gt;The answer is simple. A document&amp;#39;s title should not be part of its &lt;strong&gt;state&lt;/strong&gt;.
Instead, the title should be its &lt;strong&gt;behavior&lt;/strong&gt;. For example, consider this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// read title from storage&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// save text to storage&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;doc #%d about &amp;#39;%s&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Conceptually speaking, this document is acting as a proxy of a real-life
document that has a title stored somewhere &amp;mdash; in a file, for example. This is
what a good object should do &amp;mdash; be a proxy of a real-life entity.
The document exposes two features: reading the title and saving the title. Here is
how its interface would look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;title()&lt;/code&gt; reads the title of the document and returns it as a &lt;code&gt;String&lt;/code&gt;,
and &lt;code&gt;title(String)&lt;/code&gt; saves it back into the document. Imagine a real
paper document with a title. You ask an object to read that title from
the paper or to erase an existing one and write new text over it. This
paper is a &amp;quot;copy&amp;quot; utilized in these methods.&lt;/p&gt;

&lt;p&gt;Now we can make frequent changes to the immutable document, and the
document stays the same. It doesn&amp;#39;t stop being immutable, since it&amp;#39;s
state (&lt;code&gt;id&lt;/code&gt;) is not changed. It is the same document, even though we
change its title, becuase the title is not a state of the document. It
is something in the real world, outside of the document. The document
is just a proxy between us and that &amp;quot;something&amp;quot;. Reading and writing
the title are behaviors of the document, not its state.&lt;/p&gt;

&lt;h2 id=&quot;mutable-memory&quot;&gt;Mutable Memory&lt;/h2&gt;

&lt;p&gt;The only question we still have unanswered is what is that &amp;quot;copy&amp;quot;
and what happens if we need to keep the title of the document in memory?&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s look at it from an &amp;quot;object thinking&amp;quot; point of view. We have a &lt;code&gt;document&lt;/code&gt;
object, which &lt;a href=&quot;/&quot;&gt;is supposed to represent&lt;/a&gt; a real-life entity in an
object-oriented world. If such an entity is a file, we can easily
implement &lt;code&gt;title()&lt;/code&gt; methods. If such an entity is an Amazon S3 object,
we also implement title reading and writing methods easily, keeping the
object immutable. If such an entity is an HTTP page, we
have no issues in the implementation of title reading or writing, keeping the object immutable.
We have no issues as long as a real-world document exists and has its
own identity. Our title reading and writing methods will communicate with that
real-world document and extract or update its title.&lt;/p&gt;

&lt;p&gt;Problems arise when such an entity doesn&amp;#39;t exist in a real world. In that
case, we need to create a mutable object property called &lt;code&gt;title&lt;/code&gt;, read it via
&lt;code&gt;title()&lt;/code&gt;, and modify it via &lt;code&gt;title(String)&lt;/code&gt;. But an object is immutable,
so we can&amp;#39;t have a mutable property in it &amp;mdash; by definition! What do we do?&lt;/p&gt;

&lt;p&gt;Think.&lt;/p&gt;

&lt;p&gt;How could it be that our object doesn&amp;#39;t represent a real-world entity?
Remember, the &lt;em&gt;real world&lt;/em&gt; is everything around the living environment of an object.
Is it possible that an object doesn&amp;#39;t represent anyone and acts
on its own? No, it&amp;#39;s not possible. Every object is a representantive of
a real-world entity. So, who does it represent if we want to keep &lt;code&gt;title&lt;/code&gt; inside
it and we don&amp;#39;t have any file or HTTP page behind the object?&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/12/memory-stick.png' style='width:200px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;It represents &lt;em&gt;computer memory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The title of immutable document #50, &amp;quot;How to grill a sandwich&amp;quot;,
is stored in the memory, taking up 23 bytes of space. The document
should know where those bytes are stored, and it should be able to read them
and replace them with something else. Those 23 bytes are the real-world
entity that the object represents. The bytes have nothing to do with
the state of the object. They are a &lt;em&gt;mutable&lt;/em&gt; real-world entity, similar
to a file, HTTP page, or an Amazon S3 object.&lt;/p&gt;

&lt;p&gt;Unfortunately, Java (and many other modern languages) do not allow direct
access to computer memory. This is how we would design our class if such
direct access was possible:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That &lt;code&gt;Memory&lt;/code&gt; class would be implemented by JDK natively, and all other
classes would be immutable. The class &lt;code&gt;Memory&lt;/code&gt; would have direct access
to the memory heap and would be responsible for
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_dynamic_memory_allocation&quot;&gt;malloc and free&lt;/a&gt;
operations on the operating system level.
Having such a class would allow us to make all Java classes immutable,
including &lt;code&gt;StringBuffer&lt;/code&gt;, &lt;code&gt;ByteArrayOutputStream&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Memory&lt;/code&gt; class would explicitly emphasize the mission of an object
in a software program, which is to be a &lt;em&gt;data animator&lt;/em&gt;. An object is not
holding data; it is animating it. The data exists somewhere, and it is
anemic, static, motionless, stationary, etc. The data is &lt;strong&gt;dead&lt;/strong&gt;
while the object is &lt;strong&gt;alive&lt;/strong&gt;. The role of an object is to make a piece of data
alive, to &lt;em&gt;animate&lt;/em&gt; it but not to become a piece of data. An object needs some
knowledge in order to gain access to that dead piece of data. An object
may need a database unique key, an HTTP address, a file name, or
a memory address in order to find the data and animate it. But an
object should never think of itself as data.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-practical-solution?&quot;&gt;What Is the Practical Solution?&lt;/h2&gt;

&lt;p&gt;Unfortunately, we don&amp;#39;t have such a memory-representing class
in Java, Ruby, JavaScript, Python, PHP, and many other high-level languages.
It looks like language designers didn&amp;#39;t get the idea of
alive objects vs. dead data, which is sad. We&amp;#39;re forced to mix
data with object states using the same language constructs:
object variables and properties.
Maybe someday we&amp;#39;ll have that &lt;code&gt;Memory&lt;/code&gt; class in Java and other languages,
but until then, we have a few options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use C++&lt;/strong&gt;.
In C++ and similar low-level languages, it is possible to access memory
directly and deal with in-memory data the same way we deal with
in-file or in-HTTP data. In C++, we can create that &lt;code&gt;Memory&lt;/code&gt; class
and use it exactly the way we explained above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use Arrays&lt;/strong&gt;.
In Java, an array is a data structure with a unique property &amp;mdash;
it can be modified while being declared as &lt;code&gt;final&lt;/code&gt;. You can use
an array of bytes as a mutable data structure inside an immutable object.
It&amp;#39;s a surrogate solution that conceptually resembles the &lt;code&gt;Memory&lt;/code&gt; class
but is much more primitive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Avoid In-Memory Data&lt;/strong&gt;.
Try to avoid in-memory data as much as possible. In some domains, it is
easy to do; for example, in web apps, file processing, I/O adapters, etc.
However, in other domains, it is much easier said than done. For example,
in games, data manipulation algorithms, and GUI, most of the objects animate
in-memory data mostly because memory is the only resource they have.
In that case, without the &lt;code&gt;Memory&lt;/code&gt; class, you end up with mutable objects :(
There is no workaround.&lt;/p&gt;

&lt;p&gt;To summarize, don&amp;#39;t forget that an object is an &lt;strong&gt;animator&lt;/strong&gt; of data. It is using
its encapsulated knowledge in order to reach the data. No matter where
the data is stored &amp;mdash; in a file, in HTTP, or in memory &amp;mdash; it is
conceptually very different from an object state, even though they may
look very similar.&lt;/p&gt;

&lt;p&gt;A good object is an immutable animator of mutable data. Even though it
is immutable and data is mutable, it is alive and data is dead
in the scope of the object&amp;#39;s living environment.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/09/immutable-object-state-and-behavior.html</guid>
      <dc:date>2014-12-09T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Synchronization Between Nodes</title>
      <link>http://www.yegor256.com/2014/12/04/synchronization-between-nodes.html</link>
      <description>&lt;p&gt;When two or more software modules are accessing the same
resource, they have to be synchronized. This means that only
one module at a time should be working with the resource. Without
such synchronization, there will be collisions and conflicts. This
is especially true when we&amp;#39;re talking about &amp;quot;resources&amp;quot; that do
not support &lt;em&gt;atomic&lt;/em&gt; transactions.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://img.stateful.co/pomegranate.svg' style='width:64px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;To solve this issue and prevent conflicts, we have to introduce
one more element into the picture. All software modules, before
accessing the resource, should &lt;em&gt;capture&lt;/em&gt; a lock from a centralized
server. Once the manipulations with the resource are complete, the module
should &lt;em&gt;release&lt;/em&gt; the lock. While the lock is being captured by one
module, no other modules will be able to capture it. The approach
is very simple and well-known. However, I didn&amp;#39;t find any cloud services
that would provide such a locking and unlocking service over a RESTful API.
So I decided to create one &amp;mdash; &lt;a href=&quot;http://www.stateful.co&quot;&gt;stateful.co&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/12/van-damme-split.png' style='width:600px;' alt='No Retreat, No Surrender (1986) by Corey Yuen'/&gt;&lt;figcaption&gt;No Retreat, No Surrender (1986) by Corey Yuen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is a practical example. I have a Java web app that is hosted
at Heroku. There are three servers (a.k.a. &amp;quot;dynos&amp;quot;) running the same &lt;code&gt;.war&lt;/code&gt;
application. Why three? Because the web traffic is rather active, and one
server is not powerful enough. So I have to have three of them. They all
run exactly the same applications.&lt;/p&gt;

&lt;p&gt;Each web app works with a table in Amazon DynamoDB. It updates the table,
puts new items into it, deletes some items sometimes, and selects them. So far,
so good, but conflicts are inevitable. Here is an example of a typical
interaction scenario between the web app and DynamoDB (I&amp;#39;m using jcabi-dynamo):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;posts&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recalculate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The logic is obvious here. First, I retrieve an item from the table &lt;code&gt;posts&lt;/code&gt;,
then read its &lt;code&gt;salary&lt;/code&gt;, and then modify it according to my recalculation
algorithm. The problem is that another module may start to do the same while
I&amp;#39;m recalculating. It will read the same initial value from the table
and will start exactly the same recalculation. Then it will save a new
value, and I will save one too. We will end up having Jeff&amp;#39;s salary modified
only once, while users will expect a double modification since two of them
initiated two transactions with two different web apps.&lt;/p&gt;

&lt;p&gt;The right approach here is to &amp;quot;lock&amp;quot; the DynamoDB table first, even before
reading the salary. Then do the modifications and eventually unlock it. Here is
how &lt;a href=&quot;http://www.stateful.co&quot;&gt;stateful.co&lt;/a&gt; helps me. All I need to do is create a new named lock
in the &lt;a href=&quot;http://www.stateful.co&quot;&gt;stateful.co&lt;/a&gt; web panel,
get my authentication keys, and modify my Java code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Sttc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sttc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RtSttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;urn:github:526301&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// my Github ID&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;9FF3-4320-73FB-EEAC&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// my secret key!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Locks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;locks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;posts-table-lock&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;posts&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Atomic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;salary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recalculate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, I wrap that critical transaction into &lt;code&gt;Callable&lt;/code&gt;, which will
be executed in isolation. This approach, obviously, doesn&amp;#39;t
guarantee atomicity of transaction &amp;mdash; if part of the transaction fails,
there won&amp;#39;t be any automatic rollbacks and the DynamoDB table will be left
in a &amp;quot;broken&amp;quot; state.&lt;/p&gt;

&lt;p&gt;Locks from &lt;a href=&quot;http://www.stateful.co&quot;&gt;stateful.co&lt;/a&gt; guarantee isolation in resource usage, and you can
use any type of resources, including NoSQL tables, files, S3 objects,
embedded software, etc.&lt;/p&gt;

&lt;p&gt;I should not forget to add this dependency to my &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;co.stateful&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;java-sdk&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, you can do the same; the service is absolutely free of charge.
And you can use any other languages, not just Java. BTW, if interested,
contribute with your own SDK in your preferred language; I&amp;#39;ll add it to
the &lt;a href=&quot;https://github.com/sttc&quot;&gt;Github collection&lt;/a&gt;.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/04/synchronization-between-nodes.html</guid>
      <dc:date>2014-12-04T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ORM Is an Offensive Anti-Pattern</title>
      <link>http://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html</link>
      <description>&lt;p&gt;TL;DR ORM is a terrible anti-pattern that violates all principles of
object-oriented programming, tearing objects apart and turning them into dumb and passive
data bags. There is no excuse for ORM existence in any application, be it
a small web app or an enterprise-size system with thousands of tables and CRUD
manipulations on them. What is the alternative? &lt;strong&gt;SQL-speaking objects&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/11/broken-object.png' style='width:600px;' alt='Vinni-Pukh (1969) by Fyodor Khitruk'/&gt;&lt;figcaption&gt;Vinni-Pukh (1969) by Fyodor Khitruk&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;how-orm-works&quot;&gt;How ORM Works&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;Object-relational mapping&lt;/a&gt;
(ORM) is a technique (a.k.a. design pattern) of
accessing a relational database from an object-oriented language
(Java, for example). There are multiple implementations of ORM
in almost every language; for example:
&lt;a href=&quot;http://hibernate.org/orm/&quot;&gt;Hibernate&lt;/a&gt; for Java,
&lt;a href=&quot;http://guides.rubyonrails.org/active_record_basics.html&quot;&gt;ActiveRecord&lt;/a&gt; for Ruby on Rails,
&lt;a href=&quot;http://www.doctrine-project.org/&quot;&gt;Doctrine&lt;/a&gt; for PHP, and
&lt;a href=&quot;http://www.sqlalchemy.org/&quot;&gt;SQLAlchemy&lt;/a&gt; for Python.
In Java, the ORM design is even standardized as &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Persistence_API&quot;&gt;JPA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, let&amp;#39;s see how ORM works, by example. Let&amp;#39;s use Java, PostgreSQL, and Hibernate.
Let&amp;#39;s say we have a single table in the database, called &lt;code&gt;post&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;+-----+------------+--------------------------+
| id  | date       | title                    |
+-----+------------+--------------------------+
|   9 | 10/24/2014 | How to cook a sandwich   |
|  13 | 11/03/2014 | My favorite movies       |
|  27 | 11/17/2014 | How much I love my job   |
+-----+------------+--------------------------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we want to CRUD-manipulate this table from our Java app (CRUD
stands for create, read, update, and delete). First, we should create
a &lt;code&gt;Post&lt;/code&gt; class (I&amp;#39;m sorry it&amp;#39;s so long, but that&amp;#39;s the best I can do):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Temporal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TemporalType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TIMESTAMP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before any operation with Hibernate, we have to create a session factory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;SessionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnnotationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAnnotatedClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This factory will give us &amp;quot;sessions&amp;quot; every time we want to manipulate
with &lt;code&gt;Post&lt;/code&gt; objects. Every manipulation with the session should be wrapped
in this code block:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// your manipulations with the ORM, see below&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HibernateException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the session is ready, here is how we get a list of all posts
from that database table:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;FROM Post&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Title: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think it&amp;#39;s clear what&amp;#39;s going on here. Hibernate is a big, powerful
engine that makes a connection to the database, executes necessary SQL
&lt;code&gt;SELECT&lt;/code&gt; requests, and retrieves the data. Then it makes instances
of class &lt;code&gt;Post&lt;/code&gt; and stuffs them with the data.
When the object comes to us, it is filled with data, and we should
use getters to take them out, like we&amp;#39;re using &lt;code&gt;getTitle()&lt;/code&gt; above.&lt;/p&gt;

&lt;p&gt;When we want to do a reverse operation and send an object to the
database, we do all of the same but in reverse order. We make an instance
of class &lt;code&gt;Post&lt;/code&gt;, stuff it with the data, and ask Hibernate to save it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook an omelette&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how almost every ORM works. The basic principle is always the same &amp;mdash;
ORM objects are anemic envelopes with data. We are talking with the ORM
framework, and the framework is talking to the database. Objects only help
us send our requests to the ORM framework and understand its response.
Besides getters and setters, objects have no other methods. They don&amp;#39;t even know
which database they came from.&lt;/p&gt;

&lt;p&gt;This is how object-relational mapping works.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s wrong with it, you may ask? Everything!&lt;/p&gt;

&lt;h2 id=&quot;what&amp;#39;s-wrong-with-orm?&quot;&gt;What&amp;#39;s Wrong With ORM?&lt;/h2&gt;

&lt;p&gt;Seriously, what is wrong? Hibernate has been one of the most popular Java libraries
for more than 10 years already. Almost every SQL-intensive application in the world
is using it. Each Java tutorial would mention Hibernate (or maybe
&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_object-relational_mapping_software&quot;&gt;some other ORM&lt;/a&gt;
like TopLink or OpenJPA) for a database-connected application. It&amp;#39;s a standard
&lt;em&gt;de-facto&lt;/em&gt; and still I&amp;#39;m saying that it&amp;#39;s wrong? Yes.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m claiming that the entire idea behind ORM is wrong. Its invention
was maybe the second big mistake in OOP after
&lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;NULL reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Actually, I&amp;#39;m not the only one saying something like this, and
definitely not the first. A lot about
this subject has already been published by very respected authors, including
&lt;a href=&quot;http://martinfowler.com/bliki/OrmHate.html&quot;&gt;OrmHate&lt;/a&gt; by Martin Fowler,
&lt;a href=&quot;http://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/&quot;&gt;Object-Relational Mapping Is the Vietnam of Computer Science&lt;/a&gt; by Jeff Atwood,
&lt;a href=&quot;http://blogs.tedneward.com/2006/06/26/The+Vietnam+Of+Computer+Science.aspx&quot;&gt;The Vietnam of Computer Science&lt;/a&gt; by Ted Neward,
&lt;a href=&quot;http://seldo.com/weblog/2011/08/11/orm_is_an_antipattern&quot;&gt;ORM Is an Anti-Pattern&lt;/a&gt; by Laurie Voss,
and many others.&lt;/p&gt;

&lt;p&gt;However, my argument is different than what they&amp;#39;re saying. Even though their reasons are
practical and valid, like &amp;quot;ORM is slow&amp;quot; or &amp;quot;database upgrades are hard&amp;quot;,
they miss the main point. You can see a very good, practical answer
to these practical arguments given by Bozhidar Bozhanov
in his &lt;a href=&quot;http://techblog.bozho.net/orm-haters-dont-get-it/&quot;&gt;ORM Haters Don’t Get It&lt;/a&gt; blog post.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/orm-anti-pattern.svg' style='width:413px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;The main point is that ORM, instead of encapsulating database interaction
inside an object, extracts it away, literally tearing a solid and cohesive
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;living organism&lt;/a&gt; apart.
One part of the object keeps the data while another one, implemented inside
the ORM engine (session factory), knows how to deal with this data and transfers it to the
relational database. Look at this picture; it illustrates what ORM is doing.&lt;/p&gt;

&lt;p&gt;I, being a reader of posts, have to deal with two components: 1) the ORM
and 2) the &amp;quot;obtruncated&amp;quot; object returned to me. The behavior I&amp;#39;m interacting
with is supposed to be provided through a single entry point, which is an object
in OOP. In the case of ORM, I&amp;#39;m getting this behavior via two entry points &amp;mdash;
the ORM and the &amp;quot;thing&amp;quot;, which we can&amp;#39;t even call an object.&lt;/p&gt;

&lt;p&gt;Because of this terrible and offensive violation of the object-oriented
paradigm, we have a lot of practical issues already mentioned in
respected publications. I can only add a few more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL Is Not Hidden&lt;/strong&gt;.
Users of ORM should speak SQL
(or its dialect, like &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html&quot;&gt;HQL&lt;/a&gt;).
See the example above; we&amp;#39;re calling &lt;code&gt;session.createQuery(&amp;quot;FROM Post&amp;quot;)&lt;/code&gt; in order
to get all posts. Even though it&amp;#39;s not SQL, it is very similar to it. Thus,
the relational model is not encapsulated inside objects. Instead, it is exposed
to the entire application. Everybody, with each object, inevitably has to
deal with a relational model in order to get or save something. Thus,
ORM doesn&amp;#39;t hide and wrap the SQL but pollutes the entire application with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Difficult to Test&lt;/strong&gt;.
When some object is working a list of posts, it needs to deal with an
instance of &lt;code&gt;SessionFactory&lt;/code&gt;. How can we mock this dependency? We have to
create a mock of it? How complex is this task? Look at the code above, and you
will realize how verbose and cumbersome that unit test will be. Instead,
we can write integration tests and connect the entire application to a test
version of PostgreSQL. In that case, there is no need to mock &lt;code&gt;SessionFactory&lt;/code&gt;,
but such tests will be rather slow, and even more important, our
having-nothing-to-do-with-the-database objects will be tested against
the database instance. A terrible design.&lt;/p&gt;

&lt;p&gt;Again, let me reiterate. Practical problems of ORM are just consequences. The
fundamental drawback is that ORM tears objects apart, terribly and offensively
violating the very idea of &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;what an object is&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;sql-speaking-objects&quot;&gt;SQL-Speaking Objects&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/sql-speaking-object.svg' style='width:213px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;What is the alternative? Let me show it to you by example. Let&amp;#39;s try to design that
class, &lt;code&gt;Post&lt;/code&gt;, my way. We&amp;#39;ll have to break it down into two classes: &lt;code&gt;Post&lt;/code&gt;
and &lt;code&gt;Posts&lt;/code&gt;, singular and plural. I already mentioned in one of my previous
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;articles&lt;/a&gt; that
a good object is always an abstraction of a real-life entity. Here is how
this principle works in practice. We have two entities: database table
and table row. That&amp;#39;s why we&amp;#39;ll make two classes; &lt;code&gt;Posts&lt;/code&gt; will represent the
table, and &lt;code&gt;Post&lt;/code&gt; will represent the row.&lt;/p&gt;

&lt;p&gt;As I also mentioned in that &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;article&lt;/a&gt;,
every object should work by contract
and implement an interface. Let&amp;#39;s start our design with two interfaces.
Of course, our objects will be immutable. Here is how &lt;code&gt;Posts&lt;/code&gt; would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how a single &lt;code&gt;Post&lt;/code&gt; would look:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how we will list all posts in the database table:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// we&amp;#39;ll discuss this right now&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Title: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how we will create a new post:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// we&amp;#39;ll discuss this right now&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook an omelette&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, we have true objects now. They are in charge of all operations,
and they perfectly hide their implementation details. There are no transactions,
sessions, or factories. We don&amp;#39;t even know whether these objects are actually
talking to the PostgreSQL or if they keep all the data in text files. All
we need from &lt;code&gt;Posts&lt;/code&gt; is an ability to list all posts for us and to create
a new one. Implementation details are perfectly hidden inside. Now let&amp;#39;s
see how we can implement these two classes.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m going to use &lt;a href=&quot;http://jdbc.jcabi.com&quot;&gt;jcabi-jdbc&lt;/a&gt; as a JDBC wrapper,
but you can use something else or just plain JDBC if you like. It doesn&amp;#39;t
really matter. What matters is that your database interactions are hidden
inside objects. Let&amp;#39;s start with &lt;code&gt;Posts&lt;/code&gt; and implement it in class
&lt;code&gt;PgPosts&lt;/code&gt; (&amp;quot;pg&amp;quot; stands for PostgreSQL):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PgPosts&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT id FROM post&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;INSERT INTO post (date, title) VALUES (?, ?)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Utc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SingleOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, let&amp;#39;s implement the &lt;code&gt;Post&lt;/code&gt; interface in class &lt;code&gt;PgPost&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PgPost&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT date FROM post WHERE id = ?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SingleOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Utc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Utc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT title FROM post WHERE id = ?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SingleOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how a full database interaction scenario would look like
using the classes we just created:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Title: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook an omelette&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Just added post #&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see a full practical example &lt;a href=&quot;https://github.com/aintshy/hub/tree/0.7.2/src/main/java/com/aintshy/pgsql&quot;&gt;here&lt;/a&gt;.
It&amp;#39;s an open source
web app that works with PostgreSQL using the exact approach explained
above &amp;mdash; SQL-speaking objects.&lt;/p&gt;

&lt;h2 id=&quot;what-about-performance?&quot;&gt;What About Performance?&lt;/h2&gt;

&lt;p&gt;I can hear you screaming, &amp;quot;What about performance?&amp;quot; In that script
a few lines above, we&amp;#39;re making many redundant round trips to the database.
First, we retrieve post IDs with &lt;code&gt;SELECT id&lt;/code&gt; and then, in order to get their titles,
we make an extra &lt;code&gt;SELECT title&lt;/code&gt; call for each post. This is inefficient, or simply
put, too slow.&lt;/p&gt;

&lt;p&gt;No worries; this is object-oriented programming, which means it is flexible! Let&amp;#39;s create
a decorator of &lt;code&gt;PgPost&lt;/code&gt; that will accept all data in its constructor
and cache it internally, forever:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstPost&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConstPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pay attention: This decorator doesn&amp;#39;t know anything about PostgreSQL or
JDBC. It just decorates an object of type &lt;code&gt;Post&lt;/code&gt; and pre-caches the date
and title. As usual, this decorator is also immutable.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s create another implementation of &lt;code&gt;Posts&lt;/code&gt; that will return
the &amp;quot;constant&amp;quot; objects:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstPgPosts&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT * FROM post&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConstPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Utc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTimestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now all posts returned by &lt;code&gt;iterate()&lt;/code&gt; of this new class are pre-equipped with dates and titles
fetched in one round trip to the database.&lt;/p&gt;

&lt;p&gt;Using decorators and multiple implementations of the same interface, you
can compose any functionality you wish. What is the most important is that
while functionality is being extended, the complexity of the design is
not escalating, because classes don&amp;#39;t grow in size. Instead, we&amp;#39;re introducing
new classes that stay cohesive and solid, because they are small.&lt;/p&gt;

&lt;h2 id=&quot;what-about-transactions?&quot;&gt;What About Transactions?&lt;/h2&gt;

&lt;p&gt;Every object should deal with its own transactions and encapsulate
them the same way as &lt;code&gt;SELECT&lt;/code&gt; or &lt;code&gt;INSERT&lt;/code&gt; queries. This will lead to
nested transactions, which is perfectly fine provided the database
server supports them. If there is no such support, create a session-wide
transaction object that will accept a &amp;quot;callable&amp;quot; class. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Txn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JdbcSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;START TRANSACTION&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;COMMIT&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ROLLBACK&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, when you want to wrap a few object manipulations in one
transaction, do it like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Txn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Posts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PgPosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;How to cook an omelette&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;This is my first comment!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code will create a new post and post a comment to it. If one
of the calls fail, the entire transaction will be rolled back.&lt;/p&gt;

&lt;p&gt;This approach looks object-oriented to me. I&amp;#39;m calling it &amp;quot;SQL-speaking objects&amp;quot;,
because they know how to speak SQL with the database server. It&amp;#39;s their
skill, perfectly encapsulated inside their borders.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html</guid>
      <dc:date>2014-12-01T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Five Principles of Bug Tracking</title>
      <link>http://www.yegor256.com/2014/11/24/principles-of-bug-tracking.html</link>
      <description>&lt;p&gt;A team working remotely requires much stronger discipline than
a co-located crew sitting in the same office. First of all, I mean discipline of
communications. At &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;, we have developed software
remotely for the last five years. We manage tasks strictly through
ticketing systems (like Github, JIRA, Trac, Basecamp, etc.) and
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;discourage&lt;/a&gt;
any informal communications, like Skype, HipChat, emails, or phone calls.
Every ticket for us is an isolated task with its own life cycle,
its own participants, and its own goal. Over these years, we&amp;#39;ve learned
a few lessons that I want to share. If you also work remotely with your
team, you may find them useful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/11/monty-python-argument-sketch.png' style='width:600px;' alt='Monty Python Flying Circus, TV Series (1969-1974)'/&gt;&lt;figcaption&gt;Monty Python Flying Circus, TV Series (1969-1974)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;1.-keep-it-one-on-one&quot;&gt;1. Keep It One-on-One&lt;/h2&gt;

&lt;p&gt;Each ticket (aka &amp;quot;bug&amp;quot;) is a link between two people: problem specifier and problem
solver. If it is a bug, I&amp;#39;m reporting it &amp;mdash; you&amp;#39;re solving it. If it is
a question, I&amp;#39;m asking for an explanation &amp;mdash; you&amp;#39;re explaining. If it
is a task, I&amp;#39;m ordering you to do it &amp;mdash; you&amp;#39;re doing it. In any case,
there are two main characters. No matter how many people are involved in the ticket
resolution, only these two characters have formal roles.&lt;/p&gt;

&lt;p&gt;The responsibility of the ticket reporter is to &lt;strong&gt;defend the problem&lt;/strong&gt;. When I
report a bug, I have to insist that it exists &amp;mdash; this is my job. Others
may tell me that I&amp;#39;m wrong and the bug is not there. They may tell
me that they can&amp;#39;t reproduce it. They may say that my description of
a task is too vague and nobody understands it. There may be many issues
of that kind. My job is to do the best I can in order to &lt;em&gt;keep the ticket alive&lt;/em&gt;.
Obviously, if the bug is not reproducible, I&amp;#39;ll be forced to close
the ticket. However, until the ticket is closed, I&amp;#39;m its guardian angel. :)&lt;/p&gt;

&lt;p&gt;On the other hand, the responsibility of the ticket solver is to
&lt;strong&gt;defend the solution&lt;/strong&gt;. When a ticket is assigned to me and I have to resolve it,
my job is to convince the reporter that my solution is good enough. He may
tell me that my solution is not sufficient, not the most efficient, or
incomplete. My job is to insist that I&amp;#39;m right and he is wrong. Well, of course,
in a reasonable way. And in order to create a solution that will be
accepted as sufficient enough, I have to understand the problem first, investigate
all possible options, and propose the most elegant implementation. But all this
is secondary. The first thing I will be focused on is how to convince
the reporter. I will always remember that my primary goal is to &lt;em&gt;close the ticket&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;My point here is that no matter how many people are involved in the
ticket discussion, always remember what is happening there &amp;mdash; one
person is selling his solution to another person. Everybody else around
them is help or distraction (see below).&lt;/p&gt;

&lt;h2 id=&quot;2.-close-it!&quot;&gt;2. Close It!&lt;/h2&gt;

&lt;p&gt;Remember that a ticket is not a chat. You&amp;#39;re not there to talk.
You&amp;#39;re there to &lt;em&gt;close&lt;/em&gt;. When the ticket is assigned to you,
focus on closing it as soon as possible.&lt;/p&gt;

&lt;p&gt;Also, keep in mind that the sooner you close the ticket, the better job
you will do for the project. Long-living tickets are a management nightmare.
It is difficult to track them and control them. It&amp;#39;s difficult to understand
what&amp;#39;s going on. Have you seen those two-year-old tickets in open source projects
that have hundreds of comments and no deliverables? It is a mistake
by their project managers and ticket participants. Each ticket should be
short and focused &amp;mdash; 1) a problem, 2) a refinement
question, 3) a short explanation, 4) a solution, 5) closed, thanks everybody.
This is an ideal scenario.&lt;/p&gt;

&lt;p&gt;As soon as you realize that your ticket is turning into a long discussion,
try to close it even faster. How can I close it if the reporter doesn&amp;#39;t
like my solution? Find a temporary solution that will satisfy the reporter
and allow you to close the ticket. Use &amp;quot;TODO&amp;quot; in your code or dirty
workarounds &amp;mdash; they are all better than a ticket hovering for a long time.&lt;/p&gt;

&lt;p&gt;Once you see that the solution is provided and is sufficient enough
to close the ticket, ask its reporter to close it. Explicitly ask for that;
don&amp;#39;t dance arround with &amp;quot;looks like this solution may be accepted, if you don&amp;#39;t mind&amp;quot;.
Be explicit in your intention to close the ticket and move on. Try this:
&amp;quot;@jeff, please close the ticket if you don&amp;#39;t have any further questions.&amp;quot;&lt;/p&gt;

&lt;h2 id=&quot;3.-don&amp;#39;t-close-it!&quot;&gt;3. Don&amp;#39;t Close It!&lt;/h2&gt;

&lt;p&gt;Every time you raise a bug and create a new ticket, you consume project
resources. Every bug report means money spent on the project: 1) money for your time
spent finding the problem and reporting it; 2) for the time of the project manager
who is working with the ticket and finding who will fix it; 3) for the time
of the ticket solver, who is trying to understand your report and provide
a solution; and also 4) for the time of everybody else who will participate
in the discussion.&lt;/p&gt;

&lt;p&gt;If you close the ticket without a problem being properly solved,
you put this money into the trash bin. Once the ticket is started, there
is no way back. We can&amp;#39;t just say, &amp;quot;Nah, ignore it; it&amp;#39;s not important anymore.&amp;quot;
Your ticket already consumed project time and budget resources, and in order to turn
them into something useful, you have to make sure that &lt;em&gt;some&lt;/em&gt;
solution is delivered.&lt;/p&gt;

&lt;p&gt;It can be a temporary solution. It can be a single line change in the
project documentation. It can be a TODO marker in the code saying that
&amp;quot;we are aware of the problem but won&amp;#39;t fix it because we&amp;#39;re lazy&amp;quot;. Anything
would work, but not nothing.&lt;/p&gt;

&lt;p&gt;Look at it from a different perspective. When you started that ticket, you had
something in mind. Something was not right with the product. That&amp;#39;s why you
reported a bug. If you close the ticket without anyone even touching that place
of code, someone else will have the same concern in a few days or a few years.
And then the project will have to pay again for a similar ticket or discussion
of the same problem. Even if you&amp;#39;re convinced that the issue you found in
the code is not really an issue, ask a ticket resolver to document it right
in the source code in order to prevent such confusion from happening again in the future.&lt;/p&gt;

&lt;h2 id=&quot;4.-avoid-noise-&amp;mdash;-address-your-comments&quot;&gt;4. Avoid Noise &amp;mdash; Address Your Comments&lt;/h2&gt;

&lt;p&gt;Every time you post a message to the ticket, address it to someone. Otherwise,
if you post just because you want to express your opinion, your
comments become communication noise. Remember, a ticket is a conversation
between two people &amp;mdash; one of them reported an issue and the other one is
trying to fix it. Comments like, &amp;quot;How about we try another approach&amp;quot;
or &amp;quot;I remember I had a similar issue some time ago&amp;quot; are very annoying
and distracting. Let&amp;#39;s be honest, nobody really needs or cares about &amp;quot;opinions&amp;quot;.
All we need in a ticket is a solution(s).&lt;/p&gt;

&lt;p&gt;If you think the ticket should be closed because the introduced solution
is good enough, address your comment to the ticket reporter. And start
it with &amp;quot;@jeff, I think the solution you&amp;#39;ve got already is good enough, because ...&amp;quot;
This way, you will help the assignee to close the ticket and move on.&lt;/p&gt;

&lt;p&gt;If you think the solution is wrong, address your comment to the assignee
of the ticket, starting with &amp;quot;@jeff, I believe your solution is not good enough
because ...&amp;quot; This way, you will help the ticket reporter keep the ticket
open until a proper solution comes up.&lt;/p&gt;

&lt;p&gt;Again, don&amp;#39;t pollute the air with generic opinions. Instead, be very specific
and take sides &amp;mdash; you either like the solution and want the ticket to
be closed, or you don&amp;#39;t like it and want the ticket to stay open. Everything
in between is just making the situation more complex and isn&amp;#39;t helping the
project at all.&lt;/p&gt;

&lt;h2 id=&quot;5.-report-when-it-is-broken&quot;&gt;5. Report When It Is Broken&lt;/h2&gt;

&lt;p&gt;I think it is obvious, but I will reiterate: Every bug has
to be reproducible. Every time you report a bug, you should explain
how exactly the product is broken. Yes, it is your job to prove that the
software doesn&amp;#39;t work as intended, or is not documented properly, or
doesn&amp;#39;t satisfy the requirements, etc.&lt;/p&gt;

&lt;p&gt;Every bug report should follow the same simple formula: &amp;quot;This is what we &lt;em&gt;have&lt;/em&gt;,
this is what we &lt;em&gt;should have&lt;/em&gt; instead, so fix it&amp;quot;. Every ticket, be it a bug,
a task, a question, or a suggestion, should be formatted in this way. By
submitting it, you&amp;#39;re asking the project to move from point A to point B. Something
is not right at point A, and it will be much better for all of us to be
at that point B. So it&amp;#39;s obvious that you have to explain where these points
A and B are. It is highly desirable if you can explain how to get there &amp;mdash;
how to reproduce a problem and how to fix it.&lt;/p&gt;

&lt;p&gt;Even when you have a question, you should also follow that format. If you
have a question, it means the project documentation is not sufficient
enough for you to find an answer there. This is what is broken. You should
ask for a fix. So instead of reporting, &amp;quot;How should I use class X?&amp;quot;, say
something like, &amp;quot;The current documentation is not complete; it doesn&amp;#39;t explain
how I should use class X. Please fix.&amp;quot;&lt;/p&gt;

&lt;p&gt;If you can&amp;#39;t explain how to get there, say so in the ticket: &amp;quot;I see that
this class doesn&amp;#39;t work as it should, but I don&amp;#39;t know how to reproduce
the problem and how to fix it.&amp;quot; This will give everybody a clear message
that you are aware that your bug report is not perfect. The first step
for its resolver will be to refine the problem and find a way to reproduce it.
If such a replica can&amp;#39;t be found, obviously your bug will be forced into closing.&lt;/p&gt;

&lt;p&gt;Let me reiterate again: Every ticket is dragging the project from point A,
where something is not right, to point B, where it is fixed. Your job,
as a ticket reporter, is to draw that line &amp;mdash; clearly and explicitly.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/24/principles-of-bug-tracking.html</guid>
      <dc:date>2014-11-24T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Seven Virtues of a Good Object</title>
      <link>http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html</link>
      <description>&lt;p&gt;Martin Fowler &lt;a href=&quot;http://martinfowler.com/bliki/InversionOfControl.html&quot;&gt;says&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A library is essentially a set of functions that you can call,
these days usually organized into classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Functions organized into classes? With all due respect, this is wrong. And it
is a very common misconception of a class in object-oriented programming. Classes
are not organizers of functions. And objects are not data structures.&lt;/p&gt;

&lt;p&gt;So what is a &amp;quot;proper&amp;quot; object? Which one is not a proper one?
What is the difference? Even though it is a very polemic subject, it is very important.
Unless we understand what an object is, how can we write object-oriented software?
Well, thanks to Java, Ruby, and others, we can. But how good will it be?
Unfortunately, this is not an exact science, and there are many opinions.
Here is my list of qualities of a good object.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;class-vs.-object&quot;&gt;Class vs. Object&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/good-object-1.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Before we start talking about objects, let&amp;#39;s define what a &lt;em&gt;class&lt;/em&gt; is. It
is a place where objects are being born (a.k.a. &lt;em&gt;instantiated&lt;/em&gt;). The main responsibility
of a class is to &lt;em&gt;construct&lt;/em&gt; new objects on demand and &lt;em&gt;destruct&lt;/em&gt; them when
they are not used anymore. A class knows how its children should look
and how they should behave. In other words, it knows what &lt;em&gt;contracts&lt;/em&gt; they should obey.&lt;/p&gt;

&lt;p&gt;Sometimes I hear classes being called &amp;quot;object templates&amp;quot;
(for example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_%28computer_programming%29&quot;&gt;Wikipedia says so&lt;/a&gt;).
This definition is not correct because it places classes into a passive position. This definition
assumes that someone will get a template and build an object by using it.
This may be true, technically speaking, but conceptually it&amp;#39;s wrong. Nobody else
should be involved &amp;mdash; there are only a class and its children. An
object asks a class to create another object, and the class constructs it; that&amp;#39;s it.
Ruby expresses this concept much better than Java or C++:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The object &lt;code&gt;photo&lt;/code&gt; is constructed by the class &lt;code&gt;File&lt;/code&gt; (&lt;code&gt;new&lt;/code&gt; is an entry point to the class).
Once constructed, the object is acting on its own. It shouldn&amp;#39;t know who constructed it
and how many more brothers and sisters it has in the class. Yes, I mean
that &lt;a href=&quot;https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29&quot;&gt;reflection&lt;/a&gt;
is a terrible idea, but I&amp;#39;ll write more about it in one of the next posts :)
Now, let&amp;#39;s talk about objects and their best and worst sides.&lt;/p&gt;

&lt;h2 id=&quot;1.-he-exists-in-real-life&quot;&gt;1. He Exists in Real Life&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/good-object-2.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;First of all, an object is a &lt;strong&gt;living organism&lt;/strong&gt;. Moreover, an object
should be &lt;a href=&quot;https://en.wikipedia.org/wiki/Anthropomorphism&quot;&gt;anthropomorphized&lt;/a&gt;, i.e.
treated like a human being (or a pet, if you like them more). By this
I basically mean that an object is not a &lt;em&gt;data structure&lt;/em&gt; or a collection
of functions. Instead, it is an independent entity with its own life cycle,
its own behavior, and its own habits.&lt;/p&gt;

&lt;p&gt;An employee, a department, an HTTP request, a table in MySQL,
a line in a file, or a file itself are proper objects &amp;mdash; because they exist in
real life, even when our software is turned off. To be more precise, an object is a
&lt;em&gt;representative&lt;/em&gt; of a real-life creature. It is a &lt;em&gt;proxy&lt;/em&gt; of that
real-life creature in front of all other objects. Without
such a creature, there is &amp;mdash; obviously &amp;mdash; no object.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, I&amp;#39;m asking &lt;code&gt;File&lt;/code&gt; to construct a new object &lt;code&gt;photo&lt;/code&gt;, which will
be a representative of a real file on disk. You may say that a file
is also something virtual and exists only when the computer is turned on.
I would agree and refine the definition of &amp;quot;real life&amp;quot; as follows: It is
everything that exists aside from the scope of the program the object
lives in. The disk file is outside the scope of our program; that&amp;#39;s why
it is perfectly correct to create its representative inside the program.&lt;/p&gt;

&lt;p&gt;A controller, a parser, a filter, a validator, a service locator,
a singleton, or a factory are &lt;strong&gt;not&lt;/strong&gt; good objects
(yes, most GoF patterns are anti-patterns!).
They don&amp;#39;t exist apart from your software, in real life. They
are invented just to tie other objects together. They are artificial
and fake creatures. They don&amp;#39;t represent anyone. Seriously, an XML parser
&amp;mdash; who does it represent? Nobody.&lt;/p&gt;

&lt;p&gt;Some of them may become good if they change their names;
others can never excuse their existence. For example, that XML parser can be
renamed to &amp;quot;parseable XML&amp;quot; and start to represent an XML document
that exists outside of our scope.&lt;/p&gt;

&lt;p&gt;Always ask yourself, &amp;quot;What is
the real-life entity behind my object?&amp;quot; If you can&amp;#39;t find an answer,
start thinking about refactoring.&lt;/p&gt;

&lt;h2 id=&quot;2.-he-works-by-contracts&quot;&gt;2. He Works by Contracts&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/good-object-3.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;A good object always works by contracts. He expects to be hired not
because of his personal merits but because he obeys the contracts. On the
other hand, when we hire an object, we shouldn&amp;#39;t discriminate and expect some specific
object from a specific class to do the work for us. We should expect &lt;em&gt;any&lt;/em&gt;
object to do what our contract says. As long as the object does what
we need, we should not be interested in his class of origin, his sex, or his religion.&lt;/p&gt;

&lt;p&gt;For example, I need to show a photo on the screen.
I want that photo to be read from a file in PNG format. I&amp;#39;m
contracting an object from class &lt;code&gt;DataFile&lt;/code&gt; and asking him to give me
the binary content of that image.&lt;/p&gt;

&lt;p&gt;But wait, do I care where exactly the content will come from &amp;mdash; the file on disk, or
an HTTP request, or maybe a document in Dropbox? Actually, I don&amp;#39;t. All I care about
is that some object gives me a byte array with PNG content. So my contract
would look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, any object from any class (not just &lt;code&gt;DataFile&lt;/code&gt;) can work for me.
All he has to do, in order to be eligible, is to obey the contract
&amp;mdash; by implementing the interface &lt;code&gt;Binary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The rule here is simple: every public method in a good object should
implement his counterpart from an interface. If your object has
public methods that are not inherited from any interface, he is badly designed.&lt;/p&gt;

&lt;p&gt;There are two practical reasons for this. First, an object working
without a contract is impossible to mock in a unit test. Second,
a contractless object is impossible to extend via
&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decoration&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;3.-he-is-unique&quot;&gt;3. He Is Unique&lt;/h2&gt;

&lt;p&gt;A good object should always encapsulate something in order
to be unique. If there is nothing to encapsulate, an object may
have identical clones, which I believe is bad. Here is an example
of a bad object, which may have clones:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTPStatus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I can create a few instances of class &lt;code&gt;HTTPStatus&lt;/code&gt;, and all of them will be
equal to each other:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTPStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTPStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously utility classes, which have only static methods,
can&amp;#39;t instantiate good objects. More generally, utility classes
don&amp;#39;t have any of the merits mentioned in this article and can&amp;#39;t
even be called &amp;quot;classes&amp;quot;. They are simply terrible abusers of an object paradigm
and exist in modern object-oriented languages only because their
inventors enabled static methods.&lt;/p&gt;

&lt;h2 id=&quot;4.-he-is-immutable&quot;&gt;4. He Is Immutable&lt;/h2&gt;

&lt;p&gt;A good object should never change his encapsulated state.
Remember, an object is a representative of a real-life entity, and this
entity should stay the same through the entire life of the object. In other
words, an object should never betray those whom he represents. He should
never change owners. :)&lt;/p&gt;

&lt;p&gt;Be aware that immutability doesn&amp;#39;t mean that all methods always return the same values.
Instead, a good immutable object is very dynamic.
However, he never changes his internal state. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTPStatus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTPStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Even though the method &lt;code&gt;read()&lt;/code&gt; may return different values, the
object is immutable. He points to a certain web page and will
never point anywhere else. He will never change his encapsulated state, and he will
never betray the URL he represents.&lt;/p&gt;

&lt;p&gt;Why is immutability a virtue? This article explains in detail:
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;Objects Should Be Immutable&lt;/a&gt;.
In a nutshell, immutable objects are better because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Immutable objects are simpler to construct, test, and use.&lt;/li&gt;
&lt;li&gt;Truly immutable objects are always thread-safe.&lt;/li&gt;
&lt;li&gt;They help avoid temporal coupling.&lt;/li&gt;
&lt;li&gt;Their usage is side-effect free (no defensive copies).&lt;/li&gt;
&lt;li&gt;They always have failure atomicity.&lt;/li&gt;
&lt;li&gt;They are much easier to cache.&lt;/li&gt;
&lt;li&gt;They prevent &lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;NULL references&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, a good object doesn&amp;#39;t have
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;setters&lt;/a&gt;, which
may change his state and force him to betray the URL. In other words,
introducing a &lt;code&gt;setURL()&lt;/code&gt; method would be a terrible mistake in class &lt;code&gt;HTTPStatus&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Besides all that, immutable objects will force you to make
more cohesive, solid, and understandable designs, as this article
explains: &lt;a href=&quot;/2014/11/07/how-immutability-helps.html&quot;&gt;How Immutability Helps&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;5.-his-class-doesn&amp;#39;t-have-anything-static&quot;&gt;5. His Class Doesn&amp;#39;t Have Anything Static&lt;/h2&gt;

&lt;p&gt;A static method implements a behavior of a class, not an object. Let&amp;#39;s say
we have class &lt;code&gt;File&lt;/code&gt;, and his children have method &lt;code&gt;size()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Measurable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// calculate the size of the file and return&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, so good; the method &lt;code&gt;size()&lt;/code&gt; is there because of the contract &lt;code&gt;Measurable&lt;/code&gt;,
and every object of class &lt;code&gt;File&lt;/code&gt; will be able to measure his size. A terrible
mistake would be to design this class with a static method instead
(this design is also known as
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;a utility class&lt;/a&gt;
and is very popular in Java, Ruby, and almost every OOP language):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// TERRIBLE DESIGN, DON&amp;#39;T USE!&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// calculate the size of the file and return&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This design runs completely against the object-oriented paradigm. Why?
Because static methods turn object-oriented programming into &amp;quot;class-oriented&amp;quot; programming.
This method, &lt;code&gt;size()&lt;/code&gt;, exposes the behavior of the class, not of his objects. What&amp;#39;s
wrong with this, you may ask? Why can&amp;#39;t we have both objects and classes
as first-class citizens in our code? Why can&amp;#39;t both of them have methods and properties?&lt;/p&gt;

&lt;p&gt;The problem is that with class-oriented programming,
decomposition doesn&amp;#39;t work anymore. We can&amp;#39;t break down a complex problem
into parts, because only a single instance of a class exists in the entire
program. The power of OOP is that it allows us to use objects as an instrument
for scope decomposition. When I instantiate an object inside a method, he
is dedicated to my specific task. He is perfectly isolated from
all other objects around the method. This object is a &lt;em&gt;local variable&lt;/em&gt;
in the scope of the method. A class, with his static methods, is always
a &lt;em&gt;global variable&lt;/em&gt; no matter where I use him. Because of that, I can&amp;#39;t
isolate my interaction with this variable from others.&lt;/p&gt;

&lt;p&gt;Besides being conceptually against object-oriented principles, public static
methods have a few practical drawbacks:&lt;/p&gt;

&lt;p&gt;First, it&amp;#39;s &lt;strong&gt;impossible to mock&lt;/strong&gt; them
(Well, you can use &lt;a href=&quot;https://code.google.com/p/powermock/&quot;&gt;PowerMock&lt;/a&gt;,
but this will then be the most terrible decision
you could make in a Java project ... I made it once, a few years ago).&lt;/p&gt;

&lt;p&gt;Second, they are &lt;strong&gt;not thread-safe&lt;/strong&gt; by definition, because they always
work with static variables, which are accessible from all threads. You can
make them thread-safe, but this will always require explicit
synchronization.&lt;/p&gt;

&lt;p&gt;Every time you see a public static method, start rewriting immediately. I don&amp;#39;t
even want to mention how terrible static (or global) variables are. I think
it is just obvious.&lt;/p&gt;

&lt;h2 id=&quot;6.-his-name-is-not-a-job-title&quot;&gt;6. His Name Is Not a Job Title&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/good-object-4.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;The name of an object should tell us what this object &lt;strong&gt;is&lt;/strong&gt;, not what
it &lt;strong&gt;does&lt;/strong&gt;, just like we name objects in real life: book instead of
page aggregator, cup instead of water holder, T-shirt instead of body dresser.
There are exceptions, of course, like printer or computer, but
they were invented just recently and by those who didn&amp;#39;t read this article. :)&lt;/p&gt;

&lt;p&gt;For example, these names tell us who their owners are:
an apple, a file, a series of HTTP requests, a socket, an XML document, a list of users, a regular
expression, an integer, a PostgreSQL table, or Jeffrey Lebowski. A properly named object is always
possible to draw as a small picture. Even a regular expression can be drawn.&lt;/p&gt;

&lt;p&gt;In the opposite, here is an example of names that tell us what their owners do:
a file reader, a text parser, a URL validator, an XML printer,
a service locator, a singleton, a script runner, or a Java programmer. Can you draw
any of them? No, you can&amp;#39;t. These names are not suitable for good objects.
They are terrible names that lead to terrible design.&lt;/p&gt;

&lt;p&gt;In general, avoid names that end with &amp;quot;-er&amp;quot; &amp;mdash; most of them are bad.&lt;/p&gt;

&lt;p&gt;&amp;quot;What is the alternative of a &lt;code&gt;FileReader&lt;/code&gt;?&amp;quot; I hear you asking. What would
be a better name? Let&amp;#39;s see. We already have &lt;code&gt;File&lt;/code&gt;, which is a representative
of a real-world file on disk. This representative is not powerful enough for us,
because he doesn&amp;#39;t know how to read the content of the file. We want to create
a more powerful one that will have that ability. What would we call him?
Remember, the name should say what he is, not what he does. What is he? He
is a file that has data; not just a file, like &lt;code&gt;File&lt;/code&gt;, but a more sophisticated
one, with data. So how about &lt;code&gt;FileWithData&lt;/code&gt; or simply &lt;code&gt;DataFile&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The same logic should be applicable to all other names.
Always think about &lt;strong&gt;what it is&lt;/strong&gt; rather than what it does. Give your
objects real, meaningful names instead of job titles.&lt;/p&gt;

&lt;h2 id=&quot;7.-his-class-is-either-final-or-abstract&quot;&gt;7. His Class Is Either Final or Abstract&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/good-object-5.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;A good object comes from either a final or abstract class. A &lt;code&gt;final&lt;/code&gt; class is one that
can&amp;#39;t be extended via inheritance. An &lt;code&gt;abstract&lt;/code&gt; class is one that
can&amp;#39;t have children. Simply put, a class should either say, &amp;quot;You can never break
me; I&amp;#39;m a black box for you&amp;quot; or &amp;quot;I&amp;#39;m broken already; fix me first and then use&amp;quot;.&lt;/p&gt;

&lt;p&gt;There is nothing in between. A final class is a black box that you can&amp;#39;t modify
by any means. He works as he works, and you either use him or throw him away. You can&amp;#39;t
create another class that will inherit his properties. This is not allowed
because of that &lt;code&gt;final&lt;/code&gt; modifier. The only way to extend such a final class
is through decoration of his children. Let&amp;#39;s say I have the class &lt;code&gt;HTTPStatus&lt;/code&gt; (see
above), and I don&amp;#39;t like him. Well, I like him, but he&amp;#39;s not powerful enough
for me. I want him to throw an exception if HTTP status is over 400. I want
his method, &lt;code&gt;read()&lt;/code&gt;, to do more that it does now. A traditional way would be
to extend the class and overwrite his method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnlyValidStatus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTPStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;unsuccessful HTTP code&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Why is this wrong? It is very wrong because we risk breaking
the logic of the entire parent class by overriding one of his methods. Remember,
once we override the method &lt;code&gt;read()&lt;/code&gt; in the child class, all methods from the
parent class start to use his new version. We&amp;#39;re literally injecting
a new &amp;quot;piece of implementation&amp;quot; right into the class. Philosophically
speaking, this is an offense.&lt;/p&gt;

&lt;p&gt;On the other hand, to extend a final class, you have to treat him like a black box
and decorate him with your own implementation (a.k.a.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;Decorator Pattern&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnlyValidStatus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnlyValidStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;unsuccessful HTTP code&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure that this class is implementing the same interface
as the original one: &lt;code&gt;Status&lt;/code&gt;. The instance of &lt;code&gt;HTTPStatus&lt;/code&gt; will
be passed into him through the constructor and encapsulated. Then every
call will be intercepted and implemented in a different way, if necessary.
In this design, we treat the original object as a black box and never
touch his internal logic.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t use that &lt;code&gt;final&lt;/code&gt; keyword, anyone (including yourself) will
be able to extend the class and ... offend him :( So a class without &lt;code&gt;final&lt;/code&gt;
is a bad design.&lt;/p&gt;

&lt;p&gt;An abstract class is the exact oposite case &amp;mdash; he tells us that
he is incomplete and we can&amp;#39;t use him &amp;quot;as is&amp;quot;. We have to inject
our custom implementation logic into him, but only into the places he allows
us to touch. These places are explicitly marked as &lt;code&gt;abstract&lt;/code&gt; methods.
For example, our &lt;code&gt;HTTPStatus&lt;/code&gt; may look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidatedHTTPStatus&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;unsuccessful HTTP code&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see, the class doesn&amp;#39;t know how exactly to validate the HTTP
code, and he expects us to inject that logic through inheritance and through
overloading the method &lt;code&gt;isValid()&lt;/code&gt;. We&amp;#39;re not going to offend him with
this inheritance, since he defended all other methods with &lt;code&gt;final&lt;/code&gt; (pay
attention to the modifiers of his methods). Thus, the class is ready
for our offense and is perfectly guarded against it.&lt;/p&gt;

&lt;p&gt;To summarize, your class should either be &lt;code&gt;final&lt;/code&gt; or &lt;code&gt;abstract&lt;/code&gt; &amp;mdash;
nothing in between.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html</guid>
      <dc:date>2014-11-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Hits-of-Code Instead of SLoC</title>
      <link>http://www.yegor256.com/2014/11/14/hits-of-code.html</link>
      <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Source_lines_of_code&quot;&gt;Lines-of-Code&lt;/a&gt;
(aka SLoC) is a metric with a terrible reputation.
Try &lt;a href=&quot;https://www.google.com/search?q=line+of+code+metric&quot;&gt;to google&lt;/a&gt;
it yourself and you&amp;#39;ll find tons of articles bad-mouthing about its
counter-effectiveness and destructiveness for a software development process.
The main argument is that we can&amp;#39;t measure the progress of programming
by the number of lines of code written. Probably the most famous quote is
attributed to &lt;a href=&quot;https://en.wikipedia.org/wiki/Bill_Gates&quot;&gt;Bill Gates&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Measuring programming progress by lines of code is like measuring aircraft building progress by weight&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically, this means that certain parts of the aircraft will take
much more effort at the same time being much lighter than others
(like a central computer, for example). Instead
of measuring the weight of the aircraft we should measure the effort put into it... somehow.
So, here is the idea. How about we measure the amount of times programmers
&lt;strong&gt;touch&lt;/strong&gt; the lines. Instead of counting the number of lines we&amp;#39;ll count
how many times they were actually modified &amp;mdash; we can get this information
from Git (or any other SCM). The more you touch that part
of the aircraft &amp;mdash; the more effort you spent on it, right?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I called it Hits-of-Code (HoC) and created a small tool to help us
calculate this number in just one line. It&amp;#39;s a
&lt;a href=&quot;https://rubygems.org/gems/hoc&quot;&gt;Ruby gem&lt;/a&gt;, install it and run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install hoc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hoc
54687&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The number 54687 is a total number of Hits-of-Code in your code base. The
principle behind this number is primitive &amp;mdash; every time a line of code
is modified, created or deleted in a Git commit, the counter increments.&lt;/p&gt;

&lt;p&gt;The main reason why this metric is better than LoC is that
it is much better aligned with the actual effort invested into the code
base. Here is why.&lt;/p&gt;

&lt;h2 id=&quot;it-always-increments&quot;&gt;It Always Increments&lt;/h2&gt;

&lt;p&gt;The HoC metric always goes up. Today it can not be lower than it
was yesterday &amp;mdash; just like the effort, it always increments.
Lines-of-Code is not acting like this. You may have a huge code
base today, but after refactoring it will become much smaller. The number
of lines of code is decreased. Does it mean you are less effective?
Definitely not, but the LoC metric says so, to a non-programmer.
A project manager, for example, may decide that since the size
of the code base stayed the same over the last month, the team is not working.&lt;/p&gt;

&lt;p&gt;HoC doesn&amp;#39;t have this counter-intuitive effect. Instead, HoC grows together with your
every commit. The more you work on the code base, the bigger the HoC. It doesn&amp;#39;t
matter how big or small the absolute size of the your product. What matters is
how much effort you put into it. That&amp;#39;s why HoC is very intuitive and may be
used as a measurement of software development progress.&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/gnuplot/2014/11/hoc-vs-loc.svg' style='width:700px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;Look at this 18-month graph; it shows both metrics together. I used the
same Java code base of &lt;a href=&quot;https://github.com/yegor256/rultor&quot;&gt;rultor&lt;/a&gt;,
a &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;DevOps assistant&lt;/a&gt;.
The code base experienced a major refactoring a few months ago, as you
see on the graph. I think it is obvious which metric on this graph tells us more about
the efforts being invested into the product.&lt;/p&gt;

&lt;h2 id=&quot;it-is-objective&quot;&gt;It Is Objective&lt;/h2&gt;

&lt;p&gt;For HoC it doesn&amp;#39;t matter how big the absolute size of the code base,
but only how big your relative contribution to it.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say, you have 300K lines of code and 95% of them were copy-pasted from some
third-party libraries (by the way, it is a very common and terrible practice &amp;mdash;
to keep third-party code inside your own repository). The amount of lines
of code will be big, but the actual custom code part will be relatively small. Thus,
the LoC metric will be misleading &amp;mdash; it will always show 300K with
small increments or decrements around it. Everybody will have a feeling that the
team is working with 300K lines code base.&lt;/p&gt;

&lt;p&gt;On the other hand, HoC will always take into account the part of code that
is actually being modified. The value of HoC will be objectively
correlated with the actual effort of programmers working with the code base.&lt;/p&gt;

&lt;h2 id=&quot;it-exposes-complexity-of-lines&quot;&gt;It Exposes Complexity of Lines&lt;/h2&gt;

&lt;p&gt;LoC is usually critized for its neutrality towards code complexity.
An auto-generated ORM class or a complex sorting algorithm may have the same
size in terms of lines of code, but the first takes seconds to write, while
the second may take weeks or months. That&amp;#39;s why lines of code is usually
considered a false metric.&lt;/p&gt;

&lt;p&gt;Hits-of-Code takes complexity into account, because the longer you work
with that sorting algorithm the more modifications you make to its
lines. Well, this statement is true if you use Git regularly and commit
your changes frequently &amp;mdash; that is how you tell Git about your work progress.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Finally, look at &lt;a href=&quot;http://www.teamed.io/portfolio.html&quot;&gt;this list of open projects&lt;/a&gt;
completed by our team over the
last few years. Every project has two metrics: Lines-of-Code and Hits-of-Code.
It is interesting to see how relatively small projects have very big
(over a million) HoC numbers. This immediately reminds me how much
time we invested into it and how old they are.&lt;/p&gt;

&lt;p&gt;I used the HoC metric in this analysis: &lt;a href=&quot;/2014/04/11/cost-of-loc.html&quot;&gt;How much do you pay per line of code?&lt;/a&gt;.
That post compares a traditional project that paid $3.98 per HoC and
an open source one, managed by Teamed.io, that paid &amp;cent;13.&lt;/p&gt;

&lt;p&gt;My conclusion is that this Hits-of-Code metric can be used as a tool of
progress tracking in a software development project. Moreover, it
can be used for estimations of team size, project budget, development
schedule and so forth. Obviously, LoC can&amp;#39;t be the only metric, but in
combination with others it may greatly help in estimating, planning
and tracking.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 14 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/14/hits-of-code.html</guid>
      <dc:date>2014-11-14T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Immutability Helps</title>
      <link>http://www.yegor256.com/2014/11/07/how-immutability-helps.html</link>
      <description>&lt;p&gt;In a few recent posts, including
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;&amp;quot;Getters/Setters. Evil. Period.&amp;quot;&lt;/a&gt;,
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;&amp;quot;Objects Should Be Immutable&amp;quot;&lt;/a&gt;, and
&lt;a href=&quot;/2014/10/03/di-containers-are-evil.html&quot;&gt;&amp;quot;Dependency Injection Containers are Code Polluters&amp;quot;&lt;/a&gt;,
I universally labelled all mutable objects with &amp;quot;setters&amp;quot; (object methods starting with &lt;code&gt;set&lt;/code&gt;) evil.
My argumentation was based mostly on metaphors and abstract examples. Apparently,
this wasn&amp;#39;t convincing enough for many of you &amp;mdash; I received a few requests
asking to provide more specific and practical examples.&lt;/p&gt;

&lt;p&gt;Thus, in order to illustrate my strongly negative attitude to &amp;quot;mutability via setters&amp;quot;, I took
an existing &lt;a href=&quot;http://commons.apache.org/proper/commons-email/&quot;&gt;commons-email&lt;/a&gt; Java library from Apache
and re-designed it my way, without setters and with &amp;quot;object thinking&amp;quot; in mind.
I released my library as part of the &lt;a href=&quot;http://www.jcabi.com&quot;&gt;jcabi&lt;/a&gt; family
&amp;mdash; &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;. Let&amp;#39;s see what benefits
we get from a &amp;quot;pure&amp;quot; object-oriented and immutable approach, without getters.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is how your code will look, if you send an email using commons-email:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHostName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smtp.googlemail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSmtpPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;465&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DefaultAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;yegor@teamed.io&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Yegor Bugayenko&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dude@jcabi.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dude, how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how you do the same with &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SMTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smtp.googlemail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;465&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Yegor Bugayenko &amp;lt;yegor@teamed.io&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StRecipient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dude@jcabi.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enclosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnPlain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dude, how are you?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think the difference is obvious.&lt;/p&gt;

&lt;p&gt;In the first example, you&amp;#39;re
dealing with a monster class that can do everything for you, including
sending your MIME message via SMTP, creating the message, configuring
its parameters, adding MIME parts to it, etc. The
&lt;a href=&quot;http://svn.apache.org/viewvc/commons/proper/email/tags/EMAIL_1_3_3/src/main/java/org/apache/commons/mail/Email.java?revision=1609295&amp;amp;view=co&quot;&gt;&lt;code&gt;Email&lt;/code&gt;&lt;/a&gt;
class from commons-email is really a huge class &amp;mdash; 33 private properties, over
a hundred methods, about two thousands lines of code. First, you configure
the class through a bunch of setters and then you ask it to &lt;code&gt;send()&lt;/code&gt;
an email for you.&lt;/p&gt;

&lt;p&gt;In the second example, we have seven objects instantiated via seven &lt;code&gt;new&lt;/code&gt; calls.
&lt;code&gt;Postman&lt;/code&gt; is responsible for packaging a MIME message; &lt;code&gt;SMTP&lt;/code&gt; is
responsible for sending it via SMTP; stamps (&lt;code&gt;StSender&lt;/code&gt;, &lt;code&gt;StRecipient&lt;/code&gt;,
and &lt;code&gt;StSubject&lt;/code&gt;) are responsible for configuring the MIME message before
delivery; enclosure &lt;code&gt;EnPlain&lt;/code&gt; is responsible for creating a MIME part
for the message we&amp;#39;re going to send. We construct these seven objects,
encapsulating one into another, and then we ask the postman to &lt;code&gt;send()&lt;/code&gt;
the envelope for us.&lt;/p&gt;

&lt;h2 id=&quot;what&amp;#39;s-wrong-with-a-mutable-email?&quot;&gt;What&amp;#39;s Wrong With a Mutable Email?&lt;/h2&gt;

&lt;p&gt;From a user perspective, there is almost nothing wrong. &lt;code&gt;Email&lt;/code&gt; is a powerful
class with multiple controls &amp;mdash; just hit the right one and the job
gets done. However, from a developer perspective &lt;code&gt;Email&lt;/code&gt; class is a nightmare. Mostly
because the class is very big and difficult to maintain.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
every time you want to extend it by introducing a new method, you&amp;#39;re facing the fact that you&amp;#39;re
making the class even worse &amp;mdash; longer, less cohesive, less readable,
less maintainable, etc. You have a feeling that you&amp;#39;re digging into something
dirty and that there is no hope to make it cleaner, ever. I&amp;#39;m sure, you&amp;#39;re
familiar with this feeling &amp;mdash; most legacy applications look that way.
They have huge multi-line &amp;quot;classes&amp;quot; (in reality, COBOL programs written in Java)
that were inherited from a few generations of programmers before you. When
you start, you&amp;#39;re full of energy, but after a few minutes of scrolling
such a &amp;quot;class&amp;quot; you say &amp;mdash; &amp;quot;screw it, it&amp;#39;s almost Saturday&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
there is no data hiding or encapsulation any more
&amp;mdash; 33 variables are accessible by over 100 methods. What is hidden?
This &lt;code&gt;Email.java&lt;/code&gt; file in reality is a big, procedural 2000-line script, called
a &amp;quot;class&amp;quot; by mistake. Nothing is hidden, once you cross the border of the
class by calling one of its methods. After that, you have full access to
all the data you may need. Why is this bad? Well, why do we need encapsulation
in the first place? In order to protect one programmer from another, aka
&lt;a href=&quot;https://en.wikipedia.org/wiki/Defensive_programming&quot;&gt;defensive programming&lt;/a&gt;.
While I&amp;#39;m busy changing the subject of the MIME message, I want to be
sure that I&amp;#39;m not interfered with by some other method&amp;#39;s activity, that is
changing a sender and touching my subject by mistake. Encapsulation helps
us narrow down the scope of the problem, while this &lt;code&gt;Email&lt;/code&gt; class
is doing exactly the opposite.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the class is so big&lt;/em&gt;,
its unit testing is even more complicated than the class itself. Why? Because
of multiple inter-dependencies between its methods and properties. In order to
test &lt;code&gt;setCharset()&lt;/code&gt; you have to prepare the entire object by calling a few other
methods, then you have to call &lt;code&gt;send()&lt;/code&gt; to make sure the message being
sent actually uses the encoding you specified. Thus, in order to test
a one-line method &lt;code&gt;setCharset()&lt;/code&gt; you run the entire integration testing
scenario of sending a full MIME message through SMTP. Obviously, if something
gets changed in one of the methods, almost every test method will be
affected. In other words, tests are very fragile, unreliable and over-complicated.&lt;/p&gt;

&lt;p&gt;I can go on and on with this &amp;quot;&lt;em&gt;because the class is so big&lt;/em&gt;&amp;quot;, but I think it is
obvious that a small, cohesive class is always better than a big one. It
is obvious to me, to you, and to any object-oriented programmer. But why is it not
so obvious to the developers of Apache Commons Email? I don&amp;#39;t think they are
stupid or un-educated. What is it then?&lt;/p&gt;

&lt;h2 id=&quot;how-and-why-did-it-happen?&quot;&gt;How and Why Did It Happen?&lt;/h2&gt;

&lt;p&gt;This is how it always happens. You start to design a class as something
cohesive, solid, and small. Your intentions are very positive.
Very soon you realize that there is something
else that this class has to do. Then, something else. Then, even more.&lt;/p&gt;

&lt;p&gt;The best way to make your class more and more powerful is by adding
setters that inject configuration parameters into the class so that it
can process them inside, isn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;This is the root cause of the problem! The root cause is our ability to &lt;strong&gt;insert&lt;/strong&gt;
data into mutable objects via configuration methods, also known as &amp;quot;setters&amp;quot;.
When an object is mutable and allows us to add setters whenever we
want, we will do it without limits.&lt;/p&gt;

&lt;p&gt;Let me put it this way &amp;mdash;
&lt;strong&gt;mutable classes tend to grow in size and lose cohesiveness&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If commons-email authors made this &lt;code&gt;Email&lt;/code&gt; class immutable
in the beginning, they wouldn&amp;#39;t have been able to add so many methods into it
and encapsulate so many properties. They wouldn&amp;#39;t be able to turn
it into a monster. Why? Because an immutable object only accepts a state
through a constructor. Can you imagine a 33-argument constructor?
Of course, not.&lt;/p&gt;

&lt;p&gt;When you make your class immutable in the first place, you are forced
to keep it cohesive, small, solid and robust. Because you can&amp;#39;t encapsulate
too much and you can&amp;#39;t modify what&amp;#39;s encapsulated. Just two or three
arguments of a constructor and you&amp;#39;re done.&lt;/p&gt;

&lt;h2 id=&quot;how-did-i-design-an-immutable-email?&quot;&gt;How Did I Design An Immutable Email?&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;a href='http://http.jcabi.com'&gt;&lt;img src='http://img.jcabi.com/logo-square.svg' style='width:64px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;When I was designing &lt;a href=&quot;https://github.com/jcabi/jcabi-email&quot;&gt;jcabi-email&lt;/a&gt;
I started with a small and simple class:
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Postman.java&quot;&gt;&lt;code&gt;Postman&lt;/code&gt;&lt;/a&gt;.
Well, it is an interface,
since I never make interface-less classes. So, &lt;code&gt;Postman&lt;/code&gt; is... a post man.
He is delivering messages to other people. First, I created a default
version of it (I omit the ctor, for the sake of brevity):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.mail.Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Postman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create SMTP session&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create transport&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.connect(this.host, this.port, etc.)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.send(msg)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// transport.close();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Good start, it works. What now? Well, the
&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/jms/Message.html&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt;
is difficult to construct.
It is a complex class from JDK that requires some manipulations before it
can become a nice HTML email. So I created an envelope, which will build
this complex object for me (pay attention, both
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Postman.java&quot;&gt;&lt;code&gt;Postman&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Envelope.java&quot;&gt;&lt;code&gt;Envelope&lt;/code&gt;&lt;/a&gt;
are immutable and annotated with
&lt;a href=&quot;http://aspects.jcabi.com/apidocs-0.20/com/jcabi/aspects/Immutable.html&quot;&gt;@Immutable&lt;/a&gt; from
&lt;a href=&quot;http://aspects.jcabi.com/annotation-immutable.html&quot;&gt;jcabi-aspects&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also refactor the &lt;code&gt;Postman&lt;/code&gt; to accept an envelope, not a message:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Postman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, so good. Now let&amp;#39;s try to create a simple implementation of
&lt;code&gt;Envelope&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works, but it does nothing useful yet. It only creates an absolutely
empty MIME message and returns it. How about adding a subject to it
and both &lt;code&gt;To:&lt;/code&gt; and &lt;code&gt;From:&lt;/code&gt; addresses (pay attention, &lt;code&gt;MIME&lt;/code&gt; class is
also immutable):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcpts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcpts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRecipient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RecipientType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks correct and it works. But it is still too primitive. How about
&lt;code&gt;CC:&lt;/code&gt; and &lt;code&gt;BCC:&lt;/code&gt;? What about email text? How about PDF enclosures?
What if I want to specify the encoding of the message? What about &lt;code&gt;Reply-To&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Can I add all these parameters to the constructor? Remember, the
class is immutable and I can&amp;#39;t introduce the &lt;code&gt;setReplyTo()&lt;/code&gt; method. I have to
pass the &lt;code&gt;replyTo&lt;/code&gt; argument into its constructor. It&amp;#39;s impossible, because
the constructor will have too many arguments, and nobody will be able to use it.&lt;/p&gt;

&lt;p&gt;So, what do I do?&lt;/p&gt;

&lt;p&gt;Well, I started to think: how can we break the concept of an &amp;quot;envelope&amp;quot;
into smaller concepts &amp;mdash; and this what I invented. Like a real-life envelope,
my &lt;code&gt;MIME&lt;/code&gt; object will have stamps. Stamps will be responsible
for configuring an object &lt;code&gt;Message&lt;/code&gt; (again,
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Stamp.java&quot;&gt;&lt;code&gt;Stamp&lt;/code&gt;&lt;/a&gt; is immutable,
as well as all its implementors):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I can simplify my
&lt;a href=&quot;https://github.com/jcabi/jcabi-email/blob/1.3/src/main/java/com/jcabi/email/Envelope.java&quot;&gt;&lt;code&gt;MIME&lt;/code&gt;&lt;/a&gt; class to the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Immutable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Envelope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MIME&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Envelope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stamps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stmps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MimeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stamps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I will create stamps for the subject, for &lt;code&gt;To:&lt;/code&gt;, for &lt;code&gt;From:&lt;/code&gt;,
for &lt;code&gt;CC:&lt;/code&gt;, for &lt;code&gt;BCC:&lt;/code&gt;, etc. As many stamps as I like. The class &lt;code&gt;MIME&lt;/code&gt;
will stay the same &amp;mdash; small, cohesive, readable, solid, etc.&lt;/p&gt;

&lt;p&gt;What is important here is why I made the decision to refactor while
the class was relatively small. Indeed, I started to worry about these
stamp classes when my &lt;code&gt;MIME&lt;/code&gt; class was just 25 lines in size.&lt;/p&gt;

&lt;p&gt;That is exactly the point of this article &amp;mdash;
&lt;strong&gt;immutability forces you to design small and cohesive objects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Without immutability, I would have gone the same direction as commons-email. My
&lt;code&gt;MIME&lt;/code&gt; class would grow in size and sooner or later would become
as big as &lt;code&gt;Email&lt;/code&gt; from commons-email. The only thing that stopped me
was the necessity to refactor it, because I wasn&amp;#39;t able to pass all
arguments through a constructor.&lt;/p&gt;

&lt;p&gt;Without immutability, I wouldn&amp;#39;t have had that motivator and I would
have done what Apache developers did with commons-email &amp;mdash; bloat the
class and turn it into an unmaintainable monster.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s &lt;a href=&quot;http://email.jcabi.com&quot;&gt;jcabi-email&lt;/a&gt;. I hope
this example was illustrative enough and that you will start writing
cleaner code with immutable objects.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Fri, 07 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/07/how-immutability-helps.html</guid>
      <dc:date>2014-11-07T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>An Empty Line is a Code Smell</title>
      <link>http://www.yegor256.com/2014/11/03/empty-line-code-smell.html</link>
      <description>&lt;p&gt;The subject may sound like a joke, but it is not. An empty line,
used as a separator of instructions in an object method, is a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt;.
Why? In short, because a method should &lt;strong&gt;not&lt;/strong&gt; contain &amp;quot;parts&amp;quot;. A method
should always &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;do one thing&lt;/a&gt;
and its functional decomposition should be done by language constructs
(for example, new methods), and &lt;strong&gt;never&lt;/strong&gt; by empty lines.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Look at this Java class (it does smell, doesn&amp;#39;t it?):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TextFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method first loads the content of the file. Second, it
counts how many lines match the regular expression provided. So why does
method &lt;code&gt;grep&lt;/code&gt; smell? Because it does two things instead of one &amp;mdash;
it loads and it greps.&lt;/p&gt;

&lt;p&gt;If we make a rule, to avoid empty lines in method bodies, the method
will have to be refactored in order to preserve the &amp;quot;separation of concerns&amp;quot;
introduced by that empty line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TextFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I believe it is obvious that this new class has methods that are
much more cohesive and readable. Now every method is doing exactly
one thing, and it&amp;#39;s easy to understand which thing it is.&lt;/p&gt;

&lt;p&gt;This idea about avoiding empty lines is also applicable to other languages,
not just Java/C++/Ruby, etc. For example, this CSS code is
definitely begging for refactoring:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The empty line here is telling us (screaming at us, actually) that this &lt;code&gt;.container&lt;/code&gt;
class is too complex and has to be decomposed into two classes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.wide&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.important&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, using empty lines to separate blocks of code is a very common habit.
Moreover, very often I see empty blocks of two or even three lines, which are all
playing this evil role of a separator of concerns.&lt;/p&gt;

&lt;p&gt;Needless to say, a properly designed class must have just a few public
methods and a properly designed method must have up to ten instructions
(according to Bob Martin).
Empty lines inside methods encourage us to break this awesome rule and
turn them into multi-page poems.&lt;/p&gt;

&lt;p&gt;Of course, it&amp;#39;s easier to just click &lt;code&gt;enter&lt;/code&gt; a few times and continue to
code right in the same method, instead of thinking and refactoring first.
This laziness will eventually lead to code that is hardly maintainable
at all.&lt;/p&gt;

&lt;p&gt;To prevent this from happening in your projects, stop using empty
lines inside methods, completely. Ideally, prohibit them in your automated build.
In &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;qulice.com&lt;/a&gt;,
a static analysis tool we&amp;#39;re using in all Java projects,
we created a custom Checkstyle check that prohibits empty lines in every
method.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 03 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/11/03/empty-line-code-smell.html</guid>
      <dc:date>2014-11-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How Much Do You Cost?</title>
      <link>http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html</link>
      <description>&lt;figure class='badge'&gt;&lt;a href='http://www.teamed.io'&gt;&lt;img src='http://img.teamed.io/logo.svg' style='width:160px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m getting a few emails every day from programmers
interested in working with &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt; remotely.
The first question I usually ask is &amp;quot;what is your rate?&amp;quot;
(we pay &lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;by the hour&lt;/a&gt;)
What surprises me is how
often people incorrectly estimate themselves, in both directions.&lt;/p&gt;

&lt;p&gt;I hear very different numbers, from $5 to $500 per hour. I never
say no, but usually come up with my own hourly rate estimate. This article
explains what factors I do and don&amp;#39;t take into account. These are
my personal criteria; don&amp;#39;t take them as an industry standard.
I do find them objective and logical, though &amp;mdash; so let me explain.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;open-source-contribution&quot;&gt;Open Source Contribution&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/rate-open-source-contribution.png' style='width:350px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;This is the first and the most important characteristic of a
software developer. Do you contribute to open source projects?
Do you have your own open source libraries that are used by
some community? Do you write code that is publicly available and used?&lt;/p&gt;

&lt;p&gt;If you have nothing to show here, I see three posible causes.&lt;/p&gt;

&lt;p&gt;First, you&amp;#39;re &lt;strong&gt;too shy to share&lt;/strong&gt; your code because &lt;strong&gt;it&amp;#39;s crap&lt;/strong&gt;. Obviously,
this is not a good sign. Not because your code could be bad, but because
you&amp;#39;re not brave enough to face this fact and improve. In our teams we
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;pay a lot of attention&lt;/a&gt;
to the quality of code and most of our
new team members get surprised by just how high our quality bar is. You will also
be surprised. The question is whether you will be able to adapt and improve
or if you will give up and quit. If you didn&amp;#39;t share your code before
and have never dealt with negative feedback, you won&amp;#39;t feel comfortable
in our projects, where quality requirements are very high.&lt;/p&gt;

&lt;p&gt;The second possible cause is that
you work from nine till five, for food, &lt;strong&gt;without passion&lt;/strong&gt;. Actually,
nobody manifests it that way. Instead, I often hear something like
&amp;quot;my company doesn&amp;#39;t pay me for open source contribution and
at home I want to spend time with my family&amp;quot;. In modern software
development, most of the code we&amp;#39;re working with is open source &amp;mdash;
libraries, frameworks, tools, instruments, etc. Almost everything you&amp;#39;re using
in your commercial projects is open source. By paying your salary your
employer does already invest in open source products,
because you&amp;#39;re an active user of them. The problem is that &lt;em&gt;you&lt;/em&gt; are not
interested in becoming more active in that contribution.
I see this as a lack of passion and self-motivation.
Will you be an effective developer in our projects? Not at all, because our
entire management model relies on &lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;self-motivation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The last possible cause is that
you don&amp;#39;t know what to write and where to contribute, which means
&lt;strong&gt;lack of creativity&lt;/strong&gt;. As I mentioned above, almost everything we&amp;#39;re using
now is open source, and these tools are full of bugs and not-yet-implemented features.
At the same time, you don&amp;#39;t see any areas for improvement? You don&amp;#39;t
know what can be done better? You&amp;#39;re not able to at least find, report and fix
one bug in some open source product you&amp;#39;re using every day? This means
that you won&amp;#39;t be able to find areas of improvement in our projects either,
while we rely on your ability to
&lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;discover problems creatively&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thus, if your Github account is empty and your CV doesn&amp;#39;t position you
as &amp;quot;an active contributor to Linux kernel&amp;quot; (yeah, why not?), I immediately
lose interest. On the other hand, when I see a 100+ stars project in your
Github account, I get excited and ready to offer a higher rate.&lt;/p&gt;

&lt;h2 id=&quot;geographic-location&quot;&gt;Geographic Location&lt;/h2&gt;

&lt;p&gt;It is a common practice to pay higher rates to those who live in more
expensive countries. When I&amp;#39;m getting resumes from San Francisco programmers,
their rates are $70+ per hour. The same skills and experience cost
$15-20 in Karachi. The reason here is the cost of living &amp;mdash;
it is much higher in the US than in Pakistan.&lt;/p&gt;

&lt;p&gt;However, this reason doesn&amp;#39;t sound logical to me. If you&amp;#39;re driving a more
expensive car, we have to pay you a higher salary? The same with the
place to stay. You&amp;#39;ve chosen the country that
you live in. You&amp;#39;re using all the benefits of a well-developed country
and you&amp;#39;re paying for them. It&amp;#39;s your choice. You decided to spend more money
for the quality of your life &amp;mdash; what does it have to do with me?&lt;/p&gt;

&lt;p&gt;Want to pay $30 for a lunch? Become a better engineer. Until then,
buy a hot dog for a few bucks. Just saying that
&amp;quot;I&amp;#39;m already here and my lunch costs $30&amp;quot; is not an argument.&lt;/p&gt;

&lt;p&gt;Thus, the more expensive the place you live, the less money
stays in your pocket. For us this means that $100 will motivate a programmer
from Karachi much stronger than the same $100 will motivate the same person,
if she lives in San Francisco. Thus, we prefer to work with people
whose expenses are lower. Our money will simply work better.&lt;/p&gt;

&lt;h2 id=&quot;stackoverflow.com-reputation&quot;&gt;StackOverflow.com Reputation&lt;/h2&gt;

&lt;p&gt;We all know what StackOverflow has but very few people (suprisingly few!)
actively contributing to it. If your profile there is empty (or you don&amp;#39;t have
one) I realize that you 1) don&amp;#39;t have any questions to ask
and 2) you have nothing to answer.&lt;/p&gt;

&lt;p&gt;First, if you&amp;#39;re not asking anything there, you are not growing. Your education
process stopped some time ago, probably right after you got an office job.
Or maybe you&amp;#39;re too shy to ask? Or you can&amp;#39;t describe your questions
in an accurate and precise format? Or maybe all your questions already
have answers? In any case, it&amp;#39;s sad.&lt;/p&gt;

&lt;p&gt;Second, if you&amp;#39;re not answering, you simply have nothing to say. In most cases,
this means that you&amp;#39;re not solving complex and unique problems.
You&amp;#39;re simply wiring together well-known components and
collecting your paychecks.&lt;/p&gt;

&lt;p&gt;Very often I hear people saying that they solve most of their problems
by asking their colleagues sitting next to them in the office. They say
they simply don&amp;#39;t need StackOverflow (or similar resources, if they exist)
because their team is so great that any questions can be answered internally.
That&amp;#39;s good for the team and bad for you. Why? You don&amp;#39;t have a very important skill &amp;mdash;
finding an answer in a public Internet. In our projects we
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;discourage&lt;/a&gt;
any horizontal communications between programmers, and you won&amp;#39;t be
able to get any help from anyone. You will be on your own and you will fail,
because you are used to patronizing someone senior, in your office.&lt;/p&gt;

&lt;p&gt;StackOverflow is not just an indicator of how smart you are and how many
upvotes you got for the &lt;a href=&quot;http://stackoverflow.com/questions/234075/what-is-your-best-programmer-joke&quot;&gt;&amp;quot;best programming joke&amp;quot;&lt;/a&gt;.
It is proof that you can find answers
to your questions by communicating with people you don&amp;#39;t know.
It is a very important skill.&lt;/p&gt;

&lt;h2 id=&quot;years-of-experience&quot;&gt;Years of Experience&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/rate-years-of-experience.png' style='width:350px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;&amp;quot;I&amp;#39;ve written Java for 10 years!&amp;quot; &amp;mdash; so what? This number means only
one thing to me &amp;mdash; you managed to survive in some office for ten years.
Or maybe in a few offices. You managed to convince someone that he
has to pay you for ten years of sitting in his building. Does it mean
that you were writing something useful?
Does it mean that your code was perfect? It doesn&amp;#39;t mean any of that.&lt;/p&gt;

&lt;p&gt;Years of experience is a false indicator. It actually may play against you,
in combination with other indicators mentioned above. If your CV says that
you just started to program two years ago and your Github
and StackOverflow accounts are empty &amp;mdash; there is still a chance
you will improve. You&amp;#39;re just in the beginning of your career. However,
if your CV says that you&amp;#39;re a &amp;quot;10-year seasoned architect&amp;quot; with zero
open source contribution &amp;mdash; this means that you&amp;#39;re either lying about
that ten years or you&amp;#39;re absolutely useless as an architect.&lt;/p&gt;

&lt;p&gt;My point is that the &amp;quot;years of experience&amp;quot; argument should be used very carefully.
Play this card only if you have other merits. Otherwise, keep it to yourself.&lt;/p&gt;

&lt;h2 id=&quot;certifications&quot;&gt;Certifications&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/rate-certifications.png' style='width:350px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Oracle, Zend, Amazon, IBM, MySQL, etc. &amp;mdash;
I&amp;#39;m talking about these certifications. In order to get them you should
pass an exam. Not an easy one and not online. It is a real exam taken in
a certification center, where you&amp;#39;re sitting in front of a computer for a few
hours, without any books or Internet access, answering questions. Rather
humiliating activity for a respected software developer? Indeed. And there
is a high probability of failure, which is also rather embarassing.&lt;/p&gt;

&lt;p&gt;It is a very good sign, if you managed to go through this. If you&amp;#39;ve done
it a few times, even better. However, if you&amp;#39;ve earned no certifications
in your entire career, it is for one of the following reasons:&lt;/p&gt;

&lt;p&gt;First, you&amp;#39;re &lt;strong&gt;afraid to lose&lt;/strong&gt;. A serious certification may cost a few hundred
dollars (I paid over $700 for &lt;a href=&quot;https://en.wikipedia.org/wiki/Oracle_Certification_Program&quot;&gt;SCEA&lt;/a&gt;)
and you will not get a refund if you
fail. If you&amp;#39;re afraid to lose, you&amp;#39;re afraid to fight. This means
you&amp;#39;ll chicken out in a real-life situation, where a complex problem
will need to be solved.&lt;/p&gt;

&lt;p&gt;Second, you &lt;strong&gt;don&amp;#39;t invest&lt;/strong&gt; in your profile. This most probably means that you don&amp;#39;t
want to change companies and prefer to find a peaceful office, where you
can stay forever. I remember I once said to a friend of mine &amp;mdash;
&amp;quot;you will greatly improve your CV if you pass this certification&amp;quot;. He
answered with a smile &amp;mdash; &amp;quot;I hope I won&amp;#39;t need a CV any more, I like
this company&amp;quot;. This attitude is very beneficial for the company you&amp;#39;re
working for, but it definitely works against you.&lt;/p&gt;

&lt;p&gt;In my experience, the best team players are those who work for themselves.
Healthy individualism is a key success factor. If your primary objective
is to earn for yourself (money, reputation, skills, or knowledge) &amp;mdash;
you will be very effective in our projects. Certifications in your
profile is an indicator of that healthy individualism we&amp;#39;re looking for.&lt;/p&gt;

&lt;h2 id=&quot;skills-variety&quot;&gt;Skills Variety&lt;/h2&gt;

&lt;p&gt;The more technologies or programming languages you know, the less you cost.
I&amp;#39;m not saying that it&amp;#39;s not possible to be an expert in many things at the same time
&amp;mdash; that&amp;#39;s entirely possible. But let me give you a pragmatic reason why you shouldn&amp;#39;t &amp;mdash;
competition. There are thousands of &amp;quot;Java7 programmers&amp;quot; on the market &amp;mdash;
we can easily choose whoever we need. But there are not so many
&amp;quot;Hadoop programmers&amp;quot; or &amp;quot;XSLT designers&amp;quot;.&lt;/p&gt;

&lt;p&gt;If you focus on some specific area and become an expert there,
your chances of finding a job are lower, but the payout will be bigger.
We usually end up paying more to narrow-skilled specialists, mostly because
we have no choice. If a project we&amp;#39;re working on needs a Lucene expert,
we&amp;#39;ll find the right person and do our best to get him/her on
board. Doing our best means increasing the price, in most cases.&lt;/p&gt;

&lt;p&gt;Thus, when I hear that you&amp;#39;re &amp;quot;experienced in MySQL, PostgreSQL, Oracle and Sqlite&amp;quot;
I realize that you know very little about databases.&lt;/p&gt;

&lt;h2 id=&quot;talks-and-publications&quot;&gt;Talks and Publications&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/11/rate-talks-and-publications.png' style='width:350px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;I think it is obvious that having a blog (about programming, not about
your favorite cat) is a positive factor. Even better is to be an
occasional speaker at conferences or meetups. When it is a blog, I
pay attention to the amount of comments people leave for your articles.
If it is a conference, the most important criteria is how difficult it
was to get to the list of speakers.&lt;/p&gt;

&lt;p&gt;Both blog articles and conference presentations make you much more
valuable as a specialist. Mostly because these things demonstrate that some
people already reviewed your work and your talent. And it was not just
a single employer, but a group of other programmers and engineers.
This means that we also can rely on your opinions.&lt;/p&gt;

&lt;p&gt;Besides that, if you write and present regularly, you have a very important
skill/talent &amp;mdash; you can present your ideas in a &amp;quot;digestable&amp;quot; way.
In our projects we
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;discourage informal communications&lt;/a&gt;
and use ticketing systems instead. In those tickets you will have
to explain your ideas, questions or concerns so that everybody can
understand you. Without enough presentation skills, you won&amp;#39;t survive
in your projects.&lt;/p&gt;

&lt;p&gt;BTW, some software developers even file patents in their names &amp;mdash; why
can&amp;#39;t you do this?&lt;/p&gt;

&lt;h2 id=&quot;previous-employment&quot;&gt;Previous Employment&lt;/h2&gt;

&lt;p&gt;I usually don&amp;#39;t pay much attention to this section of your CV. Our management
model is &lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;so different&lt;/a&gt;
from anything you can see anywhere else that it doesn&amp;#39;t really matter
how many times you were fired before and how senior of a
position you have/had with your full-time employer. Even if your title
is &amp;quot;CTO of Twitter&amp;quot; &amp;mdash; it doesn&amp;#39;t mean anything to me.&lt;/p&gt;

&lt;p&gt;My experience tells me that the bigger the company and the higher the position
in it &amp;mdash; the further away you stay from the source code and from
real technical decisions. VPs and CTOs spend most of their time on
management meetings and internal politics.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m much more interested in &lt;strong&gt;what&lt;/strong&gt; you&amp;#39;ve done over the last few years than
in &lt;strong&gt;where&lt;/strong&gt; you&amp;#39;ve done it and what they called you while you were
doing it.&lt;/p&gt;

&lt;h2 id=&quot;education&quot;&gt;Education&lt;/h2&gt;

&lt;p&gt;BSc, MSc, PhD... do we care? Not really. Education is very similar to
the &amp;quot;previous employment&amp;quot; mentioned above. It doesn&amp;#39;t really matter
where exactly you&amp;#39;ve spent those five years after school. What matters
is what have you done during that time. If you have nothing to say
about your activity in the university than what will the name of it
tell me?&lt;/p&gt;

&lt;p&gt;Well, of course, if it is Stanford or MIT, this will make a difference. In this
case I can see that you managed to pass their graduation standards and managed to
find money to study there. This is a good sign and will definitely increase
your hourly rate. But if it is some mambo-jambo university from nowhere (like
the one I graduated from), keep this information to yourself.&lt;/p&gt;

&lt;h2 id=&quot;rates&quot;&gt;Rates&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;$100+&lt;/strong&gt; per hour we gladly pay to an expert who owns a few popular open source
products; has a StackOverflow score above 20K; has certifications,
articles, presentations, and maybe even patents.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$50+&lt;/strong&gt; per hour we pay to a professional programmer who has open
source projects on his own or is an active contributor; has a StackOverflow
score over 5K; is writing about software development;
possesses a few certifications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$30+&lt;/strong&gt; per hour we pay to a programmer who regularly contributes to
open source code; is present in StackOverflow; has some
certifications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$15&lt;/strong&gt; per hour we pay to everybody else.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t get me wrong and don&amp;#39;t take these numbers personally. The rate
you&amp;#39;re getting is a measurable metric of your professional level, not of you as a person.
Besides, the level is not static, it is changing every day, and it&amp;#39;s entirely in your hands.&lt;/p&gt;

&lt;p&gt;I wrote this article mostly in order to motivate you to grow.&lt;/p&gt;

&lt;p&gt;All these criteria are applicable to new members of our teams. Once you
start writing some code, we measure your performance and you may get
completely different numbers, see
&lt;a href=&quot;/2014/04/20/how-hourly-rate-is-calculated.html&quot;&gt;How Hourly Rate Is Calculated&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BTW, illustrations you see above are created by Andreea Mironiuc.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html</guid>
      <dc:date>2014-10-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Are You a Hacker or a Designer?</title>
      <link>http://www.yegor256.com/2014/10/26/hacker-vs-programmer-mentality.html</link>
      <description>&lt;p&gt;Twenty years ago, the best programmer was the one
capable of fitting an entire application into a 64Kb
&lt;code&gt;.COM&lt;/code&gt; file. Those who were able to get the most out of
that poor Intel 80386 were the icons of programming.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s because twenty years ago computers were expensive and programmers
were cheap. That was the time of the &amp;quot;hacker mentality&amp;quot;.
That time is over. That mentality is not appreciated any more,
because the market situation is completely opposite.&lt;/p&gt;

&lt;p&gt;Today, computers are cheap and programmers are expensive.
This is the era of the &amp;quot;designer mentality&amp;quot;, when the readability
of our code is much more important than its performance.&lt;/p&gt;

&lt;!--more--&gt;

&lt;iframe class=&quot;video&quot; width=&quot;640&quot; height=&quot;360&quot; src=&quot;http://www.youtube.com/embed/qdqcayTLlLk&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;prices-vs-salaries&quot;&gt;Prices vs Salaries&lt;/h2&gt;

&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/trends.png' style='width:300px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Look at this graph. It is a comparison of two trends over the
last twenty years (1994-2014).
The first trend falls down and shows how much cheaper
&lt;a href=&quot;http://www.jcmit.com/memoryprice.htm&quot;&gt;computer memory&lt;/a&gt;
and &lt;a href=&quot;http://ns1758.ca/winch/winchest.html&quot;&gt;HDD storage&lt;/a&gt;
have become over the last twenty years.&lt;/p&gt;

&lt;p&gt;The second trend demonstrates how much software developers&amp;#39; salaries
escalated over the same period. More accurately, they tripled. I didn&amp;#39;t find
an official report about that, but I&amp;#39;m sure it&amp;#39;s no secret to anyone
that the salaries of programmers keep growing &amp;mdash; $200,000 per year for
a senior developer is not a dream any more... while twenty years
ago $60K was the best offer around. I found
&lt;a href=&quot;http://markcunningham91.blogspot.com/2013/05/a-history-of-offers-to-software.html&quot;&gt;this article&lt;/a&gt;
very interesting about this very subject.&lt;/p&gt;

&lt;p&gt;Basically, this means that in order to create a PHP website
in 1994 we had to spend 1000 times more on hardware and three times
less on programmers than we do now, in 2014. And we&amp;#39;re talking about the
same stack of technologies here. The same Linux box with an Apache HTTP Server
inside.&lt;/p&gt;

&lt;p&gt;The difference is that in 1994, if our application had performance problems because of
hardware limitations, we paid $35,000 per each additional gigabyte of RAM, while
in 2014 we pay $10.&lt;/p&gt;

&lt;p&gt;In 1994 it was much more efficient to hire more programmers and ask
them to &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_optimization&quot;&gt;optimize&lt;/a&gt;
the code or even rewrite it, instead of buying new hardware. In 2014 the
situation is exactly the opposite. It is now much cheaper to double the
size of the server (especially if the server is a virtual cloud one)
instead of paying salaries for optimizing the software.&lt;/p&gt;

&lt;p&gt;In 1994 the best engineers had that &amp;quot;hacker mentality&amp;quot;, while in 2014 the
&amp;quot;designer mentality&amp;quot; is much more appreciated.&lt;/p&gt;

&lt;h2 id=&quot;hacker-mentality&quot;&gt;Hacker Mentality&lt;/h2&gt;

&lt;p&gt;Someone with a hacker mentality would call this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot;&gt;Fibonacci&lt;/a&gt;
Java method an &amp;quot;elegant code&amp;quot; (would you?):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I would highlight these qualities of a good
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hacker_%28computer_security%29&quot;&gt;hacker&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uses all known (and unknown) features of a programming language&lt;/li&gt;
&lt;li&gt;discriminates others as hackers and newbies and writes for hackers&lt;/li&gt;
&lt;li&gt;gets bored and frustrated by rules and standards&lt;/li&gt;
&lt;li&gt;doesn&amp;#39;t write unit tests &amp;mdash; juniors will write them later&lt;/li&gt;
&lt;li&gt;enjoys fire-fighting &amp;mdash; that&amp;#39;s how his talent manifests&lt;/li&gt;
&lt;li&gt;prefers talks over docs, since they are much more fun&lt;/li&gt;
&lt;li&gt;hates to see his code being modified by someone else&lt;/li&gt;
&lt;li&gt;likes to dedicate himself to one project at a time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A hacker is a talented individual. He wants to express his
talent in the software he writes. He enjoys coding and does
it mostly for fun. I would say, he is married to his code and can&amp;#39;t imagine
its happy life after an eventual divorce. Code ownership is
what a hacker is about &amp;mdash; he understands himself as an &amp;quot;owner&amp;quot;
of the code.&lt;/p&gt;

&lt;p&gt;When I ask one of my hacker friends &amp;mdash; &amp;quot;How will someone understand
what this code does?&amp;quot; I almost always hear the same answer &amp;mdash;
&amp;quot;They will ask me!&amp;quot; (usually said very proudly, with a sincere smile).&lt;/p&gt;

&lt;h2 id=&quot;designer-mentality&quot;&gt;Designer Mentality&lt;/h2&gt;

&lt;p&gt;Someone with a designer mentality would refactor the code above
to make it easier to read. He would call this Java function an &amp;quot;elegant code&amp;quot;
(how about you?):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think these qualities can be attributed to a good designer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tends to use traditional programming techniques&lt;/li&gt;
&lt;li&gt;assumes everybody is a newbie and writes accordingly&lt;/li&gt;
&lt;li&gt;enjoys setting rules and following them&lt;/li&gt;
&lt;li&gt;prefers docs over talks and automation over docs&lt;/li&gt;
&lt;li&gt;spends most of his coding time on unit tests&lt;/li&gt;
&lt;li&gt;hates fire-fighting and working over time&lt;/li&gt;
&lt;li&gt;loves to see his code being modified and refactored&lt;/li&gt;
&lt;li&gt;works with a few projects at the same time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A designer is a talented team player. He contributes to the team
processes, standards, rules, education, and discipline as much as he
contributes to the source code. He always makes sure that once
he leaves the project his code and his ideas stay and work.&lt;/p&gt;

&lt;p&gt;The highest satisfaction for a good designer
is to see his code living its own life &amp;mdash; being modified, improved,
refactored and eventually retired. A designer sees himself as a parent
of the code &amp;mdash; once it is old enough to walk and talk, it has
to live its own life.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;If you consider yourself a hacker, I believe it&amp;#39;s time to change. The time of
hackers is fading out.&lt;/p&gt;

&lt;p&gt;In the near future we will probably even stop thinking in terms of &amp;quot;hardware&amp;quot; and will
run our applications in elastic computational platforms with unlimited
amounts of memory, CPU power and storage space. We will simply pay
for resource utilization and almost any performance issue will just add a few extra
dollars to our monthly bills. We won&amp;#39;t care about optimization any more.&lt;/p&gt;

&lt;p&gt;At the same time, good software engineers will become more and more expensive
and will charge $500+ per hour just to check out software and give
a diagnosis. Just like good lawyers or dentists.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why, while developing a new software product, those who pay for it will
care mostly about its maintainability. Project sponsors will
understand that the best solution they can get for their money is
the one that is the most readable, maintainable, and automated.&lt;/p&gt;

&lt;p&gt;Not the fastest.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/26/hacker-vs-programmer-mentality.html</guid>
      <dc:date>2014-10-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Paired Brackets</title>
      <link>http://www.yegor256.com/2014/10/23/paired-brackets-notation.html</link>
      <description>&lt;p&gt;Here is a notation rule I&amp;#39;m using in Java code:
&lt;strong&gt;a bracket should either start/end
a line or be paired on the same line&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The notation applies universally to any programming language (incl.
Java, Ruby, Python, C++, PHP, etc.) where brackets are used
for method/function calls.&lt;/p&gt;

&lt;p&gt;Here is how your code will look, if you follow
this &amp;quot;Paired Brackets&amp;quot; notation:&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ends the line&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// open/close at the same line&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;hello, %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;Lebowski&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// starts the line&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;!--more--&gt;

&lt;p&gt;Obviously, the line with a closing bracket should start at the same
indentation level as the line with its opening pair.&lt;/p&gt;

&lt;p&gt;This is how your IDE will render the code if you
follow this notation (IntelliJ IDEA):&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/intellij-idea-indentation.png' style='width:529px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;Sublime Text will also appreciate it:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/sublime-text-indentation.png' style='width:584px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;As you see, those light vertical lines at the left side
of the code help you to navigate, if you follow the notation.&lt;/p&gt;

&lt;p&gt;Those multiple closing brackets may look strange to you
at the beginning &amp;mdash; but give yourself some time and you will
get used to them :)&lt;/p&gt;

&lt;h2 id=&quot;fluent&quot;&gt;Fluent&lt;/h2&gt;

&lt;p&gt;This is how I would recommend formatting fluent method calls
(this is Java in &lt;a href=&quot;https://netbeans.org/&quot;&gt;NetBeans&lt;/a&gt;):&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/netbeans-fluent-indentation.png' style='width:637px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;h2 id=&quot;arrays&quot;&gt;Arrays&lt;/h2&gt;

&lt;p&gt;Here is how you format an array in &amp;quot;Paired Brackets&amp;quot; notation
(this is Ruby in &lt;a href=&quot;https://www.jetbrains.com/ruby/&quot;&gt;RubyMine&lt;/a&gt;):&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/rubymine-array-indentation.png' style='width:568px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;As you see, the same principle applies to square and curled brackets.&lt;/p&gt;

&lt;h2 id=&quot;json&quot;&gt;JSON&lt;/h2&gt;

&lt;p&gt;The same principle is applicable to JSON formatting. This is
a small JSON document in &lt;a href=&quot;http://panic.com/coda/&quot;&gt;Coda 2&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/coda-json-indentation.png' style='width:406px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;

&lt;p&gt;JavaScript should also follow the same principle. This is
how your &lt;code&gt;.js&lt;/code&gt; code would look in &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/atom-javascript-indentation.png' style='width:520px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;p&gt;Finally, here is Python in &lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot;&gt;PyCharm&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/pycharm-python-indentation.png' style='width:852px;' alt='figure'/&gt;&lt;/figure&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/23/paired-brackets-notation.html</guid>
      <dc:date>2014-10-23T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Incremental Billing</title>
      <link>http://www.yegor256.com/2014/10/21/incremental-billing.html</link>
      <description>&lt;p&gt;When you hire a software developer (individual or a team), there are
basically two types of contracts:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fixed-price_contract&quot;&gt;fixed price&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Time_and_materials&quot;&gt;time-and-material&lt;/a&gt;.
They are fundamentally different but the truth is that in either case &amp;mdash;
&lt;strong&gt;you lose&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class='badge'&gt;&lt;a href='http://www.xdsd.org'&gt;&lt;img src='http://img.xdsd.org/logo.svg' style='width:100px;' alt='badge'/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;In the eXtremely Distributed Software Development
(&lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt;) methodology everything is different, including
the way we invoice our clients. Let&amp;#39;s see what happens in traditional
contracts and what changes in XDSD, which we practice
in &lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The difference between fixed-cost and T&amp;amp;M is in who takes the risk of spending
money and getting nothing in return. This risk is huge in the software
development industry, especially in outsourcing.
&lt;a href=&quot;http://www.projectsmart.co.uk/docs/chaos-report.pdf&quot;&gt;Over 80%&lt;/a&gt; of all
software projects fail to achieve their objectives and
&lt;a href=&quot;http://thenextweb.com/insider/2014/09/25/top-20-reasons-startups-fail-report/&quot;&gt;about 30%&lt;/a&gt;
of startups fail by running out of cash.
However, very few programmers (if any)
fail to get their monthly salaries on time.&lt;/p&gt;

&lt;p&gt;What does this tell us?&lt;/p&gt;

&lt;p&gt;I guess it means that in all failures you &amp;mdash; the client &amp;mdash; will be the loser.&lt;/p&gt;

&lt;h2 id=&quot;time-and-material&quot;&gt;Time and Material&lt;/h2&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/time-and-material-contract.svg' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;In T&amp;amp;M you will simply pay and pray. If your programmers
appear to be honest workaholics you may get lucky and get something done.
As you can see from the numbers above, however, this is rarely the case. Don&amp;#39;t fool yourself;
there won&amp;#39;t be any workaholics in your project. Even if you adopt micro-management
and corporal punishment, your overall costs will be much higher than expected
and the quality will suffer.&lt;/p&gt;

&lt;p&gt;This is what a monthly T&amp;amp;M invoice will look like. You will pay for
the time spent by programmers pretending to be working on your project.
Well, as I said above, some of them will ocassionally do something useful,
but overall statistics tell us that most of that time will be wasted.&lt;/p&gt;

&lt;p&gt;No matter how good or bad the code written during that month &amp;mdash; you still have
to pay the bill. How many more invoices you will get until the
product is done? Nobody knows.&lt;/p&gt;

&lt;p&gt;In the end &amp;mdash; you lose.&lt;/p&gt;

&lt;h2 id=&quot;fixed-price&quot;&gt;Fixed Price&lt;/h2&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/fixed-price-contract.svg' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;In Fixed Price you will feel secure at the beginning &amp;mdash; &amp;quot;the statement
of work specifies everything and the price is fixed, how can I lose?&amp;quot;
According to the statistics above, however, programmers are much smarter than their
clients. You will lose in quality. Yes, you will get something for that
fixed price, but it will be a throw-away software. And when you decide to
modify it, new costs will bubble up. In the end, the whole project will be ruined
and your money will simply be turned into programmers&amp;#39; salaries. This model is even more
risky than T&amp;amp;M, where you at least have a chance.&lt;/p&gt;

&lt;p&gt;Once in a while you will receive an invoice with a list of milestones reached.
Every milestone will contain a certain set of features implemented in
the product. Keep in mind that the primary motivation of your programmers will
be to do less and charge more. Every time you ask for improvements
or corrections, there will be a fight about budget. You will either give
up and lose a lot of money or your team will significantly jeopardize
quality, in order to stay profitable.&lt;/p&gt;

&lt;p&gt;In either case &amp;mdash; you lose.&lt;/p&gt;

&lt;h2 id=&quot;incremental-billing&quot;&gt;Incremental Billing&lt;/h2&gt;

&lt;p&gt;So, what is the solution? Is it possible to have win-win
contracts with programmers?&lt;/p&gt;

&lt;figure&gt;&lt;img src='http://www.yegor256.com/images/2014/10/xdsd-invoice-example.svg' style='width:500px;' alt='figure'/&gt;&lt;/figure&gt;

&lt;p&gt;Yes, it is. We call it &amp;quot;Incremental Billing&amp;quot;.&lt;/p&gt;

&lt;p&gt;Remember, in &lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt; we work with a stream of micro-tasks, usually completed
in less than an hour. Each completed task produces a new increment (aka a &amp;quot;release&amp;quot; or &amp;quot;version&amp;quot;) of software.
An increment could be a bug fix, a bug report, a new feature or
a micro-step towards any of these.&lt;/p&gt;

&lt;p&gt;By the end of a week you get a bill that lists every single increment
delivered during the week, the amount of time spent on its development
and its total cost. Every increment costs you 30-60 minutes of a programmer&amp;#39;s
time (plus our fees).&lt;/p&gt;

&lt;p&gt;Besides that, by the end of the week, you get an updated version
of a project plan, with a re-estimated budget. Thus, you see what was
done so far and how much needs to be done, according to our estimate.&lt;/p&gt;

&lt;p&gt;How does this help you not lose/waste money? Here&amp;#39;s how:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you fully control your budget&lt;/li&gt;
&lt;li&gt;you pay only for the work completed&lt;/li&gt;
&lt;li&gt;you track the progress with few-minutes-granularity&lt;/li&gt;
&lt;li&gt;you don&amp;#39;t pay for meetings, chats, lunches or coffee breaks&lt;/li&gt;
&lt;li&gt;programmers stay very motivated, since they are paid by result&lt;/li&gt;
&lt;li&gt;there is no long-term commitment, and you can stop at any time&lt;/li&gt;
&lt;li&gt;every increment passes all quality checks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, &lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD methodology&lt;/a&gt; not only
improves the way we develop software but also fixes the flaws in
the way you pay for it. Since it is a win-win model, it is beneficial
for both programmers and for you &amp;mdash; the paying project sponsor.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/21/incremental-billing.html</guid>
      <dc:date>2014-10-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>How We Write a Product Vision</title>
      <link>http://www.yegor256.com/2014/10/20/how-we-write-product-vision.html</link>
      <description>&lt;figure class='badge'&gt;&lt;img src='http://www.yegor256.com/images/2014/10/lifecycle-thinking.png' style='width:250px;' alt='badge'/&gt;&lt;/figure&gt;

&lt;p&gt;Every software project we work with is started from a Product Vision document. We
create it during our
&lt;a href=&quot;/2014/10/06/software-project-lifecycle.html&quot;&gt;Thinking&lt;/a&gt;
phase. Even though the document is as short as two pages of English text,
its development is the most painstaking task in the whole project.&lt;/p&gt;

&lt;p&gt;There are a few tricks and recommendations which I&amp;#39;d like to share.&lt;/p&gt;

&lt;p&gt;We usually design a Product Vision in four sections: product statement,
stakeholders and needs, features, and quality requirements.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;product-statement&quot;&gt;Product Statement&lt;/h2&gt;

&lt;p&gt;Product Statement is a one-paragraph declaration of intent, explaining
to an absolute stranger what this product is about and what it is for.
It is very similar to an &lt;a href=&quot;https://en.wikipedia.org/wiki/Elevator_pitch&quot;&gt;elevator pitch&lt;/a&gt;.
The Statement must answer these questions, preferrably in this specific order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Who is the customer?&lt;/li&gt;
&lt;li&gt;What does she want?&lt;/li&gt;
&lt;li&gt;What is the market offering now?&lt;/li&gt;
&lt;li&gt;What is wrong with existing offers?&lt;/li&gt;
&lt;li&gt;How will our product fix this?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should answer all these questions in less than 60 words altogether. If
you need more words, something is wrong with your understanding of the
product under development. If you can answer them in 20 words, your
product will conquer the world.&lt;/p&gt;

&lt;p&gt;By the way, don&amp;#39;t confuse a Product Statement with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Mission_statement&quot;&gt;Mission&lt;/a&gt;,
which is a much broader declaration of an overall goal of your business. You
may have a hundred products but only a single mission. For example,
Disney &lt;a href=&quot;http://www.lifehack.org/articles/work/20-sample-vision-statement-for-the-new-startup.html&quot;&gt;says&lt;/a&gt;
that its mission is: &amp;quot;to make people happy&amp;quot;. They&amp;#39;ve got
hundreds of products that help them accomplish this mission. And each product
has its own Product Statement.&lt;/p&gt;

&lt;p&gt;I find these articles helpful:
&lt;a href=&quot;https://www.scrumalliance.org/community/articles/2009/january/the-product-vision&quot;&gt;The Product Vision&lt;/a&gt;,
&lt;a href=&quot;https://platinumedge.com/blog/agile-artifacts-product-vision-statement&quot;&gt;Agile Artifacts: The Product Vision Statement&lt;/a&gt;,
&lt;a href=&quot;http://www.jamesshore.com/Agile-Book/vision.html&quot;&gt;The Art of Agile Development: Vision&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;stakeholders-and-needs&quot;&gt;Stakeholders and Needs&lt;/h2&gt;

&lt;p&gt;This section must list everybody whose life
will be affected by the product (positively or negatively). Your list of stakeholders
may include: sponsors, developers, users, competitors, government,
banks, web hosting providers, Apple Store, hackers, etc.&lt;/p&gt;

&lt;p&gt;It is very important to list both positive and negative stakeholders. If your
product is going to automate some routine manual operations,
don&amp;#39;t forget that someone will be made redundant because of it. No matter
how &amp;quot;good&amp;quot; your product is, there is always an &amp;quot;evil&amp;quot; side. The
invention of the iPhone made millions of people happy, but also caused a lot
of trouble for Nokia and Blackberry. An eventual invention of a cancer
vaccine will make millions of people healthier, but will also make thousands
of oncologists jobless. My point is that any project has both positive and negative
stakeholders.&lt;/p&gt;

&lt;p&gt;Each stakeholder must have a list of needs. They have to be simple
and straight forward, like &amp;quot;earn money&amp;quot;, &amp;quot;increase profit&amp;quot;, &amp;quot;share photos&amp;quot;,
or &amp;quot;host a website&amp;quot;.&lt;/p&gt;

&lt;p&gt;I would recommend defining one or two needs for each stakeholder. If there
are more than three, think again &amp;mdash; do you really understand what your
stakeholders need?&lt;/p&gt;

&lt;p&gt;Your project will be considered successful if you satisfy all the needs
of all your positive stakeholders and neutralize negative ones.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;http://www.sebokwiki.org/wiki/Stakeholder_Needs_and_Requirements&quot;&gt;Stakeholder Needs and Requirements&lt;/a&gt;
article from SEBOK will be helpful.&lt;/p&gt;

&lt;h2 id=&quot;actors-and-features&quot;&gt;Actors and Features&lt;/h2&gt;

&lt;p&gt;In this section we list &lt;a href=&quot;https://en.wikipedia.org/wiki/Actor_%28UML%29&quot;&gt;actors&lt;/a&gt;
(entities communicating with the product) and the key functionalities
they use. This is the most abstract definition of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_requirement&quot;&gt;functional requirements&lt;/a&gt;
of the product. It doesn&amp;#39;t need to be detailed. Instead, it has to
be very high-level and abstract. For example, this is how our
interaction with a well-known product may be described in two lines:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;User can post tweets, read tweets of his friends,
  follow new friends and re-tweet their tweets.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Is it clear for a stranger what we&amp;#39;re talking about here? Absolutely not
&amp;mdash; what is a &amp;quot;tweet&amp;quot;, what does it mean to &amp;quot;follow&amp;quot; and what is a &amp;quot;re-tweet&amp;quot;?
These questions have no answers in the Product Vision document,
but it&amp;#39;s clear that a user will have four main features available. All other
features will be similar to those.&lt;/p&gt;

&lt;p&gt;Twitter is a multi-billion dollar business with a multi-million dollar
product. However, we managed to explain its key features in just two
lines of text. You should do the same with your product. If you can&amp;#39;t fit
all its features into just two-three lines, reconsider your understanding
of the product you&amp;#39;re going to develop. Also, read about
&lt;a href=&quot;http://hbswk.hbs.edu/archive/5325.html&quot;&gt;&amp;quot;feature bloat dilemma&amp;quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each actor must have at least three and at most six features. If
there are more, you should group them somehow. If there are less, break
them into smaller and more detailed features.&lt;/p&gt;

&lt;h2 id=&quot;quality-requirements&quot;&gt;Quality Requirements&lt;/h2&gt;

&lt;p&gt;This section lists all important non-functional
requirements. Any product may have hundreds of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Non-functional_requirement&quot;&gt;quality requirements&lt;/a&gt;,
as well as hundreds of features. However, a Product Vision document
must be focused on the most important ones. Consider some examples:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Any web page must open in less than 300ms.
Total cost of ownership must be less than $5000/mo.
Mobile app must be tailored for 10+ popular screen sizes.
Mean time to recover must be less than 2 hours.
DB must be scalable up to 5Tb without cost increases.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is also very important to keep requirements measurable (like each of these examples).
Every line in this section
is a message to product developers. They will read this document in
order to understand what is most important to the sponsor of the
project. For example, these quality requirements are useless: &amp;quot;user interface
must be attractive&amp;quot;, &amp;quot;web site must be fast&amp;quot; or &amp;quot;the system must be stable&amp;quot;.
They are not measurable or
testable. All they do is distract developers. If you can&amp;#39;t make
a strict and measurable statement about your quality objectives, don&amp;#39;t write
anything. It&amp;#39;s better to say nothing than set false or ambiguous goals here.&lt;/p&gt;

&lt;p&gt;Try to keep this section short. There should be six quality requirements, at most.&lt;/p&gt;

&lt;h2 id=&quot;remove-noise&quot;&gt;Remove Noise&lt;/h2&gt;

&lt;p&gt;Every section must be no more than twenty lines in length. Even if you&amp;#39;re
developing a Google killer with a $50 million dollar budget, your Vision
document must be as short as two pages.&lt;/p&gt;

&lt;p&gt;For most of my clients this is a very complex and brain damaging task. They
usually come to us with a 50-page document explaining their business
ideas with all the important details. From this document, we should only extract
information that really makes a difference.&lt;/p&gt;

&lt;p&gt;The Product Vision document must keep its reader on the highest level
of abstraction. The document must take less than a minute to read,
from start to finish.&lt;/p&gt;

&lt;p&gt;If you can&amp;#39;t keep it short &amp;mdash; you don&amp;#39;t understand your product well enough.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Here is an example of a very simple Product Vision
for a Facebook killer:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Statement
  Facebook doesn&amp;#39;t allow users to purchase &amp;quot;likes&amp;quot;,
  our social network will have this.

Stakeholders and Needs
  Sponsor: to raise investments.
  Developer: to earn money by programming.
  Users: to share photos and purchase popularity.
  Bank: to make commission on every purchase.
  Government: to protect society against abusive content.
  Competitors: to wipe us off the market.

Actors and Features
  User can create account, upload photos, share photos,
    send personal messages, like other photos, purchase likes.
  Admin can ban user accounts, view summary reports, authorize
    credit card transactions, configure system parameters,
    monitor server resource usage.
  Bank can process credit card transactions.

Quality Requirements
  Any page must open in less than 300ms.
  User interface must be attractive and simple.
  Availability must be over 99.999%.
  Test coverage must be over 80%.
  Development pipeline must be fully automated.
  Interfaces must include web site and iOS/Android app.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;diplomacy&quot;&gt;Diplomacy&lt;/h2&gt;

&lt;p&gt;We follow all these recommendations in our projects,
in &lt;a href=&quot;http://www.teamed.io&quot;&gt;teamed.io&lt;/a&gt;. You can use
them in your projects as well, but keep in mind that the process
of defining a Product Vision could be very painful. You may sometimes
offend a client by over-simplifying their &amp;quot;great&amp;quot; business idea. &amp;#39;Really?
I&amp;#39;m ready to pay $250,000 for something awesome and you&amp;#39;re telling
me that you&amp;#39;ve only got ten lines for it? Huh?&amp;#39;&lt;/p&gt;

&lt;p&gt;To work around this situation, split the client&amp;#39;s documentation into two parts.
The first part will fit into the Product Vision document; the second one
will be called &amp;quot;supplementary documentation&amp;quot; and will contain all that
valuable information you&amp;#39;ve got from the client. You may use
that documentation later, during the course of product development.&lt;/p&gt;

&lt;p&gt;But don&amp;#39;t cut corners. Don&amp;#39;t allow your client (or anyone else) to force
you to bloat the Product Vision. The document has to be very short and explicit.&lt;/p&gt;

&lt;p&gt;No lyrics, only statements.&lt;/p&gt;
</description>
      <author>Yegor Bugayenko</author>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://www.yegor256.com/2014/10/20/how-we-write-product-vision.html</guid>
      <dc:date>2014-10-20T00:00:00+00:00</dc:date>
    </item>
    <generator>Jekyll</generator>
  </channel>
</rss>