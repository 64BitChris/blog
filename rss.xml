<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://www.yegor256.com/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2018-07-06T11:54:43+00:00</updated><id>https://www.yegor256.com/</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Whatâ€™s Wrong With Global Variables?</title><link href="https://www.yegor256.com/2018/07/03/global-variables.html" rel="alternate" type="text/html" title="What&#39;s Wrong With Global Variables?" /><published>2018-07-03T00:00:00+00:00</published><updated>2018-07-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/07/03/global-variables</id><content type="html" xml:base="https://www.yegor256.com/2018/07/03/global-variables.html">&lt;p&gt;Only lazy people haven&amp;#39;t written already about how &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global variables&lt;/a&gt;
are evil. It started in 1973 when W.&amp;nbsp;Wulf et al. &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=953355&quot;&gt;claimed&lt;/a&gt; that
&amp;quot;the non-local variable is a major contributing factor in programs
which are difficult to understand.&amp;quot; Since then, &lt;a href=&quot;http://wiki.c2.com/?GlobalVariablesAreBad&quot;&gt;many other reasons&lt;/a&gt;
where suggested to convince programmers to stop using global variables.
I think &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil&quot;&gt;I read them all&lt;/a&gt;,
but didn&amp;#39;t find the one that bothers me most of all: composability.
In a nutshell, global variables make code difficult or impossible to compose
in ways which are different from what its original author expected.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;El Chapo, Season 1 (2017) by Silvana Aguirre et al.&#39; src=&#39;/images/2018/07/el-chapo.jpg&#39; longdesc=&#39;#9e10a0df&#39;/&gt;&lt;figcaption id=&#39;9e10a0df&#39;&gt;El Chapo, Season 1 (2017) by Silvana Aguirre et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I was recently writing a web front for &lt;a href=&quot;https://www.zold.io&quot;&gt;Zold&lt;/a&gt; in Ruby,
on top of &lt;a href=&quot;http://sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt;.
This is how a web server starts according to &lt;a href=&quot;http://sinatrarb.com/intro.html&quot;&gt;their documentation&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here &lt;code&gt;start!&lt;/code&gt; is a static method of the &lt;code&gt;App&lt;/code&gt; class, which you have to declare
as a child of their default parent
&lt;a href=&quot;https://github.com/sinatra/sinatra/blob/v2.0.3/lib/sinatra/base.rb#L893-L1896&quot;&gt;&lt;code&gt;Sinatra::Base&lt;/code&gt;&lt;/a&gt;.
To tell the app which TCP port to listen to you have to preconfigure it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra/base&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What do you do if you want to start two web servers?
For the purpose of testing this may be a pretty logical requirement.
For example, since Zold is a distributed network,
it is necessary to test how a number of servers communicate to each other.
I can&amp;#39;t do that! There is absolutely no way.
Because Sinatra is designed with the assumption that only one server may exist in the entire application scope.&lt;/p&gt;

&lt;p&gt;Can this really be fixed? Let&amp;#39;s take a look at &lt;a href=&quot;https://github.com/sinatra/sinatra/&quot;&gt;their code&lt;/a&gt;.
Class &lt;code&gt;Sinatra::Base&lt;/code&gt; is essentially a &lt;a href=&quot;/2016/06/27/singletons-must-die.html&quot;&gt;Singleton&lt;/a&gt;,
which is not supposed to have more than one instance.
When we call &lt;code&gt;App.set(:port, 8080)&lt;/code&gt;, the value &lt;code&gt;8080&lt;/code&gt; is saved into an attribute of a single instance.
The number &lt;code&gt;8080&lt;/code&gt; becomes available for all methods of &lt;code&gt;Sinatra::Base&lt;/code&gt;, no matter what instance
they are called from.&lt;/p&gt;

&lt;p&gt;They are not using &lt;a href=&quot;https://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/globalvars.html&quot;&gt;true&lt;/a&gt;
Ruby global variables, I believe, because they know that they are bad.
Why exactly they are bad and what the
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;alternatives&lt;/a&gt; are&amp;mdash;slipped through their fingers.&lt;/p&gt;

&lt;p&gt;Technically speaking, their design is &amp;quot;globally scoped.&amp;quot;
&lt;code&gt;Sinatra::Base&lt;/code&gt; treats the entire application as its scope of visibility.
No matter who calls it, everything is visible, including what was created
in previous calls and in previously instantiated objects.
This &amp;quot;class&amp;quot; is a giant bag of global variables.&lt;/p&gt;

&lt;p&gt;Every global variable is a troublemaker of that kind.
While the application is small and its test coverage is low, global variables may not hurt.
But the bigger the app and the more sophisticated its automated testing scenarios,
the more difficult it will be to compose objects which depend on global variables,
singletons, or class variables.&lt;/p&gt;

&lt;p&gt;My recommendation? Under no circumstances even think about any global variables.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Only lazy people haven&amp;#39;t written already about how global variables
are evil. It started in 1973 when W.&amp;nbsp;Wulf et al. claimed that
&amp;quot;the non-local variable is a major contributing factor in programs
which are difficult to understand.&amp;quot; Since then, many other reasons
where suggested to convince programmers to stop using global variables.
I think I read them all,
but didn&amp;#39;t find the one that bothers me most of all: composability.
In a nutshell, global variables make code difficult or impossible to compose
in ways which are different from what its original author expected.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/07/el-chapo.jpg" /></entry><entry><title type="html">Are You an Architect?</title><link href="https://www.yegor256.com/2018/06/26/are-you-an-architect.html" rel="alternate" type="text/html" title="Are You an Architect?" /><published>2018-06-26T00:00:00+00:00</published><updated>2018-06-26T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/06/26/are-you-an-architect</id><content type="html" xml:base="https://www.yegor256.com/2018/06/26/are-you-an-architect.html">&lt;p&gt;Over twenty five years ago, in 1992, at an OOPSLA workshop in Vancouver,
Kent Beck, in answer to the question
&amp;quot;What is an architect?&amp;quot; said, according to &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0164121208002057&quot;&gt;Philippe Kruchten&lt;/a&gt;,
that it is &amp;quot;a new pompous title that programmers demand to have on their business cards
to justify their sumptuous emoluments.&amp;quot;
Not much has changed since then.
There is a big difference between a smart programmer and a project architect.
Here is a list of traits that, I believe, a good architect has.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;No Country for Old Men (2007) by Coen Brothers&#39; src=&#39;/images/2018/06/no-country-for-old-men.jpg&#39; longdesc=&#39;#3627e4f5&#39;/&gt;&lt;figcaption id=&#39;3627e4f5&#39;&gt;No Country for Old Men (2007) by Coen Brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Disclaimer: Even though I haven&amp;#39;t seen a single female software architect in my life,
I have to say for my leftist/feminist readers that in this blog post
I&amp;#39;m assuming an architect is a man only for the sake of convenience of speech.
There is no intention to offend anyone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He Is Loyal.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Programmers come and go.
They are, as I &lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;mentioned&lt;/a&gt;
many times before, egoists with a strong focus
on their personal profit. They change projects, they work on multiple
projects at the same time, they have
&lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;no personal attachments&lt;/a&gt;
to any piece of code. They worry only about their individual tasks and
feature branches. The branch is merged? All bets are off. Professional
developers are &amp;quot;polygamous&amp;quot; and disloyal.&lt;/p&gt;

&lt;p&gt;An architect, however, is a different creature. He stays with the project
even after it runs out of funds, loses the last programmer, and
proves that the architecture is a total mess that can&amp;#39;t handle even
a fraction of the traffic it was supposed to work under. The architect
stays and says &amp;quot;No worries, we&amp;#39;ll get through, no matter what!&amp;quot;
How to find such a guy and how to motivate him are different questions,
maybe for another blog post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He Is Disciplined.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Design patterns, quality of code, static analysis, unit testing,
high performance, reliability, security and even maintainability are all
very important things to worry about. However, a good architect knows that
all these can be resolved and achieved by programmers, if they are properly
hired, motivated, organized and controlled. How to hire, motivate, organize
and control them&amp;mdash;that&amp;#39;s what a good architect worries about.&lt;/p&gt;

&lt;p&gt;He knows that process comes first, people next.&lt;/p&gt;

&lt;p&gt;However, this is not what most software experts think. For example,
according to Alistair Cockburn&amp;#39;s article &lt;a href=&quot;https://ieeexplore.ieee.org/document/963450/&quot;&gt;&lt;em&gt;Agile Software Development: The People Factor&lt;/em&gt;&lt;/a&gt;
published in IEEE Computer in 2001:
&amp;quot;If the people on the project are good
enough, they can use almost any process
and accomplish their assignment. If they
are not good enough, no process will
repair their inadequacy&amp;mdash;&amp;#39;people trump
process&amp;#39; is one way to say this.&amp;quot; It is acceptable if a programmer
thinks like that, but not an architect.&lt;/p&gt;

&lt;p&gt;An architect puts discipline on top of everything else, constantly inventing
new &lt;a href=&quot;/2015/10/13/competition-without-rules.html&quot;&gt;rules&lt;/a&gt;
and enforcing them. Moreover, he is not only making others obey,
but also following the rules himself. Here, for example, are the rules to enforce:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No changes without a code review;&lt;/li&gt;
&lt;li&gt;Every idea starts with a ticket;&lt;/li&gt;
&lt;li&gt;The master branch is &lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;read only&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Static analysis is &lt;a href=&quot;/2018/01/16/educational-aspect-of-static-analysis.html&quot;&gt;mandatory&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;No &lt;a href=&quot;/2016/06/27/singletons-must-die.html&quot;&gt;singletons&lt;/a&gt;,
no &lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getter/setters&lt;/a&gt;,
and &lt;a href=&quot;/2016/02/03/design-patterns-and-anti-patterns.html&quot;&gt;so on&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Unit testing is mandatory for all new changes;&lt;/li&gt;
&lt;li&gt;No &lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;informal discussions&lt;/a&gt; outside of tickets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each project has its own set of rules. The list above is a subset of what we
have on our projects at &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;. A good
architect thinks about the rules first and about the architecture second.&lt;/p&gt;

&lt;p&gt;I totally agree with Len Bass that
&amp;quot;the architecture should be the product of a single architect,&amp;quot;
as he said in his book &lt;a href=&quot;https://amzn.to/2MvHgFY&quot;&gt;&lt;em&gt;Software Architecture in Practice&lt;/em&gt;&lt;/a&gt;.
The question, however, is how exactly the architect will create the
product: either in solo mode, making all technical decisions alone,
or letting the team contribute in an organized and disciplined manner.
The former is easy but less effective, the latter is way more difficult,
but leads to much stronger solutions and better team synergy (I hate this word,
but here it fits well).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He Is Strong.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Matthew McBride said in his article
&lt;a href=&quot;https://cacm.acm.org/magazines/2007/5/5663-the-software-architect/abstract&quot;&gt;&lt;em&gt;The Software Architect&lt;/em&gt;&lt;/a&gt;,
published in CACM in 2007, that
&amp;quot;Without strong supervision from the software architect,
projects and attempted solutions tend to fall apart due to the
weight of unmitigated complexity.&amp;quot; The word &lt;em&gt;strong&lt;/em&gt; is what is important
to emphasize here.&lt;/p&gt;

&lt;p&gt;What does strength mean in this context? An ability to stay in the office two days
straight with just pizza and cola? An ability to multiply six-digit numbers
in memory? An ability to memorize the purpose and design of all classes
and methods? An ability to stay in a meeting with investors for three hours
without checking Facebook even once? Not likely.&lt;/p&gt;

&lt;p&gt;The strength of an architect is in the ability to say &amp;quot;No&amp;quot; when it&amp;#39;s difficult to do so.
For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;No, I will &lt;a href=&quot;/2015/02/09/serious-code-reviewer.html&quot;&gt;not merge&lt;/a&gt; your pull request&amp;quot;;&lt;/li&gt;
&lt;li&gt;&amp;quot;No, we will not implement this feature&amp;quot;;&lt;/li&gt;
&lt;li&gt;&amp;quot;No, you do not deserve a promotion yet&amp;quot;;&lt;/li&gt;
&lt;li&gt;&amp;quot;No, your code is not as good as we expect&amp;quot;;&lt;/li&gt;
&lt;li&gt;&amp;quot;No, this build is not stable enough to be released&amp;quot;;&lt;/li&gt;
&lt;li&gt;&amp;quot;No, you will not go on vacation this month.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many other instances of &amp;quot;No&amp;quot; which can easily turn an architect into
a hated figure, but this is what his job is: to be the bad guy. This is why
he has to be strong&amp;mdash;to handle it all calmly and continue leading
the project forward, toward his own well-defined technical goals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He Is Abstract.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Abstract thinking is a very important positive trait of an architect.
Programmers may lack that, since they are mostly focused on their own
&lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;isolated tasks&lt;/a&gt;.
An architect must think globally and see the product
as a whole. Details are less important. He must rely on his people
when talking about details.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He Is Social.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Software is a product of people. No matter how great the architect is,
if he can&amp;#39;t find the right people to implement his ideas and to bring
back new ideas, he is doomed to fail. The key quality of the architect
is the ability to work with people: recruit, motivate, and control their
results. &lt;a href=&quot;/2018/01/23/sociotech-skills.html&quot;&gt;Social skills&lt;/a&gt;
are what an architect needs in order to be
successful in that, especially in finding new programmers and engaging
them on the project. What exactly does this mean? Well, here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High visibility in social networks;&lt;/li&gt;
&lt;li&gt;A long list of previous projects and teams;&lt;/li&gt;
&lt;li&gt;Active membership in professional groups;&lt;/li&gt;
&lt;li&gt;Publicity in the blogosphere.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, a good architect is the one with a big group of
followers and supporters around him. I mentioned that in my recent
talk &lt;a href=&quot;https://www.youtube.com/watch?v=GS45LzE3LPQ&quot;&gt;&lt;em&gt;How Much Do You Cost?&lt;/em&gt;&lt;/a&gt; at
&lt;a href=&quot;http://jeeconf.com/speaker/yegor-bugayenko-2/&quot;&gt;JEEConf 2017&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He Is Brave.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A good architect says many times a day: &amp;quot;It is my fault.&amp;quot;
If an architect doesn&amp;#39;t have a habit of saying that frequently, he is not
a good architect. He is just a programmer who is afraid of responsibility
and authority.&lt;/p&gt;

&lt;p&gt;The golden rule of a good manager is: &amp;quot;Success is yours, faults are mine.&amp;quot;
This is the attitude a good architect has to express to his team.
When they win, he will always find a way to celebrate and reward them.
When they fail, he will take full responsibility for the failure.
Because it&amp;#39;s his team, he found them, he motivated them, he controlled them,
and he didn&amp;#39;t punish them properly. That&amp;#39;s why they failed. First of all,
it&amp;#39;s his fault.&lt;/p&gt;

&lt;p&gt;What will he do with this fault is a separate question. Maybe he will
train and coach someone, maybe he&amp;#39;ll enforce some rules more aggressively, maybe
he will even &lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;give someone his card&lt;/a&gt;.
It&amp;#39;s up to the architect. But for the
outside world he will always be the guilty one and the team must know that.
If they know that, they will do everything to not let the architect down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He Is Simple.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;quot;Simplicity is a great virtue,&amp;quot; said Edsger Dijkstra in 1984.
For a programmer it&amp;#39;s a virtue, for an architect it&amp;#39;s a survival skill.
An architect who can&amp;#39;t explain his ideas in simple words, easily
understood by other programmers, is not an architect. No matter how
smart he is, no matter how bright his ideas are. If they can&amp;#39;t be
delivered in a simple form, they are worth nothing.&lt;/p&gt;

&lt;p&gt;&amp;quot;If I don&amp;#39;t understand you, it&amp;#39;s your fault&amp;quot;
&lt;a href=&quot;/2015/06/29/simple-diagrams.html&quot;&gt;said&lt;/a&gt; Yegor Bugayenko in 2015.
A good architect remembers that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He Is Coding.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Anthony Langsworth in his piece
&lt;a href=&quot;https://goo.gl/vGN61n&quot;&gt;&lt;em&gt;Should Software Architects Write Code?&lt;/em&gt;&lt;/a&gt; argues
in favor of code-writing architects and in particular says that
&amp;quot;Understanding code means the architect can use his or her judgment
more effectively rather than rely on which developer is more persuasive.&amp;quot;
Indeed, an architect that is only capable of talking and
&lt;a href=&quot;/2015/06/29/simple-diagrams.html&quot;&gt;drawing&lt;/a&gt;
is a weak architect that will sooner or later let the team and the
project down.&lt;/p&gt;

&lt;p&gt;How much code the architect has to write, depends on the age of the project.
When the project is young and is still in the phase of prototyping,
the architect produces the majority of code. Then, later, when the product
matures, the architect steps away and mostly reviews the contribution
of programmers. Eventually, when the project migrates into the maintenance phase,
the architect may quit the project and transfer his responsibilities to
one of the programmers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He Is Ambitious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An architect does want to get something in addition to money. He wants to
be the smartest guy in the room, he wants to solve complex tasks
nobody else has been able to solve before, he wants to save the world.
He wants all of that to be appreciated and rewarded. He wants to be number one.
In most cases he fails miserably. But he always gets back on his feet
and tries again. Look for the guy with ambitions if you want to hire
an architect, not just yet another programmer.&lt;/p&gt;

&lt;p&gt;Michael Keeling, in his recent book
&lt;a href=&quot;https://amzn.to/2tgR8uv&quot;&gt;&lt;em&gt;Design It!: From Programmer to Software Architect&lt;/em&gt;&lt;/a&gt; (worth reading), says:
&amp;quot;On some teams, architect is an official team role. On other teams,
there is no explicit role and teammates share the architect&amp;#39;s
responsibilities. Some teams say they don&amp;#39;t have an architect, but
if you look closely, someone is fulfilling the architect&amp;#39;s
duties without realizing it. If your team doesn&amp;#39;t have an architect, congratulations,
you&amp;#39;ve got the job!&amp;quot;&lt;/p&gt;

&lt;p&gt;Michael&amp;#39;s point is that the architect&amp;#39;s position is rarely given to someone
voluntarily. Instead, an architect has to fight for it and
demand it. Sometimes even going straight ahead and saying &amp;quot;I want to be
the architect!&amp;quot;&lt;/p&gt;

&lt;p&gt;What is important is that it will not sound like &amp;quot;I want to architect this.&amp;quot;
That would be the voice of a programmer, not an architect.
An architect wants to be a man of power, not just a smart technical engineer.
So, it&amp;#39;s way more about a title for him, rather that just his actual responsibilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He Is Expensive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Yes, the money question &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;again&lt;/a&gt;.
A good architect is expensive.
If he is not, he is not a good architect.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="architect" /><summary type="html">Over twenty five years ago, in 1992, at an OOPSLA workshop in Vancouver,
Kent Beck, in answer to the question
&amp;quot;What is an architect?&amp;quot; said, according to Philippe Kruchten,
that it is &amp;quot;a new pompous title that programmers demand to have on their business cards
to justify their sumptuous emoluments.&amp;quot;
Not much has changed since then.
There is a big difference between a smart programmer and a project architect.
Here is a list of traits that, I believe, a good architect has.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/06/no-country-for-old-men.jpg" /></entry><entry><title type="html">Simplified GitHub Login for a Ruby Web App</title><link href="https://www.yegor256.com/2018/06/19/glogin.html" rel="alternate" type="text/html" title="Simplified GitHub Login for a Ruby Web App" /><published>2018-06-19T00:00:00+00:00</published><updated>2018-06-19T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/06/19/glogin</id><content type="html" xml:base="https://www.yegor256.com/2018/06/19/glogin.html">&lt;p&gt;You know what &lt;a href=&quot;https://en.wikipedia.org/wiki/OAuth&quot;&gt;OAuth&lt;/a&gt;
login is, right? It&amp;#39;s when your users click &amp;quot;login&amp;quot;
and get redirected to Facebook, Twitter, Google, or some other
website which then identifies them. Then they go back to your website and you
know who they are. It&amp;#39;s very convenient for them. It&amp;#39;s convenient for you
too, since you don&amp;#39;t need to implement the login functionality and don&amp;#39;t
need to keep their credentials in a database. I created a simple
&lt;a href=&quot;https://github.com/yegor256/glogin&quot;&gt;Ruby gem&lt;/a&gt;
to simplify this operation for GitHub only. Here is how it works.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;The Savages (2007) by Tamara Jenkins&#39; src=&#39;/images/2018/06/savages.jpg&#39; longdesc=&#39;#0d3acec9&#39;/&gt;&lt;figcaption id=&#39;0d3acec9&#39;&gt;The Savages (2007) by Tamara Jenkins&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, you will have to register your application in GitHub,
as &lt;a href=&quot;https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/&quot;&gt;this page&lt;/a&gt;
explains. This is how it works with
&lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt;,
but you can do something similar in any framework.&lt;/p&gt;

&lt;p&gt;First, somewhere in the global space, before the app starts:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;glogin&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:glogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# You get this from GitHub, when you register your&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# web application:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Make sure this value is coming from a secure&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# place and is NOT visible in the source code:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This is what you will register in GitHub as an&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# authorization callback URL:&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://www.example.com/github-callback&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, for all web pages we need to parse a cookie, if it exists,
and convert it into a user:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra/cookies&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/*&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:glogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Closed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:glogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# This must be some long text to be used to&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# encrypt the value in the cookie:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;encryption_secret&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_user&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OpenSSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cipher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CipherError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Nothing happens here, the user is not logged in.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:glogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the &lt;code&gt;glogin&lt;/code&gt; cookie comes in and contains valid data,
a local variable &lt;code&gt;@user&lt;/code&gt; will be set to something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;yegor256&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://...&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need a URL for GitHub OAuth callback:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/github-callback&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:glogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The same encryption secret that we were using above:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encryption_secret&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we need a logout URL:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/logout&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:glogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One more thing is the login URL you will need for your front page. Here
it is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login_uri&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For unit testing you can just provide an empty string as a &lt;code&gt;secret&lt;/code&gt; for
&lt;code&gt;GLogin::Cookie::Open&lt;/code&gt; and &lt;code&gt;GLogin::Cookie::Closed&lt;/code&gt; and the encryption will be disabled:
whatever comes from the cookie will be trusted. For testing
it will be convenient to provide a user name in a query string, like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;http://localhost:9292/?glogin=tester
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To enable that, it&amp;#39;s recommended you add this line (see how
it works in &lt;a href=&quot;https://github.com/zold-io/wts.zold.io&quot;&gt;zold-io/wts.zold.io&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra/cookies&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/*&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:glogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:glogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:glogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:glogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# same as above&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use this gem in
&lt;a href=&quot;https://github.com/yegor256/sixnines&quot;&gt;sixnines&lt;/a&gt;,
&lt;a href=&quot;https://github.com/yegor256/0pdd&quot;&gt;0pdd&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/zold-io/wts.zold.io&quot;&gt;Zold&lt;/a&gt;
web apps on top of Sinatra (all open source).&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="ruby" /><summary type="html">You know what OAuth
login is, right? It&amp;#39;s when your users click &amp;quot;login&amp;quot;
and get redirected to Facebook, Twitter, Google, or some other
website which then identifies them. Then they go back to your website and you
know who they are. It&amp;#39;s very convenient for them. It&amp;#39;s convenient for you
too, since you don&amp;#39;t need to implement the login functionality and don&amp;#39;t
need to keep their credentials in a database. I created a simple
Ruby gem
to simplify this operation for GitHub only. Here is how it works.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/06/savages.jpg" /></entry><entry><title type="html">Object Validation: to Defer or Not?</title><link href="https://www.yegor256.com/2018/05/29/object-validation.html" rel="alternate" type="text/html" title="Object Validation: to Defer or Not?" /><published>2018-05-29T00:00:00+00:00</published><updated>2018-05-29T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/05/29/object-validation</id><content type="html" xml:base="https://www.yegor256.com/2018/05/29/object-validation.html">&lt;!-- https://www.yegor256.com/2015/05/07/ctors-must-be-code-free.html#comment-3903379622 --&gt;

&lt;p&gt;I &lt;a href=&quot;/2015/05/07/ctors-must-be-code-free.html&quot;&gt;said earlier&lt;/a&gt;
that constructors must be code-free and do nothing
aside from attribute initialization. Since then, the most frequently
asked &lt;a href=&quot;https://www.yegor256.com/2015/05/07/ctors-must-be-code-free.html#comment-3903379622&quot;&gt;question&lt;/a&gt;
is: What about validation of arguments? If they are &amp;quot;broken,&amp;quot;
what is the point of creating an object in an &amp;quot;invalid&amp;quot; state?
Such an object will fail later, at an unexpected moment. Isn&amp;#39;t it
better to throw an exception at the very moment of instantiation? To fail fast,
so to speak? Here is what I think.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Punching the Clown (2009) by Gregori Viens&#39; src=&#39;/images/2018/05/punching-the-clown.jpg&#39; longdesc=&#39;#ec207931&#39;/&gt;&lt;figcaption id=&#39;ec207931&#39;&gt;Punching the Clown (2009) by Gregori Viens&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s start with this Ruby code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&amp;amp;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can use it to read a list of users from a file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;names&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are a number of ways to abuse this class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pass &lt;code&gt;nil&lt;/code&gt; to the ctor instead of a file name;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pass something else, which is not &lt;code&gt;String&lt;/code&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pass a file that doesn&amp;#39;t exist;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pass a directory instead of a file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you see the difference between these four mistakes we can make?
Let&amp;#39;s see how our class can protect itself from each of them:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;File name can&amp;#39;t be nil&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#{@file} is absent&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#{@file} is not a file&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&amp;amp;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first two potential mistakes were filtered out
in the constructor, while the other two&amp;mdash;later, in the method.
Why did I do it this way? Why not put all of them into the constructor?&lt;/p&gt;

&lt;p&gt;Because the first two compromise &lt;a href=&quot;/2014/12/09/immutable-object-state-and-behavior.html&quot;&gt;object state&lt;/a&gt;,
while with the other two&amp;mdash;its runtime behavior. You remember that an
&lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;object&lt;/a&gt; is a representative of
a set of other objects it encapsulates, called attributes. The object of
class &lt;code&gt;Users&lt;/code&gt; can&amp;#39;t &lt;em&gt;represent&lt;/em&gt; &lt;code&gt;nil&lt;/code&gt; or a number. It can only represent
a file with a name of type &lt;code&gt;String&lt;/code&gt;. On the other hand, what that file
contains and whether it really is a file&amp;mdash;doesn&amp;#39;t make the state invalid.
It only causes trouble for the behavior.&lt;/p&gt;

&lt;p&gt;Even though the difference may look subtle, it&amp;#39;s obvious. There are
two phases of interaction with the encapsulated object: &lt;em&gt;connecting&lt;/em&gt; and &lt;em&gt;talking&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First, we encapsulate the &lt;code&gt;file&lt;/code&gt; and want to be sure that it really is
a file. We are not yet talking to it, we don&amp;#39;t want it to work for us yet,
we just want to make sure it really &lt;em&gt;is&lt;/em&gt; an object that we will be able to talk
to in the near future. If it&amp;#39;s &lt;code&gt;nil&lt;/code&gt; or a &lt;code&gt;float&lt;/code&gt;, we will have problems
in the future, for sure. That&amp;#39;s why we raise an exception from the constructor.&lt;/p&gt;

&lt;p&gt;Then the second phase is talking, where we delegate control to the object
and expect it to behave correctly. At this phase we may have other validation
procedures, in order to make sure our interaction will go smoothly.
It&amp;#39;s important to mention that these validations are very situational.
We may call &lt;code&gt;names()&lt;/code&gt; multiple times and every time have a different
situation with the file on disc. To begin with it may not exist, while in a few seconds
it will be ready and available for reading.&lt;/p&gt;

&lt;p&gt;Ideally, a programming language should provide instruments for the first
type of validations, for example with &lt;a href=&quot;https://en.wikipedia.org/wiki/Strong_and_weak_typing&quot;&gt;strict typing&lt;/a&gt;.
In Java, for example,
we would not need to check the type of &lt;code&gt;file&lt;/code&gt;, the compiler would catch
that error earlier. In Kotlin we would be able to get rid of the NULL
check, thanks to their &lt;a href=&quot;https://kotlinlang.org/docs/reference/null-safety.html&quot;&gt;Null Safety&lt;/a&gt; feature.
Ruby is less powerful than those languages, that&amp;#39;s why we have to validate &amp;quot;manually.&amp;quot;&lt;/p&gt;

&lt;p&gt;Thus, to summarize, validating in constructors is &lt;em&gt;not&lt;/em&gt; a bad idea, provided
the validations are &lt;em&gt;not touching the objects&lt;/em&gt; but only confirm that they are
good enough to work with later.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">I said earlier
that constructors must be code-free and do nothing
aside from attribute initialization. Since then, the most frequently
asked question
is: What about validation of arguments? If they are &amp;quot;broken,&amp;quot;
what is the point of creating an object in an &amp;quot;invalid&amp;quot; state?
Such an object will fail later, at an unexpected moment. Isn&amp;#39;t it
better to throw an exception at the very moment of instantiation? To fail fast,
so to speak? Here is what I think.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/05/punching-the-clown.jpg" /></entry><entry><title type="html">One More Recipe Against NULL</title><link href="https://www.yegor256.com/2018/05/22/default-arguments-against-null.html" rel="alternate" type="text/html" title="One More Recipe Against NULL" /><published>2018-05-22T00:00:00+00:00</published><updated>2018-05-22T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/05/22/default-arguments-against-null</id><content type="html" xml:base="https://www.yegor256.com/2018/05/22/default-arguments-against-null.html">&lt;p&gt;You know what NULL is, right? It&amp;#39;s
&lt;a href=&quot;https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&quot;&gt;evil&lt;/a&gt;.
In OOP, your method can return NULL,
it can accept NULL as an argument, your object can encapsulate it as an attribute,
or you can assign it to a variable.
All four scenarios are bad for the maintainability of your code&amp;mdash;there
are no doubts about that.
The question is what to do instead. Let&amp;#39;s discuss the &amp;quot;return it&amp;quot; part and
I will suggest one more &amp;quot;best practice&amp;quot; on top of what
&lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;was discussed&lt;/a&gt; a few years ago.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Snatch (2000) by Guy Ritchie&#39; src=&#39;/images/2018/05/snatch.jpg&#39; longdesc=&#39;#7fe602d0&#39;/&gt;&lt;figcaption id=&#39;7fe602d0&#39;&gt;Snatch (2000) by Guy Ritchie&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Look at this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Calculate the maximum of all&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// items and return it.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What should this method do if the list is empty?
Java&amp;#39;s &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#max-java.util.Collection-&quot;&gt;&lt;code&gt;Collections.max()&lt;/code&gt;&lt;/a&gt;
throws an exception.
Ruby&amp;#39;s &lt;a href=&quot;https://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-max&quot;&gt;&lt;code&gt;Enumerable.max()&lt;/code&gt;&lt;/a&gt;
returns &lt;code&gt;nil&lt;/code&gt;.
PHP&amp;#39;s &lt;a href=&quot;http://php.net/manual/en/function.max.php&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;
returns &lt;code&gt;FALSE&lt;/code&gt;.
Python&amp;#39;s &lt;a href=&quot;https://docs.python.org/3/library/functions.html#max&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;
raises an exception.
C#&amp;#39;s &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb335614(v=vs.110).aspx&quot;&gt;&lt;code&gt;Enumerable.Max()&lt;/code&gt;&lt;/a&gt;
also throws an exception.
JavaScript&amp;#39;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max&quot;&gt;&lt;code&gt;Math.max()&lt;/code&gt;&lt;/a&gt;
returns &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Which is the right way, huh? An exception, NULL, false or NaN?&lt;/p&gt;

&lt;p&gt;An exception, if you ask me.&lt;/p&gt;

&lt;p&gt;But there is yet another approach, which is better than an exception. This one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Calculate the maximum of all&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// items and return it. Returns &amp;#39;def&amp;#39; if the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// list is empty.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &amp;quot;default&amp;quot; object will be returned if the list is empty. This feature
is implemented in Python&amp;#39;s &lt;a href=&quot;https://docs.python.org/3/library/functions.html#max&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt; function:
it&amp;#39;s possible to pass both a list and a default element to return in case the list
is empty. If the default element is not provided, the exception will be raised.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">You know what NULL is, right? It&amp;#39;s
evil.
In OOP, your method can return NULL,
it can accept NULL as an argument, your object can encapsulate it as an attribute,
or you can assign it to a variable.
All four scenarios are bad for the maintainability of your code&amp;mdash;there
are no doubts about that.
The question is what to do instead. Let&amp;#39;s discuss the &amp;quot;return it&amp;quot; part and
I will suggest one more &amp;quot;best practice&amp;quot; on top of what
was discussed a few years ago.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/05/snatch.jpg" /></entry><entry><title type="html">An Open Code Base Is Not Yet an Open Source Project</title><link href="https://www.yegor256.com/2018/05/08/open-source-attributes.html" rel="alternate" type="text/html" title="An Open Code Base Is Not Yet an Open Source Project" /><published>2018-05-08T00:00:00+00:00</published><updated>2018-05-08T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/05/08/open-source-attributes</id><content type="html" xml:base="https://www.yegor256.com/2018/05/08/open-source-attributes.html">&lt;p&gt;A few weeks ago someone &lt;a href=&quot;https://www.yegor256.com/2018/04/10/learning-by-refactoring.html#comment-3865410512&quot;&gt;suggested&lt;/a&gt;
I should try to integrate &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;&amp;#39;s
static analysis rules into
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;Qulice&lt;/a&gt;,
our aggregator of
&lt;a href=&quot;http://checkstyle.sourceforge.net/&quot;&gt;Checkstyle&lt;/a&gt;,
&lt;a href=&quot;http://pmd.sourceforge.net/&quot;&gt;PMD&lt;/a&gt;,
&lt;a href=&quot;http://findbugs.sourceforge.net/&quot;&gt;FindBugs&lt;/a&gt;,
and some other analyzers. I do love IDEA&amp;#39;s rules&amp;mdash;some of them are
unique and very useful. I asked whether I could find them somewhere in
Maven Central (they are written in Java) and the answer was &amp;quot;You&amp;#39;ll have to figure
out yourself how to use them, but they are open source.&amp;quot;
Here comes my opinion about this
situation: I believe that open source doesn&amp;#39;t just mean the code is readable
without authorization. It means something much bigger.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Her (2013) by Spike Jonze&#39; src=&#39;/images/2018/05/her.jpg&#39; longdesc=&#39;#c478dfc9&#39;/&gt;&lt;figcaption id=&#39;c478dfc9&#39;&gt;Her (2013) by Spike Jonze&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Just making a piece of code publicly accessible is not what it takes to call
it &lt;em&gt;open source&lt;/em&gt; software. Actually, it only harms the product, and the
reputation of its author, if it&amp;#39;s open but not ready for &lt;em&gt;reuse&lt;/em&gt; (which
is what &lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;the open source world&lt;/a&gt;
is all about). As &lt;a href=&quot;https://en.wikipedia.org/wiki/Eric_S._Raymond&quot;&gt;Eric Raymond&lt;/a&gt; said in his
famous piece &lt;a href=&quot;https://amzn.to/2FKF9tv&quot;&gt;&lt;em&gt;The Cathedral and the Bazaar&lt;/em&gt;&lt;/a&gt;,
&amp;quot;Good programmers know what to write. Great ones know what to rewrite (and reuse).&amp;quot;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s the responsibility of the software product&amp;#39;s author to help
those &amp;quot;good&amp;quot; programmers to reuse the code. Coding, testing, debugging,
and making sure &amp;quot;it works on my laptop&amp;quot; is one thing. Making it readable and reusable
is a totally different piece of work, which may take much more time.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;https://en.wikipedia.org/wiki/Karl_Fogel&quot;&gt;Karl Fogel&lt;/a&gt;
said in &lt;a href=&quot;https://amzn.to/2jyMrrF&quot;&gt;&lt;em&gt;Producing Open Source Software&lt;/em&gt;&lt;/a&gt;:
&amp;quot;Most free software projects fail.&amp;quot; They fail (on top of many other factors) because not enough
attention is paid to the following basic things (in no particular
order):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;README&lt;/strong&gt;.
I&amp;#39;m sure you host your product on GitHub. (If not, what&amp;#39;s wrong with you?)
There must be a &lt;code&gt;README.md&lt;/code&gt; file in the root directory that
explains what the product is all about and how we should use it.
A few good examples:
&lt;a href=&quot;https://github.com/leejarvis/slop/blob/master/README.md&quot;&gt;&lt;code&gt;leejarvis/slop&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://github.com/mongobee/mongobee/blob/master/README.md&quot;&gt;&lt;code&gt;mongobee/mongobee&lt;/code&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/ronmamo/reflections/blob/master/README.md&quot;&gt;&lt;code&gt;ronmamo/reflections&lt;/code&gt;&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/yegor256/takes/blob/master/README.md&quot;&gt;&lt;code&gt;yegor256/takes&lt;/code&gt;&lt;/a&gt; (this one is mine).
A few bad examples:
&lt;a href=&quot;https://github.com/qos-ch/slf4j/blob/master/README.md&quot;&gt;&lt;code&gt;qos-ch/slf4j&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rzwitserloot/lombok/blob/master/README&quot;&gt;&lt;code&gt;rzwitserloot/lombok&lt;/code&gt;&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/junit-team/junit4/blob/master/README.md&quot;&gt;&lt;code&gt;junit4/blob&lt;/code&gt;&lt;/a&gt; (don&amp;#39;t be like these guys).&lt;/p&gt;

&lt;p&gt;No matter how rich you&amp;#39;ve made your website, Javadoc, Wiki, mailing
list, and Twitter, the README is the place where we expect
to see everything. Only if and when we get interested will we investigate
further and deeper. Read the README files in other projects and copy
their best ideas. README is your showcase, it must shine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;License&lt;/strong&gt;.
Most of us don&amp;#39;t pay attention to &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_license&quot;&gt;this bureaucracy&lt;/a&gt;.
I didn&amp;#39;t either, until recently.
I thought that the moment my code is open I can forget about any
rights and royalties. They will just use my code and I won&amp;#39;t
see any profit, ever. The license I attach to it won&amp;#39;t matter&amp;mdash;nobody
reads it anyway. This is exactly what happens in most cases.
But only while those users are small potatoes.&lt;/p&gt;

&lt;p&gt;A few years ago I was an architect on a software project and we had to create
an analyzer of hardware components, like CPU, memory, hard disc, etc. We had
to make sure all of them worked as expected after running pretty complex
and customized tests. My obvious suggestion was to use open source tools,
which would do the hard work for us. We would only have to integrate them.
It was an awesome idea, until some of us decided to check the licenses of
those tools.&lt;/p&gt;

&lt;p&gt;That was the moment I realized that I was so wrong for not paying attention
to what licenses say. &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_General_Public_License&quot;&gt;GPL&lt;/a&gt;,
for example, which we found in a few tools,
didn&amp;#39;t allow us to reuse the code if our product wasn&amp;#39;t open source too.
Since we were creating proprietary software, we understood that we weren&amp;#39;t able to
use &lt;a href=&quot;https://en.wikipedia.org/wiki/Copyleft&quot;&gt;copyleft&lt;/a&gt; modules,
only
&lt;a href=&quot;https://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/BSD_licenses&quot;&gt;BSD&lt;/a&gt; or similar.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m suggesting you think about the license before publishing the
product. I&amp;#39;ve used &lt;a href=&quot;https://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT&lt;/a&gt;
in all my products since 2016.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distribution&lt;/strong&gt;.
A mere collection of &lt;code&gt;.rb&lt;/code&gt; files is not reusable Ruby code. Well, maybe for
those &lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;hackers&lt;/a&gt;
I despise so much, it is. But for professional
&lt;a href=&quot;/2018/01/23/sociotech-skills.html&quot;&gt;developers&lt;/a&gt;,
who are too &lt;a href=&quot;/2018/04/17/how-to-be-lazy.html&quot;&gt;lazy&lt;/a&gt;
to read their own code, let alone someone else&amp;#39;s,
it definitely isn&amp;#39;t.&lt;/p&gt;

&lt;p&gt;&amp;quot;Take it from GitHub&amp;quot; is not a polite way to treat us&amp;mdash;your fellow programmers&amp;mdash;anymore.
It was, twenty years ago, but now we have repositories.
You have to distribute your product as an &amp;quot;artifact&amp;quot; through one of those public
repositories, and make it possible for us to fetch it
from there, skipping the testing and packaging, and just using it as a product
(a Ruby gem or Java JAR, for example).&lt;/p&gt;

&lt;p&gt;I&amp;#39;m talking about repositories like
&lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven Central&lt;/a&gt;,
&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npmjs&lt;/a&gt;,
or &lt;a href=&quot;https://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt;.
You have to find a way to deploy your product there.
It&amp;#39;s not an easy task, even though those repositories
do their best to simplify the process. We use
&lt;a href=&quot;/2014/09/11/deployment-script-vs-rultor.html&quot;&gt;Rultor&lt;/a&gt; in all our projects,
which helps us streamline the deployment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yegor256/takes&quot;&gt;yegor256/takes&lt;/a&gt; to Maven Central
(&lt;a href=&quot;/2014/08/19/how-to-release-to-maven-central.html&quot;&gt;details&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yegor256/xcop&quot;&gt;yegor256/xcop&lt;/a&gt; to RubyGems
(&lt;a href=&quot;/2014/08/26/publish-to-rubygems.html&quot;&gt;details&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yegor256/tacit&quot;&gt;yegor256/tacit&lt;/a&gt; to npmjs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Package_manager&quot;&gt;Package managers&lt;/a&gt;
like Maven, NPM, Rake, Grunt, Gradle and
&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_software_package_management_systems&quot;&gt;others&lt;/a&gt;,
are the standard and traditional way of reusing open source software (proprietary too).
If your product is not available in a public repository, it&amp;#39;s not a product;
it&amp;#39;s just a code base.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Javadoc&lt;/strong&gt;.
We all hate writing documentation. And we hate libraries that are not
documented. I usually find it boring to write Javadoc blocks for my classes,
but I understand that without them the code I&amp;#39;m writing inside
those classes will not interest anyone.&lt;/p&gt;

&lt;p&gt;The best format for those Javadoc blocks is &amp;quot;by example.&amp;quot; Instead of prose
I&amp;#39;d recommend you demonstrate how to use the class, especially in combination
with it neighbors. Moreover, I&amp;#39;d suggest you &lt;em&gt;don&amp;#39;t&lt;/em&gt; write documentation
anywhere else apart from those Javadoc blocks. (They exist in other
languages too, but have different names.)&lt;/p&gt;

&lt;p&gt;The problem with Javadoc is that it&amp;#39;s not so easy to format the text
so that it looks visually attractive. Maybe that&amp;#39;s why many programmers
still rely on Wikis or project websites. I&amp;#39;d recommend you stay inside
Javadoc blocks and learn their formatting syntax.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Badges&lt;/strong&gt;.
As &lt;a href=&quot;https://github.com/yegor256/takes&quot;&gt;you can see&lt;/a&gt;, I like badges. First and foremost
they make a repository look as if it&amp;#39;s being &amp;quot;actively maintained,&amp;quot; especially
if those badges are green. They don&amp;#39;t really deliver any valuable information.
They mostly say: &amp;quot;Our author has very good taste, see how perfectly
our colors match!&amp;quot;&lt;/p&gt;

&lt;p&gt;Jokes aside, it&amp;#39;s not so easy to add all those badges. Each badge will take you
some time, to integrate a third party system, to make sure the numbers
are good enough to be proud of, and to keep it under control. If the
repository is not being watched over, the badges will eventually start failing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous Integration&lt;/strong&gt;.
In order to use your code we have to trust it, meaning that we have to
be sure that it works, or at least passes automated tests. (Do I have to say that
you must have tests?) How can we be sure it works? &lt;a href=&quot;/2014/10/05/ten-hosted-continuous-integration-services.html&quot;&gt;CI&lt;/a&gt;
is the answer. We must be able
to see the logs of the recent CI build and make sure it is clean.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a matter of trust. You may never use those Travis builds and simply
ignore their red and green signals, but they are important for us&amp;mdash;your
clients. I add Travis badges to all projects of mine, right after I create
a new repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contribution Guidelines&lt;/strong&gt;.
For a regular GitHub addict it&amp;#39;s not a problem to figure out how to
send you a pull request. However, the majority of us, at least
initially, will consist of active users, not contributors. We will try
to use your product and will attempt to customize it for our needs.
If we get lost, we will leave, frustrated.&lt;/p&gt;

&lt;p&gt;To prevent this, you have to explain what a disciplined contributor
has to do in order to make changes to your code base. Here are
the questions I&amp;#39;d recommend you answer in your
&lt;a href=&quot;https://help.github.com/articles/setting-guidelines-for-repository-contributors/&quot;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do I run an automated build?&lt;/li&gt;
&lt;li&gt;How big/small does a pull request have to be in order to be accepted?&lt;/li&gt;
&lt;li&gt;What are your style guidelines?&lt;/li&gt;
&lt;li&gt;How do bugs have to be reported, tagged, explained?&lt;/li&gt;
&lt;li&gt;What makes a &lt;a href=&quot;/2018/04/24/right-way-to-report-bugs.html&quot;&gt;good bug report&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the text I
&lt;a href=&quot;https://blog.github.com/2016-02-17-issue-and-pull-request-templates/&quot;&gt;use&lt;/a&gt; in all my projects:
&lt;a href=&quot;https://github.com/yegor256/takes/blob/master/.github/ISSUE_TEMPLATE.md&quot;&gt;&lt;code&gt;ISSUE_TEMPLATE.md&lt;/code&gt;&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/yegor256/takes/blob/master/.github/PULL_REQUEST_TEMPLATE.md&quot;&gt;&lt;code&gt;PULL_REQUEST_TEMPLATE.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quality Wall&lt;/strong&gt;.
Finally, if you are lucky, we will use your product and will be interested
in contributing. You will start getting our pull requests. The question is how
fast we will ruin your code base. We will, if you don&amp;#39;t protect yourself.&lt;/p&gt;

&lt;p&gt;If you strictly review each pull request and reject anything that doesn&amp;#39;t
look like &amp;quot;great&amp;quot; code, you will lose us, your contributors. We don&amp;#39;t want
to write great code, we want to make changes to your product so that it
becomes more suitable for &lt;em&gt;our&lt;/em&gt; needs. The greatness of the code is &lt;em&gt;your&lt;/em&gt;
concern, not ours.&lt;/p&gt;

&lt;p&gt;On the other hand, if you accept whatever comes in, the architecture will lose its robustness
(if it ever had any) and you again will lose us, your contributors. This time
you will lose us because the product will become bad and difficult to
maintain and contribute to.&lt;/p&gt;

&lt;p&gt;The best way to keep the balance is to &amp;quot;hire&amp;quot; a tool to help you:
build automation, static analysis, automated tests, and coverage control.
You have to configure the product to fail when the changes someone
introduces violate its internal quality expectations.
I &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;use Rultor&lt;/a&gt; for that too.&lt;/p&gt;

&lt;p&gt;Did I forget anything?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="programming" /><summary type="html">A few weeks ago someone suggested
I should try to integrate IntelliJ IDEA&amp;#39;s
static analysis rules into
Qulice,
our aggregator of
Checkstyle,
PMD,
FindBugs,
and some other analyzers. I do love IDEA&amp;#39;s rules&amp;mdash;some of them are
unique and very useful. I asked whether I could find them somewhere in
Maven Central (they are written in Java) and the answer was &amp;quot;You&amp;#39;ll have to figure
out yourself how to use them, but they are open source.&amp;quot;
Here comes my opinion about this
situation: I believe that open source doesn&amp;#39;t just mean the code is readable
without authorization. It means something much bigger.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/05/her.jpg" /></entry><entry><title type="html">The Right Way to Report a Bug</title><link href="https://www.yegor256.com/2018/04/24/right-way-to-report-bugs.html" rel="alternate" type="text/html" title="The Right Way to Report a Bug" /><published>2018-04-24T00:00:00+00:00</published><updated>2018-04-24T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/04/24/right-way-to-report-bugs</id><content type="html" xml:base="https://www.yegor256.com/2018/04/24/right-way-to-report-bugs.html">&lt;p&gt;You know, at &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;, either you are a programmer or a tester,
and &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;we pay&lt;/a&gt;
for each bug you find and report. Well, not quite. We pay for
each bug report a project architect considers good enough to pay for.
The architect&amp;#39;s decision is totally subjective and non-disputable,
according to &lt;a href=&quot;http://www.zerocracy.com/policy.html#29&quot;&gt;Â§29&lt;/a&gt;
of the &lt;a href=&quot;http://www.zerocracy.com/policy.html&quot;&gt;Policy&lt;/a&gt;.
Some of our developers find this unfair and ask me to explain
how they can report bugs such that they are definitely paid.
Here is a non-exhaustive list of my recommendations.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Burn After Reading (2008) by Coen Brothers&#39; src=&#39;/images/2018/04/burn-after-reading.jpg&#39; longdesc=&#39;#d3a4c799&#39;/&gt;&lt;figcaption id=&#39;d3a4c799&#39;&gt;Burn After Reading (2008) by Coen Brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;To be honest, there are &lt;a href=&quot;https://www.google.com/search?q=how+to+write+good+bug+reports&quot;&gt;many articles&lt;/a&gt;
written before on this very subject. I will try not to repeat them. They
mostly say reasonable things, like
&amp;quot;be specific,&amp;quot;
&amp;quot;choose a strong title,&amp;quot;
&amp;quot;avoid duplicates,&amp;quot; and many others.
My recommendations here are more of a psychological nature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay cool&lt;/strong&gt;.
Don&amp;#39;t expect all of your bugs to be accepted and paid for.
Some of them won&amp;#39;t be.
This must not stop you from reporting them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exaggerate&lt;/strong&gt;.
No matter how minor the bug is, present it as if the entire world will
collapse tomorrow if they don&amp;#39;t fix it.
Of course, they will make their own decision about the priority and severity of the bug,
but don&amp;#39;t help them to make it against you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Victimize yourself&lt;/strong&gt;.
Don&amp;#39;t just say &amp;quot;the class is broken&amp;quot;&amp;mdash;there is no victim in this statement.
So, no need to save anyone&amp;#39;s life. The bug is minor&amp;mdash;no need to pay.
Instead, say &amp;quot;I can&amp;#39;t use the class.&amp;quot; Present yourself as a victim.
Or even better, represent a group of victims: &amp;quot;Nobody can really use this class.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Push them&lt;/strong&gt;.
If a bug report is not paid for, don&amp;#39;t hesitate to ask why.
Insist that it was a very important problem and you deserve to be paid.
If they still don&amp;#39;t pay, forget it and move on.
You must not look like it offends you somehow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Show efforts&lt;/strong&gt;.
The bug description must look &amp;quot;rich,&amp;quot; clearly demonstrating that
you invested a lot of effort in its creation. If there is just a single line,
it&amp;#39;s easier for them to not pay you&amp;mdash;they won&amp;#39;t feel any guilt.
However, if it&amp;#39;s long, detailed, properly formatted, and contains multiple supporting links,
they will feel bad if they don&amp;#39;t pay.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Look engaged&lt;/strong&gt;.
Say something like &amp;quot;I&amp;#39;m ready to investigate more and provide additional details,
if you need me too.&amp;quot; Of course you won&amp;#39;t do that (in most cases),
but you have to say it. This will look like you care and this bug comes
right from your heart. How can they not pay for it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Look altruistic&lt;/strong&gt;.
Don&amp;#39;t show them that you are reporting these bugs just to get money.
They know that anyway, but still.
Look like you care about the project and honestly want to help.
Say that you worry about the users, about the market, about the mission, about
the bigger scope, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aggregate&lt;/strong&gt;.
This may sound against the
&lt;a href=&quot;/2014/11/24/principles-of-bug-tracking.html&quot;&gt;principles&lt;/a&gt;
of bug tracking I suggested earlier,
but when your bugs are small and cosmetic&amp;mdash;aggregate them. In such a
case you have a chance to win. They will reject three minor bugs, but they
won&amp;#39;t reject a bigger one with three minor parts.&lt;/p&gt;

&lt;p&gt;I believe that if you follow these simple recommendations,
you will be a more successful bug reporter. At least at
&lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><category term="zerocracy" /><summary type="html">You know, at Zerocracy, either you are a programmer or a tester,
and we pay
for each bug you find and report. Well, not quite. We pay for
each bug report a project architect considers good enough to pay for.
The architect&amp;#39;s decision is totally subjective and non-disputable,
according to Â§29
of the Policy.
Some of our developers find this unfair and ask me to explain
how they can report bugs such that they are definitely paid.
Here is a non-exhaustive list of my recommendations.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/04/burn-after-reading.jpg" /></entry><entry><title type="html">How to Be Lazy and Stay Calm</title><link href="https://www.yegor256.com/2018/04/17/how-to-be-lazy.html" rel="alternate" type="text/html" title="How to Be Lazy and Stay Calm" /><published>2018-04-17T00:00:00+00:00</published><updated>2018-04-17T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/04/17/how-to-be-lazy</id><content type="html" xml:base="https://www.yegor256.com/2018/04/17/how-to-be-lazy.html">&lt;p&gt;What frustrates me most in my profession of software development
is the regular necessity to understand large problem scopes before fixing
small bugs, especially if the code is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Legacy_code&quot;&gt;legacy&lt;/a&gt; and not mine. Actually,
it&amp;#39;s even more frustrating when the code &lt;em&gt;is&lt;/em&gt; mine. The &amp;quot;deep thinking,&amp;quot; as
&lt;a href=&quot;https://twitter.com/yegor256/status/984759494918987776&quot;&gt;they call it&lt;/a&gt;,
which is always required before even a small issue can be resolved, seriously
turns me away from programming. Or did turn me away. Until I started
to think differently and encourage myself to be lazy. Here is how.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Sin City (2005) by Frank Miller&#39; src=&#39;/images/2018/04/sin-city.jpg&#39; longdesc=&#39;#fcd454d6&#39;/&gt;&lt;figcaption id=&#39;fcd454d6&#39;&gt;Sin City (2005) by Frank Miller&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I wrote about this a few years ago in this blog post:
&lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;How to Cut Corners and Stay Cool&lt;/a&gt;.
However, in &lt;a href=&quot;https://t.me/joinchat/CLxAaQ0xp-g_3WWI3MBr2g&quot;&gt;our Telegram group&lt;/a&gt;,
where we talk about &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;,
some programmers keep asking me the same
question over and over again: What should I do when the project is absolutely
new to me, I have just &lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;30 minutes&lt;/a&gt;,
and the bug is very complex?&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;This literally means that you should always and only think about yourself and your personal profit.&lt;/aside&gt;

&lt;p&gt;One of the core &lt;a href=&quot;http://www.zerocracy.com/toc.html&quot;&gt;principles&lt;/a&gt; of Zerocracy is
&lt;a href=&quot;https://www.youtube.com/watch?v=vXUwE3FGfpg&quot;&gt;#NoAltruism&lt;/a&gt;.
This literally means that
you should always and only think about yourself and your personal profit. You should
not try to improve the project, to increase its quality, to fix the code, or to refactor anything...
unless you are &lt;em&gt;paid&lt;/em&gt; for it.&lt;/p&gt;

&lt;p&gt;First of all, when the task, which you are going to be paid for, is in front of you and
you can&amp;#39;t understand how to solve it, &lt;em&gt;don&amp;#39;t&lt;/em&gt; blame yourself. You are not
supposed to be an expert in the legacy code you just opened up.
Strictly speaking, you are not supposed to be an expert in anything.
A project, &lt;del&gt;unlike your mom&lt;/del&gt;, doesn&amp;#39;t expect you to
be intelligent or tech-savvy. It needs you to
&lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;close tickets&lt;/a&gt;.&lt;/p&gt;

&lt;aside class=&#39;youtube&#39;&gt;
        &lt;a href=&#39;https://www.youtube.com/watch?v=vXUwE3FGfpg&#39;&gt;&lt;div class=&#39;box&#39;&gt;
        &lt;img src=&#39;https://i.ytimg.com/vi/vXUwE3FGfpg/mqdefault.jpg&#39; alt=&#39;YouTube video #vXUwE3FGfpg&#39;/&gt;
        &lt;div class=&#39;play&#39;&gt;&lt;i class=&#39;icon icon-play&#39;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;#NoAltruism;
        20 April 2018.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Who do you blame, if not yourself, when the bug is serious, the
code is messy, and you have no idea how much time it will take just to
understand it, let alone fix it? Well, you can blame everybody around you,
but first of all you should blame the code base itself. How do you blame it?
You report its low quality by creating new tickets, which may sound
like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;The class X is not sufficiently documented, I don&amp;#39;t understand how it works.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The method X is too complex, I don&amp;#39;t know what it does.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The algorithm X is messy, I can&amp;#39;t figure out what it does.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The library X is used here, but I don&amp;#39;t understand why you don&amp;#39;t use library Y.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The rules of class naming are not clear, document them please.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The principle of data organization is not obvious, document it.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, don&amp;#39;t make the mistake many programmers are making when we tell
them that tickets are the only
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;right way&lt;/a&gt;
to solve problems. They start asking questions and seeking help in the tickets, just like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;How can I unit test class X, please explain.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Please help me create class X.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Where should I put class X, in which package?&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Which library should I use for doing X?&amp;quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The project is &lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;not a school&lt;/a&gt;,
it&amp;#39;s not interested in making you smarter
or more of an expert in its code. Nobody will explain anything to &lt;em&gt;you&lt;/em&gt;,
because it&amp;#39;s a waste of money and time. What the project will do instead is
fix its code base so that it becomes cleaner and more obvious for
you &lt;em&gt;and everybody else&lt;/em&gt;. Thus, never ask for explanation or help, ask for
documentation and source code fixes.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;You can blame everybody around you, but first of all you should blame the code base itself.&lt;/aside&gt;

&lt;p&gt;What do you do next? You sit and wait, until those tickets are resolved.
Who will resolve them? You don&amp;#39;t care. That&amp;#39;s a problem for the project manager.
Maybe he/she will even assign those tickets back to you and it will
be your problem to resolve them. But if that happens, the scope of work will
be different for you. You won&amp;#39;t need to fix the bug anymore, you will
have to document some functionality or refactor some module.&lt;/p&gt;

&lt;p&gt;You will have other problems in this new and smaller scope.
You will create new tickets, blaming everybody around you, and they also
may come back to you. And so on and so forth. Ultimately, the scope
of a ticket will be as small as it&amp;#39;s possible to fix in 30 minutes.&lt;/p&gt;

&lt;p&gt;See the algorithm? I&amp;#39;m sure you do, but it&amp;#39;s very difficult to apply it to
real life and real software projects, for a few obvious psychological reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You are ashamed&lt;/strong&gt;.
You are trained to feel guilty when you are not smart enough.
What can I say?
Just &lt;a href=&quot;https://www.youtube.com/watch?v=Ow0lr63y4Mw&quot;&gt;stop it&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You are a &lt;a href=&quot;https://en.wikipedia.org/wiki/Perfectionism_%28psychology%29&quot;&gt;perfectionist&lt;/a&gt;&lt;/strong&gt;.
You want to complete the entire ticket, solve the entire problem,
and understand the entire scope.
What can I say?
This won&amp;#39;t be solved while the project continues to pay you
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;by the hour/month&lt;/a&gt;.
Once they start paying for results, this disease will be cured.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You have no passion&lt;/strong&gt;.
You just don&amp;#39;t care about the quality of code at all.
You don&amp;#39;t want it to look clean, you can&amp;#39;t even tell what clean is
or what messy is. You just want them to pay you by the end
of the month. In this case you won&amp;#39;t even know what tickets to
report.
What can I say?
I guess you have to try and find another job.
Maybe a &lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;manager&lt;/a&gt;?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You are afraid&lt;/strong&gt;.
Blaming the project and reporting tickets may look like you
have a negative attitude towards the code base, and people who
created it, which is not true. Instead, your attitude is
&lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;positive&lt;/a&gt;,
since you care about it and want it to get better.
What can I say?
Make your tickets sound extremely polite and gentle.
But keep reporting them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You have no time&lt;/strong&gt;.
You have to solve the problem now and you have no time to wait
for the resolution of those complaints you reported.
What can I say?
Blame the management and require more time. Much more time.
But never blame yourself.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Software development is perfect territory for
&lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;cutting corners&lt;/a&gt;,
being lazy and remaining calm, because our work is often discrete and can
be very incremental. Very occasionally it might not be possible to blame the project
and put the ticket on pause until all your complaints are addressed.
I can&amp;#39;t imagine such a situation though. If you can, please let me know.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><category term="zerocracy" /><summary type="html">What frustrates me most in my profession of software development
is the regular necessity to understand large problem scopes before fixing
small bugs, especially if the code is
legacy and not mine. Actually,
it&amp;#39;s even more frustrating when the code is mine. The &amp;quot;deep thinking,&amp;quot; as
they call it,
which is always required before even a small issue can be resolved, seriously
turns me away from programming. Or did turn me away. Until I started
to think differently and encourage myself to be lazy. Here is how.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/04/sin-city.jpg" /></entry><entry><title type="html">Nine Steps of Learning by Refactoring</title><link href="https://www.yegor256.com/2018/04/10/learning-by-refactoring.html" rel="alternate" type="text/html" title="Nine Steps of Learning by Refactoring" /><published>2018-04-10T00:00:00+00:00</published><updated>2018-04-10T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/04/10/learning-by-refactoring</id><content type="html" xml:base="https://www.yegor256.com/2018/04/10/learning-by-refactoring.html">&lt;p&gt;I &lt;a href=&quot;https://twitter.com/yegor256/status/977799130100781056&quot;&gt;was asked&lt;/a&gt;
on Twitter recently how is it possible to refactor
if one doesn&amp;#39;t understand how the code works.
I &lt;a href=&quot;https://twitter.com/yegor256/status/977966601227112449&quot;&gt;replied&lt;/a&gt;
that it is &amp;quot;learning by refactoring.&amp;quot; Then I tried to Google it
and found &lt;a href=&quot;https://www.google.ru/search?q=%22learning+by+refactoring%22&quot;&gt;nothing&lt;/a&gt;.
I was surprised. To me refactoring seems to be the most effective and
obvious way to study the source code. Here is how I usually do it,
in nine object-oriented steps.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Dom Hemingway (2013) by Richard Shepard&#39; src=&#39;/images/2018/04/dom-hemingway.jpg&#39; longdesc=&#39;#e8b2dbc0&#39;/&gt;&lt;figcaption id=&#39;e8b2dbc0&#39;&gt;Dom Hemingway (2013) by Richard Shepard&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;According to Wikipedia,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_refactoring&quot;&gt;code refactoring&lt;/a&gt; is
&amp;quot;the process of restructuring existing computer code&amp;mdash;changing the
factoring&amp;mdash;without changing its external behavior.&amp;quot; The goal
of refactoring is to make code more readable and suitable for modifications.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;https://amzn.to/2E7i17H&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/refactoring.jpg&#39; style=&#39;width:96px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Martin Fowler in his famous book &lt;a href=&quot;https://amzn.to/2E7i17H&quot;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt;
suggested a number of refactoring techniques which help making
code simpler, more abstract, more readable, etc. Some of them
are rather
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;questionable&lt;/a&gt;
from an object-oriented standpoint&amp;mdash;like
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_encapsulation&quot;&gt;Encapsulate Field&lt;/a&gt;,
for example&amp;mdash;but most of them are valid.&lt;/p&gt;

&lt;p&gt;Here is what I&amp;#39;m usually doing when I don&amp;#39;t know the code, but need to modify it.
The techniques are sorted by the order of complexity, starting with
the easiest one.&lt;/p&gt;

&lt;h2 id=&quot;remove-ide-red-spots&quot;&gt;Remove IDE Red Spots&lt;/h2&gt;

&lt;p&gt;When I open the source code of &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt;
in IntelliJ IDEA, using my
custom &lt;a href=&quot;/bin/settings.jar&quot;&gt;&lt;code&gt;settings.jar&lt;/code&gt;&lt;/a&gt;, I see something like this:&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/cactoos-listing.jpg&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;When I open the source code of, say,
&lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;Spring Boot&lt;/a&gt;,
I see something like this
(it&amp;#39;s &lt;a href=&quot;https://github.com/spring-projects/spring-boot/blob/v2.0.0.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java&quot;&gt;&lt;code&gt;o.s.b.ImageBanner&lt;/code&gt;&lt;/a&gt;
randomly picked out of a thousand other classes that look very similar):&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/springboot-listing.jpg&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;The first thing I do, when I see someone else&amp;#39;s code, is to make it &amp;quot;red spots free&amp;quot;
for my IDE. Most of those red spots are easy to remove,
while others will take some time to refactor.
While doing that I learn a lot about the &lt;del&gt;crap&lt;/del&gt; program I have
to deal with.&lt;/p&gt;

&lt;h2 id=&quot;remove-empty-lines&quot;&gt;Remove Empty Lines&lt;/h2&gt;

&lt;p&gt;I &lt;a href=&quot;/2014/11/03/empty-line-code-smell.html&quot;&gt;wrote&lt;/a&gt;
some time ago that empty lines inside method bodies are bad things.
They are obvious indicators of redundant complexity. Programmers tend
to add them to their methods in order to simplify things.&lt;/p&gt;

&lt;p&gt;This is a method from the &lt;a href=&quot;https://github.com/apache/maven&quot;&gt;Apache Maven&lt;/a&gt; code base
(class &lt;a href=&quot;https://github.com/apache/maven/blob/maven-3.5.3/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java&quot;&gt;&lt;code&gt;RepositoryUtils&lt;/code&gt;&lt;/a&gt;
picked at random, but almost all other classes are formatted the same way):&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/maven-listing.jpg&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;Aside from being &amp;quot;all red&amp;quot; their code is full of empty lines.
Removing them will make code more readable and will also help me
understand how it works. Bigger methods will need refactoring, since
without empty lines they will become almost completely unreadable. Hence,
I compress, understand, and make them smaller mostly by breaking
them down into smaller methods.&lt;/p&gt;

&lt;h2 id=&quot;make-names-shorter&quot;&gt;Make Names Shorter&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m generally in favor of short one-noun names for variables and one-verb names
for methods. I &lt;a href=&quot;/2015/01/12/compound-name-is-code-smell.html&quot;&gt;believe&lt;/a&gt;
that longer &amp;quot;compound&amp;quot; names are an indicator of unnecessary code complexity.&lt;/p&gt;

&lt;p&gt;For example, I found this method
&lt;code&gt;registerServletContainerInitializerToDriveServletContextInitializers&lt;/code&gt; (69 characters!)
in the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/blob/v2.0.0.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java&quot;&gt;&lt;code&gt;o.s.b.w.e.u.UndertowServletWebServerFactory&lt;/code&gt;&lt;/a&gt;
class in Spring Boot.
I wonder why the author skipped the &lt;code&gt;couldYouPlease&lt;/code&gt; prefix
and the &lt;code&gt;otherwiseThrowAnException&lt;/code&gt; suffix.&lt;/p&gt;

&lt;p&gt;Jokes aside, such long method names clearly demonstrate that the code
is too complex and can&amp;#39;t be explained with a simple &lt;code&gt;register&lt;/code&gt; or even
&lt;code&gt;registerContainer&lt;/code&gt;. It seems that there are many different containers,
initializers, servlets, and other creatures that need to be registered
somehow. When I join a project and see a method with this name I&amp;#39;m getting
ready for big trouble.&lt;/p&gt;

&lt;p&gt;Making names shorter is the mandatory refactoring step I take when
starting to work with foreign or legacy code.&lt;/p&gt;

&lt;h2 id=&quot;add-unit-tests&quot;&gt;Add Unit Tests&lt;/h2&gt;

&lt;p&gt;Most classes (and methods) come without any documentation, especially
if we are talking about closed-source commercial code. We are lucky if
the classes have more or less descriptive names and are small and
cohesive.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/1PBpoDT&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2015/04/book-goos.jpg&#39; style=&#39;width:96px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/1SdcZ8M&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2015/04/book-legacy.jpg&#39; style=&#39;width:96px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;However, instead of documentation I prefer to deal with unit tests. They
explain the code much better and prove that it works. When I don&amp;#39;t
understand how the class works, I try to write a unit test for it. In most
cases it&amp;#39;s not possible, for many reasons. In such a case I try to apply
everything I learned from
&lt;a href=&quot;http://amzn.to/1SdcZ8M&quot;&gt;&lt;em&gt;Working Effectively With Legacy Code&lt;/em&gt;&lt;/a&gt;
by Michael Feathers
and
&lt;a href=&quot;http://amzn.to/1PBpoDT&quot;&gt;&lt;em&gt;Growing Object-Oriented Software, Guided by Tests&lt;/em&gt;&lt;/a&gt;
by Steve Freeman and Nat Pryce.
Both books are pretty much focused on this very problem: what to do
when you don&amp;#39;t know what to do, testing-wise.&lt;/p&gt;

&lt;h2 id=&quot;remove-multiple-returns&quot;&gt;Remove Multiple Returns&lt;/h2&gt;

&lt;p&gt;I &lt;a href=&quot;/2015/08/18/multiple-return-statements-in-oop.html&quot;&gt;wrote earlier&lt;/a&gt;
that the presence of multiple &lt;code&gt;return&lt;/code&gt; statements in a single method is not something
object-oriented programming should encourage. Instead, a method must
always have a single exit point, just like those functions in
functional programming.&lt;/p&gt;

&lt;p&gt;Look at this method from the
&lt;a href=&quot;https://github.com/spring-projects/spring-boot/blob/v2.0.0.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java&quot;&gt;&lt;code&gt;o.s.b.c.p.b.Binder&lt;/code&gt;&lt;/a&gt;
class from Spring Boot (there are many similar examples there, I picked this one randomly):&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/binder-listing.jpg&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;There are five &lt;code&gt;return&lt;/code&gt; statements in such a small method. For object-oriented
code that&amp;#39;s too much. It&amp;#39;s OK for procedural code, which I also write
sometimes. For example, &lt;a href=&quot;https://github.com/zerocracy/farm/blob/master/src/main/resources/com/zerocracy/stk/pm/in/orders/start_order_if_assigned_in_github.groovy&quot;&gt;this Groovy script&lt;/a&gt;
of ours has five &lt;code&gt;return&lt;/code&gt; keywords too:&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/farm-listing.jpg&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;But this is Groovy and it&amp;#39;s not a class. It&amp;#39;s just a procedure, a script.&lt;/p&gt;

&lt;p&gt;Refactoring and removing multiple &lt;code&gt;return&lt;/code&gt; statements definitely helps
make code cleaner. Mostly because without them it&amp;#39;s necessary to use
deeper nesting of &lt;code&gt;if/then/else&lt;/code&gt; statements and then the code starts to look
ugly, unless you break it down into smaller pieces.&lt;/p&gt;

&lt;h2 id=&quot;get-rid-of-nulls&quot;&gt;Get Rid of NULLs&lt;/h2&gt;

&lt;p&gt;NULLs &lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;are evil&lt;/a&gt;,
it&amp;#39;s a well-known fact. However, they are still everywhere. For example,
there are 4,100 Java files in Spring Boot v2.0.0.RELEASE and 243K LoC,
which include the &lt;code&gt;null&lt;/code&gt; keyword 7,055 times. This means approximately one &lt;code&gt;null&lt;/code&gt;
for every 35 lines.&lt;/p&gt;

&lt;p&gt;To the contrary, &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes Framework&lt;/a&gt;, which I founded a few years ago,
has 771 Java files, 154K LoC, and 58 &lt;code&gt;null&lt;/code&gt; keywords. Which is roughly
one &lt;code&gt;null&lt;/code&gt; per 2,700 lines. See the difference?&lt;/p&gt;

&lt;p&gt;The code gets cleaner when you remove NULLs, but it&amp;#39;s not so easy to do.
Sometimes it&amp;#39;s even impossible. That&amp;#39;s why we still have those 58 cases
of &lt;code&gt;null&lt;/code&gt; in Takes. We simply can&amp;#39;t remove them, because they are coming
from the JDK.&lt;/p&gt;

&lt;h2 id=&quot;make-objects-immutable&quot;&gt;Make Objects Immutable&lt;/h2&gt;

&lt;p&gt;As I &lt;a href=&quot;/2014/11/07/how-immutability-helps.html&quot;&gt;demonstrated&lt;/a&gt;
some time ago,
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutability&lt;/a&gt;
helps keep objects smaller. Most classes
that I see in the foreign code I deal with are mutable. And large.&lt;/p&gt;

&lt;p&gt;If you look at any artifact analyzed by &lt;a href=&quot;http://www.jpeek.org&quot;&gt;jpeek&lt;/a&gt;,
you will see that in most of them approximately 80% of classes
are mutable. Moving from mutability to immutability is a big challenge
in object-oriented programming, which, if resolved, leads to better
code.&lt;/p&gt;

&lt;p&gt;This refactoring step of make things immutable is purely profitable.&lt;/p&gt;

&lt;h2 id=&quot;remove-static&quot;&gt;Remove Static&lt;/h2&gt;

&lt;p&gt;Static methods and attributes are convenient,
if you are a procedural programmer. If your
code is object-oriented, they
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;must go away&lt;/a&gt;. In Spring Boot there
are 7,482 &lt;code&gt;static&lt;/code&gt; keywords, which means one for every 32 lines of code.
To the contrary, in Takes we have 310 &lt;code&gt;static&lt;/code&gt;-s, which is
one every 496 lines.&lt;/p&gt;

&lt;p&gt;Compare these numbers with the statistics about NULL and you will see
that getting rid of &lt;code&gt;static&lt;/code&gt; is a more complex task.&lt;/p&gt;

&lt;h2 id=&quot;apply-static-analysis&quot;&gt;Apply Static Analysis&lt;/h2&gt;

&lt;p&gt;This is the final step and the most complex one. It&amp;#39;s complex because
I configure static analyzers to their maximum potential or even more.
I&amp;#39;m using &lt;a href=&quot;http://www.qulice.com&quot;&gt;Qulice&lt;/a&gt;,
which is an aggregator of
&lt;a href=&quot;http://checkstyle.sourceforge.net/&quot;&gt;Checkstyle&lt;/a&gt;,
&lt;a href=&quot;http://pmd.sourceforge.net/&quot;&gt;PMD&lt;/a&gt;, and
&lt;a href=&quot;http://findbugs.sourceforge.net/&quot;&gt;FindBugs&lt;/a&gt;.
Those guys are strong by themselves, but Qulice makes them
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;even stronger&lt;/a&gt;,
adding a few dozen custom-made checks.&lt;/p&gt;

&lt;p&gt;The principle I use for static analysis is 0/100. This means that either
the entire code base is clean and there are no Qulice complaints, or it&amp;#39;s
dirty. There is nothing in the middle. This is not a very typical way
of looking at static analysis. Most programmers are using those tools
just to collect &amp;quot;opinions&amp;quot; about their code. I&amp;#39;m using them as guides
for refactoring.&lt;/p&gt;

&lt;p&gt;Check out this video, which demonstrates the amount of complaints Qulice
gives for the &lt;code&gt;spring-boot-project/spring-boot&lt;/code&gt; sub-module in Spring Boot
(the video has no end, since I lost my patience in waiting):&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DDtAKIyuRMA?rel=0&amp;amp;controls=0&amp;amp;showinfo=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;When Qulice says that everything is clean, I consider the code base fully
ready for maintenance and modifications. At this point the refactoring
is done.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="refactoring" /><summary type="html">I was asked
on Twitter recently how is it possible to refactor
if one doesn&amp;#39;t understand how the code works.
I replied
that it is &amp;quot;learning by refactoring.&amp;quot; Then I tried to Google it
and found nothing.
I was surprised. To me refactoring seems to be the most effective and
obvious way to study the source code. Here is how I usually do it,
in nine object-oriented steps.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/04/dom-hemingway.jpg" /></entry><entry><title type="html">Fully Transparent Donations via Zerocracy</title><link href="https://www.yegor256.com/2018/04/03/donations-via-zerocracy.html" rel="alternate" type="text/html" title="Fully Transparent Donations via Zerocracy" /><published>2018-04-03T00:00:00+00:00</published><updated>2018-04-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/04/03/donations-via-zerocracy</id><content type="html" xml:base="https://www.yegor256.com/2018/04/03/donations-via-zerocracy.html">&lt;p&gt;Open source is free, as in beer: you write code, nobody pays you. Of course,
there are &lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;many ways&lt;/a&gt;
to monetize your efforts, but there will be no
direct cash payments from your users, usually. There are &lt;a href=&quot;https://hackernoon.com/why-funding-open-source-is-hard-652b7055569d&quot;&gt;ways&lt;/a&gt;
to collect money, which include an obvious &amp;quot;tip jar&amp;quot; button on your GitHub project page.
The chances anyone will pay
&lt;a href=&quot;https://news.ycombinator.com/item?id=14446516&quot;&gt;are low&lt;/a&gt; though. In my opinion,
this is mostly because nobody trusts you enough&amp;mdash;they are not sure you will
use the money to make the product better. Most likely you will just spend it
and nothing will change. But they want the product, not to make you happier.
At least that&amp;#39;s what I feel when I see a &lt;a href=&quot;https://patreon.com/&quot;&gt;Patreon&lt;/a&gt; button.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Last Tango in Paris (1972) by Bernardo Bertolucci&#39; src=&#39;/images/2018/04/last-tango-in-paris.jpg&#39; longdesc=&#39;#1ea97881&#39;/&gt;&lt;figcaption id=&#39;1ea97881&#39;&gt;Last Tango in Paris (1972) by Bernardo Bertolucci&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt; is a platform that manages programmers remotely.
Moreover, it&amp;#39;s absolutely &lt;a href=&quot;http://www.zerocracy.com/policy.html#23&quot;&gt;free&lt;/a&gt; for open source projects. Take a
look at &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt; or &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes&lt;/a&gt;&amp;mdash;they
are both managed by
&lt;a href=&quot;/2018/03/21/zerocracy-announcement.html&quot;&gt;Zerocrat&lt;/a&gt;. These projects
are funded by myself. I add money to Zerocracy out of my pocket and Zerocracy
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;pays&lt;/a&gt;
programmers when they close their &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;microtasks&lt;/a&gt; in GitHub.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.zerocracy.com&#39;&gt;&lt;img src=&#39;http://www.0crat.com/svg/logo.svg&#39; style=&#39;width:100px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;A few days ago someone approached me by email and literally said: &amp;quot;There
is a bug in your project, I&amp;#39;m happy to pay you for your time if you can come
up with a solution.&amp;quot; He was ready to donate and wanted me (or us) to solve
his specific issue. I could just take his money over PayPal and fix the issue,
but I&amp;#39;m not really an active maintainer of the project he was interested in,
and I&amp;#39;m busy at the moment.&lt;/p&gt;

&lt;p&gt;I realized that the best way would be to take the money,
break down the problem into pieces, and delegate them to a few programmers,
just like it usually works in Zerocracy. In other words, I decided to suggest
he fund the project and then let us use the funds for
&lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;microtasking&lt;/a&gt;,
keeping the focus on the issue he was interested in.&lt;/p&gt;

&lt;p&gt;Moreover, this concept was
&lt;a href=&quot;https://github.com/zerocracy/datum/issues/212&quot;&gt;earlier proposed&lt;/a&gt;
by &lt;a href=&quot;https://github.com/skapral&quot;&gt;&lt;code&gt;@skapral&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He gladly accepted the offer.
We &lt;a href=&quot;https://github.com/zerocracy/farm/issues/866&quot;&gt;implemented&lt;/a&gt; the functionality in
&lt;a href=&quot;https://www.0crat.com&quot;&gt;Zerocrat&lt;/a&gt; and he contributed $128 via Stripe.&lt;/p&gt;

&lt;p&gt;Now &lt;a href=&quot;http://www.zerocracy.com/policy.html#50&quot;&gt;anyone&lt;/a&gt;
can give a few dollars to a project, if it&amp;#39;s
managed by Zerocracy. The contributor will see how those funds are being spent, down to each and every dollar!
Try, for example, one of these buttons and you will see detailed
financial reports of each project and will be able to add your funds:&lt;/p&gt;

&lt;p&gt;Cactoos.org:&lt;br/&gt;
&lt;a href=&quot;https://www.0crat.com/contrib/C63314D6Z&quot;&gt;&lt;img src=&quot;https://www.0crat.com/contrib-badge/C63314D6Z.svg&quot; alt=&quot;Donate via Zerocracy&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Takes.org:&lt;br/&gt;
&lt;a href=&quot;https://www.0crat.com/contrib/C3FFK3YAY&quot;&gt;&lt;img src=&quot;https://www.0crat.com/contrib-badge/C3FFK3YAY.svg&quot; alt=&quot;Donate via Zerocracy&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The advantage of this approach, compared to, for example,
&lt;a href=&quot;https://www.bountysource.com/&quot;&gt;BountySource&lt;/a&gt;, is that the money will
be distributed in micro-payments and will be fully traceable. I believe
that this makes a difference for donators&amp;mdash;they are interested to see
how their money is being used.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="zerocracy" /><summary type="html">Open source is free, as in beer: you write code, nobody pays you. Of course,
there are many ways
to monetize your efforts, but there will be no
direct cash payments from your users, usually. There are ways
to collect money, which include an obvious &amp;quot;tip jar&amp;quot; button on your GitHub project page.
The chances anyone will pay
are low though. In my opinion,
this is mostly because nobody trusts you enough&amp;mdash;they are not sure you will
use the money to make the product better. Most likely you will just spend it
and nothing will change. But they want the product, not to make you happier.
At least that&amp;#39;s what I feel when I see a Patreon button.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/04/last-tango-in-paris.jpg" /></entry></feed>
