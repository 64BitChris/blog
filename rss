<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://www.yegor256.com/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2018-05-21T06:45:57+00:00</updated><id>https://www.yegor256.com/</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">An Open Code Base Is Not Yet an Open Source Project</title><link href="https://www.yegor256.com/2018/05/08/open-source-attributes.html" rel="alternate" type="text/html" title="An Open Code Base Is Not Yet an Open Source Project" /><published>2018-05-08T00:00:00+00:00</published><updated>2018-05-08T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/05/08/open-source-attributes</id><content type="html" xml:base="https://www.yegor256.com/2018/05/08/open-source-attributes.html">&lt;p&gt;A few weeks ago someone &lt;a href=&quot;https://www.yegor256.com/2018/04/10/learning-by-refactoring.html#comment-3865410512&quot;&gt;suggested&lt;/a&gt;
I should try to integrate &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;&amp;#39;s
static analysis rules into
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;Qulice&lt;/a&gt;,
our aggregator of
&lt;a href=&quot;http://checkstyle.sourceforge.net/&quot;&gt;Checkstyle&lt;/a&gt;,
&lt;a href=&quot;http://pmd.sourceforge.net/&quot;&gt;PMD&lt;/a&gt;,
&lt;a href=&quot;http://findbugs.sourceforge.net/&quot;&gt;FindBugs&lt;/a&gt;,
and some other analyzers. I do love IDEA&amp;#39;s rules&amp;mdash;some of them are
unique and very useful. I asked whether I could find them somewhere in
Maven Central (they are written in Java) and the answer was &amp;quot;You&amp;#39;ll have to figure
out yourself how to use them, but they are open source.&amp;quot;
Here comes my opinion about this
situation: I believe that open source doesn&amp;#39;t just mean the code is readable
without authorization. It means something much bigger.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Her (2013) by Spike Jonze&#39; src=&#39;/images/2018/05/her.jpg&#39; longdesc=&#39;#c478dfc9&#39;/&gt;&lt;figcaption id=&#39;c478dfc9&#39;&gt;Her (2013) by Spike Jonze&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Just making a piece of code publicly accessible is not what it takes to call
it &lt;em&gt;open source&lt;/em&gt; software. Actually, it only harms the product, and the
reputation of its author, if it&amp;#39;s open but not ready for &lt;em&gt;reuse&lt;/em&gt; (which
is what &lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;the open source world&lt;/a&gt;
is all about). As &lt;a href=&quot;https://en.wikipedia.org/wiki/Eric_S._Raymond&quot;&gt;Eric Raymond&lt;/a&gt; said in his
famous piece &lt;a href=&quot;https://amzn.to/2FKF9tv&quot;&gt;&lt;em&gt;The Cathedral and the Bazaar&lt;/em&gt;&lt;/a&gt;,
&amp;quot;Good programmers know what to write. Great ones know what to rewrite (and reuse).&amp;quot;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s the responsibility of the software product&amp;#39;s author to help
those &amp;quot;good&amp;quot; programmers to reuse the code. Coding, testing, debugging,
and making sure &amp;quot;it works on my laptop&amp;quot; is one thing. Making it readable and reusable
is a totally different piece of work, which may take much more time.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;https://en.wikipedia.org/wiki/Karl_Fogel&quot;&gt;Karl Fogel&lt;/a&gt;
said in &lt;a href=&quot;https://amzn.to/2jyMrrF&quot;&gt;&lt;em&gt;Producing Open Source Software&lt;/em&gt;&lt;/a&gt;:
&amp;quot;Most free software projects fail.&amp;quot; They fail (on top of many other factors) because not enough
attention is paid to the following basic things (in no particular
order):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;README&lt;/strong&gt;.
I&amp;#39;m sure you host your product on GitHub. (If not, what&amp;#39;s wrong with you?)
There must be a &lt;code&gt;README.md&lt;/code&gt; file in the root directory that
explains what the product is all about and how we should use it.
A few good examples:
&lt;a href=&quot;https://github.com/leejarvis/slop/blob/master/README.md&quot;&gt;&lt;code&gt;leejarvis/slop&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://github.com/mongobee/mongobee/blob/master/README.md&quot;&gt;&lt;code&gt;mongobee/mongobee&lt;/code&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/ronmamo/reflections/blob/master/README.md&quot;&gt;&lt;code&gt;ronmamo/reflections&lt;/code&gt;&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/yegor256/takes/blob/master/README.md&quot;&gt;&lt;code&gt;yegor256/takes&lt;/code&gt;&lt;/a&gt; (this one is mine).
A few bad examples:
&lt;a href=&quot;https://github.com/qos-ch/slf4j/blob/master/README.md&quot;&gt;&lt;code&gt;qos-ch/slf4j&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rzwitserloot/lombok/blob/master/README&quot;&gt;&lt;code&gt;rzwitserloot/lombok&lt;/code&gt;&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/junit-team/junit4/blob/master/README.md&quot;&gt;&lt;code&gt;junit4/blob&lt;/code&gt;&lt;/a&gt; (don&amp;#39;t be like these guys).&lt;/p&gt;

&lt;p&gt;No matter how rich you&amp;#39;ve made your website, Javadoc, Wiki, mailing
list, and Twitter, the README is the place where we expect
to see everything. Only if and when we get interested will we investigate
further and deeper. Read the README files in other projects and copy
their best ideas. README is your showcase, it must shine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;License&lt;/strong&gt;.
Most of us don&amp;#39;t pay attention to &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_license&quot;&gt;this bureaucracy&lt;/a&gt;.
I didn&amp;#39;t either, until recently.
I thought that the moment my code is open I can forget about any
rights and royalties. They will just use my code and I won&amp;#39;t
see any profit, ever. The license I attach to it won&amp;#39;t matter&amp;mdash;nobody
reads it anyway. This is exactly what happens in most cases.
But only while those users are small potatoes.&lt;/p&gt;

&lt;p&gt;A few years ago I was an architect on a software project and we had to create
an analyzer of hardware components, like CPU, memory, hard disc, etc. We had
to make sure all of them worked as expected after running pretty complex
and customized tests. My obvious suggestion was to use open source tools,
which would do the hard work for us. We would only have to integrate them.
It was an awesome idea, until some of us decided to check the licenses of
those tools.&lt;/p&gt;

&lt;p&gt;That was the moment I realized that I was so wrong for not paying attention
to what licenses say. &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_General_Public_License&quot;&gt;GPL&lt;/a&gt;,
for example, which we found in a few tools,
didn&amp;#39;t allow us to reuse the code if our product wasn&amp;#39;t open source too.
Since we were creating proprietary software, we understood that we weren&amp;#39;t able to
use &lt;a href=&quot;https://en.wikipedia.org/wiki/Copyleft&quot;&gt;copyleft&lt;/a&gt; modules,
only
&lt;a href=&quot;https://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/BSD_licenses&quot;&gt;BSD&lt;/a&gt; or similar.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m suggesting you think about the license before publishing the
product. I&amp;#39;ve used &lt;a href=&quot;https://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT&lt;/a&gt;
in all my products since 2016.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distribution&lt;/strong&gt;.
A mere collection of &lt;code&gt;.rb&lt;/code&gt; files is not reusable Ruby code. Well, maybe for
those &lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;hackers&lt;/a&gt;
I despise so much, it is. But for professional
&lt;a href=&quot;/2018/01/23/sociotech-skills.html&quot;&gt;developers&lt;/a&gt;,
who are too &lt;a href=&quot;/2018/04/17/how-to-be-lazy.html&quot;&gt;lazy&lt;/a&gt;
to read their own code, let alone someone else&amp;#39;s,
it definitely isn&amp;#39;t.&lt;/p&gt;

&lt;p&gt;&amp;quot;Take it from GitHub&amp;quot; is not a polite way to treat us&amp;mdash;your fellow programmers&amp;mdash;anymore.
It was, twenty years ago, but now we have repositories.
You have to distribute your product as an &amp;quot;artifact&amp;quot; through one of those public
repositories, and make it possible for us to fetch it
from there, skipping the testing and packaging, and just using it as a product
(a Ruby gem or Java JAR, for example).&lt;/p&gt;

&lt;p&gt;I&amp;#39;m talking about repositories like
&lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven Central&lt;/a&gt;,
&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npmjs&lt;/a&gt;,
or &lt;a href=&quot;https://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt;.
You have to find a way to deploy your product there.
It&amp;#39;s not an easy task, even though those repositories
do their best to simplify the process. We use
&lt;a href=&quot;/2014/09/11/deployment-script-vs-rultor.html&quot;&gt;Rultor&lt;/a&gt; in all our projects,
which helps us streamline the deployment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yegor256/takes&quot;&gt;yegor256/takes&lt;/a&gt; to Maven Central
(&lt;a href=&quot;/2014/08/19/how-to-release-to-maven-central.html&quot;&gt;details&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yegor256/xcop&quot;&gt;yegor256/xcop&lt;/a&gt; to RubyGems
(&lt;a href=&quot;/2014/08/26/publish-to-rubygems.html&quot;&gt;details&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yegor256/tacit&quot;&gt;yegor256/tacit&lt;/a&gt; to npmjs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Package_manager&quot;&gt;Package managers&lt;/a&gt;
like Maven, NPM, Rake, Grunt, Gradle and
&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_software_package_management_systems&quot;&gt;others&lt;/a&gt;,
are the standard and traditional way of reusing open source software (proprietary too).
If your product is not available in a public repository, it&amp;#39;s not a product;
it&amp;#39;s just a code base.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Javadoc&lt;/strong&gt;.
We all hate writing documentation. And we hate libraries that are not
documented. I usually find it boring to write Javadoc blocks for my classes,
but I understand that without them the code I&amp;#39;m writing inside
those classes will not interest anyone.&lt;/p&gt;

&lt;p&gt;The best format for those Javadoc blocks is &amp;quot;by example.&amp;quot; Instead of prose
I&amp;#39;d recommend you demonstrate how to use the class, especially in combination
with it neighbors. Moreover, I&amp;#39;d suggest you &lt;em&gt;don&amp;#39;t&lt;/em&gt; write documentation
anywhere else apart from those Javadoc blocks. (They exist in other
languages too, but have different names.)&lt;/p&gt;

&lt;p&gt;The problem with Javadoc is that it&amp;#39;s not so easy to format the text
so that it looks visually attractive. Maybe that&amp;#39;s why many programmers
still rely on Wikis or project websites. I&amp;#39;d recommend you stay inside
Javadoc blocks and learn their formatting syntax.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Badges&lt;/strong&gt;.
As &lt;a href=&quot;https://github.com/yegor256/takes&quot;&gt;you can see&lt;/a&gt;, I like badges. First and foremost
they make a repository look as if it&amp;#39;s being &amp;quot;actively maintained,&amp;quot; especially
if those badges are green. They don&amp;#39;t really deliver any valuable information.
They mostly say: &amp;quot;Our author has very good taste, see how perfectly
our colors match!&amp;quot;&lt;/p&gt;

&lt;p&gt;Jokes aside, it&amp;#39;s not so easy to add all those badges. Each badge will take you
some time, to integrate a third party system, to make sure the numbers
are good enough to be proud of, and to keep it under control. If the
repository is not being watched over, the badges will eventually start failing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous Integration&lt;/strong&gt;.
In order to use your code we have to trust it, meaning that we have to
be sure that it works, or at least passes automated tests. (Do I have to say that
you must have tests?) How can we be sure it works? &lt;a href=&quot;/2014/10/05/ten-hosted-continuous-integration-services.html&quot;&gt;CI&lt;/a&gt;
is the answer. We must be able
to see the logs of the recent CI build and make sure it is clean.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a matter of trust. You may never use those Travis builds and simply
ignore their red and green signals, but they are important for us&amp;mdash;your
clients. I add Travis badges to all projects of mine, right after I create
a new repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contribution Guidelines&lt;/strong&gt;.
For a regular GitHub addict it&amp;#39;s not a problem to figure out how to
send you a pull request. However, the majority of us, at least
initially, will consist of active users, not contributors. We will try
to use your product and will attempt to customize it for our needs.
If we get lost, we will leave, frustrated.&lt;/p&gt;

&lt;p&gt;To prevent this, you have to explain what a disciplined contributor
has to do in order to make changes to your code base. Here are
the questions I&amp;#39;d recommend you answer in your
&lt;a href=&quot;https://help.github.com/articles/setting-guidelines-for-repository-contributors/&quot;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do I run an automated build?&lt;/li&gt;
&lt;li&gt;How big/small does a pull request have to be in order to be accepted?&lt;/li&gt;
&lt;li&gt;What are your style guidelines?&lt;/li&gt;
&lt;li&gt;How do bugs have to be reported, tagged, explained?&lt;/li&gt;
&lt;li&gt;What makes a &lt;a href=&quot;/2018/04/24/right-way-to-report-bugs.html&quot;&gt;good bug report&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the text I
&lt;a href=&quot;https://blog.github.com/2016-02-17-issue-and-pull-request-templates/&quot;&gt;use&lt;/a&gt; in all my projects:
&lt;a href=&quot;https://github.com/yegor256/takes/blob/master/.github/ISSUE_TEMPLATE.md&quot;&gt;&lt;code&gt;ISSUE_TEMPLATE.md&lt;/code&gt;&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/yegor256/takes/blob/master/.github/PULL_REQUEST_TEMPLATE.md&quot;&gt;&lt;code&gt;PULL_REQUEST_TEMPLATE.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quality Wall&lt;/strong&gt;.
Finally, if you are lucky, we will use your product and will be interested
in contributing. You will start getting our pull requests. The question is how
fast we will ruin your code base. We will, if you don&amp;#39;t protect yourself.&lt;/p&gt;

&lt;p&gt;If you strictly review each pull request and reject anything that doesn&amp;#39;t
look like &amp;quot;great&amp;quot; code, you will lose us, your contributors. We don&amp;#39;t want
to write great code, we want to make changes to your product so that it
becomes more suitable for &lt;em&gt;our&lt;/em&gt; needs. The greatness of the code is &lt;em&gt;your&lt;/em&gt;
concern, not ours.&lt;/p&gt;

&lt;p&gt;On the other hand, if you accept whatever comes in, the architecture will lose its robustness
(if it ever had any) and you again will lose us, your contributors. This time
you will lose us because the product will become bad and difficult to
maintain and contribute to.&lt;/p&gt;

&lt;p&gt;The best way to keep the balance is to &amp;quot;hire&amp;quot; a tool to help you:
build automation, static analysis, automated tests, and coverage control.
You have to configure the product to fail when the changes someone
introduces violate its internal quality expectations.
I &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;use Rultor&lt;/a&gt; for that too.&lt;/p&gt;

&lt;p&gt;Did I forget anything?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="programming" /><summary type="html">A few weeks ago someone suggested
I should try to integrate IntelliJ IDEA&amp;#39;s
static analysis rules into
Qulice,
our aggregator of
Checkstyle,
PMD,
FindBugs,
and some other analyzers. I do love IDEA&amp;#39;s rules&amp;mdash;some of them are
unique and very useful. I asked whether I could find them somewhere in
Maven Central (they are written in Java) and the answer was &amp;quot;You&amp;#39;ll have to figure
out yourself how to use them, but they are open source.&amp;quot;
Here comes my opinion about this
situation: I believe that open source doesn&amp;#39;t just mean the code is readable
without authorization. It means something much bigger.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/05/her.jpg" /></entry><entry><title type="html">The Right Way to Report a Bug</title><link href="https://www.yegor256.com/2018/04/24/right-way-to-report-bugs.html" rel="alternate" type="text/html" title="The Right Way to Report a Bug" /><published>2018-04-24T00:00:00+00:00</published><updated>2018-04-24T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/04/24/right-way-to-report-bugs</id><content type="html" xml:base="https://www.yegor256.com/2018/04/24/right-way-to-report-bugs.html">&lt;p&gt;You know, at &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;, either you are a programmer or a tester,
and &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;we pay&lt;/a&gt;
for each bug you find and report. Well, not quite. We pay for
each bug report a project architect considers good enough to pay for.
The architect&amp;#39;s decision is totally subjective and non-disputable,
according to &lt;a href=&quot;http://www.zerocracy.com/policy.html#29&quot;&gt;§29&lt;/a&gt;
of the &lt;a href=&quot;http://www.zerocracy.com/policy.html&quot;&gt;Policy&lt;/a&gt;.
Some of our developers find this unfair and ask me to explain
how they can report bugs such that they are definitely paid.
Here is a non-exhaustive list of my recommendations.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Burn After Reading (2008) by Coen Brothers&#39; src=&#39;/images/2018/04/burn-after-reading.jpg&#39; longdesc=&#39;#d3a4c799&#39;/&gt;&lt;figcaption id=&#39;d3a4c799&#39;&gt;Burn After Reading (2008) by Coen Brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;To be honest, there are &lt;a href=&quot;https://www.google.com/search?q=how+to+write+good+bug+reports&quot;&gt;many articles&lt;/a&gt;
written before on this very subject. I will try not to repeat them. They
mostly say reasonable things, like
&amp;quot;be specific,&amp;quot;
&amp;quot;choose a strong title,&amp;quot;
&amp;quot;avoid duplicates,&amp;quot; and many others.
My recommendations here are more of a psychological nature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay cool&lt;/strong&gt;.
Don&amp;#39;t expect all of your bugs to be accepted and paid for.
Some of them won&amp;#39;t be.
This must not stop you from reporting them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exaggerate&lt;/strong&gt;.
No matter how minor the bug is, present it as if the entire world will
collapse tomorrow if they don&amp;#39;t fix it.
Of course, they will make their own decision about the priority and severity of the bug,
but don&amp;#39;t help them to make it against you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Victimize yourself&lt;/strong&gt;.
Don&amp;#39;t just say &amp;quot;the class is broken&amp;quot;&amp;mdash;there is no victim in this statement.
So, no need to save anyone&amp;#39;s life. The bug is minor&amp;mdash;no need to pay.
Instead, say &amp;quot;I can&amp;#39;t use the class.&amp;quot; Present yourself as a victim.
Or even better, represent a group of victims: &amp;quot;Nobody can really use this class.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Push them&lt;/strong&gt;.
If a bug report is not paid for, don&amp;#39;t hesitate to ask why.
Insist that it was a very important problem and you deserve to be paid.
If they still don&amp;#39;t pay, forget it and move on.
You must not look like it offends you somehow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Show efforts&lt;/strong&gt;.
The bug description must look &amp;quot;rich,&amp;quot; clearly demonstrating that
you invested a lot of effort in its creation. If there is just a single line,
it&amp;#39;s easier for them to not pay you&amp;mdash;they won&amp;#39;t feel any guilt.
However, if it&amp;#39;s long, detailed, properly formatted, and contains multiple supporting links,
they will feel bad if they don&amp;#39;t pay.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Look engaged&lt;/strong&gt;.
Say something like &amp;quot;I&amp;#39;m ready to investigate more and provide additional details,
if you need me too.&amp;quot; Of course you won&amp;#39;t do that (in most cases),
but you have to say it. This will look like you care and this bug comes
right from your heart. How can they not pay for it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Look altruistic&lt;/strong&gt;.
Don&amp;#39;t show them that you are reporting these bugs just to get money.
They know that anyway, but still.
Look like you care about the project and honestly want to help.
Say that you worry about the users, about the market, about the mission, about
the bigger scope, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aggregate&lt;/strong&gt;.
This may sound against the
&lt;a href=&quot;/2014/11/24/principles-of-bug-tracking.html&quot;&gt;principles&lt;/a&gt;
of bug tracking I suggested earlier,
but when your bugs are small and cosmetic&amp;mdash;aggregate them. In such a
case you have a chance to win. They will reject three minor bugs, but they
won&amp;#39;t reject a bigger one with three minor parts.&lt;/p&gt;

&lt;p&gt;I believe that if you follow these simple recommendations,
you will be a more successful bug reporter. At least at
&lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><category term="zerocracy" /><summary type="html">You know, at Zerocracy, either you are a programmer or a tester,
and we pay
for each bug you find and report. Well, not quite. We pay for
each bug report a project architect considers good enough to pay for.
The architect&amp;#39;s decision is totally subjective and non-disputable,
according to §29
of the Policy.
Some of our developers find this unfair and ask me to explain
how they can report bugs such that they are definitely paid.
Here is a non-exhaustive list of my recommendations.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/04/burn-after-reading.jpg" /></entry><entry><title type="html">How to Be Lazy and Stay Calm</title><link href="https://www.yegor256.com/2018/04/17/how-to-be-lazy.html" rel="alternate" type="text/html" title="How to Be Lazy and Stay Calm" /><published>2018-04-17T00:00:00+00:00</published><updated>2018-04-17T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/04/17/how-to-be-lazy</id><content type="html" xml:base="https://www.yegor256.com/2018/04/17/how-to-be-lazy.html">&lt;p&gt;What frustrates me most in my profession of software development
is the regular necessity to understand large problem scopes before fixing
small bugs, especially if the code is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Legacy_code&quot;&gt;legacy&lt;/a&gt; and not mine. Actually,
it&amp;#39;s even more frustrating when the code &lt;em&gt;is&lt;/em&gt; mine. The &amp;quot;deep thinking,&amp;quot; as
&lt;a href=&quot;https://twitter.com/yegor256/status/984759494918987776&quot;&gt;they call it&lt;/a&gt;,
which is always required before even a small issue can be resolved, seriously
turns me away from programming. Or did turn me away. Until I started
to think differently and encourage myself to be lazy. Here is how.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Sin City (2005) by Frank Miller&#39; src=&#39;/images/2018/04/sin-city.jpg&#39; longdesc=&#39;#fcd454d6&#39;/&gt;&lt;figcaption id=&#39;fcd454d6&#39;&gt;Sin City (2005) by Frank Miller&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I wrote about this a few years ago in this blog post:
&lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;How to Cut Corners and Stay Cool&lt;/a&gt;.
However, in &lt;a href=&quot;https://t.me/joinchat/CLxAaQ0xp-g_3WWI3MBr2g&quot;&gt;our Telegram group&lt;/a&gt;,
where we talk about &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;,
some programmers keep asking me the same
question over and over again: What should I do when the project is absolutely
new to me, I have just &lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;30 minutes&lt;/a&gt;,
and the bug is very complex?&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;This literally means that you should always and only think about yourself and your personal profit.&lt;/aside&gt;

&lt;p&gt;One of the core &lt;a href=&quot;http://www.zerocracy.com/toc.html&quot;&gt;principles&lt;/a&gt; of Zerocracy is
&lt;a href=&quot;https://www.youtube.com/watch?v=vXUwE3FGfpg&quot;&gt;#NoAltruism&lt;/a&gt;.
This literally means that
you should always and only think about yourself and your personal profit. You should
not try to improve the project, to increase its quality, to fix the code, or to refactor anything...
unless you are &lt;em&gt;paid&lt;/em&gt; for it.&lt;/p&gt;

&lt;p&gt;First of all, when the task, which you are going to be paid for, is in front of you and
you can&amp;#39;t understand how to solve it, &lt;em&gt;don&amp;#39;t&lt;/em&gt; blame yourself. You are not
supposed to be an expert in the legacy code you just opened up.
Strictly speaking, you are not supposed to be an expert in anything.
A project, &lt;del&gt;unlike your mom&lt;/del&gt;, doesn&amp;#39;t expect you to
be intelligent or tech-savvy. It needs you to
&lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;close tickets&lt;/a&gt;.&lt;/p&gt;

&lt;aside class=&#39;youtube&#39;&gt;
        &lt;a href=&#39;https://www.youtube.com/watch?v=vXUwE3FGfpg&#39;&gt;&lt;div class=&#39;box&#39;&gt;
        &lt;img src=&#39;https://i.ytimg.com/vi/vXUwE3FGfpg/mqdefault.jpg&#39; alt=&#39;YouTube video #vXUwE3FGfpg&#39;/&gt;
        &lt;div class=&#39;play&#39;&gt;&lt;i class=&#39;icon icon-play&#39;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;#NoAltruism;
        20 April 2018.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Who do you blame, if not yourself, when the bug is serious, the
code is messy, and you have no idea how much time it will take just to
understand it, let alone fix it? Well, you can blame everybody around you,
but first of all you should blame the code base itself. How do you blame it?
You report its low quality by creating new tickets, which may sound
like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;The class X is not sufficiently documented, I don&amp;#39;t understand how it works.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The method X is too complex, I don&amp;#39;t know what it does.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The algorithm X is messy, I can&amp;#39;t figure out what it does.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The library X is used here, but I don&amp;#39;t understand why you don&amp;#39;t use library Y.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The rules of class naming are not clear, document them please.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The principle of data organization is not obvious, document it.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, don&amp;#39;t make the mistake many programmers are making when we tell
them that tickets are the only
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;right way&lt;/a&gt;
to solve problems. They start asking questions and seeking help in the tickets, just like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;How can I unit test class X, please explain.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Please help me create class X.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Where should I put class X, in which package?&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Which library should I use for doing X?&amp;quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The project is &lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;not a school&lt;/a&gt;,
it&amp;#39;s not interested in making you smarter
or more of an expert in its code. Nobody will explain anything to &lt;em&gt;you&lt;/em&gt;,
because it&amp;#39;s a waste of money and time. What the project will do instead is
fix its code base so that it becomes cleaner and more obvious for
you &lt;em&gt;and everybody else&lt;/em&gt;. Thus, never ask for explanation or help, ask for
documentation and source code fixes.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;You can blame everybody around you, but first of all you should blame the code base itself.&lt;/aside&gt;

&lt;p&gt;What do you do next? You sit and wait, until those tickets are resolved.
Who will resolve them? You don&amp;#39;t care. That&amp;#39;s a problem for the project manager.
Maybe he/she will even assign those tickets back to you and it will
be your problem to resolve them. But if that happens, the scope of work will
be different for you. You won&amp;#39;t need to fix the bug anymore, you will
have to document some functionality or refactor some module.&lt;/p&gt;

&lt;p&gt;You will have other problems in this new and smaller scope.
You will create new tickets, blaming everybody around you, and they also
may come back to you. And so on and so forth. Ultimately, the scope
of a ticket will be as small as it&amp;#39;s possible to fix in 30 minutes.&lt;/p&gt;

&lt;p&gt;See the algorithm? I&amp;#39;m sure you do, but it&amp;#39;s very difficult to apply it to
real life and real software projects, for a few obvious psychological reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You are ashamed&lt;/strong&gt;.
You are trained to feel guilty when you are not smart enough.
What can I say?
Just &lt;a href=&quot;https://www.youtube.com/watch?v=Ow0lr63y4Mw&quot;&gt;stop it&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You are a &lt;a href=&quot;https://en.wikipedia.org/wiki/Perfectionism_%28psychology%29&quot;&gt;perfectionist&lt;/a&gt;&lt;/strong&gt;.
You want to complete the entire ticket, solve the entire problem,
and understand the entire scope.
What can I say?
This won&amp;#39;t be solved while the project continues to pay you
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;by the hour/month&lt;/a&gt;.
Once they start paying for results, this disease will be cured.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You have no passion&lt;/strong&gt;.
You just don&amp;#39;t care about the quality of code at all.
You don&amp;#39;t want it to look clean, you can&amp;#39;t even tell what clean is
or what messy is. You just want them to pay you by the end
of the month. In this case you won&amp;#39;t even know what tickets to
report.
What can I say?
I guess you have to try and find another job.
Maybe a &lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;manager&lt;/a&gt;?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You are afraid&lt;/strong&gt;.
Blaming the project and reporting tickets may look like you
have a negative attitude towards the code base, and people who
created it, which is not true. Instead, your attitude is
&lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;positive&lt;/a&gt;,
since you care about it and want it to get better.
What can I say?
Make your tickets sound extremely polite and gentle.
But keep reporting them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You have no time&lt;/strong&gt;.
You have to solve the problem now and you have no time to wait
for the resolution of those complaints you reported.
What can I say?
Blame the management and require more time. Much more time.
But never blame yourself.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Software development is perfect territory for
&lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;cutting corners&lt;/a&gt;,
being lazy and remaining calm, because our work is often discrete and can
be very incremental. Very occasionally it might not be possible to blame the project
and put the ticket on pause until all your complaints are addressed.
I can&amp;#39;t imagine such a situation though. If you can, please let me know.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><category term="zerocracy" /><summary type="html">What frustrates me most in my profession of software development
is the regular necessity to understand large problem scopes before fixing
small bugs, especially if the code is
legacy and not mine. Actually,
it&amp;#39;s even more frustrating when the code is mine. The &amp;quot;deep thinking,&amp;quot; as
they call it,
which is always required before even a small issue can be resolved, seriously
turns me away from programming. Or did turn me away. Until I started
to think differently and encourage myself to be lazy. Here is how.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/04/sin-city.jpg" /></entry><entry><title type="html">Nine Steps of Learning by Refactoring</title><link href="https://www.yegor256.com/2018/04/10/learning-by-refactoring.html" rel="alternate" type="text/html" title="Nine Steps of Learning by Refactoring" /><published>2018-04-10T00:00:00+00:00</published><updated>2018-04-10T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/04/10/learning-by-refactoring</id><content type="html" xml:base="https://www.yegor256.com/2018/04/10/learning-by-refactoring.html">&lt;p&gt;I &lt;a href=&quot;https://twitter.com/yegor256/status/977799130100781056&quot;&gt;was asked&lt;/a&gt;
on Twitter recently how is it possible to refactor
if one doesn&amp;#39;t understand how the code works.
I &lt;a href=&quot;https://twitter.com/yegor256/status/977966601227112449&quot;&gt;replied&lt;/a&gt;
that it is &amp;quot;learning by refactoring.&amp;quot; Then I tried to Google it
and found &lt;a href=&quot;https://www.google.ru/search?q=%22learning+by+refactoring%22&quot;&gt;nothing&lt;/a&gt;.
I was surprised. To me refactoring seems to be the most effective and
obvious way to study the source code. Here is how I usually do it,
in nine object-oriented steps.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Dom Hemingway (2013) by Richard Shepard&#39; src=&#39;/images/2018/04/dom-hemingway.jpg&#39; longdesc=&#39;#e8b2dbc0&#39;/&gt;&lt;figcaption id=&#39;e8b2dbc0&#39;&gt;Dom Hemingway (2013) by Richard Shepard&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;According to Wikipedia,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_refactoring&quot;&gt;code refactoring&lt;/a&gt; is
&amp;quot;the process of restructuring existing computer code&amp;mdash;changing the
factoring&amp;mdash;without changing its external behavior.&amp;quot; The goal
of refactoring is to make code more readable and suitable for modifications.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;https://amzn.to/2E7i17H&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/refactoring.jpg&#39; style=&#39;width:96px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Martin Fowler in his famous book &lt;a href=&quot;https://amzn.to/2E7i17H&quot;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt;
suggested a number of refactoring techniques which help making
code simpler, more abstract, more readable, etc. Some of them
are rather
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;questionable&lt;/a&gt;
from an object-oriented standpoint&amp;mdash;like
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_encapsulation&quot;&gt;Encapsulate Field&lt;/a&gt;,
for example&amp;mdash;but most of them are valid.&lt;/p&gt;

&lt;p&gt;Here is what I&amp;#39;m usually doing when I don&amp;#39;t know the code, but need to modify it.
The techniques are sorted by the order of complexity, starting with
the easiest one.&lt;/p&gt;

&lt;h2 id=&quot;remove-ide-red-spots&quot;&gt;Remove IDE Red Spots&lt;/h2&gt;

&lt;p&gt;When I open the source code of &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt;
in IntelliJ IDEA, using my
custom &lt;a href=&quot;/bin/settings.jar&quot;&gt;&lt;code&gt;settings.jar&lt;/code&gt;&lt;/a&gt;, I see something like this:&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/cactoos-listing.jpg&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;When I open the source code of, say,
&lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;Spring Boot&lt;/a&gt;,
I see something like this
(it&amp;#39;s &lt;a href=&quot;https://github.com/spring-projects/spring-boot/blob/v2.0.0.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java&quot;&gt;&lt;code&gt;o.s.b.ImageBanner&lt;/code&gt;&lt;/a&gt;
randomly picked out of a thousand other classes that look very similar):&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/springboot-listing.jpg&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;The first thing I do, when I see someone else&amp;#39;s code, is to make it &amp;quot;red spots free&amp;quot;
for my IDE. Most of those red spots are easy to remove,
while others will take some time to refactor.
While doing that I learn a lot about the &lt;del&gt;crap&lt;/del&gt; program I have
to deal with.&lt;/p&gt;

&lt;h2 id=&quot;remove-empty-lines&quot;&gt;Remove Empty Lines&lt;/h2&gt;

&lt;p&gt;I &lt;a href=&quot;/2014/11/03/empty-line-code-smell.html&quot;&gt;wrote&lt;/a&gt;
some time ago that empty lines inside method bodies are bad things.
They are obvious indicators of redundant complexity. Programmers tend
to add them to their methods in order to simplify things.&lt;/p&gt;

&lt;p&gt;This is a method from the &lt;a href=&quot;https://github.com/apache/maven&quot;&gt;Apache Maven&lt;/a&gt; code base
(class &lt;a href=&quot;https://github.com/apache/maven/blob/maven-3.5.3/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java&quot;&gt;&lt;code&gt;RepositoryUtils&lt;/code&gt;&lt;/a&gt;
picked at random, but almost all other classes are formatted the same way):&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/maven-listing.jpg&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;Aside from being &amp;quot;all red&amp;quot; their code is full of empty lines.
Removing them will make code more readable and will also help me
understand how it works. Bigger methods will need refactoring, since
without empty lines they will become almost completely unreadable. Hence,
I compress, understand, and make them smaller mostly by breaking
them down into smaller methods.&lt;/p&gt;

&lt;h2 id=&quot;make-names-shorter&quot;&gt;Make Names Shorter&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m generally in favor of short one-noun names for variables and one-verb names
for methods. I &lt;a href=&quot;/2015/01/12/compound-name-is-code-smell.html&quot;&gt;believe&lt;/a&gt;
that longer &amp;quot;compound&amp;quot; names are an indicator of unnecessary code complexity.&lt;/p&gt;

&lt;p&gt;For example, I found this method
&lt;code&gt;registerServletContainerInitializerToDriveServletContextInitializers&lt;/code&gt; (69 characters!)
in the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/blob/v2.0.0.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java&quot;&gt;&lt;code&gt;o.s.b.w.e.u.UndertowServletWebServerFactory&lt;/code&gt;&lt;/a&gt;
class in Spring Boot.
I wonder why the author skipped the &lt;code&gt;couldYouPlease&lt;/code&gt; prefix
and the &lt;code&gt;otherwiseThrowAnException&lt;/code&gt; suffix.&lt;/p&gt;

&lt;p&gt;Jokes aside, such long method names clearly demonstrate that the code
is too complex and can&amp;#39;t be explained with a simple &lt;code&gt;register&lt;/code&gt; or even
&lt;code&gt;registerContainer&lt;/code&gt;. It seems that there are many different containers,
initializers, servlets, and other creatures that need to be registered
somehow. When I join a project and see a method with this name I&amp;#39;m getting
ready for big trouble.&lt;/p&gt;

&lt;p&gt;Making names shorter is the mandatory refactoring step I take when
starting to work with foreign or legacy code.&lt;/p&gt;

&lt;h2 id=&quot;add-unit-tests&quot;&gt;Add Unit Tests&lt;/h2&gt;

&lt;p&gt;Most classes (and methods) come without any documentation, especially
if we are talking about closed-source commercial code. We are lucky if
the classes have more or less descriptive names and are small and
cohesive.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/1PBpoDT&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2015/04/book-goos.jpg&#39; style=&#39;width:96px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/1SdcZ8M&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2015/04/book-legacy.jpg&#39; style=&#39;width:96px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;However, instead of documentation I prefer to deal with unit tests. They
explain the code much better and prove that it works. When I don&amp;#39;t
understand how the class works, I try to write a unit test for it. In most
cases it&amp;#39;s not possible, for many reasons. In such a case I try to apply
everything I learned from
&lt;a href=&quot;http://amzn.to/1SdcZ8M&quot;&gt;&lt;em&gt;Working Effectively With Legacy Code&lt;/em&gt;&lt;/a&gt;
by Michael Feathers
and
&lt;a href=&quot;http://amzn.to/1PBpoDT&quot;&gt;&lt;em&gt;Growing Object-Oriented Software, Guided by Tests&lt;/em&gt;&lt;/a&gt;
by Steve Freeman and Nat Pryce.
Both books are pretty much focused on this very problem: what to do
when you don&amp;#39;t know what to do, testing-wise.&lt;/p&gt;

&lt;h2 id=&quot;remove-multiple-returns&quot;&gt;Remove Multiple Returns&lt;/h2&gt;

&lt;p&gt;I &lt;a href=&quot;/2015/08/18/multiple-return-statements-in-oop.html&quot;&gt;wrote earlier&lt;/a&gt;
that the presence of multiple &lt;code&gt;return&lt;/code&gt; statements in a single method is not something
object-oriented programming should encourage. Instead, a method must
always have a single exit point, just like those functions in
functional programming.&lt;/p&gt;

&lt;p&gt;Look at this method from the
&lt;a href=&quot;https://github.com/spring-projects/spring-boot/blob/v2.0.0.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java&quot;&gt;&lt;code&gt;o.s.b.c.p.b.Binder&lt;/code&gt;&lt;/a&gt;
class from Spring Boot (there are many similar examples there, I picked this one randomly):&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/binder-listing.jpg&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;There are five &lt;code&gt;return&lt;/code&gt; statements in such a small method. For object-oriented
code that&amp;#39;s too much. It&amp;#39;s OK for procedural code, which I also write
sometimes. For example, &lt;a href=&quot;https://github.com/zerocracy/farm/blob/master/src/main/resources/com/zerocracy/stk/pm/in/orders/start_order_if_assigned_in_github.groovy&quot;&gt;this Groovy script&lt;/a&gt;
of ours has five &lt;code&gt;return&lt;/code&gt; keywords too:&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2018/04/farm-listing.jpg&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;But this is Groovy and it&amp;#39;s not a class. It&amp;#39;s just a procedure, a script.&lt;/p&gt;

&lt;p&gt;Refactoring and removing multiple &lt;code&gt;return&lt;/code&gt; statements definitely helps
make code cleaner. Mostly because without them it&amp;#39;s necessary to use
deeper nesting of &lt;code&gt;if/then/else&lt;/code&gt; statements and then the code starts to look
ugly, unless you break it down into smaller pieces.&lt;/p&gt;

&lt;h2 id=&quot;get-rid-of-nulls&quot;&gt;Get Rid of NULLs&lt;/h2&gt;

&lt;p&gt;NULLs &lt;a href=&quot;/2014/05/13/why-null-is-bad.html&quot;&gt;are evil&lt;/a&gt;,
it&amp;#39;s a well-known fact. However, they are still everywhere. For example,
there are 4,100 Java files in Spring Boot v2.0.0.RELEASE and 243K LoC,
which include the &lt;code&gt;null&lt;/code&gt; keyword 7,055 times. This means approximately one &lt;code&gt;null&lt;/code&gt;
for every 35 lines.&lt;/p&gt;

&lt;p&gt;To the contrary, &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes Framework&lt;/a&gt;, which I founded a few years ago,
has 771 Java files, 154K LoC, and 58 &lt;code&gt;null&lt;/code&gt; keywords. Which is roughly
one &lt;code&gt;null&lt;/code&gt; per 2,700 lines. See the difference?&lt;/p&gt;

&lt;p&gt;The code gets cleaner when you remove NULLs, but it&amp;#39;s not so easy to do.
Sometimes it&amp;#39;s even impossible. That&amp;#39;s why we still have those 58 cases
of &lt;code&gt;null&lt;/code&gt; in Takes. We simply can&amp;#39;t remove them, because they are coming
from the JDK.&lt;/p&gt;

&lt;h2 id=&quot;make-objects-immutable&quot;&gt;Make Objects Immutable&lt;/h2&gt;

&lt;p&gt;As I &lt;a href=&quot;/2014/11/07/how-immutability-helps.html&quot;&gt;demonstrated&lt;/a&gt;
some time ago,
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;immutability&lt;/a&gt;
helps keep objects smaller. Most classes
that I see in the foreign code I deal with are mutable. And large.&lt;/p&gt;

&lt;p&gt;If you look at any artifact analyzed by &lt;a href=&quot;http://www.jpeek.org&quot;&gt;jpeek&lt;/a&gt;,
you will see that in most of them approximately 80% of classes
are mutable. Moving from mutability to immutability is a big challenge
in object-oriented programming, which, if resolved, leads to better
code.&lt;/p&gt;

&lt;p&gt;This refactoring step of make things immutable is purely profitable.&lt;/p&gt;

&lt;h2 id=&quot;remove-static&quot;&gt;Remove Static&lt;/h2&gt;

&lt;p&gt;Static methods and attributes are convenient,
if you are a procedural programmer. If your
code is object-oriented, they
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;must go away&lt;/a&gt;. In Spring Boot there
are 7,482 &lt;code&gt;static&lt;/code&gt; keywords, which means one for every 32 lines of code.
To the contrary, in Takes we have 310 &lt;code&gt;static&lt;/code&gt;-s, which is
one every 496 lines.&lt;/p&gt;

&lt;p&gt;Compare these numbers with the statistics about NULL and you will see
that getting rid of &lt;code&gt;static&lt;/code&gt; is a more complex task.&lt;/p&gt;

&lt;h2 id=&quot;apply-static-analysis&quot;&gt;Apply Static Analysis&lt;/h2&gt;

&lt;p&gt;This is the final step and the most complex one. It&amp;#39;s complex because
I configure static analyzers to their maximum potential or even more.
I&amp;#39;m using &lt;a href=&quot;http://www.qulice.com&quot;&gt;Qulice&lt;/a&gt;,
which is an aggregator of
&lt;a href=&quot;http://checkstyle.sourceforge.net/&quot;&gt;Checkstyle&lt;/a&gt;,
&lt;a href=&quot;http://pmd.sourceforge.net/&quot;&gt;PMD&lt;/a&gt;, and
&lt;a href=&quot;http://findbugs.sourceforge.net/&quot;&gt;FindBugs&lt;/a&gt;.
Those guys are strong by themselves, but Qulice makes them
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;even stronger&lt;/a&gt;,
adding a few dozen custom-made checks.&lt;/p&gt;

&lt;p&gt;The principle I use for static analysis is 0/100. This means that either
the entire code base is clean and there are no Qulice complaints, or it&amp;#39;s
dirty. There is nothing in the middle. This is not a very typical way
of looking at static analysis. Most programmers are using those tools
just to collect &amp;quot;opinions&amp;quot; about their code. I&amp;#39;m using them as guides
for refactoring.&lt;/p&gt;

&lt;p&gt;Check out this video, which demonstrates the amount of complaints Qulice
gives for the &lt;code&gt;spring-boot-project/spring-boot&lt;/code&gt; sub-module in Spring Boot
(the video has no end, since I lost my patience in waiting):&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DDtAKIyuRMA?rel=0&amp;amp;controls=0&amp;amp;showinfo=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;When Qulice says that everything is clean, I consider the code base fully
ready for maintenance and modifications. At this point the refactoring
is done.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="refactoring" /><summary type="html">I was asked
on Twitter recently how is it possible to refactor
if one doesn&amp;#39;t understand how the code works.
I replied
that it is &amp;quot;learning by refactoring.&amp;quot; Then I tried to Google it
and found nothing.
I was surprised. To me refactoring seems to be the most effective and
obvious way to study the source code. Here is how I usually do it,
in nine object-oriented steps.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/04/dom-hemingway.jpg" /></entry><entry><title type="html">Fully Transparent Donations via Zerocracy</title><link href="https://www.yegor256.com/2018/04/03/donations-via-zerocracy.html" rel="alternate" type="text/html" title="Fully Transparent Donations via Zerocracy" /><published>2018-04-03T00:00:00+00:00</published><updated>2018-04-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/04/03/donations-via-zerocracy</id><content type="html" xml:base="https://www.yegor256.com/2018/04/03/donations-via-zerocracy.html">&lt;p&gt;Open source is free, as in beer: you write code, nobody pays you. Of course,
there are &lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;many ways&lt;/a&gt;
to monetize your efforts, but there will be no
direct cash payments from your users, usually. There are &lt;a href=&quot;https://hackernoon.com/why-funding-open-source-is-hard-652b7055569d&quot;&gt;ways&lt;/a&gt;
to collect money, which include an obvious &amp;quot;tip jar&amp;quot; button on your GitHub project page.
The chances anyone will pay
&lt;a href=&quot;https://news.ycombinator.com/item?id=14446516&quot;&gt;are low&lt;/a&gt; though. In my opinion,
this is mostly because nobody trusts you enough&amp;mdash;they are not sure you will
use the money to make the product better. Most likely you will just spend it
and nothing will change. But they want the product, not to make you happier.
At least that&amp;#39;s what I feel when I see a &lt;a href=&quot;https://patreon.com/&quot;&gt;Patreon&lt;/a&gt; button.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Last Tango in Paris (1972) by Bernardo Bertolucci&#39; src=&#39;/images/2018/04/last-tango-in-paris.jpg&#39; longdesc=&#39;#1ea97881&#39;/&gt;&lt;figcaption id=&#39;1ea97881&#39;&gt;Last Tango in Paris (1972) by Bernardo Bertolucci&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt; is a platform that manages programmers remotely.
Moreover, it&amp;#39;s absolutely &lt;a href=&quot;http://www.zerocracy.com/policy.html#23&quot;&gt;free&lt;/a&gt; for open source projects. Take a
look at &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt; or &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes&lt;/a&gt;&amp;mdash;they
are both managed by
&lt;a href=&quot;/2018/03/21/zerocracy-announcement.html&quot;&gt;Zerocrat&lt;/a&gt;. These projects
are funded by myself. I add money to Zerocracy out of my pocket and Zerocracy
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;pays&lt;/a&gt;
programmers when they close their &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;microtasks&lt;/a&gt; in GitHub.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.zerocracy.com&#39;&gt;&lt;img src=&#39;http://www.0crat.com/svg/logo.svg&#39; style=&#39;width:100px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;A few days ago someone approached me by email and literally said: &amp;quot;There
is a bug in your project, I&amp;#39;m happy to pay you for your time if you can come
up with a solution.&amp;quot; He was ready to donate and wanted me (or us) to solve
his specific issue. I could just take his money over PayPal and fix the issue,
but I&amp;#39;m not really an active maintainer of the project he was interested in,
and I&amp;#39;m busy at the moment.&lt;/p&gt;

&lt;p&gt;I realized that the best way would be to take the money,
break down the problem into pieces, and delegate them to a few programmers,
just like it usually works in Zerocracy. In other words, I decided to suggest
he fund the project and then let us use the funds for
&lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;microtasking&lt;/a&gt;,
keeping the focus on the issue he was interested in.&lt;/p&gt;

&lt;p&gt;Moreover, this concept was
&lt;a href=&quot;https://github.com/zerocracy/datum/issues/212&quot;&gt;earlier proposed&lt;/a&gt;
by &lt;a href=&quot;https://github.com/skapral&quot;&gt;&lt;code&gt;@skapral&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He gladly accepted the offer.
We &lt;a href=&quot;https://github.com/zerocracy/farm/issues/866&quot;&gt;implemented&lt;/a&gt; the functionality in
&lt;a href=&quot;https://www.0crat.com&quot;&gt;Zerocrat&lt;/a&gt; and he contributed $128 via Stripe.&lt;/p&gt;

&lt;p&gt;Now &lt;a href=&quot;http://www.zerocracy.com/policy.html#50&quot;&gt;anyone&lt;/a&gt;
can give a few dollars to a project, if it&amp;#39;s
managed by Zerocracy. The contributor will see how those funds are being spent, down to each and every dollar!
Try, for example, one of these buttons and you will see detailed
financial reports of each project and will be able to add your funds:&lt;/p&gt;

&lt;p&gt;Cactoos.org:&lt;br/&gt;
&lt;a href=&quot;https://www.0crat.com/contrib/C63314D6Z&quot;&gt;&lt;img src=&quot;https://www.0crat.com/contrib-badge/C63314D6Z.svg&quot; alt=&quot;Donate via Zerocracy&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Takes.org:&lt;br/&gt;
&lt;a href=&quot;https://www.0crat.com/contrib/C3FFK3YAY&quot;&gt;&lt;img src=&quot;https://www.0crat.com/contrib-badge/C3FFK3YAY.svg&quot; alt=&quot;Donate via Zerocracy&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The advantage of this approach, compared to, for example,
&lt;a href=&quot;https://www.bountysource.com/&quot;&gt;BountySource&lt;/a&gt;, is that the money will
be distributed in micro-payments and will be fully traceable. I believe
that this makes a difference for donators&amp;mdash;they are interested to see
how their money is being used.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="zerocracy" /><summary type="html">Open source is free, as in beer: you write code, nobody pays you. Of course,
there are many ways
to monetize your efforts, but there will be no
direct cash payments from your users, usually. There are ways
to collect money, which include an obvious &amp;quot;tip jar&amp;quot; button on your GitHub project page.
The chances anyone will pay
are low though. In my opinion,
this is mostly because nobody trusts you enough&amp;mdash;they are not sure you will
use the money to make the product better. Most likely you will just spend it
and nothing will change. But they want the product, not to make you happier.
At least that&amp;#39;s what I feel when I see a Patreon button.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/04/last-tango-in-paris.jpg" /></entry><entry><title type="html">How I Test My Java Classes for Thread-Safety</title><link href="https://www.yegor256.com/2018/03/27/how-to-test-thread-safety.html" rel="alternate" type="text/html" title="How I Test My Java Classes for Thread-Safety" /><published>2018-03-27T00:00:00+00:00</published><updated>2018-03-27T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/03/27/how-to-test-thread-safety</id><content type="html" xml:base="https://www.yegor256.com/2018/03/27/how-to-test-thread-safety.html">&lt;p&gt;I touched on this problem in &lt;a href=&quot;https://www.youtube.com/watch?v=rC17YwowURQ&quot;&gt;one of my recent webinars&lt;/a&gt;,
now it&amp;#39;s time to explain it in writing. Thread-safety is an important
quality of classes in languages/platforms like Java, where we frequently share
objects between threads. The issues caused by lack of thread-safety
are very difficult to debug, since they are sporadic and almost impossible
to reproduce on purpose. How do you test your objects to make sure
they are thread-safe? Here is how I&amp;#39;m doing it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Scent of a Woman (1992) by Martin Brest&#39; src=&#39;/images/2018/03/scent-of-a-woman.jpg&#39; longdesc=&#39;#e9a2355c&#39;/&gt;&lt;figcaption id=&#39;e9a2355c&#39;&gt;Scent of a Woman (1992) by Martin Brest&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let us say there is a simple in-memory bookshelf:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConcurrentHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First, we put a book there and the bookshelf returns its ID. Then we can
read the title of the book by its ID:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Elegant Objects&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The class seems to be thread-safe, since we are using the thread-safe
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html&quot;&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;&lt;/a&gt;
instead of a more primitive and non-thread-safe
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;,
right? Let&amp;#39;s try to test it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BooksTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addsAndRetrieves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Elegant Objects&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The test passes, but it&amp;#39;s just a one-thread test. Let&amp;#39;s try to do the
same manipulation from a few parallel threads (I&amp;#39;m using
&lt;a href=&quot;https://github.com/hamcrest/JavaHamcrest&quot;&gt;Hamcrest&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BooksTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addsAndRetrieves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Book #%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First, I create a pool of threads via
&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt;.
Then I submit ten objects of type
&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html&quot;&gt;&lt;code&gt;Callable&lt;/code&gt;&lt;/a&gt; via
&lt;code&gt;submit()&lt;/code&gt;. Each of them will add a new
unique book to the bookshelf. All of them will be executed, in some
unpredictable order, by some of those ten threads from the pool.&lt;/p&gt;

&lt;aside class=&#39;youtube&#39;&gt;
        &lt;a href=&#39;https://www.youtube.com/watch?v=rC17YwowURQ&#39;&gt;&lt;div class=&#39;box&#39;&gt;
        &lt;img src=&#39;https://i.ytimg.com/vi/rC17YwowURQ/mqdefault.jpg&#39; alt=&#39;YouTube video #rC17YwowURQ&#39;/&gt;
        &lt;div class=&#39;play&#39;&gt;&lt;i class=&#39;icon icon-play&#39;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;Synchronized Decorators for Thread-Safety (Webinar #32);
        7 February 2018.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Then I fetch the results of their executors through the list of objects
of type
&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;.
Finally, I calculate the amount of unique book IDs
created. If the number is 10, there were no conflicts. I&amp;#39;m using the
&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Set.html&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;
collection in order to make sure the list of IDs contains only
unique elements.&lt;/p&gt;

&lt;p&gt;The test passes on my laptop. However, it&amp;#39;s not strong enough. The problem
here is that it&amp;#39;s not really testing the &lt;code&gt;Books&lt;/code&gt; from multiple parallel threads.
The time that passes between our calls to &lt;code&gt;submit()&lt;/code&gt; is large enough to finish
the execution of &lt;code&gt;books.add()&lt;/code&gt;. That&amp;#39;s why in reality only one thread
will run at the same time. We can check that by modifying the code a bit:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtomicBoolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicBoolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overlaps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Book #%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;overlaps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overlaps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this code I&amp;#39;m trying to see how often threads overlap each other and
do something in parallel. This never happens and &lt;code&gt;overlaps&lt;/code&gt; is equal to zero.
Thus our test is not really testing anything yet. It just adds ten
books to the bookshelf one by one. If I increase the amount of threads to
1000, they start to overlap sometimes. But we want them to overlap even
when there&amp;#39;s a small number of them.
To solve that we need to use
&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CountDownLatch.html&quot;&gt;&lt;code&gt;CountDownLatch&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CountDownLatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountDownLatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AtomicBoolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicBoolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overlaps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Book #%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;overlaps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;countDown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overlaps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now each thread, before touching the books, waits for the permission
given by &lt;code&gt;latch&lt;/code&gt;. When we submit them all via &lt;code&gt;submit()&lt;/code&gt; they stay on hold
and wait. Then we release the latch with &lt;code&gt;countDown()&lt;/code&gt; and they all start
to go, simultaneously. Now, on my laptop, &lt;code&gt;overlaps&lt;/code&gt; is equal to 3-5 even when &lt;code&gt;threads&lt;/code&gt;
is 10.&lt;/p&gt;

&lt;p&gt;And that last &lt;code&gt;assertThat()&lt;/code&gt; crashes now! I&amp;#39;m not getting 10 book IDs,
as I was before. It&amp;#39;s 7-9, but never 10. The class, apparently, is not thread-safe!&lt;/p&gt;

&lt;p&gt;But before we fix the class, let&amp;#39;s make our test simpler. Let&amp;#39;s use
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.29/org/cactoos/matchers/RunsInThreads.html&quot;&gt;&lt;code&gt;RunInThreads&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt;, which does exactly the same as we&amp;#39;ve done above,
but under the hood:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BooksTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addsAndRetrieves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MatcherAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;Book #%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAndIncrement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RunsInThreads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/2c7sVS1&#39;&gt;&lt;img src=&#39;https://www.yegor256.com/images/2014/12/java-concurrency-in-practice.png&#39; style=&#39;width:100px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;The first argument of &lt;code&gt;assertThat()&lt;/code&gt; is an instance of
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.29/org/cactoos/Func.html&quot;&gt;&lt;code&gt;Func&lt;/code&gt;&lt;/a&gt;
(a functional interface), accepting an
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html&quot;&gt;&lt;code&gt;AtomicInteger&lt;/code&gt;&lt;/a&gt;
(the first argument of &lt;code&gt;RunsInThreads&lt;/code&gt;) and returning &lt;code&gt;Boolean&lt;/code&gt;. This function will
be executed on 10 parallel thread, using the same latch-based approach
as demonstrated above.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;RunInThreads&lt;/code&gt; seems to be compact and convenient, I&amp;#39;m using it
in a few projects already.&lt;/p&gt;

&lt;p&gt;By the way, in order to make &lt;code&gt;Books&lt;/code&gt; thread-safe we just need to add
&lt;code&gt;synchronized&lt;/code&gt; to its method &lt;code&gt;add()&lt;/code&gt;. Or maybe you can suggest a better
solution?&lt;/p&gt;

&lt;p&gt;P.S. I learned all this from &lt;a href=&quot;http://amzn.to/2c7sVS1&quot;&gt;Java Concurrency in Practice&lt;/a&gt;
by Goetz et al.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><summary type="html">I touched on this problem in one of my recent webinars,
now it&amp;#39;s time to explain it in writing. Thread-safety is an important
quality of classes in languages/platforms like Java, where we frequently share
objects between threads. The issues caused by lack of thread-safety
are very difficult to debug, since they are sporadic and almost impossible
to reproduce on purpose. How do you test your objects to make sure
they are thread-safe? Here is how I&amp;#39;m doing it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/03/scent-of-a-woman.jpg" /></entry><entry><title type="html">Zerocracy: A Project Manager That Never Sleeps</title><link href="https://www.yegor256.com/2018/03/21/zerocracy-announcement.html" rel="alternate" type="text/html" title="Zerocracy: A Project Manager That Never Sleeps" /><published>2018-03-21T00:00:00+00:00</published><updated>2018-03-21T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/03/21/zerocracy-announcement</id><content type="html" xml:base="https://www.yegor256.com/2018/03/21/zerocracy-announcement.html">&lt;p&gt;I&amp;#39;ve been in the software business for almost 30 years. I wrote my first piece of code
when I was 12. Since then I have been programming and managing other programmers,
hiring and firing them, planning projects and their budgets, finding and losing
customers, investing into software teams and losing my investments,
even teaching others how to manage software projects. What is my overall
impression? It&amp;#39;s a pain. I think I&amp;#39;ve found a solution though.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Casino (1995) by Martin Scorsese&#39; src=&#39;/images/2018/03/casino.jpg&#39; longdesc=&#39;#23194099&#39;/&gt;&lt;figcaption id=&#39;23194099&#39;&gt;Casino (1995) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Software projects &lt;a href=&quot;/2015/05/21/avoid-software-outsourcing-disaster.html&quot;&gt;fail&lt;/a&gt;.
Most of them, anyway. Miserably. They run out of money, they
produce software that doesn&amp;#39;t work, they miss deadlines, they
lose key people and fall apart, and so on.
Why does it happen? Not because programmers are stupid, nor technologies immature, and not because
hardware is unstable.&lt;/p&gt;

&lt;p&gt;They fail &lt;a href=&quot;https://www.infoq.com/articles/software-failure-reasons&quot;&gt;because&lt;/a&gt; we don&amp;#39;t manage them.&lt;/p&gt;

&lt;p&gt;We miss important data, we lose track of events, we don&amp;#39;t pay attention
to risks and threats, we don&amp;#39;t plan time and money, and we don&amp;#39;t do many other
things that &lt;a href=&quot;https://en.wikipedia.org/wiki/Project_Management_Body_of_Knowledge&quot;&gt;PMBOK&lt;/a&gt;
says we have to do in order to keep a project under control.&lt;/p&gt;

&lt;aside class=&#39;youtube&#39;&gt;
        &lt;a href=&#39;https://www.youtube.com/watch?v=AwrMKTFyohg&#39;&gt;&lt;div class=&#39;box&#39;&gt;
        &lt;img src=&#39;https://i.ytimg.com/vi/AwrMKTFyohg/mqdefault.jpg&#39; alt=&#39;YouTube video #AwrMKTFyohg&#39;/&gt;
        &lt;div class=&#39;play&#39;&gt;&lt;i class=&#39;icon icon-play&#39;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;#NoMagic;
        13 April 2018.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;What do we do instead?&lt;/p&gt;

&lt;p&gt;We rely on our innate hierarchical instincts and hope for the best.&lt;/p&gt;

&lt;p&gt;Here is what I mean by that.
First, we put a group of people together, also known as programmers. Then,
we tell them how &lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;important&lt;/a&gt;
the goal is that they are going to achieve&amp;mdash;develop
a software product. Then we make sure they know who the boss is, by paying
them &lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;by the hour&lt;/a&gt;.
Finally, thanks to their upbringing and education,
they &amp;quot;do the right thing&amp;quot; and software gets created. Maybe. If we are lucky.&lt;/p&gt;

&lt;p&gt;This is exactly how it has worked in the Animal Kingdom, for millions of years.
In order to survive, mammals create hierarchies: the strongest males are on top, others
do what they say. If they don&amp;#39;t obey, violence helps. Scientists &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/26133375&quot;&gt;think&lt;/a&gt;
that humans are also very hierarchical creatures&amp;mdash;we feel discomfort
if we don&amp;#39;t know who the boss is, who to submit to.&lt;/p&gt;

&lt;p&gt;Thanks to this hierarchical instinct, just like lions, wolves, and monkeys,
we manage our projects using force.
We, unlike the animals, don&amp;#39;t use physical violence anymore, at least not in the software business, but
we have a huge arsenal of more sophisticated
&lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;punishment methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They do work.&lt;/p&gt;

&lt;p&gt;However, due to the complexity of our profession, the quality
and efficacy of the results we observe are very low.
The &lt;a href=&quot;https://www.projectsmart.co.uk/white-papers/chaos-report.pdf&quot;&gt;CHAOS Report&lt;/a&gt; (2015)
by the Standish Group says that &amp;quot;software development projects
are in chaos, and we can no longer imitate the three monkeys&amp;mdash;hear no failures,
see no failures, speak no failures.&amp;quot; The report also demonstrates that as a
result of this chaos we have restarts (94% projects!), cost overruns, and time
overruns. The report also says that technology incompetence is the root cause of project failures only in
7% cases. In almost all other cases the management is the source of the trouble.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.zerocracy.com&#39;&gt;&lt;img src=&#39;http://www.0crat.com/svg/logo.svg&#39; style=&#39;width:100px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;We, at &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;,
believe that in the 21st century programmers (and not only them) deserve
a better and a more effective replacement for this
&amp;quot;monkey management.&amp;quot; We believe that the software development world
needs a management model which is based
on people&amp;#39;s professional merits, instead of on their ability to play
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Alpha_%28ethology%29&quot;&gt;alpha/beta&lt;/a&gt; games.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;https://www.0crat.com&#39;&gt;&lt;img src=&#39;https://www.0crat.com/svg/zerocrat.svg&#39; style=&#39;width:100px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Zerocracy offers exactly that: &lt;a href=&quot;https://www.0crat.com&quot;&gt;Zerocrat&lt;/a&gt;, an automated project manager, which
communicates as a chat bot and tells programmers what to do.
It replaces a traditional &amp;quot;boss in the office,&amp;quot;
distributing &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;micro tasks&lt;/a&gt;
among programmers, validating their results,
paying them, and calculating schedule, budget, and scope predictions. It does
all the routine jobs a professional &lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;project manager&lt;/a&gt;
should do on any project, but rarely does do because it&amp;#39;s so boring.
It doesn&amp;#39;t look boring to the robot though.&lt;/p&gt;

&lt;p&gt;Zerocrat is a project manager that never sleeps. It doesn&amp;#39;t make mistakes,
doesn&amp;#39;t forget things, and doesn&amp;#39;t accept excuses.
It also doesn&amp;#39;t know anything about hierarchies. It manages programmers
only by their merits, which are visible via &lt;a href=&quot;https://www.0crat.com/team&quot;&gt;objective metrics&lt;/a&gt;.
Thanks to this, programmers become their own bosses, reporting only to a soulless piece of software,
which acts according to a very strict &lt;a href=&quot;http://www.zerocracy.com/policy.html&quot;&gt;policy&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.xdsd.org&#39;&gt;&lt;img src=&#39;http://www.xdsd.org/images/logo.svg&#39; style=&#39;width:100px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.zerocracy.com/policy.html&quot;&gt;policy&lt;/a&gt;
of Zerocracy is based on &lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt; principles,
which were introduced in 2010 and practiced since then on &lt;a href=&quot;https://www.youtube.com/watch?v=qRZYJGYdrwk&quot;&gt;many&lt;/a&gt;
software projects. The principles have proved able to seriously increase project
predictability, &lt;a href=&quot;/2014/04/11/cost-of-loc.html&quot;&gt;decrease costs&lt;/a&gt;,
and &lt;a href=&quot;/2018/03/06/speed-vs-quality.html&quot;&gt;enforce&lt;/a&gt;
quality of code. Also, they boost the motivation of &lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;the type of programmers&lt;/a&gt;,
who like the idea of being their own bosses.&lt;/p&gt;

&lt;p&gt;How many of those people are out there
on the market&amp;mdash;the future will soon show us.&lt;/p&gt;

&lt;p&gt;Speaking philosophically, while it&amp;#39;s a common
&lt;a href=&quot;https://www.forbes.com/sites/quora/2017/12/18/artificial-intelligence-will-change-the-job-landscape-forever-heres-how-to-prepare/&quot;&gt;belief&lt;/a&gt;
that in the future AI-powered robots will do what we want,
we believe in the opposite: Robots will tell us what to do. Management is
what computers do better, while writing code, drawing diagrams, growing flowers,
or cooking a soup is what we, humans, do better and actually enjoy doing.
We believe that in the future computers will help us organize
ourselves by taking the routine part of the management on themselves.&lt;/p&gt;

&lt;p&gt;Zerocracy makes the first step in this direction.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><category term="zerocracy" /><summary type="html">I&amp;#39;ve been in the software business for almost 30 years. I wrote my first piece of code
when I was 12. Since then I have been programming and managing other programmers,
hiring and firing them, planning projects and their budgets, finding and losing
customers, investing into software teams and losing my investments,
even teaching others how to manage software projects. What is my overall
impression? It&amp;#39;s a pain. I think I&amp;#39;ve found a solution though.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/03/casino.jpg" /></entry><entry><title type="html">Fluent Interfaces Are Bad for Maintainability</title><link href="https://www.yegor256.com/2018/03/13/fluent-interfaces.html" rel="alternate" type="text/html" title="Fluent Interfaces Are Bad for Maintainability" /><published>2018-03-13T00:00:00+00:00</published><updated>2018-03-13T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/03/13/fluent-interfaces</id><content type="html" xml:base="https://www.yegor256.com/2018/03/13/fluent-interfaces.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fluent_interface&quot;&gt;Fluent interface&lt;/a&gt;,
first &lt;a href=&quot;https://martinfowler.com/bliki/FluentInterface.html&quot;&gt;coined&lt;/a&gt;
as a term by Martin Fowler, is a very convenient way of communicating
with objects in OOP. It makes their facades easier to use and understand.
However, it ruins their internal design, making them more difficult
to maintain. A few words were said about that by Marco Pivetta
in his blog post &lt;a href=&quot;https://ocramius.github.io/blog/fluent-interfaces-are-evil/&quot;&gt;Fluent Interfaces are Evil&lt;/a&gt;;
now I will add my few cents.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Donnie Brasco (1997) by Mike Newell&#39; src=&#39;/images/2018/03/donnie-brasco.jpg&#39; longdesc=&#39;#bda17a6d&#39;/&gt;&lt;figcaption id=&#39;bda17a6d&#39;&gt;Donnie Brasco (1997) by Mike Newell&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s take my own library &lt;a href=&quot;http://http.jcabi.com/&quot;&gt;jcabi-http&lt;/a&gt;,
which I created a few years ago,
when I thought that fluent interfaces were a good thing. Here is how you
use the library to make an HTTP request and validate its output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JdkRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RestResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This convenient &lt;a href=&quot;https://en.wikipedia.org/wiki/Method_chaining&quot;&gt;method chaining&lt;/a&gt;
makes the code short and obvious, right?
Yes, it does, on the surface. But the &lt;em&gt;internal&lt;/em&gt; design of the library&amp;#39;s
classes, including &lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/request/JdkRequest.html&quot;&gt;&lt;code&gt;JdkRequest&lt;/code&gt;&lt;/a&gt;,
which is the one you see,
is very far from being elegant. The biggest problem is that
they are rather big and it&amp;#39;s &lt;del&gt;difficult&lt;/del&gt; impossible
to extend them without making them even bigger.&lt;/p&gt;

&lt;aside class=&#39;youtube&#39;&gt;
        &lt;a href=&#39;https://www.youtube.com/watch?v=REj8pJesMVI&#39;&gt;&lt;div class=&#39;box&#39;&gt;
        &lt;img src=&#39;https://i.ytimg.com/vi/REj8pJesMVI/mqdefault.jpg&#39; alt=&#39;YouTube video #REj8pJesMVI&#39;/&gt;
        &lt;div class=&#39;play&#39;&gt;&lt;i class=&#39;icon icon-play&#39;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;The Alternative to Fluent Interfaces in Java (webinar #33);
        4 April 2018.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;For example, right now &lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/request/JdkRequest.html&quot;&gt;&lt;code&gt;JdkRequest&lt;/code&gt;&lt;/a&gt;
has the methods
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Request.html#method%28java.lang.String%29&quot;&gt;&lt;code&gt;method()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Request.html#fetch%28%29&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;,
and a few others. What happens when new functionality is required?
The only way to add to it would be to make the class bigger, by adding new methods,
which is how we jeopardize its maintainability.
&lt;a href=&quot;https://github.com/jcabi/jcabi-http/pull/142/files&quot;&gt;Here&lt;/a&gt;,
for example, we added
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Request.html#multipartBody%28%29&quot;&gt;&lt;code&gt;multipartBody()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://github.com/jcabi/jcabi-http/pull/99/files&quot;&gt;here&lt;/a&gt; we added
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Request.html#timeout%28int,%20int%29&quot;&gt;timeout()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I always feel scared when I get a new feature request in jcabi-http.
I understand that it most probably means adding new methods to
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Request.html&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Response.html&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt;,
and other already bloated interfaces and classes.&lt;/p&gt;

&lt;p&gt;I actually tried to do something in the library in order to solve this problem
but it wasn&amp;#39;t easy. Look at this
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Response.html#as%28java.lang.Class%29&quot;&gt;&lt;code&gt;.as(RestResponse.class)&lt;/code&gt;&lt;/a&gt;
method call. What it does is decorate a &lt;code&gt;Response&lt;/code&gt; with
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/response/RestResponse.html&quot;&gt;&lt;code&gt;RestResponse&lt;/code&gt;&lt;/a&gt;,
in order to make it method-richer. I just didn&amp;#39;t want to make
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Response.html&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt;
contain 50+ methods, like many other libraries do. Here is what it
does (this is pseudo-code):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;class Response {
  RestResponse as() {
    return new RestResponse(this);
  }
  // Seven methods
}
class RestResponse implements Response {
  private final Response origin;
  // Original seven methods from Response
  // Additional 14 methods
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you see, instead of adding all possible methods to &lt;code&gt;Response&lt;/code&gt; I
placed them in supplementary decorators
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/response/RestResponse.html&quot;&gt;&lt;code&gt;RestResponse&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/response/JsonResponse.html&quot;&gt;&lt;code&gt;JsonResponse&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/response/JsonResponse.html&quot;&gt;&lt;code&gt;XmlResponse&lt;/code&gt;&lt;/a&gt;,
and
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/response/package-frame.html&quot;&gt;others&lt;/a&gt;.
It helps, but in order to write these decorators with the central
object of type &lt;code&gt;Response&lt;/code&gt; we have to use that &amp;quot;ugly&amp;quot; method
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Response.html#as%28java.lang.Class%29&quot;&gt;&lt;code&gt;as()&lt;/code&gt;&lt;/a&gt;,
which depends heavily on Reflection and
&lt;a href=&quot;/2015/04/02/class-casting-is-anti-pattern.html&quot;&gt;type casting&lt;/a&gt;.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Fluent interfaces mean large classes or some ugly workarounds.&lt;/aside&gt;

&lt;p&gt;In other words, fluent interfaces mean large classes or some ugly workarounds.
I mentioned this problem earlier, when I &lt;a href=&quot;/2017/10/10/streams-vs-decorators.html&quot;&gt;wrote&lt;/a&gt; about
&lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&quot;&gt;Streams API&lt;/a&gt;
and the interface
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html&quot;&gt;Stream&lt;/a&gt;,
which is perfectly fluent. There are 43 methods!&lt;/p&gt;

&lt;p&gt;That is the biggest problem with fluent interfaces&amp;mdash;they &lt;em&gt;force&lt;/em&gt; objects to be huge.&lt;/p&gt;

&lt;p&gt;Fluent interfaces are perfect for their users, since all methods
are in one place and the amount of classes is very small.
It is easy to use them, especially with
&lt;a href=&quot;https://www.jetbrains.com/help/idea/auto-completing-code.html&quot;&gt;code auto-completion&lt;/a&gt;
in most IDEs. They also make client code more readable, since &amp;quot;fluent&amp;quot; constructs
look similar to plain English (aka &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;That is all true! However, the damage they cause to object design
is the price, which is too high.&lt;/p&gt;

&lt;p&gt;What is the alternative?&lt;/p&gt;

&lt;p&gt;I would recommend you use decorators and
&lt;a href=&quot;/2016/04/26/why-inputstream-design-is-wrong.html&quot;&gt;smart objects&lt;/a&gt;
instead. Here is how I would design jcabi-http, if I could do it now:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BodyOfResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseAssertStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestWithMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JdkRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the same code as in the first snippet above, but it is much
more object-oriented. The obvious problem with this code, of course, is that
the IDE won&amp;#39;t be able to auto-complete almost anything. Also, we will
have to remember many of the names of the classes. And the construct looks
rather difficult to read for those who are used to fluent interfaces. In addition,
it&amp;#39;s very far away from the DSL idea.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Fluent interfaces are good for users, but bad for developers. Small objects are good for developers, but difficult to use.&lt;/aside&gt;

&lt;p&gt;But here is the list of benefits. First, each object is small, very cohesive and
they are all loosely coupled&amp;mdash;which are obvious merits in OOP. Second,
adding new functionality to the library is as easy as creating a new class;
no need to touch existing classes. Third, unit testing is simplified,
since classes are small. Fourth, all classes can be immutable, which is also
an &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;obvious merit&lt;/a&gt; in OOP.&lt;/p&gt;

&lt;p&gt;Thus, there seems to be a conflict between usefulness and maintainability.
Fluent interfaces are good for users, but bad for library developers. Small
objects are good for developers, but difficult to understand and use.&lt;/p&gt;

&lt;p&gt;It seems to be so, but only if you are used to large classes and procedural
programming. To me, a large amount of small classes seems to be an
&lt;a href=&quot;/2017/02/28/too-many-classes.html&quot;&gt;advantage&lt;/a&gt;,
not a drawback. Libraries that are clear, simple, and readable inside
are much easier to use, even when I don&amp;#39;t know exactly which classes out there
are the most suitable for me. Even without the code-auto-complete I can figure
it out myself, because the code is clean.&lt;/p&gt;

&lt;p&gt;Also, I very often find myself interested in extending existing functionality
either inside my code base or via a pull request to the library. I am much more
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;interested&lt;/a&gt;
to do that if I know that the changes I introduce
are isolated and easy to test.&lt;/p&gt;

&lt;p&gt;Thus, no fluent interfaces anymore from me, only objects and decorators.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><category term="oop" /><summary type="html">Fluent interface,
first coined
as a term by Martin Fowler, is a very convenient way of communicating
with objects in OOP. It makes their facades easier to use and understand.
However, it ruins their internal design, making them more difficult
to maintain. A few words were said about that by Marco Pivetta
in his blog post Fluent Interfaces are Evil;
now I will add my few cents.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/03/donnie-brasco.jpg" /></entry><entry><title type="html">Don’t Aim for Quality, Aim for Speed</title><link href="https://www.yegor256.com/2018/03/06/speed-vs-quality.html" rel="alternate" type="text/html" title="Don&#39;t Aim for Quality, Aim for Speed" /><published>2018-03-06T00:00:00+00:00</published><updated>2018-03-06T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/03/06/speed-vs-quality</id><content type="html" xml:base="https://www.yegor256.com/2018/03/06/speed-vs-quality.html">&lt;!-- http://www.yegor256.com/2017/11/28/microtasking.html#comment-3783321466 --&gt;

&lt;p&gt;I decided to write this blog post after reviewing
&lt;a href=&quot;https://github.com/yegor256/jpeek/pull/153&quot;&gt;this pull request&lt;/a&gt;. What happened
there? The author of the PR wasn&amp;#39;t able to figure out
the &amp;quot;right&amp;quot; way to implement it, and the code
reviewer was waiting and waiting. Eventually, the reviewer came to me,
since I was an architect, and &lt;a href=&quot;https://github.com/yegor256/jpeek/pull/153#issuecomment-364412192&quot;&gt;complained&lt;/a&gt;
that it was taking too long and he wasn&amp;#39;t able to
&lt;a href=&quot;http://datum.zerocracy.com/pages/policy.html#27&quot;&gt;earn&lt;/a&gt; his money for the review
he had done. Then the author of the changes
&lt;a href=&quot;https://github.com/yegor256/jpeek/pull/153#issuecomment-364413528&quot;&gt;explained&lt;/a&gt; that he couldn&amp;#39;t
finish since there were impediments and design inconsistencies; he also
couldn&amp;#39;t &lt;a href=&quot;http://datum.zerocracy.com/pages/policy.html#4&quot;&gt;earn&lt;/a&gt;
the money he deserved for fixing the issue. What did I say?
I &lt;a href=&quot;https://github.com/yegor256/jpeek/pull/153#issuecomment-364417885&quot;&gt;said&lt;/a&gt;:
Forget the quality, just finish it any way possible.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Shi mian mai fu (2004) by Yimou Zhang&#39; src=&#39;/images/2018/03/house-of-flying-daggers.jpg&#39; longdesc=&#39;#7b8c6d28&#39;/&gt;&lt;figcaption id=&#39;7b8c6d28&#39;&gt;Shi mian mai fu (2004) by Yimou Zhang&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Was I kidding? Not at all.&lt;/p&gt;

&lt;p&gt;I truly believe that quality is not what programmers should care about. They
must care only about speed&amp;mdash;close tasks as soon as possible&amp;mdash;
which means &lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;make money&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Won&amp;#39;t this attitude ruin the project and turn the code base into a mess?&lt;/p&gt;

&lt;p&gt;Yes, it will.&lt;/p&gt;

&lt;p&gt;If the project doesn&amp;#39;t care about its quality either.&lt;/p&gt;

&lt;p&gt;There must be a permanent conflict between a project and its programmers:
1) the project must be configured to reject anything that lowers the
quality of its artifacts and 2) programmers must be interested
in making changes to those artifacts. The project cares about the quality,
the programmers care about fast delivery of modifications.&lt;/p&gt;

&lt;p&gt;What do I mean by saying that a project rejects low quality? Here is a list
of preventive measures it may take to make it impossible
to jeopardize the quality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;Automated&lt;/a&gt; pre-flight builds;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;Read-only master branch&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;High test coverage bar;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/16/educational-aspect-of-static-analysis.html&quot;&gt;Mandatory&lt;/a&gt; static analysis;&lt;/li&gt;
&lt;li&gt;Multi-step code reviews.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do I mean by saying that programmers must be interested in making changes?
They have to be &lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;motivated&lt;/a&gt;
to close tasks. Not just to &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;be in the project&lt;/a&gt;,
but to deliver. Here is what
they can do in order to close tasks faster:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;Cut corners&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Make changes &lt;a href=&quot;/2015/02/09/serious-code-reviewer.html&quot;&gt;smaller&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;Don&amp;#39;t study&lt;/a&gt; the code, just modify it;&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t feel responsible for all code, just focus on the relevant units/classes;&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t be afraid to &lt;a href=&quot;/2017/03/24/tdd-that-works.html&quot;&gt;break things&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we put these two interests in conflict, we will get a high-quality product, which is
growing very fast. The project will enforce quality, programmers will push
the code forward, making changes fast and frequently.&lt;/p&gt;

&lt;p&gt;Unfortunately, most projects have a very different philosophy. They delegate
quality control to programmers, hoping that they &amp;quot;won&amp;#39;t do evil.&amp;quot;
This leads to frustration, distress, constant fear of mistakes, long delays,
blaming, and shaming. Both the project and its programmers lose.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;If we put these two interests in conflict, we will get a high-quality product, which is growing very fast.&lt;/aside&gt;

&lt;p&gt;Programmers must not be responsible for the quality! They must not care
what they may, or will, break. They must not care how good the code they write is.
They must not &amp;quot;feel responsible&amp;quot; for the overall result. Instead, they must
be focused on making money for their families by writing the largest amount
of code and closing more tickets.&lt;/p&gt;

&lt;p&gt;Not because they are ignorant and selfish, but because this is the right
balance of responsibilities. This is how the project will get the most out
of its developers&amp;mdash;by freeing their minds of unnecessary and unproductive
quality worries and letting them focus on what they do best&amp;mdash;writing code.&lt;/p&gt;

&lt;p&gt;Of course, not every project will be able to configure itself in the most
effective way. Most projects don&amp;#39;t even know how to do it. In those projects,
if you, as a developer, floor the speed pedal, you will most likely ruin
their code base in a few days. That&amp;#39;s why the recommendations above are
only applicable to those who really know what they are doing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zerocracy.com&quot;&gt;We&lt;/a&gt; know what we are doing in our projects. We don&amp;#39;t let any developers
touch any parts of our code, unless the &amp;quot;quality wall&amp;quot; is high and strong enough.
How high is that wall in your projects? Can you say that, no matter how
bad some code is and how sneakily its author introduces it, it will be rejected?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">I decided to write this blog post after reviewing
this pull request. What happened
there? The author of the PR wasn&amp;#39;t able to figure out
the &amp;quot;right&amp;quot; way to implement it, and the code
reviewer was waiting and waiting. Eventually, the reviewer came to me,
since I was an architect, and complained
that it was taking too long and he wasn&amp;#39;t able to
earn his money for the review
he had done. Then the author of the changes
explained that he couldn&amp;#39;t
finish since there were impediments and design inconsistencies; he also
couldn&amp;#39;t earn
the money he deserved for fixing the issue. What did I say?
I said:
Forget the quality, just finish it any way possible.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/03/house-of-flying-daggers.jpg" /></entry><entry><title type="html">Don’t Parse, Use Parsing Objects</title><link href="https://www.yegor256.com/2018/02/27/parsing-objects.html" rel="alternate" type="text/html" title="Don&#39;t Parse, Use Parsing Objects" /><published>2018-02-27T00:00:00+00:00</published><updated>2018-02-27T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/02/27/parsing-objects</id><content type="html" xml:base="https://www.yegor256.com/2018/02/27/parsing-objects.html">&lt;!-- here: http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html#comment-3438202653 --&gt;

&lt;p&gt;The traditional way of integrating object-oriented back-end with an external
system is through &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;data transfer objects&lt;/a&gt;,
which are serialized into JSON before going out
and deserialized when coming back. This way is as much popular as it is wrong. The
serialization part should be replaced by &lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;printers&lt;/a&gt;,
which I explained earlier.
Here is my take on deserialization, which should be done by&amp;mdash;guess what&amp;mdash;objects.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;La science des rêves (2006) by Michel Gondry&#39; src=&#39;/images/2018/02/la-science-des-reves.jpg&#39; longdesc=&#39;#bad54f07&#39;/&gt;&lt;figcaption id=&#39;bad54f07&#39;&gt;La science des rêves (2006) by Michel Gondry&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Say there is a back-end entry point, which is supposed to register a new
book in the library, arriving in JSON:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Object Thinking&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;isbn: &amp;quot;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0735619654&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  &amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;David West&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, there is an object of class &lt;code&gt;Library&lt;/code&gt;, which expects an object of type
&lt;code&gt;Book&lt;/code&gt; to be given to its method &lt;code&gt;register()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Create a new record in the database&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Say also, type &lt;code&gt;Book&lt;/code&gt; has a simple method &lt;code&gt;isbn()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, here is the HTTP entry point
(I&amp;#39;m using &lt;a href=&quot;/2015/03/22/takes-java-web-framework.html&quot;&gt;Takes&lt;/a&gt;
and &lt;a href=&quot;/2017/06/22/object-oriented-input-output-in-cactoos.html&quot;&gt;Cactoos&lt;/a&gt;),
which is accepting
a POST &lt;a href=&quot;https://www.ietf.org/rfc/rfc2045.txt&quot;&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;&lt;/a&gt;
request and registering the book in the library:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkUpload&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqMtSmart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqMtBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JsonObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BookDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;isbn&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What is wrong with this? Well, a few things.&lt;/p&gt;

&lt;p&gt;First, it&amp;#39;s not reusable. If we were to need something similar in a different
place, we would have to write this HTTP processing and JSON parsing again.&lt;/p&gt;

&lt;p&gt;Second, error handling and validation are not reusable either. If we add
it to the method above, we will have to copy it everywhere. Of course,
the DTO may encapsulate it, but that&amp;#39;s not what DTOs are usually for.&lt;/p&gt;

&lt;p&gt;Third, the code above is rather procedural and has a lot of
&lt;a href=&quot;/2015/12/08/temporal-coupling-between-method-calls.html&quot;&gt;temporal coupling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A better design would be to hide this parsing inside a new class &lt;code&gt;JsonBook&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonBook&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;JsonBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;isbn&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, the RESTful entry point will look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkUpload&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqMtSmart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqMtBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Isn&amp;#39;t that more elegant?&lt;/p&gt;

&lt;p&gt;Here are some examples from my projects:
&lt;a href=&quot;https://github.com/zerocracy/farm/blob/0.21/src/main/java/com/zerocracy/tk/RqUser.java&quot;&gt;&lt;code&gt;RqUser&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;https://github.com/zerocracy/farm/&quot;&gt;zerocracy/farm&lt;/a&gt; and
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.11.2/src/main/java/io/jare/tk/RqUser.java&quot;&gt;&lt;code&gt;RqUser&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;https://github.com/yegor256/jare/blob/0.11.2/src/main/java/io/jare/tk/RqUser.java&quot;&gt;yegor256/jare&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see from the examples above, sometimes we can&amp;#39;t use &lt;code&gt;implements&lt;/code&gt;
because some primitives in Java are not interfaces but &lt;code&gt;final&lt;/code&gt; classes:
&lt;code&gt;String&lt;/code&gt; is a &amp;quot;perfect&amp;quot; example. That&amp;#39;s why I have to do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RqUser&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Parsing happens here and returns String&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But aside from that, these examples perfectly demonstrate the principle
of &amp;quot;parsing objects&amp;quot; suggested above.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">The traditional way of integrating object-oriented back-end with an external
system is through data transfer objects,
which are serialized into JSON before going out
and deserialized when coming back. This way is as much popular as it is wrong. The
serialization part should be replaced by printers,
which I explained earlier.
Here is my take on deserialization, which should be done by&amp;mdash;guess what&amp;mdash;objects.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/02/la-science-des-reves.jpg" /></entry></feed>
