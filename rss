<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2018-11-27T10:34:39+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">You Can Do Better</title><link href="https://www.yegor256.com/2018/11/27/you-can-do-better.html" rel="alternate" type="text/html" title="You Can Do Better" /><published>2018-11-27T00:00:00+00:00</published><updated>2018-11-27T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/11/27/you-can-do-better</id><content type="html" xml:base="https://www.yegor256.com/2018/11/27/you-can-do-better.html">&lt;p&gt;OK, it’s time to publish this piece. I’ve been dancing around it for quite a while,
telling you how to make &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;more per hour&lt;/a&gt;,
how to manage those &lt;a href=&quot;/2017/08/01/how-to-manage-a-manager.html&quot;&gt;stupid managers&lt;/a&gt; that don’t let you grow,
how to &lt;a href=&quot;/2017/01/24/career-advice.html&quot;&gt;boost your career&lt;/a&gt;
and how to deal with &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office slavery&lt;/a&gt;.
Now here is a simple, plain list of recommendations for you: what you should do
if you want to be a more successful programmer. Not a better algorithm
designer, even though that’s &lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;important&lt;/a&gt;.
Not a funnier &lt;del&gt;clown&lt;/del&gt;
&lt;a href=&quot;/2018/08/29/soft-skills.html&quot;&gt;team player&lt;/a&gt;, even though that’s
also important. But a more successful software engineer, both
&lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;financially&lt;/a&gt;
and socially.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Rocky (1976) by John G. Avildsen&quot; src=&quot;/images/2018/11/rocky.jpg&quot; longdesc=&quot;#8288874d&quot; /&gt;&lt;figcaption id=&quot;8288874d&quot;&gt;Rocky (1976) by John G. Avildsen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There is no particular order here, just everything I have in mind, in one list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Your Own Product&lt;/strong&gt;.
Learning how to program and &lt;em&gt;actually&lt;/em&gt; programming are not the same thing. The best,
and the only right way to learn is “by doing.” The best way of doing is
to create something meaningful and important. If it’s your own product—even
better. If someone pays you for that—best of all. Every time I want
to learn something new I make up a realistic goal and &lt;a href=&quot;/pets.html&quot;&gt;attempt&lt;/a&gt; to achieve it.
A few years ago I was interested in learning Python. Instead of going to online
courses or reading books I tried to create a small web app for my own marketing purposes.
At that time I knew Java, but I wrote that app in Python. My recommendation: never study
anything in an academic way, always do something real using the tech stack you want
to learn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change Languages&lt;/strong&gt;.
Don’t get stuck with one stack of technologies, no matter how much you love it.
Of course, you don’t want to be a “jack of all trades,” since they are never
paid well. You want to be focused. But “one focus” in life is not enough. I switch
languages every 4-6 years. I started with Pascal, then it was C++, then Java,
then PHP (yes, you heard right, I’m
&lt;a href=&quot;http://www.zend.com/en/yellow-pages/ZEND007965&quot;&gt;ZCE&lt;/a&gt;/&lt;a href=&quot;http://www.zend.com/en/yellow-pages/ZEND007965&quot;&gt;ZFCE&lt;/a&gt;),
then Java again, and now it’s Ruby.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go Full Cycle&lt;/strong&gt;.
Writing code that “works on your laptop” is a great achievement… for a junior
programmer. A senior knows that it’s only a part of the job. The smaller part.
The bigger part is turning your “working” code into a market-ready product,
which means merging and auto-testing, compiling and packaging for multiple platforms,
staging and acceptance testing, bug reporting, metrics collecting, A/B testing,
stress and load testing, deploying to production, and even reporting to investors.
Modern software development life cycle is a giant &lt;del&gt;mess&lt;/del&gt; show.
Do you know how it all works?
You don’t? You don’t care? You are not a senior developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Your Sources&lt;/strong&gt;.
Like I said in my talk &lt;a href=&quot;https://www.youtube.com/watch?v=IGbteQpTNCA&quot;&gt;&lt;em&gt;How Bright Is Your Future?&lt;/em&gt;&lt;/a&gt;
at RigaDevDays, the future of software will almost entirely be open source. The
amount of code that companies keep proprietary is decreasing every year. You have
to be an open source advocate if you want to be successful. If you are still
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;afraid&lt;/a&gt;,
or don’t have time, &lt;a href=&quot;/2017/05/30/why-contribute-to-open-source.html&quot;&gt;reconsider&lt;/a&gt;.
Writing code for yourself and your office buddies, and writing it for a few
thousand anonymous GitHub hooligans, are two very different stories. You will
need time to get up to speed in this wild territory. It took me over three years.
Don’t wait, start now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test Everything&lt;/strong&gt;.
To be honest, almost everything I’ve learned about software quality, I owe
to the painful hours of &lt;a href=&quot;/2015/07/16/fools-dont-write-unit-tests.html&quot;&gt;writing unit tests&lt;/a&gt;,
mocks, fixtures, stubs, integration
tests, and so on. I truly believe that a professional programmer spends more
time creating automated tests than writing production code. That’s why
I’d recommend you focus on testing if you want to become a better engineer.
Start with the great book &lt;a href=&quot;http://amzn.to/1PBpoDT&quot;&gt;&lt;em&gt;Growing Object-Oriented Software, Guided by Tests&lt;/em&gt;&lt;/a&gt;
by Steve Freeman and Nat Pryce and make yourself &lt;a href=&quot;/2017/03/24/tdd-that-works.html&quot;&gt;a rule&lt;/a&gt;:
every line of code, that you are at all in doubt about, must be proven by a test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statically Analyze&lt;/strong&gt;.
Well, half of my knowledge about software quality I owe to unit testing. The
other half I owe to static analyzers. I learned much more from
&lt;a href=&quot;http://checkstyle.sourceforge.net/&quot;&gt;Checkstyle&lt;/a&gt; and &lt;a href=&quot;https://pmd.github.io/&quot;&gt;PMD&lt;/a&gt;
than from all the Java books I’ve ever read. Every new programming language I learn
I start by configuring the strictest static analyzer I can find and then listening
to its complaints. I’d recommend you do the same. Listen to your tools and
&lt;a href=&quot;/2018/01/16/educational-aspect-of-static-analysis.html&quot;&gt;make sure&lt;/a&gt;
your code is 100% complaint with their quality expectations. Don’t just
use them as recommendation providers, but make yourself a rule:
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;never commit&lt;/a&gt;
anything that doesn’t fully pass all static analyzers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Humiliate Yourself on StackOverflow&lt;/strong&gt;.
Robert Sheckley &lt;a href=&quot;https://amzn.to/2ToSdws&quot;&gt;said&lt;/a&gt;
that “in order to ask a question you must already know most of the answer.”
Friends, online chats, and office kitchen talks are
great places to find help… for junior programmers. Those people understand you
no matter how stupid your questions are and that is how they spoil you. You don’t
grow while talking to them and getting their help. You degrade. Instead, you should
ask questions where nobody knows you and will only answer if your question is perfectly
formulated and expressed. There are many places, but StackOverflow is the best.
Make sure every question you have goes to StackOverflow first. Then you may share the
link with your buddies. But StackOverflow comes first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Earn Certificates&lt;/strong&gt;.
I’ve got some of them and I’m planning to get more, even though I’m not really
a programmer &lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;on a payroll&lt;/a&gt;
and I’m not going to be employed by any enterprise that
cares about badges in
&lt;a href=&quot;https://latexonline.cc/compile?git=https%3A%2F%2Fgithub.com%2Fyegor256%2Fblog&amp;amp;target=_latex%2Fresume-boring.tex&amp;amp;command=pdflatex&amp;amp;trackId=1520166474432&quot;&gt;my CV&lt;/a&gt;.
Still, I want more certificates. Why? Because I learn a lot when I pass them.
Also when I fail (I have done, twice, up to now). There are two things certificates
give you: 1) they help you fill up your knowledge gaps, and 2) they boost your
self-respect (when and if you pass, of course). Make yourself a rule: one
new certificate every year.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go to Job Interviews&lt;/strong&gt;.
“Changing jobs every couple of years used to look bad on a resume. It told
recruiters you can’t hold down a job, can’t get along with colleagues, or
that you’re simply disloyal and can’t commit. That stigma is fast
becoming antiquated. Workers who stay with a company longer than
two years are said to get paid 50% less,” according to
&lt;a href=&quot;https://www.fastcompany.com/3055035/you-should-plan-on-switching-jobs-every-three-years-for-the-rest-of-your-&quot;&gt;Vivian Giang&lt;/a&gt;.
The bottom line is that you must be ready to change jobs, because you will have to, and soon.
If you don’t, you will lose. Regular job interviews are the best way to prepare
yourself. Make it a rule: every three months you go to an interview.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change Jobs&lt;/strong&gt;.
You will never be a truly senior developer or an architect if you stay with one
company or project for a long time. You have to change jobs. Frequently. I know,
it’s painful for most of us, but this is how we grow. You need new tasks, new
challenges, new technologies, new customers, and new bosses in order to learn
how to survive and become stronger. Ideally, you should become a freelancer
and forget about full-time &lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;nine-to-five&lt;/a&gt;
office &lt;del&gt;slavery&lt;/del&gt; employment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read Books&lt;/strong&gt;.
One book per month. How does that sound? Twelve books per year. That’s an easily
achievable goal. However, ask yourself, did you manage to read a dozen books
over the last calendar year? I seriously doubt many of you will answer positively.
Books are important because they are way more formal and “complete” than blog
posts, news articles, or conference presentations. They cover entire topics,
not parts of them. For example, did you read the &lt;a href=&quot;http://amzn.to/2crIfoY&quot;&gt;Git book&lt;/a&gt; ever? Most programmers
I know who use Git never even touched the book. They use Git, but barely understand
what’s under the hood. This is how junior developers behave. Be professional,
read the manual!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow Key People&lt;/strong&gt;.
I mean Twitter (I’m &lt;a href=&quot;https://twitter.com/yegor256&quot;&gt;@yegor256&lt;/a&gt;),
Facebook (&lt;a href=&quot;https://www.facebook.com/yegor256&quot;&gt;here&lt;/a&gt; I am),
Telegram (&lt;a href=&quot;https://t.me/yegor256news&quot;&gt;my channel&lt;/a&gt;),
Instagram (&lt;a href=&quot;https://instagram.com/yegor256&quot;&gt;click here&lt;/a&gt; to follow me), and, of course,
GitHub (I’m &lt;a href=&quot;https://github.com/yegor256&quot;&gt;@yegor256&lt;/a&gt;). What’s new that you can hear from me?
Probably not so much, but you will get a feeling for what’s going on
in my professional life, where I’m heading, what I read, what I write, etc. Who do I follow?
All authors of all books I like, all bloggers I’ve ever enjoyed reading,
all speakers I liked watching, key public figures and politicians,
no matter whether I agree with them or not. I believe you should do the same, to
stay informed about the trends.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lurk&lt;/strong&gt;.
Regularly check &lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt;,
&lt;a href=&quot;https://en.reddit.com/r/programming/&quot;&gt;/programming&lt;/a&gt; Reddit, and, maybe,
&lt;a href=&quot;https://changelog.com/&quot;&gt;Changelog&lt;/a&gt;. That’s pretty much all you need to read.
A few times a week. Just &lt;del&gt;read&lt;/del&gt; scroll what’s hot and move on.
Will it make you a better programmer? Unlikely. Will it help your career
and your life? Definitely. You never know what’s coming and where the
next opportunity is. I still &lt;a href=&quot;/2017/08/15/bitcoin-pyramid.html&quot;&gt;feel sorry&lt;/a&gt;
about not paying enough attention to
the &lt;a href=&quot;https://news.ycombinator.com/item?id=1532670&quot;&gt;announcement&lt;/a&gt; of Bitcoin
at HN many years ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attend Conferences and Meetups&lt;/strong&gt;.
Ideally, as a speaker. Otherwise, &lt;em&gt;at least once a month&lt;/em&gt; as a listener. Will
you learn something new? I don’t think so. But you will definitely motivate
yourself by meeting the most active and motivated people in the industry,
including speakers and other listeners. Most companies will be ready to
sponsor your tickets. Two big conferences per year will be enough. The rest
of the time attend your local meetups, you can find them
at &lt;a href=&quot;https://www.meetup.com&quot;&gt;meetup.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s pretty much it. Hope this list helps.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="career" /><summary type="html">OK, it’s time to publish this piece. I’ve been dancing around it for quite a while, telling you how to make more per hour, how to manage those stupid managers that don’t let you grow, how to boost your career and how to deal with office slavery. Now here is a simple, plain list of recommendations for you: what you should do if you want to be a more successful programmer. Not a better algorithm designer, even though that’s important. Not a funnier clown team player, even though that’s also important. But a more successful software engineer, both financially and socially.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/11/rocky.jpg" /></entry><entry><title type="html">Tech Journalism Sucks</title><link href="https://www.yegor256.com/2018/11/20/journalism.html" rel="alternate" type="text/html" title="Tech Journalism Sucks" /><published>2018-11-20T00:00:00+00:00</published><updated>2018-11-20T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/11/20/journalism</id><content type="html" xml:base="https://www.yegor256.com/2018/11/20/journalism.html">&lt;p&gt;This July, just four months ago,
I submitted an article to &lt;a href=&quot;http://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt;, a
popular online tech magazine. In the article I
suggested that in order to improve our projects we must not make programmers worry
about the quality of code they write, but instead let them focus mostly
on the speed of delivery. The quality, I argued in the
article, must be the concern of the delivery pipeline. You have most probably
already read the blog posts where I mention this idea, especially this one:
&lt;a href=&quot;/2018/03/06/speed-vs-quality.html&quot;&gt;Don’t Aim for Quality, Aim for Speed&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Wag the Dog (1997) by Barry Levinson&quot; src=&quot;/images/2018/11/wag-the-dog.jpg&quot; longdesc=&quot;#123ce141&quot; /&gt;&lt;figcaption id=&quot;123ce141&quot;&gt;Wag the Dog (1997) by Barry Levinson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I received a response from the InfoQ editor in an email, and I quote:
“The article provides no new insights for our audience, and actually some recommendations
that go against well-known good practices in DevOps.”
I &lt;a href=&quot;https://twitter.com/yegor256/status/1015261994826567680&quot;&gt;tweeted&lt;/a&gt;
about this and Charles Humble, their editor-in-chief, emailed me back.
He said that he still didn’t want to publish my piece, because
“both people who reviewed it are experienced DevOps practitioners,
and felt strongly that, although the ideas presented were interesting,
it wasn’t something that would generalize well or work well for more mature teams.”&lt;/p&gt;

&lt;p&gt;Two people decided that my point of view was wrong and that’s why the entire
audience must not hear it! They know better what “works well for more mature teams.”
Pay attention: they didn’t say anything about
the quality of my article, about the way I structured my arguments, about the
consistency of the logic in it. They totally got what I wanted to say, but they
disagreed. My opinion didn’t go along with theirs. And so—no platform for the guy.&lt;/p&gt;

&lt;p&gt;You know what happened next? I sent my piece, without any changes, to Gerard Holzmann,
one of the editors of &lt;a href=&quot;https://publications.computer.org/software-magazine/&quot;&gt;IEEE Software&lt;/a&gt;.
You know what he said? I quote:
“I like your analogy of a wall, but when I reflect on it I believe it is
really no more than the standard check-in and commit process that most
organizations use. So I’m sorry that we can’t use it.”
See? The InfoQ guys thought that it’s a practice that nobody would use, while
the IEEE Software editor thinks that it’s something everybody is already using.&lt;/p&gt;

&lt;p&gt;Ironic, huh?&lt;/p&gt;

&lt;p&gt;Finally, I submitted that very same article to the blog section of the Communications of the ACM
and it was &lt;a href=&quot;https://cacm.acm.org/blogs/blog-cacm/229942-blame-free-quality-control/fulltext&quot;&gt;published&lt;/a&gt; there,
maybe thanks to the objectivity of Lawrence Fisher, their editor.
I also submitted it to a number of software conferences, where it was also accepted,
including &lt;a href=&quot;https://youtu.be/55mwAbuDrV8&quot;&gt;Joker 2018&lt;/a&gt; in St. Petersburg, Russia
(it was the 3rd most liked speech, according to the votes of 400+ attendees).&lt;/p&gt;

&lt;p&gt;Here comes my point.&lt;/p&gt;

&lt;p&gt;Tech journalism sucks.&lt;/p&gt;

&lt;p&gt;If you want to be published, say what everybody else is saying. Or else say something
very new. I don’t really know. What will I do from now on? I will keep sending my
articles to many places. I’ve even created a list of journalists (over 200 magazines)
and I &lt;del&gt;spam&lt;/del&gt; send them my articles via &lt;a href=&quot;/2018/10/30/mailanes.html&quot;&gt;Mailanes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It seems they don’t deserve a better attitude.&lt;/p&gt;

&lt;p&gt;Sadly.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html">This July, just four months ago, I submitted an article to InfoQ, a popular online tech magazine. In the article I suggested that in order to improve our projects we must not make programmers worry about the quality of code they write, but instead let them focus mostly on the speed of delivery. The quality, I argued in the article, must be the concern of the delivery pipeline. You have most probably already read the blog posts where I mention this idea, especially this one: Don’t Aim for Quality, Aim for Speed.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/11/wag-the-dog.jpg" /></entry><entry><title type="html">Beware of Bigotry</title><link href="https://www.yegor256.com/2018/11/13/bigotry.html" rel="alternate" type="text/html" title="Beware of Bigotry" /><published>2018-11-13T00:00:00+00:00</published><updated>2018-11-13T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/11/13/bigotry</id><content type="html" xml:base="https://www.yegor256.com/2018/11/13/bigotry.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bobby_Fischer&quot;&gt;Bobby Fischer&lt;/a&gt;,
the eleventh World Chess Champion, was one of the best chess players
of the last century. Did you know that,
along with &lt;a href=&quot;https://en.wikiquote.org/wiki/Bobby_Fischer&quot;&gt;anti-Semitic statements&lt;/a&gt;,
&lt;a href=&quot;https://www.theguardian.com/books/2007/apr/22/sportandleisure.features&quot;&gt;he also said&lt;/a&gt;
that women chess players “aren’t creative and are all fish”?
Did you also know that he publicly described the
&lt;a href=&quot;https://en.wikipedia.org/wiki/September_11_attacks&quot;&gt;9/11 events&lt;/a&gt; as “wonderful news”?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Better Call Saul (TV Series 2015---) by Vince Gilligan et al.&quot; src=&quot;/images/2018/11/better-call-saul.jpg&quot; longdesc=&quot;#c0e9c0d1&quot; /&gt;&lt;figcaption id=&quot;c0e9c0d1&quot;&gt;Better Call Saul (TV Series 2015---) by Vince Gilligan et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Henry_Ford&quot;&gt;Henry Ford&lt;/a&gt;,
the founder of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ford_Motor_Company&quot;&gt;Ford Motor Company&lt;/a&gt;,
was one of the greatest American entrepreneurs. Did you know that he
&lt;a href=&quot;https://en.wikiquote.org/wiki/Henry_Ford#Quotes&quot;&gt;said&lt;/a&gt; in 1919
that “the Jew is the threat” and wrote an anti-Semitic set of booklets called
&lt;a href=&quot;https://en.wikipedia.org/wiki/The_International_Jew&quot;&gt;The International Jew&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Thomas_Jefferson&quot;&gt;Thomas Jefferson&lt;/a&gt;
was the third president of the United States. Did you know that he believed
that blacks lacked basic human emotions and
&lt;a href=&quot;http://www.nytimes.com/2012/12/01/opinion/the-real-thomas-jefferson.html&quot;&gt;claimed&lt;/a&gt;
he had “never seen an elementary trait of painting or sculpture”
or poetry among blacks and argued that blacks’ ability to “reason” was
“much inferior” to whites’, while
“in imagination they are dull, tasteless, and anomalous?”&lt;/p&gt;

&lt;p&gt;Did you know that &lt;a href=&quot;https://en.wikipedia.org/wiki/Garry_Kasparov&quot;&gt;Garry Kasparov&lt;/a&gt;,
one of greatest chess players of all time and a world chess champion,
&lt;a href=&quot;https://www.telegraph.co.uk/news/2017/12/02/garry-kasparov-wrong-women-playing-chess/&quot;&gt;said&lt;/a&gt;
in a 1989 interview with Playboy magazine that “there is real chess and women’s chess.”&lt;/p&gt;

&lt;p&gt;I could go on and on with similar examples.&lt;/p&gt;

&lt;p&gt;Do you agree with these guys?
Most probably, just like me, you don’t. Most probably you have your own
views. Political, social, racial, and what have you.
The question is—what do you do with them? And what do you do with those you
disagree with? Do you stop listening to them? Do you call them stupid,
despite their obvious achievements in their trades? Do you ostracize them
in order to stay only with those who share your views?&lt;/p&gt;

&lt;p&gt;Here comes an example.&lt;/p&gt;

&lt;p&gt;I was on my way to the airport just a week ago, planning to attend
a conference as a speaker. My talk was about DevOps practices. I was planning
to present our practical results in the area of multi-server deployment
without a single central point of failure. While in the taxi, I checked my inbox
and found this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Hi Yegor,
It has come to our attention that some of your views
on women in tech published as posts on your blog and
twitter conflict with our aims of promoting an inclusive
and diverse conference. In this light, we have decided
to cancel your talk.  You are of course still welcome
to attend the event as an attendee, assuming you accept
the terms of our code of conduct. Apologies for the late
notice on this.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I never asked, but I bet they are referring to
&lt;a href=&quot;/2017/07/04/sexism.html&quot;&gt;this blog post&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/yegor256/status/1056447293535281154&quot;&gt;this recent tweet&lt;/a&gt;
published one day before the cancellation email.&lt;/p&gt;

&lt;p&gt;My social views conflict with their aims and that’s why they decided to not let me
speak about DevOps!&lt;/p&gt;

&lt;p&gt;I wonder, what would they have done if they had found out
that I was, for example, a Muslim and believed &lt;a href=&quot;https://en.wikipedia.org/wiki/Women_in_Islam&quot;&gt;that&lt;/a&gt;
“a woman’s sphere of operation is the home, and a man’s corresponding sphere is the outside world.”
What if they had find out that I was a &lt;a href=&quot;https://en.wikipedia.org/wiki/Mormonism_and_women&quot;&gt;Mormon&lt;/a&gt; and believed
that “women have qualities of faithfulness, benevolence, and charity that balance
the more aggressive and competitive nature of man”?
What if they had found out that I was a member of the KKK, or a communist,
or an &lt;a href=&quot;https://en.wikipedia.org/wiki/Men%27s_rights_movement&quot;&gt;MRM&lt;/a&gt; activist?
What if I was a supporter of Trump, Putin, or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Kim_Jong-un&quot;&gt;Kim Jong-un&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;According to the logic in their email, they would also cancel my talk. They would
cancel all talks coming from Muslims, Mormons, communists, Orthodox Christians,
and many others, who are not quiet and tolerant liberals,
preferably without any social or political views.
They would also never play chess with Kasparov, drive Ford cars, or live
in the United States, which made the mistake of having a racist president.
Is it really inclusiveness they care so much about?&lt;/p&gt;

&lt;p&gt;As Sam Altman, a co-founder of Y-Combinator,
said in his &lt;a href=&quot;http://blog.samaltman.com/e-pur-si-muove&quot;&gt;blog post&lt;/a&gt;,
“It seems easier to accidentally speak
heresies in San Francisco every year. Debating a controversial idea, even
if you 95% agree with the consensus side, seems ill-advised.”&lt;/p&gt;

&lt;p&gt;Doesn’t it remind you of the time of the Soviet Union and the Third Reich? Over half a century
ago Nazis and commies were fighting with those who were thinking differently.
What are we doing today? Aren’t we fighting with those who think differently
about women, Jews, people of color, homosexuals, and many other controversial topics?
Einstein’s ideas in physics were attacked because he was a
&lt;a href=&quot;https://www.scientificamerican.com/article/how-2-pro-nazi-nobelists-attacked-einstein-s-jewish-science-excerpt1/&quot;&gt;Jewish pacifistic internationalist&lt;/a&gt;.
Now it’s time to &lt;a href=&quot;https://www.bloomberg.com/news/articles/2017-08-08/google-fires-employee-behind-controversial-diversity-memo&quot;&gt;attack programmers&lt;/a&gt;
who seem to be sexist. Just a change of terms, but the principle is the same.&lt;/p&gt;

&lt;p&gt;The new flag for repression is &lt;em&gt;political correctness&lt;/em&gt;, which,
&lt;a href=&quot;https://en.wikiquote.org/wiki/Doris_Lessing&quot;&gt;according to Doris Lessing&lt;/a&gt;,
a Nobel Prize winner, is the “heritage of communism” used by a “self-appointed group of vigilantes
to impose their views on others.”&lt;/p&gt;

&lt;p&gt;Did we really learn any lessons from the last century or are we still the same
good old bigots, looking for a reason to hunt down those who we disagree with?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You want to know the name of the conference?
It was &lt;a href=&quot;https://www.devopsdays.org/events/2018-oslo/welcome/&quot;&gt;DevOpsDays Oslo&lt;/a&gt;.
They are not alone. There were a few others also who canceled my talks.
Here is a non-complete list of them (I will keep updating the list, if and when
I know for sure what the reason for rejection was):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.devopsdays.org/events/2018-oslo/welcome/&quot;&gt;DevOpsDays Oslo&lt;/a&gt; by Anders Bruvik.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://virtualjug.com/&quot;&gt;vJUG&lt;/a&gt; by &lt;a href=&quot;https://www.yegor256.com/2017/07/04/sexism.html#comment-3403001068&quot;&gt;Simon Maple&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will not hide their names. Just like Nazi criminals these guys should be known,
visible, and prosecuted, as soon as possible.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html">Bobby Fischer, the eleventh World Chess Champion, was one of the best chess players of the last century. Did you know that, along with anti-Semitic statements, he also said that women chess players “aren’t creative and are all fish”? Did you also know that he publicly described the 9/11 events as “wonderful news”?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/11/better-call-saul.jpg" /></entry><entry><title type="html">Do You Test Ruby Code for Thread Safety?</title><link href="https://www.yegor256.com/2018/11/06/ruby-threads.html" rel="alternate" type="text/html" title="Do You Test Ruby Code for Thread Safety?" /><published>2018-11-06T00:00:00+00:00</published><updated>2018-11-06T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/11/06/ruby-threads</id><content type="html" xml:base="https://www.yegor256.com/2018/11/06/ruby-threads.html">&lt;p&gt;Are you a Ruby developer? If you are, I’m pretty sure you have a very
vague idea of what concurrency and thread safety are. No offense, but this
is what I’ve figured out after dealing with Ruby code and speaking with Ruby
programmers over the last half a year. I’ve been writing in Ruby pretty actively
recently and I do like the language and the ecosystem around it.
Zold, the experimental cryptocurrency we are creating, is written almost
entirely in Ruby. What does that tell you? I like Ruby. But when it comes
to concurrency, there are blank spots. Big time.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Look at this Ruby class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;idx.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;idx.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;idx.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s a simple web server. It does work—try to run it like this
(you will need Ruby 2.3+ installed):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinatra&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, open &lt;code&gt;http://localhost:4567&lt;/code&gt; and you will see the counter. Refresh
the page and the counter will increment. Try again. It works. The counter
is in the file &lt;code&gt;idx.txt&lt;/code&gt; and it’s essentially
a &lt;a href=&quot;/2018/07/03/global-variables.html&quot;&gt;global variable&lt;/a&gt;,
which we increment on every HTTP request.&lt;/p&gt;

&lt;p&gt;Let’s create a unit test for it, to make sure it is automatically tested:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;minitest/autorun&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;net/http&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;uri&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrontTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_works&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://localhost:4567/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;OK, it’s not a unit test, but more like an integration test.
First we start a web server in a background thread. Then
we wait for a second, to give that thread enough time to bootstrap
the server. I know, it’s a very ugly approach, but I don’t have anything
better for this small example. Next we make an HTTP request and
compare it with the expected number 1. Finally, we stop the web server.&lt;/p&gt;

&lt;p&gt;So far so good. Now, the question is, what will happen when many
requests are sent to the server? Will it still return the correct,
consecutive numbers? Let’s try:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_works&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://localhost:4567/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we make a thousand requests and put all the returned numbers into an
array. Then we &lt;code&gt;uniq&lt;/code&gt; the array and &lt;code&gt;count&lt;/code&gt; its elements. If there is
a thousand of them—everything worked fine, we received a correct list
of consecutive, unique numbers. I just tested it, and it works.&lt;/p&gt;

&lt;p&gt;But we are making them one by one, that’s why our server doesn’t have
any problems. We aren’t making them concurrently. They go strictly one
after another. Let’s try to use a few additional threads to simulate
parallel execution of HTTP requests:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;concurrent/set&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_works&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://localhost:4567/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First of all, we keep the list of numbers in a
&lt;a href=&quot;http://ruby-concurrency.github.io/concurrent-ruby/master/Concurrent/Set.html&quot;&gt;&lt;code&gt;Concurrent::Set&lt;/code&gt;&lt;/a&gt;, which
is a thread-safe version of Ruby &lt;a href=&quot;http://ruby-doc.org/stdlib-2.4.0/libdoc/set/rdoc/Set.html&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;.
Second, we start five background threads, each of which makes 200 HTTP requests.
They all run in parallel and we wait for them to finish by calling &lt;code&gt;join&lt;/code&gt; on
each of them. Finally, we take the numbers out of the Set and validate
the correctness of the list.&lt;/p&gt;

&lt;p&gt;No surprise, it fails.&lt;/p&gt;

&lt;p&gt;Of course, you know why. Because the implementation is not &lt;em&gt;thread-safe&lt;/em&gt;. When
one thread is reading the file, another one is writing it. Eventually, and very
soon, they clash and the contents of the file is broken. The more threads
we put into the test, the less accurate will be the result.&lt;/p&gt;

&lt;p&gt;In order to make this type of testing easier I created
&lt;a href=&quot;https://github.com/yegor256/threads&quot;&gt;threads&lt;/a&gt;,
a simple Ruby gem. Here is how it works:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;threads&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_works&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://localhost:4567/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it. This single line with &lt;code&gt;Threads.new()&lt;/code&gt; replaces all other lines,
where we have to create threads, make sure they start at the same time,
and then collect their results and make sure their stack traces are visible
in the console if they crash (by default, the error log of a background
thread is not visible).&lt;/p&gt;

&lt;p&gt;Try this gem in your projects, it’s pretty well tested already and I
use it in all my concurrency tests.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="ruby" /><summary type="html">Are you a Ruby developer? If you are, I’m pretty sure you have a very vague idea of what concurrency and thread safety are. No offense, but this is what I’ve figured out after dealing with Ruby code and speaking with Ruby programmers over the last half a year. I’ve been writing in Ruby pretty actively recently and I do like the language and the ecosystem around it. Zold, the experimental cryptocurrency we are creating, is written almost entirely in Ruby. What does that tell you? I like Ruby. But when it comes to concurrency, there are blank spots. Big time.</summary></entry><entry><title type="html">Mailanes.com Helps Manage Newsletters and Mailing Lists</title><link href="https://www.yegor256.com/2018/10/30/mailanes.html" rel="alternate" type="text/html" title="Mailanes.com Helps Manage Newsletters and Mailing Lists" /><published>2018-10-30T00:00:00+00:00</published><updated>2018-10-30T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/10/30/mailanes</id><content type="html" xml:base="https://www.yegor256.com/2018/10/30/mailanes.html">&lt;p&gt;There are other products doing something similar, including
&lt;a href=&quot;http://www.mailchimp.com/&quot;&gt;MailChimp&lt;/a&gt;, &lt;a href=&quot;http://www.aweber.com/&quot;&gt;AWeber&lt;/a&gt;, and
many others. They are great. Maybe. I don’t really know. I tried some of them,
some time ago. And I was frustrated. They are expensive, clumsy, and heavy.
That’s my experience. I wanted something lightweight, where I can upload
a list of emails, create a simple HTML/text letter, configure my SMTP outbound
server, and call it a day. I spent a few days and created
&lt;a href=&quot;http://www.mailanes.com&quot;&gt;Mailanes&lt;/a&gt;. It’s free (for all of you), it’s simple,
and it’s &lt;a href=&quot;https://github.com/yegor256/mailanes/&quot;&gt;open source&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, you login via GitHub (what else, right?) Then you create a List
of Recipients. You add them there one by one or you upload a CSV. Next,
you create a Lane of Letters. A lane is something your recipients should
be moved through, step by step, email by email. Then you create a Campaign
and connect your list with the lane. That’s it.&lt;/p&gt;

&lt;p&gt;Let me show by example.
Let’s say you go to &lt;a href=&quot;https://www.zerocracy.com&quot;&gt;zerocracy.com&lt;/a&gt;, enter your email
and click “Help me start!” The form on the site is configured to post that
email directly to the Mailanes web app (see the &lt;a href=&quot;https://www.zerocracy.com/&quot;&gt;sources&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.mailanes.com/subscribe?list=4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;source&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www.zerocracy.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;redirect&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.zerocracy.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Your email...&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;24&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Help me start!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;action&lt;/code&gt; of the form points to the &lt;code&gt;/subscribe?list=4&lt;/code&gt; URL at the Mailanes
server. Once submitted, the recipient will be added to list number 4 and the browser
will be redirected to the URL in the &lt;code&gt;redirect&lt;/code&gt; form parameter.&lt;/p&gt;

&lt;p&gt;Right after the recipient shows up in the list, the system starts moving
him or her through the letters defined in the lane. Try it yourself and you
will receive the first letter almost immediately (in 10 minutes, to be precise).&lt;/p&gt;

&lt;p&gt;To define a letter I decided to use &lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt;,
as a pretty simple markup language. For the configuration of lists, lanes, letters
and campaigns I’m using &lt;a href=&quot;http://yaml.org/&quot;&gt;YAML&lt;/a&gt;, since it’s rich enough but
way easier and shorter than JSON and, of course, XML. Here is what the
configuration of the first letter you will receive looks like:&lt;/p&gt;

&lt;figure class=&quot;unprintable&quot;&gt;&lt;img src=&quot;https://www.yegor256.com/images/2018/09/mailanes-1.png&quot; itemprop=&quot;image&quot; style=&quot;width:600px;max-width:100%;&quot; alt=&quot;The figure&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;relax&lt;/code&gt; parameter of the letter specifies how much time the system has
to wait after this letter before it sends you the next one. &lt;code&gt;&quot;4:0:0&quot;&lt;/code&gt; stands
for four days, zero hours, and zero minutes.&lt;/p&gt;

&lt;p&gt;At the bottom of the letter I added this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;Thanks,&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
Yegor Bugayenko&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
Click [here]({{ unsubscribe }}) if you don&amp;#39;t want to hear from me again.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;{{ unsubscribe }}&lt;/code&gt; will be replaced by the link to a page where
the recipient of the email will be instantly unsubscribed. I believe it’s
good practice to allow your newsletter recievers to unsubscribe instantly.
They will also have the ability to do it via the &lt;a href=&quot;https://tools.ietf.org/html/rfc8058&quot;&gt;&lt;code&gt;List-Unsubscribe&lt;/code&gt;&lt;/a&gt;
mail header.&lt;/p&gt;

&lt;p&gt;I also configured the lane with my SMTP server details. I’m using
AWS &lt;a href=&quot;https://aws.amazon.com/ses/&quot;&gt;Simple Email Service&lt;/a&gt;.
It’s pretty easy to configure and it’s inexpensive:
&lt;a href=&quot;https://aws.amazon.com/ses/pricing/&quot;&gt;$1 per 10,000 emails&lt;/a&gt; at the time of writing.
To my knowledge, &lt;a href=&quot;https://sendgrid.com/pricing/&quot;&gt;SendGrid&lt;/a&gt;
is two times more expensive,
&lt;a href=&quot;https://www.smtp2go.com&quot;&gt;Smtp2Go&lt;/a&gt;—six times,
&lt;a href=&quot;https://www.sendinblue.com/pricing/&quot;&gt;SendInBlue&lt;/a&gt;—four times,
&lt;a href=&quot;https://www.mailgun.com/pricing&quot;&gt;MailGun&lt;/a&gt;—eight times, etc.:&lt;/p&gt;

&lt;figure class=&quot;unprintable&quot;&gt;&lt;img src=&quot;https://www.yegor256.com/images/2018/09/mailanes-2.png&quot; itemprop=&quot;image&quot; style=&quot;width:600px;max-width:100%;&quot; alt=&quot;The figure&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Then, I configured my list to notify me via Telegram about all new subscribers,
unsubscribe actions, etc.:&lt;/p&gt;

&lt;figure class=&quot;unprintable&quot;&gt;&lt;img src=&quot;https://www.yegor256.com/images/2018/09/mailanes-3.png&quot; itemprop=&quot;image&quot; style=&quot;width:600px;max-width:100%;&quot; alt=&quot;The figure&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;You see, there is the Telegram chat ID where I’m getting notifications. You can
do that too, you just need to know the chat ID. Start talking to the
Telegram bot &lt;a href=&quot;https://t.me/mailanes_bot&quot;&gt;@mailanes_bot&lt;/a&gt; and it will tell you your chat ID.&lt;/p&gt;

&lt;p&gt;I’m using Mailanes for my blog newsletter too. Try to subscribe to it
&lt;a href=&quot;/about-me.html#subscribe&quot;&gt;here&lt;/a&gt; and you will see what happens.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/yegor256/mailanes/blob/master/README.md&quot;&gt;README&lt;/a&gt; fully
explains all possible configuration options. The project is open, so feel free
to contribute with &lt;a href=&quot;https://github.com/yegor256/mailanes&quot;&gt;pull requests&lt;/a&gt;.
As I said above, it’s absolutely &lt;em&gt;free&lt;/em&gt;
for anyone. Just sign up, create your lists, lanes, and campaigns, and go ahead.&lt;/p&gt;

&lt;p&gt;If something is not clear in the system and you are lost, don’t hesitate
to &lt;a href=&quot;https://github.com/yegor256/mailanes/issues&quot;&gt;submit a ticket&lt;/a&gt;,
I will try to improve it or add documentation.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="pets" /><summary type="html">There are other products doing something similar, including MailChimp, AWeber, and many others. They are great. Maybe. I don’t really know. I tried some of them, some time ago. And I was frustrated. They are expensive, clumsy, and heavy. That’s my experience. I wanted something lightweight, where I can upload a list of emails, create a simple HTML/text letter, configure my SMTP outbound server, and call it a day. I spent a few days and created Mailanes. It’s free (for all of you), it’s simple, and it’s open source.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/09/mailanes-1.png" /></entry><entry><title type="html">Don’t Make Me Guess</title><link href="https://www.yegor256.com/2018/10/16/dont-make-me-guess.html" rel="alternate" type="text/html" title="Don't Make Me Guess" /><published>2018-10-16T00:00:00+00:00</published><updated>2018-10-16T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/10/16/dont-make-me-guess</id><content type="html" xml:base="https://www.yegor256.com/2018/10/16/dont-make-me-guess.html">&lt;p&gt;It’s Sunday. I’m at home, drinking tea and writing a new document for
one of our future investors. One of my contacts in Telegram all of a sudden shoots me
a message. I haven’t talked to this guy for at least two months. He is
a software developer. I know him because he works at &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;.
His name is Paul.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Сталкер (1979) by Андрей Тарковский&quot; src=&quot;/images/2018/10/stalker.jpg&quot; longdesc=&quot;#82ab8aad&quot; /&gt;&lt;figcaption id=&quot;82ab8aad&quot;&gt;Сталкер (1979) by Андрей Тарковский&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Paul: “Hey, it’s broken!”&lt;/p&gt;

&lt;p&gt;Me: “What exactly?”&lt;/p&gt;

&lt;p&gt;Paul: “The link.”&lt;/p&gt;

&lt;p&gt;Me: “What link?”&lt;/p&gt;

&lt;p&gt;Paul sends me the link.&lt;/p&gt;

&lt;p&gt;Me: “Where did you get it?”&lt;/p&gt;

&lt;p&gt;Paul: “On your blog.”&lt;/p&gt;

&lt;p&gt;Me: “Where exactly on the blog?”&lt;/p&gt;

&lt;p&gt;Paul gives me the link to the blog post where one of the links is broken.&lt;/p&gt;

&lt;p&gt;Me: “Thanks for noticing!”&lt;/p&gt;

&lt;p&gt;Paul: “Sure, have a good Sunday, sorry for bothering you.”&lt;/p&gt;

&lt;p&gt;Me: “No worries.”&lt;/p&gt;

&lt;p&gt;Now I’m asking myself, why didn’t Paul just send me a single message? It would
sound something like this: “Hey, the link … in your blog post … it’s broken.”&lt;/p&gt;

&lt;p&gt;Moreover, why didn’t Paul just go to the &lt;a href=&quot;https://github.com/yegor256/blog&quot;&gt;GitHub repo&lt;/a&gt;
and submit a ticket?&lt;/p&gt;

&lt;p&gt;Even more, why didn’t Paul just fix the broken link and submit a pull
request?&lt;/p&gt;

&lt;p&gt;Do you know the answer?&lt;/p&gt;

&lt;p&gt;I have three hypotheses.&lt;/p&gt;

&lt;p&gt;The first one is that Paul is a lonely guy. He has nothing to do on Sunday and wants to
talk to someone. A broken link in my blog is a perfect excuse to start
a conversation.&lt;/p&gt;

&lt;p&gt;The second one is that Paul was testing my reactions, like those
funny radio shows do by calling strangers, trying
to be super annoying to trigger their angry response.&lt;/p&gt;

&lt;p&gt;The third one, and this is my favorite, is that Paul simply doesn’t know how
to deliver information &lt;em&gt;together&lt;/em&gt; with its context. And this is where we
get serious.&lt;/p&gt;

&lt;p&gt;This is the mistake so many programmers make, in my experience
of dealing with them. When they deliver the question they have, they think
that I, their listener, am right inside the same context as they are at the very same
moment. They think that I’m sitting right now reading exactly the same
blog post trying to open the same broken link. That’s why it’s a good
moment to just tell me: “Hey, it’s broken!”&lt;/p&gt;

&lt;p&gt;Is it a &lt;a href=&quot;https://en.wikipedia.org/wiki/Schizophasia&quot;&gt;mental disorder&lt;/a&gt;
or just negligence and lack of respect for the listener?&lt;/p&gt;

&lt;p&gt;Honestly, I think it’s a bit of both.&lt;/p&gt;

&lt;p&gt;I &lt;a href=&quot;/2015/06/29/simple-diagrams.html&quot;&gt;wrote&lt;/a&gt; some time ago
that &lt;em&gt;if I don’t understand you, it’s your fault&lt;/em&gt;. However, sometimes
this “verbal terrorism” (isn’t that what it is?) has to be punished.
Here is my short list of countermeasures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Silence&lt;/strong&gt;.
Instead of trying to clarify the message, I just don’t answer.
Sometimes it works, but very often it’s not appropriate, since I realize that
the information coming to me is valuable. Just like in this
situation with Paul. I was interested to know what exactly was broken,
either a link or maybe one of my pet web services is down. Thus,
silence wasn’t an option.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Being Silly&lt;/strong&gt;.
Instead of clarifying, I sometimes try to make the situation even worse,
pretending that I understand the message and that the context is clear to me,
but that it’s a different context. For example, right after “The link is broken”
I would answer “No, it’s not, I just checked!” That would confuse Paul,
since he would then need to put some extra effort to explain to me which link it was
and that it is indeed broken.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Long Pauses&lt;/strong&gt;.
Instead of a complete silence I sometimes take very long pauses between
their comments and my answers. Some of them realize that the comments
are out of context and attempt to provide additional details. Others just
wait, which very often helps me switch them to the silence treatment.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is this blog post offensive? Or have I said what many of you also experience
when dealing with tech people? Or is it not only limited to tech people? I can’t be
sure, but most of these verbal terrorists I meet seem to be programmers.&lt;/p&gt;

&lt;p&gt;Please, guys, try to be more respectful and careful in your conversations,
especially digital ones. Your listener is not your personal best friend, thinking
and doing exactly the same as you are thinking and doing right now. Always imagine that
the context of the listener is completely different from yours and just
saying that “it” is broken is not enough. You have to specify what
you are going to talk about before jumping straight to the point.&lt;/p&gt;

&lt;p&gt;This is definitely one of those &lt;a href=&quot;/2018/08/29/soft-skills.html&quot;&gt;soft skills&lt;/a&gt;
I’ve mentioned before.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html">It’s Sunday. I’m at home, drinking tea and writing a new document for one of our future investors. One of my contacts in Telegram all of a sudden shoots me a message. I haven’t talked to this guy for at least two months. He is a software developer. I know him because he works at Zerocracy. His name is Paul.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/10/stalker.jpg" /></entry><entry><title type="html">You Think You Can Control Us?</title><link href="https://www.yegor256.com/2018/10/09/can-you-control-us.html" rel="alternate" type="text/html" title="You Think You Can Control Us?" /><published>2018-10-09T00:00:00+00:00</published><updated>2018-10-09T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/10/09/can-you-control-us</id><content type="html" xml:base="https://www.yegor256.com/2018/10/09/can-you-control-us.html">&lt;p&gt;I was explaining how &lt;a href=&quot;https://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt; works to one of our prospective
clients yesterday. He texted me today:
“[At Zerocracy] there is no commitment and anybody is free to leave any time,
so the risk of entrusting a highly important project to such
a platform and failing to deliver it on time is very high.
We will develop it on our own with hired developers who
will have salaries, and I’ll be architect and project manager,
that way it will be under our entire control.” I think this word “control”
he used deserves a comment.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Drop (2014) by Michaël R. Roskam&quot; src=&quot;/images/2018/10/the-drop.jpg&quot; longdesc=&quot;#c9f2bfd5&quot; /&gt;&lt;figcaption id=&quot;c9f2bfd5&quot;&gt;The Drop (2014) by Michaël R. Roskam&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, I know how much we hate the word “control” when it’s being applied to
us sensitive and fragile individuals, also known as computer geeks. We don’t
want to be under anyone’s control. We also don’t want to control others. We prefer
to think that things just move forward on their own, not because someone
stays on top of them and controls them.&lt;/p&gt;

&lt;p&gt;However, this is an illusion.&lt;/p&gt;

&lt;p&gt;We and our projects have to be under control in order for the projects to be completed.&lt;/p&gt;

&lt;p&gt;OK, replace it with managed, organized, or (I love this word) orchestrated.&lt;/p&gt;

&lt;p&gt;The bottom line is: you control it or you lose it.&lt;/p&gt;

&lt;p&gt;What does control technically mean? According to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Control_%28management%29&quot;&gt;Wikipedia&lt;/a&gt;,
it means “setting standards, measuring actual performance and taking &lt;em&gt;corrective action&lt;/em&gt;.”
What are the corrective actions in the context of people management?
There are two: rewards and punishments. In order to keep even the
&lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;most talented people&lt;/a&gt;
under control, we have to reward them for their successes and
punish or &lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;fire&lt;/a&gt;
them for their failures.&lt;/p&gt;

&lt;p&gt;The question is how you do that. How do you reward and how do you punish?&lt;/p&gt;

&lt;p&gt;Even if you don’t want to admit that you do it, you still do. You reward
and you punish. How does it happen in a traditional management model with the
“hired developers” my prospective client was talking about? I’ve explained it already
in a few blog posts. &lt;a href=&quot;/2016/12/06/how-to-pay-programmers-less.html&quot;&gt;&lt;em&gt;How to Pay Programmers Less&lt;/em&gt;&lt;/a&gt;
and &lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;&lt;em&gt;How Do You Punish Your Employees?&lt;/em&gt;&lt;/a&gt;
are probably the best two of them. Managers invent &lt;a href=&quot;/2018/08/29/soft-skills.html&quot;&gt;nice words&lt;/a&gt;
for these things, but in reality it’s still the same carrot-and-stick, only with no predictability and
no explicit &lt;a href=&quot;/2015/10/13/competition-without-rules.html&quot;&gt;rules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, if you think that you can control &lt;em&gt;professional&lt;/em&gt; programmers
using the methods explained in my blog posts above, you are mistaken.
We are way smarter than you. We know how to pretend to be working, while
doing something else. We know how to create an illusion that we are loyal
to the project, while searching the market for a new job. We know how to
organize our time such that you only get ten percent of it, if you are lucky. We know
&lt;a href=&quot;/2017/08/01/how-to-manage-a-manager.html&quot;&gt;how to manage&lt;/a&gt; you,
our &lt;del&gt;stupid&lt;/del&gt; managers.&lt;/p&gt;

&lt;p&gt;As our manager, expecting us to be under control and loyal just because you hired us with
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;monthly salaries&lt;/a&gt;,
you are demonstrating only one thing to us:
you have no idea how to manage senior developers. Instead, we will manage you.
You will be under our control, not the other way around.
If you are lucky, the project will &lt;em&gt;maybe&lt;/em&gt; see its end.
But in most cases this doesn’t happen.&lt;/p&gt;

&lt;p&gt;Do you want to know what real control is? Read this &lt;a href=&quot;https://www.zerocracy.com/policy.html&quot;&gt;Policy&lt;/a&gt;,
which is how we &lt;em&gt;control&lt;/em&gt; programming in Zerocracy. That is the level of
control true professionals enjoy. That document, fully supported by our
&lt;a href=&quot;/2018/03/21/zerocracy-announcement.html&quot;&gt;automated chatbot&lt;/a&gt;,
guides every small piece of reward and punishment a programmer may have on a project.&lt;/p&gt;

&lt;p&gt;This is what true commitment means for our guys: personal and
&lt;a href=&quot;/2014/04/13/no-obligations-principle.html&quot;&gt;explicit responsibility&lt;/a&gt; for
every single step they make. This level of commitment is incomparably better than what
you will likely find when hiring full-time 9-to-5
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office&lt;/a&gt; &lt;del&gt;slaves&lt;/del&gt; employees.&lt;/p&gt;

&lt;p&gt;What are they really committed to? To giving you a month’s notice when they
finally find a better place to scroll through Facebook eight hours a day?&lt;/p&gt;

&lt;p&gt;Seriously?&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Who really is in charge, you or your boss? &lt;a href=&quot;https://twitter.com/hashtag/codeahead?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#codeahead&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1048824708068777984?ref_src=twsrc%5Etfw&quot;&gt;October 7, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><category term="zerocracy" /><summary type="html">I was explaining how Zerocracy works to one of our prospective clients yesterday. He texted me today: “[At Zerocracy] there is no commitment and anybody is free to leave any time, so the risk of entrusting a highly important project to such a platform and failing to deliver it on time is very high. We will develop it on our own with hired developers who will have salaries, and I’ll be architect and project manager, that way it will be under our entire control.” I think this word “control” he used deserves a comment.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/10/the-drop.jpg" /></entry><entry><title type="html">Software Quality Award, 2019</title><link href="https://www.yegor256.com/2018/09/30/award-2019.html" rel="alternate" type="text/html" title="Software Quality Award, 2019" /><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/09/30/award-2019</id><content type="html" xml:base="https://www.yegor256.com/2018/09/30/award-2019.html">&lt;figure class=&quot;badge&quot;&gt;&lt;img src=&quot;https://www.yegor256.com/images/andreea/quality-award.svg&quot; style=&quot;width:300px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;This is the fifth year of the
&lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. The prize
is still the same—&lt;strong&gt;$4,096&lt;/strong&gt;.
The rules are still the same. Read on.
Previous years are here:
&lt;a href=&quot;/2015/04/16/award.html&quot;&gt;2015&lt;/a&gt;,
&lt;a href=&quot;/2015/10/17/award-2016.html&quot;&gt;2016&lt;/a&gt;,
&lt;a href=&quot;/2016/10/23/award-2017.html&quot;&gt;2017&lt;/a&gt;,
&lt;a href=&quot;/2017/10/24/award-2018.html&quot;&gt;2018&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Fill out &lt;a href=&quot;https://docs.google.com/forms/d/1UhXRhVP9ofmWv460LYF1e3vz_hwUmvosmYPDsQSJkBg&quot;&gt;&lt;strong&gt;THIS FORM&lt;/strong&gt;&lt;/a&gt;
to submit your project.&lt;/p&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;One person can submit only one project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Submissions are accepted until September 1, 2019.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I will check the commit history to make sure you’re the main contributor to the project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Results will be announced October 15, 2019 on this page and by email.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The best project will receive $4,096
(I may split this amount among a few projects and may give away a smaller amount!).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Winners that received any cash prizes in previous years can’t submit again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=Z70PMGaxGhY&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/Z70PMGaxGhY/mqdefault.jpg&quot; alt=&quot;YouTube video #Z70PMGaxGhY&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;How to win $4096 in the next year Quality Award? (webinar #29);
        1 November 2017.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open source (in GitHub).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least 4,096 lines of code (&lt;a href=&quot;https://www.npmjs.com/package/cloc&quot;&gt;&lt;code&gt;cloc&lt;/code&gt;&lt;/a&gt; without any arguments)
&lt;em&gt;and&lt;/em&gt; at least 16,384 &lt;a href=&quot;/2014/11/14/hits-of-code.html&quot;&gt;hits-of-code&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one year old.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Object-oriented (that’s the only thing I understand).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best project is selected using this &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;criteria&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What doesn’t matter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don’t care about
popularity; quality is the key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it’s still eligible for the award. I don’t care about
your marketing position; quality is all.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="award" /><summary type="html">This is the fifth year of the Software Quality Award. The prize is still the same—$4,096. The rules are still the same. Read on. Previous years are here: 2015, 2016, 2017, 2018.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/andreea/quality-award.png" /></entry><entry><title type="html">Fear of Decoupling</title><link href="https://www.yegor256.com/2018/09/18/fear-of-coupling.html" rel="alternate" type="text/html" title="Fear of Decoupling" /><published>2018-09-18T00:00:00+00:00</published><updated>2018-09-18T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/09/18/fear-of-coupling</id><content type="html" xml:base="https://www.yegor256.com/2018/09/18/fear-of-coupling.html">&lt;p&gt;Objects talk to each other via their methods. In mainstream programming
languages, like Java or C#, an object may have a unique set of methods
together with some methods it is forced to have because it &lt;em&gt;implements&lt;/em&gt; certain types,
also known as &lt;em&gt;interfaces&lt;/em&gt;. My experience of speaking with many programmers
tells me that most of us are pretty scared of objects that implement too
many interface methods. We don’t want to deal with them since they
are &lt;em&gt;polymorphic&lt;/em&gt; and, because of that, unreliable.
It’s a fair fear. Let’s try to analyze where it comes from.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Funny Games (2007) by Michael Haneke&quot; src=&quot;/images/2018/09/funny-games.jpg&quot; longdesc=&quot;#9f6d574f&quot; /&gt;&lt;figcaption id=&quot;9f6d574f&quot;&gt;Funny Games (2007) by Michael Haneke&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;As usual, let’s start with a simple Java example. Here is an amount of money
I’m going to send to a user via, say, the PayPal API:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now here I am, the method that sends the money:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Send them over via the API...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two pieces of code are, as we call it, loosely coupled. The method
&lt;code&gt;send()&lt;/code&gt; has no idea which class is provided and how exactly the method
&lt;code&gt;cents()&lt;/code&gt; is implemented. Maybe it’s a simple constant object of one dollar:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OneDollar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or maybe it’s a way more complex entity that makes a network connection first,
in order to fetch the current USD-to-EUR exchange rate, update the database,
and then return the result of some calculation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmployeeHourlyRate&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Fetch the exchange rate;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Update the database;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Calculate the hourly rate;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Return the value.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The method &lt;code&gt;send()&lt;/code&gt; doesn’t have the knowledge of what exactly is provided
as its first argument. All it can do is hope that the method &lt;code&gt;cents()&lt;/code&gt; will
do the work right. What if it doesn’t?&lt;/p&gt;

&lt;p&gt;If I’m a developer of the method &lt;code&gt;send()&lt;/code&gt; and I’m fully prepared to take the
blame for the mistakes my method causes, I do want to know what my collaborators are.
And I want to be absolutely sure they work. Not just work, but work exactly how I expect
them to. Preferably I would like to write them myself. Ideally
I would like to ensure that nobody touches them after I implement them. You get
the sarcasm, right?&lt;/p&gt;

&lt;p&gt;This may sound like a joke, but I have heard this argument many times. They say
that “it’s better to be completely sure two pieces work together, instead of
relying on the damn polymorphism and then spending hours debugging something
I didn’t write.” And they are right, you know. Polymorphism—when
a seemingly primitive object of type &lt;code&gt;Money&lt;/code&gt; does whatever it wants, including
HTTP requests and SQL &lt;code&gt;UPDATE&lt;/code&gt; queries—doesn’t add reliability to the entire
application, does it?&lt;/p&gt;

&lt;p&gt;No, it doesn’t.&lt;/p&gt;

&lt;p&gt;Obviously, polymorphism makes the life of the developers of this type &lt;code&gt;Money&lt;/code&gt; and its
“ancestors” way simpler, since they don’t have to think about their users much.
All they worry about is how to return the &lt;code&gt;double&lt;/code&gt; when &lt;code&gt;cents()&lt;/code&gt; is called.
They don’t need to care about speed, potential exceptions, memory usage,
and many other things, since the interface doesn’t require that. It only
tells them to return the &lt;code&gt;double&lt;/code&gt; and call it a day. Let somebody else
worry about everything else. Easy, huh? But that’s a childish and egoistic way
of thinking, you may say!&lt;/p&gt;

&lt;p&gt;Yes, it is.&lt;/p&gt;

&lt;p&gt;However…&lt;/p&gt;

&lt;p&gt;You’ve most definitely heard of the &lt;a href=&quot;/2015/08/25/fail-fast.html&quot;&gt;Fail Fast&lt;/a&gt; idea,
which, in a nutshell, claims that in order to make an application robust
and stable we have to make sure its components are as fragile as possible and
as vulnerable as they can be in response to any potential exceptional situation.
They have to break whenever they can and let their users deal with the failures.
With such a philosophy no object will assume anything good about its counterparts
and will always try to escalate problems to higher levels, which eventually will
hit the end user who will report them back to the team. The team will fix them
all and the entire product will stabilize.&lt;/p&gt;

&lt;p&gt;If the philosophy is the opposite and every object is trying to deal with
problems on its individual micro level, the majority of exceptional situations
will never be visible to users, testers, architects and programmers, who are
supposed to be dealing with them and finding solutions for them. Thanks to this
“careful” mindset of individual objects, the stability and robustness of the
entire application will suffer.&lt;/p&gt;

&lt;p&gt;We can apply the same logic to the “fear of loose coupling.”&lt;/p&gt;

&lt;p&gt;When we worry about how &lt;code&gt;Money.cents()&lt;/code&gt; works and want to control its behavior,
we are doing ourselves and the entire project a big disservice. In the long run
we destabilize the product, instead of making it more stable. Some even
want to prohibit polymorphism by declaring method &lt;code&gt;send()&lt;/code&gt; this way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmployeeHourlyRate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Now I know that it&amp;#39;s not some abstract Money,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// but a very specific class EmployeeHourlyRate, which&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// was implemented by Bobby, a good friend of mine.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we limit the amount of mistakes our code may have, since we know Bobby,
we’ve seen his code, we know how it works and which exceptions to expect.
We are safe. Yes, we are. For now. But strategically speaking, by not
allowing our software to make all possible mistakes and throw all possible
exceptions in all unusual situations, we are seriously limiting its ability
to be properly tested and that’s why it’s destabilized.&lt;/p&gt;

&lt;p&gt;As I &lt;a href=&quot;/2017/05/23/unlimited-number-of-bugs.html&quot;&gt;mentioned earlier&lt;/a&gt;,
the only way to increase the quality of software is to find and fix its bugs.
The more bugs we fix, the fewer are the bugs that remain hidden and not-fixed-yet. A fear
of bugs and our intention to prevent them is only shooting us in the foot.&lt;/p&gt;

&lt;p&gt;Instead, we should let everybody, not only Bobby, implement &lt;code&gt;Money&lt;/code&gt; and pass
those implementations to &lt;code&gt;send()&lt;/code&gt;. Yes, some of them will cause troubles
and may even lead to UI-visible failures. But if our management understands
the concept of &lt;a href=&quot;/2017/12/26/software-quality-formula.html&quot;&gt;software quality&lt;/a&gt;
right, they will &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;not blame&lt;/a&gt; us for mistakes.
Instead, they will encourage us to find as many of them as possible,
reproduce them with automated tests, fix, and re-deploy.&lt;/p&gt;

&lt;p&gt;Thus, the fear of decoupling is nothing else but Fail Safe.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How often do you create interfaces for your classes? &lt;a href=&quot;https://twitter.com/hashtag/elegantobjects?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#elegantobjects&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/oop?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#oop&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1046377815799738368?ref_src=twsrc%5Etfw&quot;&gt;September 30, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Objects talk to each other via their methods. In mainstream programming languages, like Java or C#, an object may have a unique set of methods together with some methods it is forced to have because it implements certain types, also known as interfaces. My experience of speaking with many programmers tells me that most of us are pretty scared of objects that implement too many interface methods. We don’t want to deal with them since they are polymorphic and, because of that, unreliable. It’s a fair fear. Let’s try to analyze where it comes from.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/09/funny-games.jpg" /></entry><entry><title type="html">Code Must Be Clean. And Clear.</title><link href="https://www.yegor256.com/2018/09/12/clear-code.html" rel="alternate" type="text/html" title="Code Must Be Clean. And Clear." /><published>2018-09-12T00:00:00+00:00</published><updated>2018-09-12T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/09/12/clear-code</id><content type="html" xml:base="https://www.yegor256.com/2018/09/12/clear-code.html">&lt;p&gt;There is a famous book by Robert Martin called &lt;a href=&quot;http://amzn.to/2m7LmaA&quot;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;.
The title is an obvious call to all of us: the code must be &lt;em&gt;clean&lt;/em&gt;. Clean, like a kitchen,
I suppose—there are no dirty dishes, no garbage on the floor, no smelly
towels. Dirt to be cleaned in a code base, according to Martin, includes
large methods, non-descriptive variable names, tight coupling, lack of
&lt;a href=&quot;/2017/03/28/solid.html&quot;&gt;SOLID&lt;/a&gt;
and &lt;a href=&quot;/2017/12/19/srp-is-hoax.html&quot;&gt;SRP&lt;/a&gt; compliance,
and many other things. Read the book, it’s worth it. However,
there is yet another aspect of source code. How &lt;em&gt;clear&lt;/em&gt; is it?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Rum Diary (2011) by Bruce Robinson&quot; src=&quot;/images/2018/09/rum-diary.jpg&quot; longdesc=&quot;#b241032c&quot; /&gt;&lt;figcaption id=&quot;b241032c&quot;&gt;The Rum Diary (2011) by Bruce Robinson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The kitchen is clean when there is no dirt in the oven. But if its electric panel
speaks French, I can’t use the kitchen. Even if it’s perfectly clean.
It’s not &lt;em&gt;clear&lt;/em&gt; how to use it—that’s why it’s useless.&lt;/p&gt;

&lt;p&gt;The metaphor applies to the source code. Making it clean is the first
and very important step, which will remove all those coding anti-patterns
so many books speak about, including my favorite
&lt;a href=&quot;http://amzn.to/2cs4cXW&quot;&gt;&lt;em&gt;Code Complete&lt;/em&gt;&lt;/a&gt; by Steve McConnell,
&lt;a href=&quot;http://amzn.to/1SdcZ8M&quot;&gt;&lt;em&gt;Working Effectively With Legacy Code&lt;/em&gt;&lt;/a&gt;
by Michael Feathers, and
&lt;a href=&quot;http://amzn.to/2m7LmaA&quot;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;.
A very important step, but not the most important one.
A dirty kitchen that is useful is better than a clean one that I can’t use, isn’t it?&lt;/p&gt;

&lt;p&gt;Making code clean but leaving it difficult to understand by others is the
pitfall most of us fall for. By &lt;em&gt;others&lt;/em&gt; I mean everybody, from
our fellow in-project co-developers sitting next to us at the same desk, to
imaginative junior contributors who will join the project in five years after
we’re all hired by Google. All of them, across this very large time frame, must
be able to use the &lt;del&gt;kitchen&lt;/del&gt; source code without any additional help.
The oven has to speak their language. Not the language of its designer.&lt;/p&gt;

&lt;p&gt;How do you do that? How do you make sure the code is clear, not just clean?&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;If a stranger can modify your code and fix a bug in less than an hour, it is maintainable.&lt;/aside&gt;

&lt;p&gt;Well, test it. Ask someone who is outside of the project to take a look
at your code and tell you how clear it is. Not how beautiful your classes
and code constructs are—that’s what makes it clean. Instead, ask someone to
fix a bug in just 30 minutes and see how they react. You will realize
how clear the code is and whether it speaks the language a &lt;em&gt;stranger&lt;/em&gt;
can understand.&lt;/p&gt;

&lt;p&gt;This is the definition of maintainability. If a stranger can &lt;em&gt;modify&lt;/em&gt; your
code and fix a bug in less than an hour, it is maintainable. Obviously,
cleanliness will help. But it’s not enough. There has to be something
else, which I don’t really know how to describe. The only way to achieve
it is to let strangers regularly see your code, attempt to make a
contribution, and report bugs when something is not &lt;em&gt;clear&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Making your code open and encouraging programmers to report bugs when
something is not only broken but unclear—are the best two ways to achieve
high maintainability.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="maintainability" /><summary type="html">There is a famous book by Robert Martin called Clean Code. The title is an obvious call to all of us: the code must be clean. Clean, like a kitchen, I suppose—there are no dirty dishes, no garbage on the floor, no smelly towels. Dirt to be cleaned in a code base, according to Martin, includes large methods, non-descriptive variable names, tight coupling, lack of SOLID and SRP compliance, and many other things. Read the book, it’s worth it. However, there is yet another aspect of source code. How clear is it?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/09/rum-diary.jpg" /></entry></feed>