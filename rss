<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2016-08-02T23:23:12+00:00</updated><id>http://www.yegor256.com/</id><title>Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><entry><title>8 Maturity Levels of Continuous Integration</title><link href="http://www.yegor256.com/2016/08/01/continuous-integration-maturity.html" rel="alternate" type="text/html" title="8 Maturity Levels of Continuous Integration" /><published>2016-08-01T00:00:00+00:00</published><updated>2016-08-01T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/01/continuous-integration-maturity</id><content type="html" xml:base="http://www.yegor256.com/2016/08/01/continuous-integration-maturity.html">&lt;p&gt;There are a number of levels you have to go through before your
continuous integration pipeline becomes perfect. I found eight of
them and presented my findings at &lt;a href=&quot;http://slcdevopsdays.org/cr3ativconference/continuous-integration-may-have-negative-effects/&quot;&gt;DevOpsDays&lt;/a&gt;
in Salt Lake City a few weeks ago
(watch the &lt;a href=&quot;https://www.youtube.com/watch?v=3dJP_LtUGgg&quot;&gt;video&lt;/a&gt;).
Now it&amp;#39;s time to write them down and ask
you &amp;mdash; Which level are you at? Post your answer below.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Ftwins.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Twins (1988) by Ivan Reitman&#39;/&gt;&lt;figcaption&gt;Twins (1988) by Ivan Reitman&lt;/figcaption&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;.
Here you just write source code on your computers and maybe somewhere on
the server. The best you can do here is to build it manually, say,
every day. Is it continuous integration? Well, to some extent, provided
you don&amp;#39;t forget to compile and package everything regularly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automated Build&lt;/strong&gt;.
At this level, your build is automated, which means you can compile,
test, and package the entire product with just one line at the command line.
Pay attention; one line. You must be able to hit one button and either
get an error or a successful build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;.
At this level, you keep your source code in Git. You can keep it in some
other source control system, but that would be strange &amp;mdash; Git is the
&lt;em&gt;status quo&lt;/em&gt; at the moment. You should be able to get a new computer,
with nothing in it, check out the source code from a Git repository, and
run a full build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pull Requests&lt;/strong&gt;.
Each and every change to your source code must be submitted through
a pull request, which means that you host your repository on GitHub. You
may host it somewhere else, but again, that would be strange because
GitHub is the &lt;em&gt;status quo&lt;/em&gt; at the moment. Again, nobody should be able to commit
anything directly to the
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;master branch&lt;/a&gt;
except through forks and pull requests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Reviews&lt;/strong&gt;.
Every pull request must pass a mandatory
&lt;a href=&quot;/2015/02/09/serious-code-reviewer.html&quot;&gt;code review&lt;/a&gt;
before it gets merged.
You must have some code review policy that explains who does reviews,
what happens if the author doesn&amp;#39;t agree with the reviewer, etc. But no
pull request may be merged unless it has been reviewed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tests&lt;/strong&gt;.
At this level, your code is covered by unit tests (and integration tests), and every change
comes with a new test. Your automated build runs all tests together and fails
if any of them fail.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;.
Checking the &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality&lt;/a&gt;
of your code without running it is what static analysis
is about. At this level, the quality of your code is checked by the automated
build. If the quality is lower than the threshold, the build fails.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pre-Flight Builds&lt;/strong&gt;.
This idea is explained
&lt;a href=&quot;/2014/10/08/continuous-integration-is-dead.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By the way, at the &lt;a href=&quot;https://www.youtube.com/watch?v=3dJP_LtUGgg&quot;&gt;presentation&lt;/a&gt;,
I also mentioned what problems you may encounter at each maturity level.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="devops" /><summary>There are a number of levels you have to go through before your
continuous integration pipeline becomes perfect. I found eight of
them and presented my findings at DevOpsDays
in Salt Lake City a few weeks ago
(watch the video).
Now it&amp;#39;s time to write them down and ask
you &amp;mdash; Which level are you at? Post your answer below.</summary></entry><entry><title>ActiveRecord Is Even Worse Than ORM</title><link href="http://www.yegor256.com/2016/07/26/active-record.html" rel="alternate" type="text/html" title="ActiveRecord Is Even Worse Than ORM" /><published>2016-07-26T00:00:00+00:00</published><updated>2016-07-26T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/26/active-record</id><content type="html" xml:base="http://www.yegor256.com/2016/07/26/active-record.html">&lt;p&gt;You probably remember what &lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;I think&lt;/a&gt;
about ORM, a very popular design pattern. In a nutshell,
it encourages us to turn objects into
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTOs&lt;/a&gt;, which are
anemic, passive, and not objects at all. The consequences are usually dramatic &amp;mdash;
the entire programming paradigm shifts from object-oriented to procedural.
I&amp;#39;ve tried to explain this at a &lt;a href=&quot;https://www.youtube.com/watch?v=aER4uwyFbqQ&quot;&gt;JPoint&lt;/a&gt; and
&lt;a href=&quot;https://www.youtube.com/watch?v=63tS3HNmhiE&quot;&gt;JEEConf&lt;/a&gt; this year. After
each talk, a few people told me that what I&amp;#39;m suggesting is called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Active_record_pattern&quot;&gt;ActiveRecord&lt;/a&gt; or
&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff649690.aspx&quot;&gt;Repository&lt;/a&gt; patterns.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fen-duva-satt-pa-engren.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;En duva satt på en gren och funderade på tillvaron (2014) by Roy Andersson&#39;/&gt;&lt;figcaption&gt;En duva satt på en gren och funderade på tillvaron (2014) by Roy Andersson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Moreover, they claimed that ActiveRecord actually solves the problem
I&amp;#39;ve found in ORM. They said I should explain in my talks that
what I&amp;#39;m offering (SQL-speaking objects) already exists and has a name:
ActiveRecord.&lt;/p&gt;

&lt;p&gt;I disagree. Moreover, I think that ActiveRecord is even worse than ORM.&lt;/p&gt;

&lt;p&gt;ORM consists of two parts: the session and
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTOs&lt;/a&gt;, also known as &amp;quot;entities&amp;quot;.
The entities have no functionality; they are just primitive containers for the
data transferred from and to the session. And that is what the problem is &amp;mdash;
objects don&amp;#39;t encapsulate but rather expose data. To understand why this is wrong and why it&amp;#39;s
against the object paradigm, you can read
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;here&lt;/a&gt;, and
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;here&lt;/a&gt;.
Now, let&amp;#39;s just agree that it&amp;#39;s very wrong and move on.&lt;/p&gt;

&lt;p&gt;What solution is ActiveRecord proposing? How is it solving the problem?
It moves the engine into the &lt;strong&gt;parent class&lt;/strong&gt;, which all our entities inherit from.
This is how we were supposed to save our entity to the database in the ORM
scenario (pseudo-code):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Java in a Nutshell&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this is what we do with an ActiveRecord:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Java in a Nutshell&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The method &lt;code&gt;update()&lt;/code&gt; is defined in book&amp;#39;s parent class and uses
book as a &lt;strong&gt;data container&lt;/strong&gt;. When called, it fetches data
from the container (the book) and updates the database. How is it
different than ORM? There is absolutely no difference. The book
is still a container that knows nothing about SQL and any persistence
mechanisms.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s even worse in ActiveRecord, compared to ORM, is that it &lt;strong&gt;hides&lt;/strong&gt;
the fact that objects are data containers. A book, in the second snippet,
&lt;strong&gt;pretends&lt;/strong&gt; to be a &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;proper object&lt;/a&gt;,
while in reality it&amp;#39;s just a dumb data bag.&lt;/p&gt;

&lt;p&gt;I believe this is what misguided those who were saying
that my SQL-speaking objects concept is exactly the same as the ActiveRecord
design pattern (or Repository, which is almost exactly the same).&lt;/p&gt;

&lt;p&gt;No, it&amp;#39;s not.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>You probably remember what I think
about ORM, a very popular design pattern. In a nutshell,
it encourages us to turn objects into
DTOs, which are
anemic, passive, and not objects at all. The consequences are usually dramatic &amp;mdash;
the entire programming paradigm shifts from object-oriented to procedural.
I&amp;#39;ve tried to explain this at a JPoint and
JEEConf this year. After
each talk, a few people told me that what I&amp;#39;m suggesting is called
ActiveRecord or
Repository patterns.</summary></entry><entry><title>Convince Me!</title><link href="http://www.yegor256.com/2016/07/21/convince-me.html" rel="alternate" type="text/html" title="Convince Me!" /><published>2016-07-21T00:00:00+00:00</published><updated>2016-07-21T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/21/convince-me</id><content type="html" xml:base="http://www.yegor256.com/2016/07/21/convince-me.html">&lt;p&gt;I&amp;#39;ve already explained how I understand
the &lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;role&lt;/a&gt;
and &lt;a href=&quot;/2015/05/11/software-architect-responsibilities.html&quot;&gt;responsibilities&lt;/a&gt;
of a software architect.
But one question still remains unanswered, and it often turns into a problem
in our projects: What does a software architect do when the project
sponsor doesn&amp;#39;t like his technical decisions? The architect implements
something in a certain way, and the sponsor (or its representative) says
that it&amp;#39;s not exactly how things should work. What&amp;#39;s next?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fbeasts-of-no-nation.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Beasts of No Nation (2015) by Cary Joji Fukunaga&#39;/&gt;&lt;figcaption&gt;Beasts of No Nation (2015) by Cary Joji Fukunaga&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In our projects, a product owner (PO) is usually a representative of
a project sponsor (the paying customer). Since all our projects are rather
complex Java software packages, POs are very technical people. They
are programmers or used to be programmers. They understand the code
we write, and they want their opinion to be taken into account and
respected.&lt;/p&gt;

&lt;p&gt;And I&amp;#39;m not talking about &lt;a href=&quot;/2015/01/05/how-to-be-honest-and-keep-customer.html&quot;&gt;stupid&lt;/a&gt;
product owners &amp;mdash; those guys are a separate story. I&amp;#39;m talking about a pretty
reasonable PO with his own technical opinion that needs to be heard.&lt;/p&gt;

&lt;p&gt;Here is a practical example. Last week, I was
&lt;a href=&quot;/2015/08/04/nine-steps-start-software-project.html&quot;&gt;starting&lt;/a&gt; a project.
I was an architect. It was a Java server-side module. I decided to use
Maven as a build automation system.&lt;/p&gt;

&lt;p&gt;I created some initial files, configured &lt;code&gt;pom.xml&lt;/code&gt;, briefly explained the
project structure in &lt;code&gt;README.md&lt;/code&gt;, and submitted a pull request. Chris, the product
owner, reviewed it and asked, &amp;quot;Why not Gradle?&amp;quot;&lt;/p&gt;

&lt;p&gt;It was a reasonable question, right? Gradle is another popular build
automation system that I could have used, but I didn&amp;#39;t. The question
is why. It was a pretty innocent question, and I explained the answer right there
in my comment to the pull request. I said Maven was more suitable in
this project because ... blah blah blah.&lt;/p&gt;

&lt;p&gt;But Chris argued back. He was still thinking Gradle was the better choice.
He had his reasons. Meanwhile, I tried to &lt;strong&gt;convince&lt;/strong&gt; him of mine. I tried a few times
and then realized I was doing something wrong. It shouldn&amp;#39;t work like that.&lt;/p&gt;

&lt;p&gt;A software architect should not convince a product owner, a customer, or anybody
else. Instead, an architect must make his decisions and be responsible for the
entire success or failure of the product, just like I
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;explained before&lt;/a&gt;.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;A good architect must collect different opinions before making his own decision&lt;/aside&gt;

&lt;p&gt;There is a simple reason for that. Any attempt to convince anyone
causes a possibility of &amp;quot;responsibility leakage&amp;quot;. What if I fail to convince?
I will have to change my plan and use Gradle, right? What if the product
has problems because of that decision? I will try to blame Chris for that,
right? I can&amp;#39;t be &lt;strong&gt;fully&lt;/strong&gt; responsible for the product anymore, because I was
&amp;quot;forced&amp;quot; to make at least one decision.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t get me wrong; a good architect must collect different opinions before
making his own decision. But collecting Chris&amp;#39;s opinion would look very
different. I would ask him first what he thinks about Maven and Gradle.
He would tell me that he doesn&amp;#39;t like Maven because of this and that. And I
would take that into account. Or maybe not. But my decision would still be
mine, made by myself, under no compulsion by anybody. And Chris would still
be able to blame me for any negative consequences of that decision.&lt;/p&gt;

&lt;p&gt;But what should Chris do if he really doesn&amp;#39;t like my decision? It&amp;#39;s his
money and his product, right? He does care. And he doesn&amp;#39;t want to have
Maven in &lt;strong&gt;his&lt;/strong&gt; product. What does he do? How can he influence my
decision-making process?&lt;/p&gt;

&lt;p&gt;It&amp;#39;s easy. There are two documents in each software project. The first one is
&lt;strong&gt;requirements&lt;/strong&gt;, and the second one is &lt;strong&gt;architecture&lt;/strong&gt;. Chris should use them both
to correct me and point me in the right direction. Here&amp;#39;s how.&lt;/p&gt;

&lt;p&gt;First, if he really doesn&amp;#39;t want to have Maven,
he should make changes to the requirements document. He should
add something like &amp;quot;the build system must be Gradle, because ...&amp;quot;
Or maybe even without the &amp;quot;because&amp;quot; part. It&amp;#39;s up to him.
In that case, I will have to take that into account, and I will.
I know my design decisions are dictated by the requirements.
And not because Chris convinced me or I failed to convince him, but because
that&amp;#39;s what the document says.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;An architect must be an absolute technical dictator during the project and must not have to convince anyone&lt;/aside&gt;

&lt;p&gt;Second, if he is not entirely sure that Gradle is the right choice
and just wants me to be more serious about my decisions, he should
complain (by submitting a bug) about the quality of my
&lt;a href=&quot;/2015/08/04/nine-steps-start-software-project.html&quot;&gt;architecture document&lt;/a&gt;.
He should say the choice to go with Maven is not explained
properly. I will then rethink my decision and will either change
it or explain it better. But again, I will do it not to please
Chris but to fix a reported bug.&lt;/p&gt;

&lt;p&gt;To summarize, an architect must be an absolute technical &lt;strong&gt;dictator&lt;/strong&gt;
during the project and must not have to convince anyone. If that&amp;#39;s not the case,
the entire project faces big risks, simply because the responsibility
will be &amp;quot;leaking&amp;quot;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><category term="architect" /><summary>I&amp;#39;ve already explained how I understand
the role
and responsibilities
of a software architect.
But one question still remains unanswered, and it often turns into a problem
in our projects: What does a software architect do when the project
sponsor doesn&amp;#39;t like his technical decisions? The architect implements
something in a certain way, and the sponsor (or its representative) says
that it&amp;#39;s not exactly how things should work. What&amp;#39;s next?</summary></entry><entry><title>The Law of Demeter Doesn’t Mean One Dot</title><link href="http://www.yegor256.com/2016/07/18/law-of-demeter.html" rel="alternate" type="text/html" title="The Law of Demeter Doesn&#39;t Mean One Dot" /><published>2016-07-18T00:00:00+00:00</published><updated>2016-07-18T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/18/law-of-demeter</id><content type="html" xml:base="http://www.yegor256.com/2016/07/18/law-of-demeter.html">&lt;p&gt;You&amp;#39;ve probably heard about that 30-year-old
&lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Law of Demeter&lt;/a&gt; (LoD). Someone
asked me recently what I think about it. And not just what I think, but
how it is possible to keep objects small and obey the LoD. According to the
law, we&amp;#39;re not allowed to do something like &lt;code&gt;book.pages().last().text()&lt;/code&gt;.
Instead, we&amp;#39;re supposed to go with &lt;code&gt;book.textOfLastPage()&lt;/code&gt;.
It puzzled me, because I strongly disagree. I believe the first construct
is perfectly valid in OOP. So I&amp;#39;ve done some research to find out
whether this law is really a law. What I found out is that the law is
perfect, but its common understanding in the OOP world is simply wrong
(not surprisingly).&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fspartacus.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Spartacus (1960) by Stanley Kubrick&#39;/&gt;&lt;figcaption&gt;Spartacus (1960) by Stanley Kubrick&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ccs.neu.edu/research/demeter/papers/law-of-demeter/oopsla88-law-of-demeter.pdf&quot;&gt;Object-Oriented Programming: An Objective Sense of Style&lt;/a&gt;
K.Lieberherr, I.Holland, and A.Riel, OOPSLA&amp;#39;88 Proceedings, 1988.&lt;/p&gt;

&lt;p&gt;This is where it was introduced. Let&amp;#39;s see what it literally says (look for
Section 3 in that PDF document). Say it&amp;#39;s a Java class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All four calls to four different &lt;code&gt;hello()&lt;/code&gt; methods are legal, according
to the LoD. So what would be illegal, I ask myself? No surprise;
the answer is this: &lt;code&gt;a.x.hello()&lt;/code&gt;. That would be illegal. Directly
accessing the attribute from another object and then talking to it
is not allowed by the law.&lt;/p&gt;

&lt;p&gt;But we don&amp;#39;t do that anyway. We&amp;#39;re talking about &lt;code&gt;book.pages().last().text()&lt;/code&gt;.
In this chain of method calls, we&amp;#39;re not accessing any attributes. We&amp;#39;re
asking our objects to build new objects for us. What does the law say about
that? Let me read it and quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Objects created by m(), or by functions or methods that m() calls, are considered as arguments of m()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, the object &lt;code&gt;Pages&lt;/code&gt; that method call &lt;code&gt;book.pages()&lt;/code&gt; returns
is a perfectly valid object that can be used. Then, we can call method
&lt;code&gt;last()&lt;/code&gt; on it and get an object &lt;code&gt;Page&lt;/code&gt;, and then call method &lt;code&gt;text()&lt;/code&gt;, etc. This
is a perfectly valid scenario that doesn&amp;#39;t violate the law at all, just
as I expected.&lt;/p&gt;

&lt;p&gt;So where does this common understanding of the law come from? Why does
&lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Wikipedia&lt;/a&gt;
call it a rule of &amp;quot;one dot&amp;quot; and say that
&amp;quot;an object should avoid invoking methods of a member object returned by another method&amp;quot;?
This is absolutely to the contrary of what the original paper says!
What&amp;#39;s going on?&lt;/p&gt;

&lt;p&gt;The answer is simple: &lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The majority of OOP developers think most object methods that
return anything are getters. And getters, indeed, are no different than
direct access to object attributes. That&amp;#39;s why Wikipedia actually says
&amp;quot;no direct access to attributes and, since most of your methods are getters,
don&amp;#39;t touch them either, silly.&amp;quot;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s just sad to see.&lt;/p&gt;

&lt;p&gt;So the bottom line is that the Law of Demeter is not against
method chaining at all. Of course, it&amp;#39;s against getters and direct attribute
access. But who isn&amp;#39;t, right?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>You&amp;#39;ve probably heard about that 30-year-old
Law of Demeter (LoD). Someone
asked me recently what I think about it. And not just what I think, but
how it is possible to keep objects small and obey the LoD. According to the
law, we&amp;#39;re not allowed to do something like book.pages().last().text().
Instead, we&amp;#39;re supposed to go with book.textOfLastPage().
It puzzled me, because I strongly disagree. I believe the first construct
is perfectly valid in OOP. So I&amp;#39;ve done some research to find out
whether this law is really a law. What I found out is that the law is
perfect, but its common understanding in the OOP world is simply wrong
(not surprisingly).</summary></entry><entry><title>Who Is an Object?</title><link href="http://www.yegor256.com/2016/07/14/who-is-object.html" rel="alternate" type="text/html" title="Who Is an Object?" /><published>2016-07-14T00:00:00+00:00</published><updated>2016-07-14T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/14/who-is-object</id><content type="html" xml:base="http://www.yegor256.com/2016/07/14/who-is-object.html">&lt;p&gt;There are thousands of books about object-oriented programming and
hundreds of object-oriented languages, and I believe most (read &amp;quot;all&amp;quot;) of them
give us an incorrect definition of an &amp;quot;object&amp;quot;. That&amp;#39;s why the entire
OOP world is so full of misconceptions and mistakes. Their
definition of an object is limited by the hardware architecture they
are working with and that&amp;#39;s why is very primitive and mechanical.
I&amp;#39;d like to introduce a better one.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fjackass-the-movie.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Jackass: The Movie (2002) by Jeff Tremaine&#39;/&gt;&lt;figcaption&gt;Jackass: The Movie (2002) by Jeff Tremaine&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;What is an object? I&amp;#39;ve done a little research, and this is what I&amp;#39;ve found:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;Objects may contain data, in the form of fields, often known as attributes;
and code, in the form of procedures, often known as methods&amp;quot;
&amp;mdash; &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;Wikipedia&lt;/a&gt; at the time of writing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;An object stores its state in fields and exposes its behavior through methods&amp;quot;
&amp;mdash; &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/concepts/object.html&quot;&gt;What Is an Object?&lt;/a&gt; by Oracle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;Each object looks quite a bit like a little computer &amp;mdash;
it has a state, and it has operations that you can ask it to perform&amp;quot;
&amp;mdash; &lt;a href=&quot;http://amzn.to/1PBmQpm&quot;&gt;Thinking in Java&lt;/a&gt;, 4th Ed., Bruce Eckel, p. 16.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;A class is a collection of data fields that hold values
and methods that operate on those values&amp;quot;
&amp;mdash; &lt;a href=&quot;http://amzn.to/28PEqSi&quot;&gt;Java in a Nutshell&lt;/a&gt;, 6th Ed., Evans and Flanagan, p. 98.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;An object is some memory that holds a value of some type&amp;quot;
&amp;mdash; &lt;a href=&quot;http://amzn.to/1XyGCtk&quot;&gt;The C++ Programming Language&lt;/a&gt;, 4th Ed., Bjarne Stroustrup, p. 40.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;An object consists of some private memory and a set of operations&amp;quot;
&amp;mdash; &lt;a href=&quot;http://amzn.to/1UhYinp&quot;&gt;Smalltalk-80&lt;/a&gt;, Goldberg and Robson, p. 6.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is common throughout all these definitions is the word &amp;quot;contains&amp;quot; (or &amp;quot;holds&amp;quot;,
&amp;quot;consists&amp;quot;, &amp;quot;has&amp;quot;, etc.). They all think that an object is a &lt;em&gt;box with data&lt;/em&gt;.
And this perspective is exactly what I&amp;#39;m strongly against.&lt;/p&gt;

&lt;p&gt;If we look at how C++ or Java are implemented, such a definition of an
object will sound &lt;em&gt;technically&lt;/em&gt; correct. Indeed, for each object, Java Virtual
Machine allocates a few bytes in memory in order to store object
attributes there. Thus, we can technically say, in that language,
that an object is an in-memory box with data.&lt;/p&gt;

&lt;p&gt;Right, but this is just a corner case!&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s try to imagine another object-oriented language that doesn&amp;#39;t
store object attributes in memory. Confused? Bear with me for a minute.
Let&amp;#39;s say that in that language we define an object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;c {
  vin: v,
  engine: e
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, &lt;code&gt;vin&lt;/code&gt; and &lt;code&gt;engine&lt;/code&gt; are attributes of object &lt;code&gt;c&lt;/code&gt; (it&amp;#39;s a car; let&amp;#39;s
forget about classes for now to focus strictly on objects). Thus, there is
a simple object that has two attributes. The first one is car&amp;#39;s VIN, and the
second one is its engine. The VIN is an object &lt;code&gt;v&lt;/code&gt;, while the engine is &lt;code&gt;e&lt;/code&gt;.
To make it easier to understand, this is how a similar object would
look in Java:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,...&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;8&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;8&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 17 chars&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m not entirely sure about JVM, but in C++ such an object will take
exactly 25 bytes in memory (assuming it&amp;#39;s 64-bit x86 architecture). The
first 17 bytes will be taken by the array of chars and another 8 bytes
by a pointer to the block in memory with object &lt;code&gt;e&lt;/code&gt;.
That&amp;#39;s how the C++ compiler understands objects and translates them to
the x86 architecture. In C++, objects are just data structures with
clearly defined allocation of data attributes.&lt;/p&gt;

&lt;p&gt;In that example, attributes &lt;code&gt;vin&lt;/code&gt; and &lt;code&gt;engine&lt;/code&gt; are not equal:
&lt;code&gt;vin&lt;/code&gt; is &amp;quot;data&amp;quot;, while &lt;code&gt;engine&lt;/code&gt; is a &amp;quot;pointer&amp;quot; to another object.
I intentionally made it this way in order to demonstrate that calling
an object a box with data is possible only with &lt;code&gt;vin&lt;/code&gt;. Only when
the data are located right &amp;quot;inside&amp;quot; the object can we say that the
object is actually a box for the data. With &lt;code&gt;engine&lt;/code&gt;, it isn&amp;#39;t
really true because there is no data technically &lt;em&gt;inside&lt;/em&gt; the object. Instead, there is a
&lt;em&gt;pointer&lt;/em&gt; to another object. If our object would only have an
&lt;code&gt;engine&lt;/code&gt; attribute, it would take just 8 bytes in memory, with none of them
actually occupied by &amp;quot;data&amp;quot;.&lt;/p&gt;

&lt;p&gt;Now, let&amp;#39;s get back to our new pseudo language. Let&amp;#39;s imagine it treats
objects very differently than C++ &amp;mdash; it doesn&amp;#39;t keep object attributes
in memory &lt;em&gt;at all&lt;/em&gt;. It doesn&amp;#39;t have pointers, and it doesn&amp;#39;t know anything about
x86 architecture. It just &lt;em&gt;knows&lt;/em&gt; somehow what attributes belong to an object.&lt;/p&gt;

&lt;p&gt;Thus, in our language, objects are no longer boxes with data both technically
and conceptually. They know where the data is, but they don&amp;#39;t
&lt;em&gt;contain&lt;/em&gt; the data. They &lt;em&gt;represent&lt;/em&gt; the data, as well as other objects and entities.
Indeed, the object &lt;code&gt;c&lt;/code&gt; in our imaginary language represents two other objects:
a VIN and an engine.&lt;/p&gt;

&lt;p&gt;To summarize, we have to understand that even though a mechanical
definition of an object is correct in most programming languages on the
market at the moment, it is very incorrect conceptually because it
treats an object as a box with data that are too visible to
the outside world. That visibility provokes us to think &lt;em&gt;procedurally&lt;/em&gt;
and try to access that data as much as possible.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/266oJr4&#39;&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2015%2F04%2Fbook-object-thinking.jpg&#39; style=&#39;width:96px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;If we would think of an object as a &lt;strong&gt;representative&lt;/strong&gt; of data instead of
a container of them, we would not want to get ahold of data as soon as
possible. We would understand that the data are far away and we can&amp;#39;t
just easily touch them. We should communicate with an object &amp;mdash; and how
exactly it communicates with the data is not our concern.&lt;/p&gt;

&lt;p&gt;I hope that in the near future, the market will introduce new object-oriented
languages that won&amp;#39;t store objects as in-memory data structures, even
technically.&lt;/p&gt;

&lt;p&gt;By the way, here is the definition of an object from my favorite book,
&lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;Object Thinking&lt;/a&gt; by David West, p. 66:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An object is the equivalent of the quanta from which the universe is constructed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What do you think? Is it close to the &amp;quot;representative&amp;quot; definition I just
proposed?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>There are thousands of books about object-oriented programming and
hundreds of object-oriented languages, and I believe most (read &amp;quot;all&amp;quot;) of them
give us an incorrect definition of an &amp;quot;object&amp;quot;. That&amp;#39;s why the entire
OOP world is so full of misconceptions and mistakes. Their
definition of an object is limited by the hardware architecture they
are working with and that&amp;#39;s why is very primitive and mechanical.
I&amp;#39;d like to introduce a better one.</summary></entry><entry><title>Twelve Mistakes in Agile Manifesto</title><link href="http://www.yegor256.com/2016/07/11/mistakes-in-agile-manifesto.html" rel="alternate" type="text/html" title="Twelve Mistakes in Agile Manifesto" /><published>2016-07-11T00:00:00+00:00</published><updated>2016-07-11T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/11/mistakes-in-agile-manifesto</id><content type="html" xml:base="http://www.yegor256.com/2016/07/11/mistakes-in-agile-manifesto.html">&lt;p&gt;Nowadays, &lt;a href=&quot;http://www.agilemanifesto.org/&quot;&gt;Agile Manifesto&lt;/a&gt; is a Bible of
numerous software teams. It contains
&lt;a href=&quot;http://agilemanifesto.org/principles.html&quot;&gt;12 principles&lt;/a&gt; which
 show us how software development should be organized.
These principles were invented in 2001.
Generally, I like and agree with all of them. However, in practice, most software teams
misunderstand them. Consequently, here is a summary of what&amp;#39;s going on and my
interpretation of each principle.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fhail-caesar.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Hail, Caesar! (2016) by Coen Brothers&#39;/&gt;&lt;figcaption&gt;Hail, Caesar! (2016) by Coen Brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Principle #1&lt;/strong&gt;:
&amp;quot;Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;If the customer is not satisfied, we find another customer&lt;/aside&gt;

&lt;p&gt;By focusing on &amp;quot;satisfy the customer&amp;quot;, Agile adepts totally forget about
the &amp;quot;through&amp;quot; part. They think that a &lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;happy customer&lt;/a&gt;
is their true objective, while &amp;quot;continuous delivery&amp;quot; is something that obviously
helps, though not crucially. However, this is quite the opposite &amp;mdash; the customer
will be satisfied &lt;strong&gt;if&lt;/strong&gt; the software is perfectly created and delivered. If the
customer is not satisfied, we find another customer &amp;mdash; that&amp;#39;s the
true spirit a professional software team should adhere to. I believe that&amp;#39;s what
 the Manifesto means. We make sure that our process is
&amp;quot;early and continuous&amp;quot;, which will result to customer satisfaction. We focus on improving
our process, not satisfying the customer. Satisfaction is the consequence, not
the primary objective.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #2&lt;/strong&gt;:
&amp;quot;Welcome changing requirements, even late in development. Agile processes harness change for the customer&amp;#39;s competitive advantage.&amp;quot;&lt;/p&gt;

&lt;p&gt;Most Agile teams understand the word &amp;quot;welcome&amp;quot; here as a permission to forget
about any &lt;a href=&quot;/2015/11/10/ten-mistakes-in-specs.html&quot;&gt;requirements&lt;/a&gt;
management at all. What is the easiest way to welcome
change? Obviously, just get rid of any requirement documents!
In this case, any change will be welcome, since it won&amp;#39;t affect anything.
There simply won&amp;#39;t be anything to affect. But this is not what the Manifesto
means! This principle means that our requirements management process is so
&lt;strong&gt;powerful&lt;/strong&gt; that it can accept change at any moment. However, it&amp;#39;s rather difficult to
achieve, if requirements are actually documented.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #3&lt;/strong&gt;:
&amp;quot;Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.&amp;quot;&lt;/p&gt;

&lt;p&gt;This terrific rule is usually understood as an order for the entire team. The
team has to frequently deliver, while programmers are free to deliver almost
nothing and who knows when. I think the Manifesto here is emphasizing on
both individual and group responsibilities to frequently deliver. I also think
that this frequency should be way higher than just a &amp;quot;couple of weeks&amp;quot;. Today, with
modern technologies and instruments, we can deliver way faster &amp;mdash; several
times a day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #4&lt;/strong&gt;:
&amp;quot;Business people and developers must work together daily throughout the project.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Working together means quicker turnarounds in communication not lack or roles and responsibilites&lt;/aside&gt;

&lt;p&gt;Working together doesn&amp;#39;t mean working without clearly defined
rules and processes. However, most teams understand this principle as
a legalization of chaos. They think that since we work together, we don&amp;#39;t need to define roles
any more, we should not document &lt;a href=&quot;/2015/11/10/ten-mistakes-in-specs.html&quot;&gt;requirements&lt;/a&gt;,
we shouldn&amp;#39;t care about responsibilities. Ultimately in the end, we neither know who is
doing what nor the team&amp;#39;s structure. That&amp;#39;s not what the Manifesto
is talking about! &amp;quot;Working together&amp;quot; means quicker turnarounds in communication and
shorter response cycles. It definitely doesn&amp;#39;t mean lack of roles and responsibilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #5&lt;/strong&gt;:
&amp;quot;Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Trust doesn&amp;#39;t mean lack of control&lt;/aside&gt;

&lt;p&gt;Trust is a great word and concept, but it doesn&amp;#39;t replace another equally great
word &amp;mdash; control. Most Agile teams think that trust means
exactly that &amp;mdash; complete lack of any validation, verification, responsibility,
and control. &amp;quot;We trust our programmers to write perfect codes&amp;quot; &amp;mdash;
I&amp;#39;ve heard that countless times which is simply wrong. This principle means something completely different.
It means that when clearly defined tasks are assigned to their
performers, we fully delegate responsibilities to them. We
&lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;motivate&lt;/a&gt;
them to be fully responsible for the end result. However, we
&lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;don&amp;#39;t help&lt;/a&gt; them.
Instead, we trust them as self-sufficient individuals, capable
of completing assigned tasks on their own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #6&lt;/strong&gt;:
&amp;quot;The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Face-to-face doesn&amp;#39;t mean at the same office, especially now&lt;/aside&gt;

&lt;p&gt;Face-to-face doesn&amp;#39;t mean sitting in the same office. The Manifesto doesn&amp;#39;t say
anything about co-located or distributed teams. It&amp;#39;s obvious that in modern software projects,
virtual communications (over video calls) are way more effective than
staying together in the same country, same city, same office, and same room.
Therefore, most Agile adepts still promote on-site development style, using
Agile Manifesto as proof. That&amp;#39;s a mistake; face-to-face means something
totally different from what it meant 15 years ago, when the Manifesto was written.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #7&lt;/strong&gt;:
&amp;quot;Working software is the primary measure of progress.&amp;quot;&lt;/p&gt;

&lt;p&gt;This doesn&amp;#39;t mean that we should not measure anything else. Of course, the
working software is the &lt;strong&gt;primary&lt;/strong&gt; measure, but there are many other
measures, which we can and must use. For example, the amount of features
documented, implemented and delivered;
or the amount of lines of code added to the project (don&amp;#39;t smile, &lt;a href=&quot;/2014/11/14/hits-of-code.html&quot;&gt;read&lt;/a&gt;);
or the amount of &lt;a href=&quot;/2015/09/10/testing-exit-criteria.html&quot;&gt;bugs found&lt;/a&gt;;
or the amounts of &lt;a href=&quot;/2016/01/19/how-expensive-is-outsourcing.html&quot;&gt;dollars spent&lt;/a&gt;.
There are many other metrics. We can use many of them. However, a typical
mistake many Agile teams are doing is just ignoring them all. They say
&amp;quot;we measure only the end result&amp;quot;. That&amp;#39;s not what the Manifesto
is suggesting to do though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #8&lt;/strong&gt;:
&amp;quot;Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;We must remember that any project is first of all a money burning machine&lt;/aside&gt;

&lt;p&gt;This doesn&amp;#39;t mean that we should indefinitely &lt;a href=&quot;/2015/06/02/how-to-estimate-software-cost.html&quot;&gt;burn&lt;/a&gt;
customers&amp;#39; money. Yes, we
should be developing at some given speed, but we should always remember
whose money we&amp;#39;re spending &amp;mdash; customers&amp;#39; money. The Manifesto doesn&amp;#39;t say anything
about the cost of development and that&amp;#39;s probably because it was written by
those who make money (programmers), not those who spend it (customers). We must therefore
remember that any project is first of all a money burning machine. That&amp;#39;s why
the team must always measure its
&lt;a href=&quot;/2016/01/19/how-expensive-is-outsourcing.html&quot;&gt;burn rate&lt;/a&gt;
and make sure it&amp;#39;s aligned with
the amount of business value the team delivers. Just being a
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;happy team&lt;/a&gt;
is not what the Manifesto suggests, but that&amp;#39;s exactly how many understand this principle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #9&lt;/strong&gt;:
&amp;quot;Continuous attention to technical excellence and good design enhances agility.&amp;quot;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s a perfect principle that says so much and doesn&amp;#39;t say anything at
the same time. What exactly is &amp;quot;attention&amp;quot;? I can explain. It means
&lt;a href=&quot;/2015/10/13/competition-without-rules.html&quot;&gt;rules and policies&lt;/a&gt;.
First of all, any policy means &lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;punishment&lt;/a&gt; to those
who violate rules. Thus, if an Agile team really means continuous
attention to technical excellence, it must have a &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality policy&lt;/a&gt;.
That policy must clearly define which design is good and which is bad, which piece
of Java code is excellent, which is ugly, etc. Additionally, the policy must say
what happens to those who &lt;a href=&quot;/2015/11/24/imprisonment-for-irresponsible-coding.html&quot;&gt;violate&lt;/a&gt;
the principles of excellence. However, most Agile
teams understand &amp;quot;quality&amp;quot; as a great flag to hang on the wall, but
get scared when I ask, &amp;quot;what happens if someone delivers low quality?&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #10&lt;/strong&gt;:
&amp;quot;Simplicity &amp;mdash; the art of maximizing the amount of work not done &amp;mdash; is essential.&amp;quot;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s a great rule which most Agile teams don&amp;#39;t follow at all. This principle
means that our tasks are small and simple enough to make sure they are either
doable or cancellable. Huge tasks are the biggest threat to manageability of
any team, be it Agile or not. This principle encourages us to give programmers
small tasks, which they can easily be completed. However, most of Agile adepts
simplicity being equal to stupidity. They are not equal. A simple task doesn&amp;#39;t
mean a stupid or non-important tasks. A simple task is a clearly defined, small,
and doable work order.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #11&lt;/strong&gt;:
&amp;quot;The best architectures, requirements, and designs emerge from self-organizing teams.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Self-organized doesn&amp;#39;t mean un-organized&lt;/aside&gt;

&lt;p&gt;Self-organized doesn&amp;#39;t mean un-organized. This rule is often translated
as a legalization of &lt;strong&gt;anarchy&lt;/strong&gt;. We don&amp;#39;t need any project managers,
processes, discipline, rules, or policies &amp;mdash; we&amp;#39;ve got
&lt;a href=&quot;/2016/02/18/holacracy-autocracy.html&quot;&gt;holacracy&lt;/a&gt; instead!
We also don&amp;#39;t need a software architect &amp;mdash; our programmers can make
all technical decisions at regular &lt;a href=&quot;/2015/07/13/meetings-are-legalized-robbery.html&quot;&gt;meetings&lt;/a&gt;!
Furthermore, we don&amp;#39;t want our programmers
to be individually responsible for anything &amp;mdash; they are always together
in all risks and issues. Stop that nonsense! This is not what the Manifesto means.
A self-organizing team is a team that doesn&amp;#39;t need any supervision from the outside;
a team that has clearly defined roles from the inside;
a team with a perfect inner discipline;
a team with professional &lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;management&lt;/a&gt;.
Not with the lack of all that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #12&lt;/strong&gt;:
&amp;quot;At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.&amp;quot;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s a great principle which is translated into so-called retrospective
meetings. They work just fine as long as decisions
make the team better. Unfortunately, in most cases, programmers in Agile teams are
trying to &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;survive&lt;/a&gt;,
instead of making their teams more effective. Even though the
principle says that the team has to become more effective, those retrospective
meetings help programmers to become more effective (read &amp;quot;more secure&amp;quot;) in
the team. That&amp;#39;s only natural for people, but leads to the overall degradation
of the team. It&amp;#39;s well known that the best team is the one that is capable of
quickly and inevitably &lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;rejecting&lt;/a&gt;
bad elements. Does your team do that effectively?
Do retrospective meetings help in that? I doubt it. Therefore, I believe that
what the Manifesto means here is not the meetings. It means that the team must have
an effective mechanism of self-regulation and self-improvement. Additionally, retrospective
meetings simply can&amp;#39;t be that mechanism because they prevent the team from making
difficult disciplinary decisions.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><category term="agile" /><summary>Nowadays, Agile Manifesto is a Bible of
numerous software teams. It contains
12 principles which
 show us how software development should be organized.
These principles were invented in 2001.
Generally, I like and agree with all of them. However, in practice, most software teams
misunderstand them. Consequently, here is a summary of what&amp;#39;s going on and my
interpretation of each principle.</summary></entry><entry><title>Key Roles in a Software Project</title><link href="http://www.yegor256.com/2016/07/10/software-project-roles.html" rel="alternate" type="text/html" title="Key Roles in a Software Project" /><published>2016-07-10T00:00:00+00:00</published><updated>2016-07-10T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/10/software-project-roles</id><content type="html" xml:base="http://www.yegor256.com/2016/07/10/software-project-roles.html">&lt;p&gt;I believe that several roles should be present in a majority of
software projects. Managed by
&lt;a href=&quot;http://www.teamed.io&quot;&gt;Teamed.io&lt;/a&gt; according to the principles of
&lt;a href=&quot;http://www.xdsd.org&quot;&gt;XDSD&lt;/a&gt;, we&amp;#39;ve got all of them in our projects. However, beware that in other management
methodologies, these roles may have different meanings. This blog post
is mostly for people who work with us, either as clients or freelancers.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2F12-angry-men.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;12 Angry Men (1957) by Sidney Lumet&#39;/&gt;&lt;figcaption&gt;12 Angry Men (1957) by Sidney Lumet&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are just a few roles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Project Manager&lt;/strong&gt; (&lt;code&gt;PM&lt;/code&gt;)
is responsible for keeping the project &lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;under control&lt;/a&gt;.
The PM reports to the head of our &lt;a href=&quot;https://en.wikipedia.org/wiki/Project_management_office&quot;&gt;PMO&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Product Owner&lt;/strong&gt; (&lt;code&gt;PO&lt;/code&gt;)
is a representative of the sponsor.
The PO provides product requirements.
The PO submits bugs and expresses any concerns or questions relating to them.
Usually, the PO is a very technical person
who knows how the product works and is capable of understanding the source code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Software Architect&lt;/strong&gt; (&lt;code&gt;ARC&lt;/code&gt;)
is responsible for the entire technical solution.
The ARC is &lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;blamed&lt;/a&gt; for all technical problems.
The ARC approves all pull requests before we &lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;can merge&lt;/a&gt; them.
The ARC is the main point of contact in the project for the PO.
The ARC makes all technical &lt;a href=&quot;/2015/06/29/simple-diagrams.html&quot;&gt;decisions&lt;/a&gt;.
The ARC &lt;a href=&quot;/2015/05/11/software-architect-responsibilities.html&quot;&gt;reports&lt;/a&gt; to the PM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developer&lt;/strong&gt; (&lt;code&gt;DEV&lt;/code&gt;)
is a programmer and is &lt;a href=&quot;/2014/04/13/no-obligations-principle.html&quot;&gt;responsible&lt;/a&gt;
for &lt;a href=&quot;/2014/11/24/principles-of-bug-tracking.html&quot;&gt;closing bugs&lt;/a&gt;.
The DEV reports to the PM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Requirements Analyst&lt;/strong&gt; (&lt;code&gt;REQ&lt;/code&gt;)
is responsible for the validation of the product.
The REQ solicits &lt;a href=&quot;/2015/11/10/ten-mistakes-in-specs.html&quot;&gt;requirements&lt;/a&gt; from the PO.
The REQ demonstrates the product to the PO.
The REQ submits new bugs when validation fails and the product needs changes.
The REQ reports to the PM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Quality Assurance&lt;/strong&gt; (&lt;code&gt;QA&lt;/code&gt;)
oversees the correctness of our process.
The QA approves each closed task before it&amp;#39;s officially closed by the PM.
The QA ensures that our process complies to &lt;a href=&quot;http://at.teamed.io/policy.html&quot;&gt;our policy&lt;/a&gt;.
The QA reports to the PM.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides all that, any role is &lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;encouraged&lt;/a&gt;
to submit bugs when they find them.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><summary>I believe that several roles should be present in a majority of
software projects. Managed by
Teamed.io according to the principles of
XDSD, we&amp;#39;ve got all of them in our projects. However, beware that in other management
methodologies, these roles may have different meanings. This blog post
is mostly for people who work with us, either as clients or freelancers.</summary></entry><entry><title>Data Transfer Object Is a Shame</title><link href="http://www.yegor256.com/2016/07/06/data-transfer-object.html" rel="alternate" type="text/html" title="Data Transfer Object Is a Shame" /><published>2016-07-06T00:00:00+00:00</published><updated>2016-07-06T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/06/data-transfer-object</id><content type="html" xml:base="http://www.yegor256.com/2016/07/06/data-transfer-object.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Data_transfer_object&quot;&gt;DTO&lt;/a&gt;,
as far as I understand it, is a cornerstone of the ORM design pattern,
which I &lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;simply adore&lt;/a&gt;.
But let&amp;#39;s skip to the point: DTO is just a shame, and the man who invented
it is just wrong. There is no excuse for what he has done.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fbefore-the-devil-knows-you-are-dead.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Before the Devil Knows You&amp;amp;apos;re Dead (2007) by Sidney Lumet&#39;/&gt;&lt;figcaption&gt;Before the Devil Knows You&amp;#39;re Dead (2007) by Sidney Lumet&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;By the way, his name, to my knowledge, was
&lt;a href=&quot;http://martinfowler.com/bliki/LocalDTO.html&quot;&gt;Martin Fowler&lt;/a&gt;. Maybe he
was not the sole inventor of DTO, but he made it legal and recommended
its use. With all due respect, he was just wrong.&lt;/p&gt;

&lt;p&gt;The key idea of object-oriented programming is to hide data
behind objects. This idea has a name:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Encapsulation_%28computer_programming%29&quot;&gt;encapsulation&lt;/a&gt;.
In OOP, data
must not be visible. &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;Objects&lt;/a&gt;
must only have access to the data they
encapsulate and never to the data encapsulated by other objects. There
can be no arguing about this principle &amp;mdash; it is what OOP is all about.&lt;/p&gt;

&lt;p&gt;However, DTO runs completely against that principle.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s see a practical example. Say that this is a service that fetches
a JSON document from some RESTful API and returns a DTO, which we can then
store in the database:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadBookById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveNewBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I guess this is what will happen inside the &lt;code&gt;loadBookById()&lt;/code&gt; method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadBookById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;JsonObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Load it from RESTful API */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setISBN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;isbn&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Am I right? I bet I am. It already looks disgusting to me. Anyway, let&amp;#39;s
continue. This is what will most likely happen in the &lt;code&gt;saveNewBook()&lt;/code&gt; method
(I&amp;#39;m using pure JDBC):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveNewBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Statement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;INSERT INTO book VALUES (?, ?, ?)&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getISBN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;code&gt;Book&lt;/code&gt; is a classic example of a data transfer object design pattern.
All it does is transfer
data between two pieces of code, two procedures. The object &lt;code&gt;book&lt;/code&gt; is pretty
dumb. All it knows how to do is ... nothing. It doesn&amp;#39;t do anything. It is
actually not an object at all but rather a passive and anemic data structure.&lt;/p&gt;

&lt;p&gt;What is the right design? There are a few. For example, this one looks
good to me:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bookById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is what happens in &lt;code&gt;bookById()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bookById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* RESTful API access point */&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is what happens in &lt;code&gt;Book.save()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;JsonObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Load it from RESTful API */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;isbn&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What happens if there are many more parameters of the book in JSON that won&amp;#39;t
fit nicely as parameters into a single &lt;code&gt;createBook()&lt;/code&gt; method? How about this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withISBN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;isbn&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withAuthor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are many other options. But the main point is that the data
&lt;strong&gt;never&lt;/strong&gt; escapes the object &lt;code&gt;book&lt;/code&gt;. Once the object is instantiated, the
data is not visible or accessible by anyone else. We may only
ask our object to save itself or to
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;print&lt;/a&gt;
itself to some media, but we
will never &lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;get&lt;/a&gt;
any data from it.&lt;/p&gt;

&lt;p&gt;The very idea of DTO is wrong because it turns object-oriented code
into procedural code. We have procedures that manipulate data, and DTO is just
a box for that data. Don&amp;#39;t think that way, and don&amp;#39;t do that.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>DTO,
as far as I understand it, is a cornerstone of the ORM design pattern,
which I simply adore.
But let&amp;#39;s skip to the point: DTO is just a shame, and the man who invented
it is just wrong. There is no excuse for what he has done.</summary></entry><entry><title>Singletons Must Die</title><link href="http://www.yegor256.com/2016/06/27/singletons-must-die.html" rel="alternate" type="text/html" title="Singletons Must Die" /><published>2016-06-27T00:00:00+00:00</published><updated>2016-06-27T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/06/27/singletons-must-die</id><content type="html" xml:base="http://www.yegor256.com/2016/06/27/singletons-must-die.html">&lt;p&gt;I think it&amp;#39;s too obvious to say that a singleton is an anti-pattern as
there are tons of articles about that (singleton being an anti-pattern).
However, more often than not, the question
is how to define global things without a singleton; and the answer to that is not
obvious for many of us. There are several examples: a database connection
pool, a repository, a configuration map, etc. They all naturally seem to
be &amp;quot;global&amp;quot;; but what do we do with them?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F06%2Fperdita-durango.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Perdita Durango (1997) by Álex de la Iglesia&#39;/&gt;&lt;figcaption&gt;Perdita Durango (1997) by Álex de la Iglesia&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I assume you already know what a singleton is and why it&amp;#39;s an anti-pattern.
If not, I recommend you read this StackOverflow thread:
&lt;a href=&quot;http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons&quot;&gt;What is so bad about singletons?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we agree it&amp;#39;s a bad deal, what do we do if we need to, let&amp;#39;s say,
have access to a database connection pool in many different places within the
application? We simply need something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create a connection pool&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Get new connection from the pool&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// and return&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Later in at, say, the JAX-RS REST method, we need to retrieve something
from the database:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JdbcSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT text FROM table&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SingleOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In case you&amp;#39;re not familiar with JAX-RS, it&amp;#39;s a simple MVC architecture,
and this &lt;code&gt;text()&lt;/code&gt; method is a &amp;quot;controller&amp;quot;. Additionally, I&amp;#39;m using
&lt;a href=&quot;http://jdbc.jcabi.com/apidocs-0.16/com/jcabi/jdbc/JdbcSession.html&quot;&gt;&lt;code&gt;SqlSession&lt;/code&gt;&lt;/a&gt;,
a simple JDBC wrapper from &lt;a href=&quot;http://jdbc.jcabi.com&quot;&gt;jcabi-jdbc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need that &lt;code&gt;Database.INSTANCE&lt;/code&gt; to be a singleton, right? We need it to
be globally available so that &lt;em&gt;any&lt;/em&gt; MVC controller can have direct
access to it. Since we all understand and agree that a singleton is an evil
thing, what do we replace it with?&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;/2014/10/03/di-containers-are-evil.html&quot;&gt;dependency injection&lt;/a&gt;
is the answer.&lt;/p&gt;

&lt;p&gt;We need to make this database connection pool dependency of the controller
and ensure it&amp;#39;s provided through a constructor. However, in this particular
case, for JAX-RS, we can&amp;#39;t do it through a constructor thanks to its
ugly architecture. But we can create a &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/servlet/ServletContextListener.html&quot;&gt;&lt;code&gt;ServletContextListener&lt;/code&gt;&lt;/a&gt;,
instantiate a &lt;code&gt;Database&lt;/code&gt; in its &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/servlet/ServletContextListener.html#contextInitialized-javax.servlet.ServletContextEvent-&quot;&gt;&lt;code&gt;contextInitialized()&lt;/code&gt;&lt;/a&gt; method,
and add that instance as an attribute of
&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html&quot;&gt;&lt;code&gt;servletContext&lt;/code&gt;&lt;/a&gt;. Then, inside
the controller, we retrieve the servlet context by adding the
&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/ws/rs/core/Context.html&quot;&gt;&lt;code&gt;javax.ws.rs.core.Context&lt;/code&gt;&lt;/a&gt;
annotation to a setter and using
&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html#getAttribute-java.lang.String-&quot;&gt;&lt;code&gt;getAttribute()&lt;/code&gt;&lt;/a&gt;
on it. This is absolutely terrible and procedural, but it&amp;#39;s better
than a singleton.&lt;/p&gt;

&lt;p&gt;A proper object-oriented design would pass an instance of &lt;code&gt;Database&lt;/code&gt;
to &lt;em&gt;all&lt;/em&gt; objects that may need it through their constructors.&lt;/p&gt;

&lt;p&gt;Nonetheless, what do we do if there are many dependencies? Do we make a 10-argument
constructor? No, we don&amp;#39;t. If our objects really need 10 dependencies to do
their work, we need to break them down into smaller ones.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it. Forget about singletons; never use them. Turn them into dependencies
and pass them from object to object through the operator &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>I think it&amp;#39;s too obvious to say that a singleton is an anti-pattern as
there are tons of articles about that (singleton being an anti-pattern).
However, more often than not, the question
is how to define global things without a singleton; and the answer to that is not
obvious for many of us. There are several examples: a database connection
pool, a repository, a configuration map, etc. They all naturally seem to
be &amp;quot;global&amp;quot;; but what do we do with them?</summary></entry><entry><title>How to Hire a Programmer</title><link href="http://www.yegor256.com/2016/06/21/how-to-hire-programmer.html" rel="alternate" type="text/html" title="How to Hire a Programmer" /><published>2016-06-21T00:00:00+00:00</published><updated>2016-06-21T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/06/21/how-to-hire-programmer</id><content type="html" xml:base="http://www.yegor256.com/2016/06/21/how-to-hire-programmer.html">&lt;p&gt;I get asked this question very often: Where and how do you find
and hire a good programmer? Since I&amp;#39;m a programmer and I &lt;a href=&quot;http://www.teamed.io&quot;&gt;manage&lt;/a&gt;
software projects, I&amp;#39;m supposed to know the tricks. I do, of course; there
are many of them, but the list below succinctly summarizes the most important ones.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F06%2Fdont-be-a-menace-to-south-central-while-drinking-your-juice-in-the-hood.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Don&amp;amp;apos;t Be a Menace to South Central While Drinking Your Juice in the Hood (1996) by Paris Barclay&#39;/&gt;&lt;figcaption&gt;Don&amp;#39;t Be a Menace to South Central While Drinking Your Juice in the Hood (1996) by Paris Barclay&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;ll be referring to &amp;quot;him&amp;quot;, but these recommendations apply equally to both female and male
&lt;del&gt;slaves&lt;/del&gt; software developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask a Friend&lt;/strong&gt;.
The best way to find talent is through a reference. Who knows the software
market better than your high school classmate who bought a WordPress website
last year, right? He will definitely recommend a good programmer to you.
Recommendations are the most effective way of finding contractors. First,
you don&amp;#39;t need to worry about screening and testing. Second, you&amp;#39;ll have
a very good explanation for why your project failed &amp;mdash; because your
friend let you down with a bad recommendation. Win-win.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hire Only Locals&lt;/strong&gt;.
Don&amp;#39;t even think about a remote programmer &amp;mdash; remote projects always fail.
&lt;a href=&quot;/2015/10/27/outsourcing-doesnt-work.html&quot;&gt;Always&lt;/a&gt;.
He will work in a different time zone, you will always have cultural
clashes, and his Russian accent will be annoying. You simply won&amp;#39;t
be able to meet him every second day and
&lt;a href=&quot;/2015/05/21/avoid-software-outsourcing-disaster.html&quot;&gt;whine&lt;/a&gt;
about your project being
too expensive, too slow, and too frustrating. Hire only locals &amp;mdash; they
are much easier to manage and
&lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;punish&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Offend With a Lack of Trust&lt;/strong&gt;.
A talented professional programmer will be offended if you ask him
to pass a test or prove some of his skills. That will demonstrate that you
don&amp;#39;t trust him. And if you don&amp;#39;t trust him, you simply should not work together.
Trust is the most important thing in any project. Also, don&amp;#39;t ask how
certain things will be done. He is the professional you&amp;#39;re hiring, and he
knows what he is doing. That&amp;#39;s enough.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fall in Love&lt;/strong&gt;.
After trust, the most important thing is a personal connection between
you two. I&amp;#39;m not saying you must fall in love with your programmer, but
it won&amp;#39;t hurt. You should feel an emotional touch with him. Otherwise Java code
won&amp;#39;t work like you need it to. If you can&amp;#39;t fall in love, you should at least become
good friends. Invite him to your home parties, go to movies together, and
introduce him to your wife. All of this will seriously affect
the quality of the product he is creating.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Specify Too Much&lt;/strong&gt;.
That&amp;#39;s what &lt;a href=&quot;/2016/07/11/mistakes-in-agile-manifesto.html&quot;&gt;Agile&lt;/a&gt;
recommends, and I second that &amp;mdash; face-to-face communication is more
valuable than documentation. Don&amp;#39;t write any documentation, don&amp;#39;t specify
what exactly you need to develop, and don&amp;#39;t think too much about your &amp;quot;user stories&amp;quot;.
It&amp;#39;s all in the past. Modern software engineers figure everything out
by themselves. Just let him be creative and communicative. If something
isn&amp;#39;t clear, just call him. Remember, a Skype call is
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;always better&lt;/a&gt;
than those boring documents that nobody knows how to write.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Motivate by Value&lt;/strong&gt;.
In order to create a great software product, he must be very &lt;strong&gt;excited&lt;/strong&gt; about it.
Make sure he is excited. If he is not excited, call him again. Motivate him.
Talk to him. Explain to him your brilliant Google-killer business idea again
and again. Until the moment he &lt;del&gt;screams&lt;/del&gt; says &amp;quot;I&amp;#39;m excited&amp;quot;. He must know what
a great value your product is producing for the entirety of civilization. And he
must be excited. Do I have to say it one more time? Excited! Are
you excited already? I&amp;#39;m excited.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promise Job Security&lt;/strong&gt;.
Even if you just raised $2K for your startup from your wife&amp;#39;s step-dad, promise
your programmer a cloudless financial future. He must know that you&amp;#39;ve got
enough to pay him until he retires. A good programmer must want to work with you
forever. That&amp;#39;s the type of programmer you need. You don&amp;#39;t want one of those
greedy freelancers who always jumps from project to project. You need a long-term
commitment. That&amp;#39;s why you have to pretend you&amp;#39;re rich enough.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delay Money Talks&lt;/strong&gt;.
Don&amp;#39;t mention money for as long as you can. Ideally, ask him to create
a prototype first and &amp;quot;then we&amp;#39;ll discuss your salary&amp;quot;. A good programmer
doesn&amp;#39;t work for money. He works for satisfaction. That&amp;#39;s who you need.
You should discuss value, excitement, features, market disruption, and
anything else that&amp;#39;s important, but not money. Programmers in general are not
really good in financial negotiations. Use that to exploit him for as much
as you can.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Negotiate&lt;/strong&gt;.
Eventually you will have to discuss money. Make sure there will be no
negotation involved. It&amp;#39;ll be an offensive process, and most programmers
are very sensitive. Just tell him how much you will pay, and if he doesn&amp;#39;t
feel that is enough, get back to the value/excitement/market conversation.
Do it again and again until he agrees.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Require Full Commitment&lt;/strong&gt;.
Make sure he will be fully committed to the project. Ideally, he must not have
any other projects or even any personal life at all. He must promise to be 100 percent with
you and your idea. If he is planning on doing something else, demonstrate that it
will offend you. Act jealous, like a loving wife. You don&amp;#39;t need a programmer
who is interested in something else.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Him a Partner&lt;/strong&gt;.
First of all, making him a partner will save you a lot of money. Ideally,
you should convince him to work
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;for free&lt;/a&gt;.
Good programmers are good
entrepreneurs and like to take risks. A good programmer knows that
in order to become the next Mark Zuckerberg, he must start at a
job with no salary. Give him some
&lt;a href=&quot;/2016/01/12/good-programmers-dont-work-for-equity.html&quot;&gt;equity&lt;/a&gt;
and keep those motivational speeches
coming. It&amp;#39;s a perfect money-saving technique.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be Positive&lt;/strong&gt;.
Simply don&amp;#39;t tell him about your risks and concerns. The future of your
project is bright, and he doesn&amp;#39;t need to know more. You&amp;#39;re going to be his
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;leader&lt;/a&gt;,
and a good leader is never too honest with subordinates. Always
be positive about the plan &amp;mdash; he needs to get that from you.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;That should be enough to find and hire a good programmer. Interestingly enough,
I just re-read this text one last time and it looks to me like
a &amp;quot;how to find a wife&amp;quot; tutorial. Don&amp;#39;t you think?
Anyway, did I forget anything? Don&amp;#39;t hesitate to post some extra wisdom below in
the comments section.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><category term="sarcasm" /><summary>I get asked this question very often: Where and how do you find
and hire a good programmer? Since I&amp;#39;m a programmer and I manage
software projects, I&amp;#39;m supposed to know the tricks. I do, of course; there
are many of them, but the list below succinctly summarizes the most important ones.</summary></entry></feed>
