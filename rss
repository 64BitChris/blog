<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://www.yegor256.com/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2018-03-13T21:48:16+00:00</updated><id>http://www.yegor256.com/</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Fluent Interfaces Are Bad for Maintainability</title><link href="http://www.yegor256.com/2018/03/13/fluent-interfaces.html" rel="alternate" type="text/html" title="Fluent Interfaces Are Bad for Maintainability" /><published>2018-03-13T00:00:00+00:00</published><updated>2018-03-13T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/03/13/fluent-interfaces</id><content type="html" xml:base="http://www.yegor256.com/2018/03/13/fluent-interfaces.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fluent_interface&quot;&gt;Fluent interface&lt;/a&gt;,
first &lt;a href=&quot;https://martinfowler.com/bliki/FluentInterface.html&quot;&gt;coined&lt;/a&gt;
as a term by Martin Fowler, is a very convenient way of communicating
with objects in OOP. It makes their facades easier to use and understand.
However, it ruins their internal design, making them more difficult
to maintain. A few words were said about that by Marco Pivetta
in his blog post &lt;a href=&quot;https://ocramius.github.io/blog/fluent-interfaces-are-evil/&quot;&gt;Fluent Interfaces are Evil&lt;/a&gt;;
now I will add my few cents.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Donnie Brasco (1997) by Mike Newell&#39; src=&#39;/images/2018/03/donnie-brasco.jpg&#39; longdesc=&#39;#bda17a6d&#39;/&gt;&lt;figcaption id=&#39;bda17a6d&#39;&gt;Donnie Brasco (1997) by Mike Newell&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s take my own library &lt;a href=&quot;http://http.jcabi.com/&quot;&gt;jcabi-http&lt;/a&gt;,
which I created a few years ago,
when I thought that fluent interfaces were a good thing. Here is how you
use the library to make an HTTP request and validate its output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JdkRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RestResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This convenient &lt;a href=&quot;https://en.wikipedia.org/wiki/Method_chaining&quot;&gt;method chaining&lt;/a&gt;
makes the code short and obvious, right?
Yes, it does, on the surface. But the &lt;em&gt;internal&lt;/em&gt; design of the library&amp;#39;s
classes, including &lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/request/JdkRequest.html&quot;&gt;&lt;code&gt;JdkRequest&lt;/code&gt;&lt;/a&gt;,
which is the one you see,
is very far from being elegant. The biggest problem is that
they are rather big and it&amp;#39;s &lt;del&gt;difficult&lt;/del&gt; impossible
to extend them without making them even bigger.&lt;/p&gt;

&lt;p&gt;For example, right now &lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/request/JdkRequest.html&quot;&gt;&lt;code&gt;JdkRequest&lt;/code&gt;&lt;/a&gt;
has the methods
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Request.html#method%28java.lang.String%29&quot;&gt;&lt;code&gt;method()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Request.html#fetch%28%29&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;,
and a few others. What happens when new functionality is required?
The only way to add to it would be to make the class bigger, by adding new methods,
which is how we jeopardize its maintainability.
&lt;a href=&quot;https://github.com/jcabi/jcabi-http/pull/142/files&quot;&gt;Here&lt;/a&gt;,
for example, we added
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Request.html#multipartBody%28%29&quot;&gt;&lt;code&gt;multipartBody()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://github.com/jcabi/jcabi-http/pull/99/files&quot;&gt;here&lt;/a&gt; we added
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Request.html#timeout%28int,%20int%29&quot;&gt;timeout()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I always feel scared when I get a new feature request in jcabi-http.
I understand that it most probably means adding new methods to
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Request.html&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Response.html&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt;,
and other already bloated interfaces and classes.&lt;/p&gt;

&lt;p&gt;I actually tried to do something in the library in order to solve this problem
but it wasn&amp;#39;t easy. Look at this
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Response.html#as%28java.lang.Class%29&quot;&gt;&lt;code&gt;.as(RestResponse.class)&lt;/code&gt;&lt;/a&gt;
method call. What it does is decorate a &lt;code&gt;Response&lt;/code&gt; with
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/response/RestResponse.html&quot;&gt;&lt;code&gt;RestResponse&lt;/code&gt;&lt;/a&gt;,
in order to make it method-richer. I just didn&amp;#39;t want to make
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Response.html&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt;
contain 50+ methods, like many other libraries do. Here is what it
does (this is pseudo-code):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;class Response {
  RestResponse as() {
    return new RestResponse(this);
  }
  // Seven methods
}
class RestResponse implements Response {
  private final Response origin;
  // Original seven methods from Response
  // Additional 14 methods
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you see, instead of adding all possible methods to &lt;code&gt;Response&lt;/code&gt; I
placed them in supplementary decorators
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/response/RestResponse.html&quot;&gt;&lt;code&gt;RestResponse&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/response/JsonResponse.html&quot;&gt;&lt;code&gt;JsonResponse&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/response/JsonResponse.html&quot;&gt;&lt;code&gt;XmlResponse&lt;/code&gt;&lt;/a&gt;,
and
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/response/package-frame.html&quot;&gt;others&lt;/a&gt;.
It helps, but in order to write these decorators with the central
object of type &lt;code&gt;Response&lt;/code&gt; we have to use that &amp;quot;ugly&amp;quot; method
&lt;a href=&quot;http://static.javadoc.io/com.jcabi/jcabi-http/1.17.2/com/jcabi/http/Response.html#as%28java.lang.Class%29&quot;&gt;&lt;code&gt;as()&lt;/code&gt;&lt;/a&gt;,
which depends heavily on Reflection and
&lt;a href=&quot;/2015/04/02/class-casting-is-anti-pattern.html&quot;&gt;type casting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In other words, fluent interfaces mean large classes or some ugly workarounds.
I mentioned this problem earlier, when I &lt;a href=&quot;/2017/10/10/streams-vs-decorators.html&quot;&gt;wrote&lt;/a&gt; about
&lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&quot;&gt;Streams API&lt;/a&gt;
and the interface
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html&quot;&gt;Stream&lt;/a&gt;,
which is perfectly fluent. There are 43 methods!&lt;/p&gt;

&lt;p&gt;That is the biggest problem with fluent interfaces&amp;mdash;they &lt;em&gt;force&lt;/em&gt; objects to be huge.&lt;/p&gt;

&lt;p&gt;Fluent interfaces are perfect for their users, since all methods
are in one place and the amount of classes is very small.
It is easy to use them, especially with
&lt;a href=&quot;https://www.jetbrains.com/help/idea/auto-completing-code.html&quot;&gt;code auto-completion&lt;/a&gt;
in most IDEs. They also make client code more readable, since &amp;quot;fluent&amp;quot; constructs
look similar to plain English (aka &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;That is all true! However, the damage they cause to object design
is the price, which is too high.&lt;/p&gt;

&lt;p&gt;What is the alternative?&lt;/p&gt;

&lt;p&gt;I would recommend you use decorators and
&lt;a href=&quot;/2016/04/26/why-inputstream-design-is-wrong.html&quot;&gt;smart objects&lt;/a&gt;
instead. Here is how I would design jcabi-http, if I could do it now:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BodyOfResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseAssertStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestWithMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JdkRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the same code as in the first snippet above, but it is much
more object-oriented. The obvious problem with this code, of course, is that
the IDE won&amp;#39;t be able to auto-complete almost anything. Also, we will
have to remember many of the names of the classes. And the construct looks
rather difficult to read for those who are used to fluent interfaces. In addition,
it&amp;#39;s very far away from the DSL idea.&lt;/p&gt;

&lt;p&gt;But here is the list of benefits. First, each object is small, very cohesive and
they are all loosely coupled&amp;mdash;which are obvious merits in OOP. Second,
adding new functionality to the library is as easy as creating a new class;
no need to touch existing classes. Third, unit testing is simplified,
since classes are small. Fourth, all classes can be immutable, which is also
an &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;obvious merit&lt;/a&gt; in OOP.&lt;/p&gt;

&lt;p&gt;Thus, there seems to be a conflict between usefulness and maintainability.
Fluent interfaces are good for users, but bad for library developers. Small
objects are good for developers, but difficult to understand and use.&lt;/p&gt;

&lt;p&gt;It seems to be so, but only if you are used to large classes and procedural
programming. To me, a large amount of small classes seems to be an
&lt;a href=&quot;/2017/02/28/too-many-classes.html&quot;&gt;advantage&lt;/a&gt;,
not a drawback. Libraries that are clear, simple, and readable inside
are much easier to use, even when I don&amp;#39;t know exactly which classes out there
are the most suitable for me. Even without the code-auto-complete I can figure
it out myself, because the code is clean.&lt;/p&gt;

&lt;p&gt;Also, I very often find myself interested in extending existing functionality
either inside my code base or via a pull request to the library. I am much more
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;interested&lt;/a&gt;
to do that if I know that the changes I introduce
are isolated and easy to test.&lt;/p&gt;

&lt;p&gt;Thus, no fluent interfaces anymore from me, only objects and decorators.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><category term="oop" /><summary type="html">Fluent interface,
first coined
as a term by Martin Fowler, is a very convenient way of communicating
with objects in OOP. It makes their facades easier to use and understand.
However, it ruins their internal design, making them more difficult
to maintain. A few words were said about that by Marco Pivetta
in his blog post Fluent Interfaces are Evil;
now I will add my few cents.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/03/donnie-brasco.jpg" /></entry><entry><title type="html">Don’t Aim for Quality, Aim for Speed</title><link href="http://www.yegor256.com/2018/03/06/speed-vs-quality.html" rel="alternate" type="text/html" title="Don&#39;t Aim for Quality, Aim for Speed" /><published>2018-03-06T00:00:00+00:00</published><updated>2018-03-06T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/03/06/speed-vs-quality</id><content type="html" xml:base="http://www.yegor256.com/2018/03/06/speed-vs-quality.html">&lt;!-- http://www.yegor256.com/2017/11/28/microtasking.html#comment-3783321466 --&gt;

&lt;p&gt;I decided to write this blog post after reviewing
&lt;a href=&quot;https://github.com/yegor256/jpeek/pull/153&quot;&gt;this pull request&lt;/a&gt;. What happened
there? The author of the PR wasn&amp;#39;t able to figure out
the &amp;quot;right&amp;quot; way to implement it, and the code
reviewer was waiting and waiting. Eventually, the reviewer came to me,
since I was an architect, and &lt;a href=&quot;https://github.com/yegor256/jpeek/pull/153#issuecomment-364412192&quot;&gt;complained&lt;/a&gt;
that it was taking too long and he wasn&amp;#39;t able to
&lt;a href=&quot;http://datum.zerocracy.com/pages/policy.html#27&quot;&gt;earn&lt;/a&gt; his money for the review
he had done. Then the author of the changes
&lt;a href=&quot;https://github.com/yegor256/jpeek/pull/153#issuecomment-364413528&quot;&gt;explained&lt;/a&gt; that he couldn&amp;#39;t
finish since there were impediments and design inconsistencies; he also
couldn&amp;#39;t &lt;a href=&quot;http://datum.zerocracy.com/pages/policy.html#4&quot;&gt;earn&lt;/a&gt;
the money he deserved for fixing the issue. What did I say?
I &lt;a href=&quot;https://github.com/yegor256/jpeek/pull/153#issuecomment-364417885&quot;&gt;said&lt;/a&gt;:
Forget the quality, just finish it any way possible.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Shi mian mai fu (2004) by Yimou Zhang&#39; src=&#39;/images/2018/03/house-of-flying-daggers.jpg&#39; longdesc=&#39;#7b8c6d28&#39;/&gt;&lt;figcaption id=&#39;7b8c6d28&#39;&gt;Shi mian mai fu (2004) by Yimou Zhang&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Was I kidding? Not at all.&lt;/p&gt;

&lt;p&gt;I truly believe that quality is not what programmers should care about. They
must care only about speed&amp;mdash;close tasks as soon as possible&amp;mdash;
which means &lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;make money&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Won&amp;#39;t this attitude ruin the project and turn the code base into a mess?&lt;/p&gt;

&lt;p&gt;Yes, it will.&lt;/p&gt;

&lt;p&gt;If the project doesn&amp;#39;t care about its quality either.&lt;/p&gt;

&lt;p&gt;There must be a permanent conflict between a project and its programmers:
1) the project must be configured to reject anything that lowers the
quality of its artifacts and 2) programmers must be interested
in making changes to those artifacts. The project cares about the quality,
the programmers care about fast delivery of modifications.&lt;/p&gt;

&lt;p&gt;What do I mean by saying that a project rejects low quality? Here is a list
of preventive measures it may take to make it impossible
to jeopardize the quality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;Automated&lt;/a&gt; pre-flight builds;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;Read-only master branch&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;High test coverage bar;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2018/01/16/educational-aspect-of-static-analysis.html&quot;&gt;Mandatory&lt;/a&gt; static analysis;&lt;/li&gt;
&lt;li&gt;Multi-step code reviews.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do I mean by saying that programmers must be interested in making changes?
They have to be &lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;motivated&lt;/a&gt;
to close tasks. Not just to &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;be in the project&lt;/a&gt;,
but to deliver. Here is what
they can do in order to close tasks faster:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;Cut corners&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Make changes &lt;a href=&quot;/2015/02/09/serious-code-reviewer.html&quot;&gt;smaller&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;Don&amp;#39;t study&lt;/a&gt; the code, just modify it;&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t feel responsible for all code, just focus on the relevant units/classes;&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t be afraid to &lt;a href=&quot;/2017/03/24/tdd-that-works.html&quot;&gt;break things&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we put these two interests in conflict, we will get a high-quality product, which is
growing very fast. The project will enforce quality, programmers will push
the code forward, making changes fast and frequently.&lt;/p&gt;

&lt;p&gt;Unfortunately, most projects have a very different philosophy. They delegate
quality control to programmers, hoping that they &amp;quot;won&amp;#39;t do evil.&amp;quot;
This leads to frustration, distress, constant fear of mistakes, long delays,
blaming, and shaming. Both the project and its programmers lose.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;If we put these two interests in conflict, we will get a high-quality product, which is growing very fast.&lt;/aside&gt;

&lt;p&gt;Programmers must not be responsible for the quality! They must not care
what they may, or will, break. They must not care how good the code they write is.
They must not &amp;quot;feel responsible&amp;quot; for the overall result. Instead, they must
be focused on making money for their families by writing the largest amount
of code and closing more tickets.&lt;/p&gt;

&lt;p&gt;Not because they are ignorant and selfish, but because this is the right
balance of responsibilities. This is how the project will get the most out
of its developers&amp;mdash;by freeing their minds of unnecessary and unproductive
quality worries and letting them focus on what they do best&amp;mdash;writing code.&lt;/p&gt;

&lt;p&gt;Of course, not every project will be able to configure itself in the most
effective way. Most projects don&amp;#39;t even know how to do it. In those projects,
if you, as a developer, floor the speed pedal, you will most likely ruin
their code base in a few days. That&amp;#39;s why the recommendations above are
only applicable to those who really know what they are doing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zerocracy.com&quot;&gt;We&lt;/a&gt; know what we are doing in our projects. We don&amp;#39;t let any developers
touch any parts of our code, unless the &amp;quot;quality wall&amp;quot; is high and strong enough.
How high is that wall in your projects? Can you say that, no matter how
bad some code is and how sneakily its author introduces it, it will be rejected?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">I decided to write this blog post after reviewing
this pull request. What happened
there? The author of the PR wasn&amp;#39;t able to figure out
the &amp;quot;right&amp;quot; way to implement it, and the code
reviewer was waiting and waiting. Eventually, the reviewer came to me,
since I was an architect, and complained
that it was taking too long and he wasn&amp;#39;t able to
earn his money for the review
he had done. Then the author of the changes
explained that he couldn&amp;#39;t
finish since there were impediments and design inconsistencies; he also
couldn&amp;#39;t earn
the money he deserved for fixing the issue. What did I say?
I said:
Forget the quality, just finish it any way possible.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/03/house-of-flying-daggers.jpg" /></entry><entry><title type="html">Don’t Parse, Use Parsing Objects</title><link href="http://www.yegor256.com/2018/02/27/parsing-objects.html" rel="alternate" type="text/html" title="Don&#39;t Parse, Use Parsing Objects" /><published>2018-02-27T00:00:00+00:00</published><updated>2018-02-27T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/02/27/parsing-objects</id><content type="html" xml:base="http://www.yegor256.com/2018/02/27/parsing-objects.html">&lt;!-- here: http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html#comment-3438202653 --&gt;

&lt;p&gt;The traditional way of integrating object-oriented back-end with an external
system is through &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;data transfer objects&lt;/a&gt;,
which are serialized into JSON before going out
and deserialized when coming back. This way is as much popular as it is wrong. The
serialization part should be replaced by &lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;printers&lt;/a&gt;,
which I explained earlier.
Here is my take on deserialization, which should be done by&amp;mdash;guess what&amp;mdash;objects.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;La science des rêves (2006) by Michel Gondry&#39; src=&#39;/images/2018/02/la-science-des-reves.jpg&#39; longdesc=&#39;#bad54f07&#39;/&gt;&lt;figcaption id=&#39;bad54f07&#39;&gt;La science des rêves (2006) by Michel Gondry&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Say there is a back-end entry point, which is supposed to register a new
book in the library, arriving in JSON:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Object Thinking&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;isbn: &amp;quot;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0735619654&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  &amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;David West&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, there is an object of class &lt;code&gt;Library&lt;/code&gt;, which expects an object of type
&lt;code&gt;Book&lt;/code&gt; to be given to its method &lt;code&gt;register()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Create a new record in the database&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Say also, type &lt;code&gt;Book&lt;/code&gt; has a simple method &lt;code&gt;isbn()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, here is the HTTP entry point
(I&amp;#39;m using &lt;a href=&quot;/2015/03/22/takes-java-web-framework.html&quot;&gt;Takes&lt;/a&gt;
and &lt;a href=&quot;/2017/06/22/object-oriented-input-output-in-cactoos.html&quot;&gt;Cactoos&lt;/a&gt;),
which is accepting
a POST &lt;a href=&quot;https://www.ietf.org/rfc/rfc2045.txt&quot;&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;&lt;/a&gt;
request and registering the book in the library:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkUpload&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqMtSmart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqMtBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JsonObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BookDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;isbn&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What is wrong with this? Well, a few things.&lt;/p&gt;

&lt;p&gt;First, it&amp;#39;s not reusable. If we were to need something similar in a different
place, we would have to write this HTTP processing and JSON parsing again.&lt;/p&gt;

&lt;p&gt;Second, error handling and validation are not reusable either. If we add
it to the method above, we will have to copy it everywhere. Of course,
the DTO may encapsulate it, but that&amp;#39;s not what DTOs are usually for.&lt;/p&gt;

&lt;p&gt;Third, the code above is rather procedural and has a lot of
&lt;a href=&quot;/2015/12/08/temporal-coupling-between-method-calls.html&quot;&gt;temporal coupling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A better design would be to hide this parsing inside a new class &lt;code&gt;JsonBook&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonBook&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;JsonBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;isbn&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, the RESTful entry point will look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TkUpload&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqMtSmart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RqMtBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Isn&amp;#39;t that more elegant?&lt;/p&gt;

&lt;p&gt;Here are some examples from my projects:
&lt;a href=&quot;https://github.com/zerocracy/farm/blob/0.21/src/main/java/com/zerocracy/tk/RqUser.java&quot;&gt;&lt;code&gt;RqUser&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;https://github.com/zerocracy/farm/&quot;&gt;zerocracy/farm&lt;/a&gt; and
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.11.2/src/main/java/io/jare/tk/RqUser.java&quot;&gt;&lt;code&gt;RqUser&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;https://github.com/yegor256/jare/blob/0.11.2/src/main/java/io/jare/tk/RqUser.java&quot;&gt;yegor256/jare&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see from the examples above, sometimes we can&amp;#39;t use &lt;code&gt;implements&lt;/code&gt;
because some primitives in Java are not interfaces but &lt;code&gt;final&lt;/code&gt; classes:
&lt;code&gt;String&lt;/code&gt; is a &amp;quot;perfect&amp;quot; example. That&amp;#39;s why I have to do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RqUser&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Parsing happens here and returns String&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But aside from that, these examples perfectly demonstrate the principle
of &amp;quot;parsing objects&amp;quot; suggested above.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">The traditional way of integrating object-oriented back-end with an external
system is through data transfer objects,
which are serialized into JSON before going out
and deserialized when coming back. This way is as much popular as it is wrong. The
serialization part should be replaced by printers,
which I explained earlier.
Here is my take on deserialization, which should be done by&amp;mdash;guess what&amp;mdash;objects.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/02/la-science-des-reves.jpg" /></entry><entry><title type="html">Microvesting</title><link href="http://www.yegor256.com/2018/02/13/micro-vesting.html" rel="alternate" type="text/html" title="Microvesting" /><published>2018-02-13T00:00:00+00:00</published><updated>2018-02-13T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/02/13/micro-vesting</id><content type="html" xml:base="http://www.yegor256.com/2018/02/13/micro-vesting.html">&lt;p&gt;Most startups don&amp;#39;t have enough cash to pay programmers as much as
they deserve, &lt;a href=&quot;/2016/01/12/good-programmers-dont-work-for-equity.html&quot;&gt;unfortunately&lt;/a&gt;
(or maybe not). Instead of cash, startups give their early employees
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stock#Shares&quot;&gt;shares of stock&lt;/a&gt;, which they will be able to either 1)
sell in a few years and become &lt;del&gt;millionaires&lt;/del&gt; billionaires,
or 2) throw away and remain nobodies. It&amp;#39;s a
&lt;a href=&quot;https://www.quora.com/Do-founders-vest/answer/Charlie-Cheever&quot;&gt;common practice&lt;/a&gt;.
The question, however, is what
is the right procedure, and the optimal algorithm, to transfer those shares to programmers.
When exactly do they become shareholders? What is the formula?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;La comunidad (2000) by Álex de la Iglesia&#39; src=&#39;/images/2018/02/la-comunidad.jpg&#39; longdesc=&#39;#c6f3e007&#39;/&gt;&lt;figcaption id=&#39;c6f3e007&#39;&gt;La comunidad (2000) by Álex de la Iglesia&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are a few typical approaches.&lt;/p&gt;

&lt;p&gt;One of the most &lt;a href=&quot;https://www.feld.com/archives/2005/05/term-sheet-vesting.html&quot;&gt;popular&lt;/a&gt; is
&amp;quot;&lt;a href=&quot;https://thenextweb.com/entrepreneur/2013/07/21/startup-founders-heres-why-vesting-is-your-best-friend/&quot;&gt;four years with a one-year cliff&lt;/a&gt;,&amp;quot;
which means that if they had 50% equity and leave after two years
they will only retain 25%. The longer they stay, the larger the percentage of
their equity that will be vested until they become fully vested in the 48th month.
However, because they have a one year cliff, if they leave before the 12th month,
they get nothing. There could be
&lt;a href=&quot;https://medium.com/@ipaullee/let-s-revise-the-vesting-schedule-for-startup-founders-and-employees-7817fcb301ea&quot;&gt;slight modifications&lt;/a&gt;
to the numbers, of course.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Most vesting formulas are perfectly aligned with the popular &amp;quot;be nice&amp;quot; paradigm and is not beneficial, either to the company or to its slaves.&lt;/aside&gt;

&lt;p&gt;The disadvantage of this approach is that their primary motivation is
to stay in the company, instead of achieving results. This vesting
formula is perfectly aligned with the popular
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;be nice&lt;/a&gt;
paradigm and is not beneficial, either to the company or to
its &lt;del&gt;slaves&lt;/del&gt; employees.&lt;/p&gt;

&lt;p&gt;Another option is &lt;a href=&quot;https://techcrunch.com/2015/12/09/milestone-based-vesting-for-startup-founders/&quot;&gt;milestone-based&lt;/a&gt;
vesting, which defines a set of value milestones, each of which unlocks
an additional part of the programmer&amp;#39;s equity.&lt;/p&gt;

&lt;p&gt;On top of the &lt;a href=&quot;https://medium.com/swlh/why-milestone-based-agreements-are-bad-for-early-stage-startups-15c759995121&quot;&gt;inability&lt;/a&gt;
to predict milestones accurately, this vesting formula
promotes group responsibility, which, in my opinion,
is &lt;a href=&quot;/2015/11/21/ringelmann-effect-vs-agile.html&quot;&gt;the least&lt;/a&gt;
effective way to motivate. Programmers writing Java classes can&amp;#39;t be
responsible for the &amp;quot;next round of VC funding,&amp;quot; simply because they
don&amp;#39;t have any idea how to make that round happen. It&amp;#39;s not their job,
not their responsibility.&lt;/p&gt;

&lt;p&gt;You may say that writing those Java classes is exactly how we make the next
round happen, but it&amp;#39;s far from being true, in most cases. We all know that
investments come to those who can &lt;del&gt;fool&lt;/del&gt;
&lt;a href=&quot;/2016/03/28/unspoken-secrets-of-elevator-pitch.html&quot;&gt;pitch&lt;/a&gt; an investor,
not to those who write the best Java code. Thus, the work programmers do
and the &amp;quot;value events&amp;quot; the startup is aiming to reach are pretty much disconnected.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Using microvesting with valuation and hourly rate the company can influence programmers&amp;#39; motivation.&lt;/aside&gt;

&lt;p&gt;A more logical formula is &lt;strong&gt;microvesting&lt;/strong&gt;, which we practice in projects managed
by &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;. It is as simple as that: A company has
a valuation, which is set by its founders; let&amp;#39;s say, it&amp;#39;s $1,000,000. A programmer
has an hourly rate, say, $40. Thus, when a &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;one-hour&lt;/a&gt;
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;fixed-budget&lt;/a&gt; task is completed, the
programmer earns 0.004% of equity ($40 / $1,000,000). Our software calculates
it all automatically, increasing their shares after each completed task.&lt;/p&gt;

&lt;p&gt;Using these two variables&amp;mdash;valuation and hourly rate&amp;mdash;the company
can influence programmers&amp;#39; motivation.&lt;/p&gt;

&lt;p&gt;No need to &lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;lie&lt;/a&gt; to
them about big-money milestones or keep them in the office
for four years. Just let them be focused on the results they can produce and
give them back what they deserve. Incrementally. That&amp;#39;s it.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="startup" /><category term="zerocracy" /><summary type="html">Most startups don&amp;#39;t have enough cash to pay programmers as much as
they deserve, unfortunately
(or maybe not). Instead of cash, startups give their early employees
shares of stock, which they will be able to either 1)
sell in a few years and become millionaires billionaires,
or 2) throw away and remain nobodies. It&amp;#39;s a
common practice.
The question, however, is what
is the right procedure, and the optimal algorithm, to transfer those shares to programmers.
When exactly do they become shareholders? What is the formula?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/02/la-comunidad.jpg" /></entry><entry><title type="html">More Bugs, Please</title><link href="http://www.yegor256.com/2018/02/06/where-to-find-more-bugs.html" rel="alternate" type="text/html" title="More Bugs, Please" /><published>2018-02-06T00:00:00+00:00</published><updated>2018-02-06T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/02/06/where-to-find-more-bugs</id><content type="html" xml:base="http://www.yegor256.com/2018/02/06/where-to-find-more-bugs.html">&lt;p&gt;A &lt;a href=&quot;/2015/06/11/wikipedia-bug-definition.html&quot;&gt;bug&lt;/a&gt;
is something we find in a software product that &amp;quot;doesn&amp;#39;t look right&amp;quot; (this
is my personal definition). A bug can be hidden or visible; it can be
&amp;quot;already fixed&amp;quot; or &amp;quot;still present&amp;quot;; it can be critical or cosmetic; it
can be urgent or of a low priority. What is important is that the
&lt;a href=&quot;/2017/05/23/unlimited-number-of-bugs.html&quot;&gt;more&lt;/a&gt;
bugs we are able to find and fix before our customers see them, the higher
the perceived &lt;a href=&quot;/2017/12/26/software-quality-formula.html&quot;&gt;quality&lt;/a&gt;
of the software. Simply put, bugs are a
&lt;a href=&quot;/2014/04/13/bugs-are-welcome.html&quot;&gt;very good thing&lt;/a&gt;,
if they are found by us, not our customers.
&lt;a href=&quot;http://www.zerocracy.com&quot;&gt;We&lt;/a&gt; pay our programmers for
&lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;each bug&lt;/a&gt;
they find. Here is a cheat sheet for them, showing where
and how they can find those bugs, to make more money.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;American Honey (2016) by Andrea Arnold&#39; src=&#39;/images/2018/02/american-honey.jpg&#39; longdesc=&#39;#02df6b04&#39;/&gt;&lt;figcaption id=&#39;02df6b04&#39;&gt;American Honey (2016) by Andrea Arnold&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Obviously, if something is broken, it&amp;#39;s a bug; no need to mention it here.
However, when a product is &lt;a href=&quot;/2017/03/24/tdd-that-works.html&quot;&gt;more or less stable&lt;/a&gt;,
not too many things are
visibly broken. But we still pay for bugs. What should you look out for? Read on. This
list (in no particular order) will help you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of functionality&lt;/strong&gt;.
If a class
(&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/558&quot;&gt;yegor256/cactoos#558&lt;/a&gt;)
or the entire module
(&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/399&quot;&gt;yegor256/cactoos#399&lt;/a&gt;)
doesn&amp;#39;t provide the functionality you &lt;em&gt;expect&lt;/em&gt; it to have,
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of tests&lt;/strong&gt;.
If a class doesn&amp;#39;t have a unit test
(&lt;a href=&quot;https://github.com/yegor256/takes/issues/43&quot;&gt;yegor256/takes#43&lt;/a&gt;)
or
the existing test doesn&amp;#39;t cover some critical aspects of the class
(&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/375&quot;&gt;yegor256/cactoos#375&lt;/a&gt;),
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of documentation&lt;/strong&gt;.
If, say, a Javadoc block for a class does not clearly explain to you
how to use the class, or the entire module is not documented well
(&lt;a href=&quot;https://github.com/yegor256/takes/issues/790&quot;&gt;yegor256/takes#790&lt;/a&gt;),
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suboptimal implementation&lt;/strong&gt;.
If a piece of code doesn&amp;#39;t look good to you, and you think it can be
refactored to look better, it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Design inconsistency&lt;/strong&gt;.
If the design doesn&amp;#39;t look logical to you
(&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/436&quot;&gt;yegor256/cactoos#436&lt;/a&gt;)
and you know how it can be improved,
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Naming is weird&lt;/strong&gt;.
If class, variable or package names don&amp;#39;t look consistent and
obvious to you, and you know how they can be fixed
(&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/274&quot;&gt;yegor256/cactoos#274&lt;/a&gt;),
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unstable test&lt;/strong&gt;.
If a unit test fails sporadically
(&lt;a href=&quot;https://github.com/yegor256/takes/issues/506&quot;&gt;yegor256/takes#506&lt;/a&gt;)
or doesn&amp;#39;t work in some particular environment
(&lt;a href=&quot;https://github.com/yegor256/jpeek/issues/151&quot;&gt;yegor256/jpeek#151&lt;/a&gt;),
it&amp;#39;s a bug.&lt;/p&gt;

&lt;p&gt;Also, it&amp;#39;s worth mentioning that minor, cosmetic, or poorly formulated
bug reports will most likely be rejected or not paid for. If you want us to pay for your bug reports,
make sure they &lt;a href=&quot;/2014/11/24/principles-of-bug-tracking.html&quot;&gt;sound right&lt;/a&gt;,
in order to help us move the project forward to a better state.&lt;/p&gt;

&lt;!--

There are some examples of minor bugs, which are not worth paying
for, even though they are valid:

  * [yegor256/jpeek#158](https://github.com/yegor256/jpeek/issues/158)

Cosmetic bugs are those that

--&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html">A bug
is something we find in a software product that &amp;quot;doesn&amp;#39;t look right&amp;quot; (this
is my personal definition). A bug can be hidden or visible; it can be
&amp;quot;already fixed&amp;quot; or &amp;quot;still present&amp;quot;; it can be critical or cosmetic; it
can be urgent or of a low priority. What is important is that the
more
bugs we are able to find and fix before our customers see them, the higher
the perceived quality
of the software. Simply put, bugs are a
very good thing,
if they are found by us, not our customers.
We pay our programmers for
each bug
they find. Here is a cheat sheet for them, showing where
and how they can find those bugs, to make more money.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/02/american-honey.jpg" /></entry><entry><title type="html">Are You a Coder or a Developer?</title><link href="http://www.yegor256.com/2018/01/23/sociotech-skills.html" rel="alternate" type="text/html" title="Are You a Coder or a Developer?" /><published>2018-01-23T00:00:00+00:00</published><updated>2018-01-23T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/23/sociotech-skills</id><content type="html" xml:base="http://www.yegor256.com/2018/01/23/sociotech-skills.html">&lt;p&gt;Software development and coding are two different things. Usually,
the former includes the latter, but not always. Coding produces
lines of code, while software development creates products. Unfortunately,
the majority of programmers joining &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;
now are &lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;coders&lt;/a&gt;.
Even though they claim to be developers, in reality they are lacking the very
important &lt;a href=&quot;https://en.wikipedia.org/wiki/Sociotechnical_system&quot;&gt;sociotechnical&lt;/a&gt;
skills that differentiate product creators from lines-of-code writers.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Hard Men (1996) by J.K. Amalou&#39; src=&#39;/images/2018/01/hardmen.jpg&#39; longdesc=&#39;#716b804f&#39;/&gt;&lt;figcaption id=&#39;716b804f&#39;&gt;Hard Men (1996) by J.K. Amalou&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let me show you the symptoms first.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s call him Mario. He is a very skilled
Java developer, as his &lt;a href=&quot;/2016/03/08/pimp-up-your-resume.html&quot;&gt;resume&lt;/a&gt;
says. He&amp;#39;s been in the industry for ten years or so,
done a few enterprise projects; he seems to be very seasoned. We give him
access to the project and assign a few GitHub tickets.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Dude, I love you like a brother, but I don&amp;#39;t have time to answer your questions.&lt;/aside&gt;

&lt;p&gt;In a few hours I get a Facebook message a page long. It says that
he is very glad to be on the project, but &lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;doesn&amp;#39;t understand&lt;/a&gt;
a thing yet
and needs help. Here is a list of questions he prepared and he&amp;#39;s ready for
a phone call to get them answered.&lt;/p&gt;

&lt;p&gt;I reply: &amp;quot;Dude, I love you like a brother, but I don&amp;#39;t have time to answer
your questions. Not because I&amp;#39;m lazy or don&amp;#39;t appreciate your work... Actually,
yes, exactly because of that. I am lazy and don&amp;#39;t want to answer any questions over Messenger.
My answers will be totally wasted, if you, for example, quit the project
tomorrow. Or if someone else joins us in a week and has
exactly the same set of questions. Do I have to explain all over again? I&amp;#39;m too
&lt;del&gt;old&lt;/del&gt; lazy for that.&amp;quot;&lt;/p&gt;

&lt;p&gt;He most probably thinks that I&amp;#39;m an &lt;a href=&quot;/testimonials.html&quot;&gt;arrogant prick&lt;/a&gt;, but what can he do? He
reads &lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;my article&lt;/a&gt;
on this very subject and says &amp;quot;OK, I got it.&amp;quot;&lt;/p&gt;

&lt;p&gt;In half an hour Mario submits a ticket to another (!) repository. The title
is &amp;quot;The problem&amp;quot; and the description says &amp;quot;Help me understand the project.&amp;quot;&lt;/p&gt;

&lt;p&gt;What do I do, as an architect of the project? I close the ticket with a quick
message: &amp;quot;Please, make your tickets more specific.&amp;quot; My response is just one
step away from &amp;quot;Get lost,&amp;quot; but what else can I say? Mario doesn&amp;#39;t know
&lt;a href=&quot;/2014/11/24/principles-of-bug-tracking.html&quot;&gt;how to use&lt;/a&gt;
the ticketing system. He&amp;#39;s most probably been working all his life
in a &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;cozy office&lt;/a&gt;,
where everybody around was his friend. Not even using
chat, just asking questions across the table. I&amp;#39;m asking him to
do something he has never done before. Of course, he doesn&amp;#39;t know how.
He feels ashamed, I suspect.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;The bottom line is that Mario is not a software developer, he&amp;#39;s a coder.&lt;/aside&gt;

&lt;p&gt;What happens next? He comes right back at me in Messenger, with the same
set of questions. Actually, his reaction will depend on his personality.
It may either be anger, confusion, or
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;something else&lt;/a&gt;. But the bottom line
is that Mario is not a software developer, he&amp;#39;s a coder.
He doesn&amp;#39;t understand the dynamics of a modern software project, he doesn&amp;#39;t
know how to use its
&lt;a href=&quot;/2016/08/23/communication-maturity.html&quot;&gt;communication&lt;/a&gt;
instruments, and he has no sociotechnical skills:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Searching for, and finding, information&lt;/li&gt;
&lt;li&gt;Submitting questions, collecting answers&lt;/li&gt;
&lt;li&gt;Adding knowledge to the repository&lt;/li&gt;
&lt;li&gt;Submitting code changes&lt;/li&gt;
&lt;li&gt;Arguing in writing, reviewing changes&lt;/li&gt;
&lt;li&gt;Closing tickets and preventing them from closing&lt;/li&gt;
&lt;li&gt;Maintaining discipline in repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same happens to almost everybody who joins us, unfortunately.&lt;/p&gt;

&lt;p&gt;A modern software project is much more a social activity than code writing.
Knowing how to interact with the team and deal with information
is much more important than knowing how to use design patterns. The only
way to learn these skills is &lt;em&gt;practice&lt;/em&gt;. I&amp;#39;ve &lt;a href=&quot;https://www.facebook.com/yegor256/videos/10214943124281537/&quot;&gt;said it&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=GS45LzE3LPQ&quot;&gt;many times&lt;/a&gt;,
let me repeat it again: If you are not an
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;open source&lt;/a&gt;
and StackOverflow
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;activist&lt;/a&gt;, you most
likely won&amp;#39;t have these skills.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Software development and coding are two different things. Usually,
the former includes the latter, but not always. Coding produces
lines of code, while software development creates products. Unfortunately,
the majority of programmers joining Zerocracy
now are coders.
Even though they claim to be developers, in reality they are lacking the very
important sociotechnical
skills that differentiate product creators from lines-of-code writers.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/hardmen.jpg" /></entry><entry><title type="html">The Educational Aspect of Static Analysis</title><link href="http://www.yegor256.com/2018/01/16/educational-aspect-of-static-analysis.html" rel="alternate" type="text/html" title="The Educational Aspect of Static Analysis" /><published>2018-01-16T00:00:00+00:00</published><updated>2018-01-16T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/16/educational-aspect-of-static-analysis</id><content type="html" xml:base="http://www.yegor256.com/2018/01/16/educational-aspect-of-static-analysis.html">&lt;p&gt;&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/544&quot;&gt;Very often&lt;/a&gt;
new programmers who join our projects ask us whether we
have auto-formatting instruments to make Java code look exactly
the way &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;Qulice&lt;/a&gt;
expects. (Qulice is the static analyzer we use.) I always reply that having
such an automated code polisher would only be harmful and wouldn&amp;#39;t help
the project and its members improve and grow. Here is why I think so.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Blind Fury (1989) by Phillip Noyce&#39; src=&#39;/images/2018/01/blind-fury.jpg&#39; longdesc=&#39;#5789f117&#39;/&gt;&lt;figcaption id=&#39;5789f117&#39;&gt;Blind Fury (1989) by Phillip Noyce&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Static analysis, the way we do it in combination with
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;read-only master branch&lt;/a&gt;,
is a fully automated uncompromising review of your pull request, mostly
intended to spot code formatting mistakes. Say we want Java code in
our entire repository to look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, you refactor it as part of a bigger task, and submit a pull request like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For some of you this may not seem like a big difference, since both code snippets
compile without issues and work exactly the same way. However, for us,
the repository maintainers, it is a big deal. We do want our classes to always be
&lt;code&gt;final&lt;/code&gt;, we do want them to be immutable (so all attributes should also be &lt;code&gt;final&lt;/code&gt;),
we want to prefix all attribute references with &lt;code&gt;this.&lt;/code&gt;, and we want the
code to be formatted the same way, since we believe that the uniformity
of the code seriously increases its maintainability.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Of course, we could create a tool, but in that case you would never learn what the project wants from you and why.&lt;/aside&gt;

&lt;p&gt;Of course, we could create a tool which you could then use to re-format
the code, to make it look the way we want. But in that case you would
never &lt;em&gt;learn&lt;/em&gt; what the project wants from you and &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You will not know the reasoning behind our rules. You will never think about them.
You will not really care about them. But they are not only about the formatting
of spaces and brackets. There are &lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;over 900&lt;/a&gt;
of them in &lt;a href=&quot;http://www.qulice.com&quot;&gt;Qulice&lt;/a&gt; and some of
them were designed especially for the object-oriented philosophy
&lt;a href=&quot;http://www.elegantobjects.org&quot;&gt;we&lt;/a&gt; are preaching.&lt;/p&gt;

&lt;p&gt;Thus, simply put, we don&amp;#39;t want you to go through the static analysis phase easily.
We want you to suffer in order to learn.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="quality" /><summary type="html">Very often
new programmers who join our projects ask us whether we
have auto-formatting instruments to make Java code look exactly
the way Qulice
expects. (Qulice is the static analyzer we use.) I always reply that having
such an automated code polisher would only be harmful and wouldn&amp;#39;t help
the project and its members improve and grow. Here is why I think so.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/blind-fury.jpg" /></entry><entry><title type="html">Five Stages of Microbudgeting</title><link href="http://www.yegor256.com/2018/01/09/micro-budgeting.html" rel="alternate" type="text/html" title="Five Stages of Microbudgeting" /><published>2018-01-09T00:00:00+00:00</published><updated>2018-01-09T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/09/micro-budgeting</id><content type="html" xml:base="http://www.yegor256.com/2018/01/09/micro-budgeting.html">&lt;p&gt;Microtasking, which &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;I explained&lt;/a&gt;
in an earlier post, works only when each task has a very specific reward
for success and a punishment for failure.
I &lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;believe&lt;/a&gt;
that the best reward and punishment instrument is money. The budget
is fixed, the programmer gets it only when the task is completed (reward), no matter
how much time it cost; if it is not completed, there is no money at all
(punishment). Pure and simple. However, a logical question arises: how can we
know upfront what is the right budget? Who sets it?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Taxi Driver (1976) by Martin Scorsese&#39; src=&#39;/images/2018/01/taxi-driver.jpg&#39; longdesc=&#39;#1d81308e&#39;/&gt;&lt;figcaption id=&#39;1d81308e&#39;&gt;Taxi Driver (1976) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;When we started to play with microtasking in our projects, in 2009, we were
asking programmers to estimate each task. It did work, but only with very
simple and obvious tasks. More complex ones almost always suffered
from either under-estimating or padding&amp;mdash;numbers were either very small
and task performers were complaining in the end, or they were too big and
customers were asking for refunds. It was not a manageable situation.&lt;/p&gt;

&lt;p&gt;Then, we realized that it would be better if all tasks were rather
small, with exactly the same budget. We tried to use two hours as a universal
and fixed estimate. Everything else that didn&amp;#39;t fit&amp;mdash;programmers were allowed
to reject. This model didn&amp;#39;t really work either, because our managers had
to deal with a very large amount of rejected tasks and didn&amp;#39;t know how to make
them smaller, since they were not programmers.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;The beauty of this approach is that the task of scope decomposition is moved to the shoulders of programmers.&lt;/aside&gt;

&lt;p&gt;Finally, in March 2010 we found a solution, which was labeled
&lt;a href=&quot;/2010/03/04/pdd.html&quot;&gt;Puzzle Driven Development&lt;/a&gt; (PDD). According to
this concept: 1) Any task has a very small fixed budget (we use 30 minutes);
2) The task performer is allowed to complete only part of the task;
3) The code that is being returned to &lt;code&gt;master&lt;/code&gt; must include &lt;code&gt;@todo&lt;/code&gt; markers, called &amp;quot;puzzles&amp;quot;;
4) Puzzles are automatically converted to new tasks.&lt;/p&gt;

&lt;p&gt;The beauty of this approach is that the most complicated part of the software
project management&amp;mdash;scope decomposition&amp;mdash;is moved to the shoulders
of those who are the best at it: programmers.&lt;/p&gt;

&lt;p&gt;We are using PDD in all our projects now and have even created a public instrument
for GitHub repositories, which allows anyone to play with PDD at no cost:
&lt;a href=&quot;/2017/04/05/pdd-in-action.html&quot;&gt;0pdd.com&lt;/a&gt;. This is exactly
the same tool we are using in our commercial projects.&lt;/p&gt;

&lt;p&gt;However, if and when you decide to apply microbudgeting to your project,
together with PDD, there will be problems. Psychological ones mostly. In my
experience, people go through five stages when they face microbudgeting
for the first time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Denial&lt;/strong&gt;.
They ask &amp;quot;How is it possible?&amp;quot; and then refuse to hear any explanations.
There are many reasons why microbudgeting and microtasking may not
work&amp;mdash;you will hear them all. Very often they demand a traditional
model of payment, especially if they were invited. They just say that
our model is insane, and if we want to see them work on our projects we have to
pay for as much time as they spend. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Anger&lt;/strong&gt;.
Some of them decide to try. Thanks to their previous multi-year experience,
they expect to be
paid by the end of the day/week/month, no matter what they were doing. Very soon they
realize that the total income for the first day of work was $0.00, even though
they were doing something. They get very angry. They call us crooks, fraudsters,
and many other names. Asking them to read the &lt;a href=&quot;http://datum.zerocracy.com/pages/policy.html&quot;&gt;policy&lt;/a&gt;
again doesn&amp;#39;t help. They simply can&amp;#39;t believe that we are
not going to pay them anything, even
though they were doing something. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bargaining&lt;/strong&gt;.
Almost everybody at this stage recommends we change the model. They
explain why it&amp;#39;s not really effective and how great it would be if we
would pay them the traditional way. They give us examples of their previous
projects, send references from previous employees, and criticize
my blog posts. With some of them I try to argue, when their criticism
is constructive. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Depression&lt;/strong&gt;.
Most programmers are used to doing work because they feel guilty
if the task is not done or the bug is not fixed. Microbudgeting requires
a completely opposite attitude: we all are supposed to work because
we are greedy. Money has to motivate us, not guilt. If there is no money,
we don&amp;#39;t work. Most people, when they see this new motivational paradigm
and don&amp;#39;t see the usual guilt, lose coordination and don&amp;#39;t know what to do.
They can&amp;#39;t really achieve anything, because there is no traditional manager
standing behind them and pushing them forward. They are supposed to go for
the money. They don&amp;#39;t, and so they don&amp;#39;t make any money. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Acceptance&lt;/strong&gt;.
Finally, the best of them realize that the model can work if they
follow the rules, which are very simple: be greedy, selfish, egoistic,
money-driven, result-oriented, lazy, misanthropic, heartless, and arrogant.
They accept the fact that they lose, compete, work, and make money only
when they produce results. They start enjoying meritocracy at its best.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You understand already that the vast majority of those who try to work with us
can&amp;#39;t really get to the final point&amp;mdash;they quit somewhere in the middle.
Most probably something very similar will happen on your projects too.&lt;/p&gt;

&lt;p&gt;What is the solution? I don&amp;#39;t really know.&lt;/p&gt;

&lt;p&gt;Statistically speaking, three to five people out of a hundred manage to survive and
become effective and productive. Thus, to build a team of twenty people
you will have to screen and try at least 400.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="xdsd" /><category term="zerocracy" /><summary type="html">Microtasking, which I explained
in an earlier post, works only when each task has a very specific reward
for success and a punishment for failure.
I believe
that the best reward and punishment instrument is money. The budget
is fixed, the programmer gets it only when the task is completed (reward), no matter
how much time it cost; if it is not completed, there is no money at all
(punishment). Pure and simple. However, a logical question arises: how can we
know upfront what is the right budget? Who sets it?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/taxi-driver.jpg" /></entry><entry><title type="html">Operator new() is Toxic</title><link href="http://www.yegor256.com/2018/01/02/operator-new-is-toxic.html" rel="alternate" type="text/html" title="Operator new() is Toxic" /><published>2018-01-02T00:00:00+00:00</published><updated>2018-01-02T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/02/operator-new-is-toxic</id><content type="html" xml:base="http://www.yegor256.com/2018/01/02/operator-new-is-toxic.html">&lt;p&gt;To instantiate objects, in most object-oriented languages,
including Java, Ruby, and C++, we use operator &lt;code&gt;new()&lt;/code&gt;. Well, unless
we use static factory methods, which we don&amp;#39;t use because
&lt;a href=&quot;/2017/11/14/static-factory-methods.html&quot;&gt;they are evil&lt;/a&gt;.
Even though it looks so easy to make a new object any time we need it,
I would recommend to be more careful with this rather toxic operator.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;The Gift (2015) by Joel Edgerton&#39; src=&#39;/images/2018/01/the-gift.jpg&#39; longdesc=&#39;#63533835&#39;/&gt;&lt;figcaption id=&#39;63533835&#39;&gt;The Gift (2015) by Joel Edgerton&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m sure you understand that the problem with this operator is that
it couples objects, making testing and reuse very difficult or even impossible.
Let&amp;#39;s say there is a story in a file that we need to read as a UTF-8 text
(I&amp;#39;m using
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.25.6/org/cactoos/text/TextOf.html&quot;&gt;&lt;code&gt;TextOf&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It seems super simple, but the problem is obvious: class &lt;code&gt;Story&lt;/code&gt; can&amp;#39;t
be reused. It can only read one particular file. Moreover, testing it
will be rather difficult, since it reads the content from exactly one place,
which can&amp;#39;t be changed at all. More formally this problem is known as an
&lt;em&gt;unbreakable dependency&lt;/em&gt;&amp;mdash;we can&amp;#39;t break the link between &lt;code&gt;Story&lt;/code&gt;
and &lt;code&gt;/tmp/story.txt&lt;/code&gt;&amp;mdash;they are together forever.&lt;/p&gt;

&lt;p&gt;To solve this we need to introduce a constructor and let &lt;code&gt;Story&lt;/code&gt; accept
the location of the content as an argument:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, each user of the &lt;code&gt;Story&lt;/code&gt; has to know the name of the file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#39;s not really
convenient, especially for those users who were using &lt;code&gt;Story&lt;/code&gt; before, knowing
nothing about the file path. To help them we introduce
a &lt;a href=&quot;/2015/05/28/one-primary-constructor.html&quot;&gt;secondary constructor&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Here!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we just make an instance through a no-arguments constructor, just like
we did before:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m sure you&amp;#39;re well aware of this technique, which is also known
as &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;dependency injection&lt;/a&gt;.
I&amp;#39;m actually not saying anything new. What I want you to pay attention to here is
the location and the amount of &lt;code&gt;new&lt;/code&gt; operators in all three code snippets.&lt;/p&gt;

&lt;p&gt;In the first snippet both &lt;code&gt;new&lt;/code&gt; operators are in the method &lt;code&gt;text()&lt;/code&gt;.
In the second snippet we lost one of them. In the third snippet one operator
is in the method, while the second one moved up, to the constructor.&lt;/p&gt;

&lt;p&gt;Remember this fact and let&amp;#39;s move on.&lt;/p&gt;

&lt;p&gt;What if the file is not in UTF-8 encoding but in &lt;a href=&quot;https://en.wikipedia.org/wiki/KOI8-R&quot;&gt;KOI8-R&lt;/a&gt;?
Class &lt;code&gt;TextOf&lt;/code&gt; and then method &lt;code&gt;Story.text()&lt;/code&gt; will throw an exception.
However, class &lt;code&gt;TextOf&lt;/code&gt; is capable of reading in any encoding, it just
needs to have a secondary argument for its constructor:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;KOI8_R&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to make &lt;code&gt;Story&lt;/code&gt; capable of using different encodings, we need to
introduce a few additional secondary constructors and modify its primary
constructor:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardEncodings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#39;s just dependency injection, but pay attention to the locations
of the operator &lt;code&gt;new&lt;/code&gt;. They are all in the
constructors now and none of them are left in the method &lt;code&gt;text()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The tendency here is obvious to me: the more the &lt;code&gt;new&lt;/code&gt; operators stay in the
methods, the less reusable and testable is the class.&lt;/p&gt;

&lt;p&gt;In other words, operator &lt;code&gt;new&lt;/code&gt; is a rather toxic thing, so try to keep its
usage to a minimum in your methods. Make sure you instantiate everything
or almost everything in your secondary constructors.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">To instantiate objects, in most object-oriented languages,
including Java, Ruby, and C++, we use operator new(). Well, unless
we use static factory methods, which we don&amp;#39;t use because
they are evil.
Even though it looks so easy to make a new object any time we need it,
I would recommend to be more careful with this rather toxic operator.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/the-gift.jpg" /></entry><entry><title type="html">The Formula for Software Quality</title><link href="http://www.yegor256.com/2017/12/26/software-quality-formula.html" rel="alternate" type="text/html" title="The Formula for Software Quality" /><published>2017-12-26T00:00:00+00:00</published><updated>2017-12-26T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/12/26/software-quality-formula</id><content type="html" xml:base="http://www.yegor256.com/2017/12/26/software-quality-formula.html">&lt;p&gt;How do you define the quality of a software product? There is definitely an
intrinsic emotional component to it, which means satisfaction for the user,
willingness to pay, appreciation, positive attitude, and all that. However,
if we put emotions aside, how can we really measure it?
The IEEE &lt;a href=&quot;https://standards.ieee.org/findstds/standard/610.12-1990.html&quot;&gt;says&lt;/a&gt; that
quality is the degree to which a product meets its requirements or
user expectations. But what is the formula? Can we say that it
satisfies requirements and expectations to, say, 73%?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Coco Chanel &amp;amp; Igor Stravinsky (2009) by Jan Kounen&#39; src=&#39;/images/2017/12/coco-chanel-and-igor-stravinsky.jpg&#39; longdesc=&#39;#f962b2fa&#39;/&gt;&lt;figcaption id=&#39;f962b2fa&#39;&gt;Coco Chanel &amp;amp; Igor Stravinsky (2009) by Jan Kounen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is the formula and the logic I&amp;#39;m suggesting.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/2017/05/23/unlimited-number-of-bugs.html&quot;&gt;we know&lt;/a&gt;,
any software product has an unlimited number of bugs. Some of them
are discovered and fixed by the development team, let&amp;#39;s call them &lt;em&gt;F&lt;/em&gt;.
Some of them are discovered by the end users, let&amp;#39;s call them &lt;em&gt;U&lt;/em&gt;. Thus,
the total amount of bugs we are aware of, out of an infinity of them, is &lt;em&gt;F+U&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Obviously, the smaller &lt;em&gt;U&lt;/em&gt; is, the higher the quality. Ideally, &lt;em&gt;U&lt;/em&gt; has
to be zero, which will mean that users don&amp;#39;t see any bugs at all. How can
we achieve that, if the total amount of bugs is infinite? The only possible
way to do it is to increase &lt;em&gt;F&lt;/em&gt;, hoping that &lt;em&gt;U&lt;/em&gt; will decrease automatically.&lt;/p&gt;

&lt;p&gt;Thus, the quality of a product can be measured as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://latex.codecogs.com/svg.latex?$$Q%20=%20%5Cfrac%7BF%7D%7BF%20+%20U%7D$$&#39; class=&#39;eqtn&#39;/&gt;&lt;/p&gt;

&lt;p&gt;We simply divide the amount of bugs found by the total amount of bugs
visible. Thus, the more bugs we manage to find before our users see them, the higher the
quality.&lt;/p&gt;

&lt;p&gt;A quality of 100% means that no bugs are found by the users. A quality
of 0% means that all bugs are found by them.&lt;/p&gt;

&lt;p&gt;Does it make sense?&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/2EEe2o6&#39;&gt;&lt;img src=&#39;http://www.yegor256.com/images/2017/12/managing-the-testing-process.jpg&#39; style=&#39;width:96px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;P.S. It seems that I&amp;#39;m not the inventor of the formula. This is the quote
from &lt;a href=&quot;http://amzn.to/2GvhMEV&quot;&gt;&lt;em&gt;Managing the Testing Process: Practical Tools and Techniques for Managing Hardware and Software Testing&lt;/em&gt;&lt;/a&gt; (2009)
by Rex Black, page 109:
A common metric of test team effectiveness measures whether the test team
manages to find a sizeable majority of the bugs prior to release. The production
or customer bugs are sometimes called &lt;em&gt;test escapes&lt;/em&gt;. The implication is that
your test team missed these problems but could reasonably have detected them
during test execution. You can quantify this metric as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://latex.codecogs.com/svg.latex?$$%5Cmathit%7BDefect%20Detection%20Effectiveness%7D%20=%20%5Cfrac%7B%5Cmathit%7Bbugs%20(test)%7D%7D%7B%5Cmathit%7Bbugs%20(test)%20+%20bugs%20(production)%7D%7D$$&#39; class=&#39;eqtn&#39;/&gt;&lt;/p&gt;

&lt;p&gt;P.P.S. Here is another similar metric by Capers Jones at
&lt;a href=&quot;http://ieeexplore.ieee.org/document/488361/&quot;&gt;&lt;em&gt;Software Defect Removal Efficiency&lt;/em&gt;&lt;/a&gt;,
Computer, Volume&amp;nbsp;29, Issue&amp;nbsp;4, 1996:
&amp;quot;Serious software quality control involves measurement of defect removal efficiency (DRE).
Defect removal efficiency is the percentage of defects found and repaired prior to release.
In principle the measurement of DRE is simple. Keep records of all defects found
during development. After a fixed period of 90 days, add customer-reported defects
to internal defects and calculate the efficiency of internal removal. If the development
team found 90 defects and customers reported 10 defects, then DRE is of course 90%.&amp;quot;&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="quality" /><category term="management" /><summary type="html">How do you define the quality of a software product? There is definitely an
intrinsic emotional component to it, which means satisfaction for the user,
willingness to pay, appreciation, positive attitude, and all that. However,
if we put emotions aside, how can we really measure it?
The IEEE says that
quality is the degree to which a product meets its requirements or
user expectations. But what is the formula? Can we say that it
satisfies requirements and expectations to, say, 73%?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/12/coco-chanel-and-igor-stravinsky.jpg" /></entry></feed>
