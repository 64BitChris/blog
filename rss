<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2016-09-17T02:23:24+00:00</updated><id>http://www.yegor256.com/</id><title>Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><entry><title>Inheritance Is a Procedural Technique for Code Reuse</title><link href="http://www.yegor256.com/2016/09/13/inheritance-is-procedural.html" rel="alternate" type="text/html" title="Inheritance Is a Procedural Technique for Code Reuse" /><published>2016-09-13T00:00:00+00:00</published><updated>2016-09-13T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/09/13/inheritance-is-procedural</id><content type="html" xml:base="http://www.yegor256.com/2016/09/13/inheritance-is-procedural.html">&lt;p&gt;We all know that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)&quot;&gt;inheritance&lt;/a&gt;
is bad and that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;composition over inheritance&lt;/a&gt;
is a
&lt;a href=&quot;http://programmers.stackexchange.com/questions/65179&quot;&gt;good idea&lt;/a&gt;,
but do we really understand why?
In &lt;del&gt;most&lt;/del&gt; all articles
&lt;a href=&quot;https://www.google.com/search?q=inheritance+is+bad&quot;&gt;I&amp;#39;ve found&lt;/a&gt;
addressing this subject, authors have said that inheritance may be harmful
to your code, so it&amp;#39;s better not to use it. This &amp;quot;better&amp;quot; part is what bothers me;
does it mean that sometimes inheritance makes sense?
I interviewed &lt;a href=&quot;http://davewest.us/&quot;&gt;David West&lt;/a&gt;
(the author of &lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;Object Thinking&lt;/a&gt;, my favorite book about OOP)
a few weeks ago, and he said that inheritance should not exist in
object-oriented programming at all (&lt;a href=&quot;https://www.youtube.com/watch?v=s-hdZZzMCac&quot;&gt;full video&lt;/a&gt;).
Maybe Dr. West is right and we should totally forget &lt;code&gt;extends&lt;/code&gt; keyword in Java,
for example.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F09%2Fdeath-at-a-funeral.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Death at a Funeral (2007) by Frank Oz&#39;/&gt;&lt;figcaption&gt;Death at a Funeral (2007) by Frank Oz&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I think we should. And I think I know the reason why.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not because we introduce unnecessary coupling, as Allen Holub said in his
&lt;a href=&quot;http://www.javaworld.com/article/2073649/core-java/why-extends-is-evil.html&quot;&gt;Why extends is evil&lt;/a&gt; article.
He was definitely right, but I believe it&amp;#39;s not the root cause of the problem.&lt;/p&gt;

&lt;p&gt;&amp;quot;Inherit&amp;quot;, as an English verb, has a number of meanings.
&lt;a href=&quot;http://www.oxforddictionaries.com/us/definition/american_english/inherit&quot;&gt;This one&lt;/a&gt;
is what inheritance inventors in &lt;a href=&quot;https://en.wikipedia.org/wiki/Simula&quot;&gt;Simula&lt;/a&gt; had in mind, I guess:
&amp;quot;Derive (a quality, characteristic, or predisposition) genetically from one&amp;#39;s parents or ancestors&amp;quot;.&lt;/p&gt;

&lt;p&gt;Deriving a characteristic from another object is a great idea, and it&amp;#39;s called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Subtyping&quot;&gt;subtyping&lt;/a&gt;.
It perfectly fits into OOP and actually enables
&lt;a href=&quot;https://en.wikipedia.org/wiki/Polymorphism_%28computer_science%29&quot;&gt;polymorphism&lt;/a&gt;:
An object of class &lt;code&gt;Article&lt;/code&gt; inherits all characteristics of objects in class &lt;code&gt;Manuscript&lt;/code&gt;
and adds its own. For example, it &lt;em&gt;inherits&lt;/em&gt; an ability to print itself
and &lt;em&gt;adds&lt;/em&gt; an ability to submit itself to a conference:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Manuscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Manuscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is &lt;em&gt;subtyping&lt;/em&gt;, and it&amp;#39;s a perfect technique; whenever a
manuscript is required, we can provide an article and nobody will
notice anything, because type &lt;code&gt;Article&lt;/code&gt; is a subtype of type &lt;code&gt;Manuscript&lt;/code&gt;
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;Liskov substitution principle&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But what does &lt;em&gt;copying&lt;/em&gt; methods and attributes from a parent class to a child
one have to do with &amp;quot;deriving characteristics&amp;quot;? Implementation inheritance
is exactly that &amp;mdash; copying &amp;mdash; and it has nothing to do with the meaning
of the word &amp;quot;inherit&amp;quot; I quoted above.&lt;/p&gt;

&lt;p&gt;Implementation inheritance is much closer to a different
&lt;a href=&quot;http://www.oxforddictionaries.com/us/definition/american_english/inherit&quot;&gt;meaning&lt;/a&gt;:
&amp;quot;Receive (money, property, or a title) as an heir at the death of the previous holder&amp;quot;.
Who is dead, you ask? An object is dead if it allows other objects to
&lt;em&gt;inherit&lt;/em&gt; its encapsulated code and data. This is implementation
inheritance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Manuscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Manuscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Class &lt;code&gt;Article&lt;/code&gt; &lt;strong&gt;copies&lt;/strong&gt; method &lt;code&gt;print()&lt;/code&gt; and attribute &lt;code&gt;body&lt;/code&gt;
from class &lt;code&gt;Manuscript&lt;/code&gt;, as if it&amp;#39;s not a
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;living organism&lt;/a&gt;, but rather a dead
one from which we can inherit its parts, &amp;quot;money, properties, or a title.&amp;quot;&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/266oJr4&#39;&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2015%2F04%2Fbook-object-thinking.jpg&#39; style=&#39;width:96px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Implementation inheritance was created as a mechanism for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_reuse&quot;&gt;code reuse&lt;/a&gt;,
and it doesn&amp;#39;t fit into OOP at all. Yes, it may look convenient in the
beginning, but it is absolutely wrong in terms of &lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;object thinking&lt;/a&gt;.
Just like &lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters and setters&lt;/a&gt;,
implementation inheritance turns
objects into &lt;em&gt;containers&lt;/em&gt; with data and procedures. Of course, it&amp;#39;s
convenient to copy some of those data and procedures to a new object
in order to avoid code duplication. But this is not what objects are about. They
are not dead; they are alive!&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t &lt;strong&gt;kill&lt;/strong&gt; them with inheritance :)&lt;/p&gt;

&lt;p&gt;Thus, I think inheritance is bad because it is a &lt;em&gt;procedural&lt;/em&gt; technique for &lt;em&gt;code reuse&lt;/em&gt;.
It comes as no surprise that it introduces all the problems people have been talking about for years.
Because it is procedural!
That&amp;#39;s why it doesn&amp;#39;t fit into object-oriented programming.&lt;/p&gt;

&lt;p&gt;By the way, we &lt;a href=&quot;https://gitter.im/yegor256/elegantobjects?at=57bcd2e4cd00bdff6e745584&quot;&gt;discussed&lt;/a&gt;
this problem in our
&lt;a href=&quot;https://gitter.im/yegor256/elegantobjects&quot;&gt;Gitter chat&lt;/a&gt;
a week ago, and that&amp;#39;s when it became obvious to me what exactly is
wrong with inheritance. Take a look at our discussion there.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>We all know that
inheritance
is bad and that
composition over inheritance
is a
good idea,
but do we really understand why?
In most all articles
I&amp;#39;ve found
addressing this subject, authors have said that inheritance may be harmful
to your code, so it&amp;#39;s better not to use it. This &amp;quot;better&amp;quot; part is what bothers me;
does it mean that sometimes inheritance makes sense?
I interviewed David West
(the author of Object Thinking, my favorite book about OOP)
a few weeks ago, and he said that inheritance should not exist in
object-oriented programming at all (full video).
Maybe Dr. West is right and we should totally forget extends keyword in Java,
for example.</summary></entry><entry><title>Gradients of Immutability</title><link href="http://www.yegor256.com/2016/09/07/gradients-of-immutability.html" rel="alternate" type="text/html" title="Gradients of Immutability" /><published>2016-09-07T00:00:00+00:00</published><updated>2016-09-07T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/09/07/gradients-of-immutability</id><content type="html" xml:base="http://www.yegor256.com/2016/09/07/gradients-of-immutability.html">&lt;p&gt;Good objects are immutable, but not necessarily constants.
I tried to explain it &lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;/2014/12/09/immutable-object-state-and-behavior.html&quot;&gt;here&lt;/a&gt;, and
&lt;a href=&quot;/2014/12/22/immutable-objects-not-dumb.html&quot;&gt;here&lt;/a&gt;,
but now it&amp;#39;s time to make another attempt. Actually, the more I think about it,
the more I realize that immutability is not black or white &amp;mdash; there
are a few more gradients; let&amp;#39;s take a look.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F09%2Ftwelve-monkeys.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Twelve Monkeys (1995) by Terry Gilliam&#39;/&gt;&lt;figcaption&gt;Twelve Monkeys (1995) by Terry Gilliam&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;As we agreed &lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;here&lt;/a&gt;,
an object is a &lt;strong&gt;representative&lt;/strong&gt; of someone else
(some entity or entities, other object(s), data, memory, files, etc.).
Let&amp;#39;s examine a number of objects that look exactly the same
to us but &lt;strong&gt;represent&lt;/strong&gt; different things, then analyze how
immutable they are and why.&lt;/p&gt;

&lt;h2 id=&quot;constant&quot;&gt;Constant&lt;/h2&gt;

&lt;p&gt;This is &lt;strong&gt;constant&lt;/strong&gt;; it doesn&amp;#39;t allow any modifications
to the encapsulated entity and always returns the same text
(I&amp;#39;ve skipped constructors for the sake of brevity):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is what we usually have in mind when talking about immutable
objects. Such a class is very close to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure function&lt;/a&gt;,
which means that no matter how many times we instantiate it with
the same initial values, the result of &lt;code&gt;title()&lt;/code&gt; will be the same.&lt;/p&gt;

&lt;h2 id=&quot;not-a-constant&quot;&gt;Not a Constant&lt;/h2&gt;

&lt;p&gt;Check out this one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;%s (as of %tR)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The object is still immutable, but it is not a pure
function anymore because of the method &lt;code&gt;title()&lt;/code&gt; &amp;mdash;
it returns different values if we call it
multiple times with at least a one-minute interval. The object
is immutable; it&amp;#39;s just not a constant anymore.&lt;/p&gt;

&lt;h2 id=&quot;represented-mutability&quot;&gt;Represented Mutability&lt;/h2&gt;

&lt;p&gt;How about this one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;StandardOpenOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CREATE&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAllBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;em&gt;immutable&lt;/em&gt; object keeps the book title in a file. It&amp;#39;s not a constant,
because its method &lt;code&gt;title()&lt;/code&gt; may return different values on every
second call. Moreover, the represented entity (the file) is not a constant.
We can&amp;#39;t say whether it&amp;#39;s mutable or immutable, as we don&amp;#39;t know how &lt;code&gt;Files.write()&lt;/code&gt;
is implemented. But we know for sure that it&amp;#39;s not a constant, because it
accepts change requests.&lt;/p&gt;

&lt;h2 id=&quot;encapsulated-mutability&quot;&gt;Encapsulated Mutability&lt;/h2&gt;

&lt;p&gt;An immutable object may not only represent but even
encapsulate a mutable one. Just like in the
previous example, a mutable file was encapsulated. Even though it
was represented by the immutable class &lt;code&gt;Path&lt;/code&gt;, the real file on disk
was mutable. We can do the same, but in memory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The object is still &lt;em&gt;immutable&lt;/em&gt;. Is it thread-safe? No. Is it a constant?
No. Is it immutable? Yes. Confused? You bet.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;My point is that immutability is not &lt;em&gt;binary&lt;/em&gt;; there are many
forms of it. The most simple one is, of course, a
constant. Constants are almost the same as pure functions in functional
programming. But object-oriented programming allows us to take
a few steps forward and give immutable objects more permissions
and flexibility. In OOP, we may have many more forms of immutability.&lt;/p&gt;

&lt;p&gt;What is common among all these examples is that our objects are
&lt;strong&gt;loyal&lt;/strong&gt; to the entities they encapsulate. There are no
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;setters&lt;/a&gt;
that could change them. All encapsulated objects are &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is the only quality that differentiates mutable objects from
immutable ones. The latter are always loyal to the entities they
encapsulate and represent. For all the rest ... it depends.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>Good objects are immutable, but not necessarily constants.
I tried to explain it here,
here, and
here,
but now it&amp;#39;s time to make another attempt. Actually, the more I think about it,
the more I realize that immutability is not black or white &amp;mdash; there
are a few more gradients; let&amp;#39;s take a look.</summary></entry><entry><title>Vertical vs. Horizontal Decomposition of Responsibility</title><link href="http://www.yegor256.com/2016/08/30/decomposition-of-responsibility.html" rel="alternate" type="text/html" title="Vertical vs. Horizontal Decomposition of Responsibility" /><published>2016-08-30T00:00:00+00:00</published><updated>2016-08-30T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/30/decomposition-of-responsibility</id><content type="html" xml:base="http://www.yegor256.com/2016/08/30/decomposition-of-responsibility.html">&lt;p&gt;Objects responsible for too many things are a problem. Because their
complexity is high, they are difficult to maintain and extend.
&lt;strong&gt;Decomposition of responsibility&lt;/strong&gt; is what we do in order to break
these overly complex objects into smaller ones. I see two types of this
refactoring operation: vertical and horizontal. And I believe
the former is better than the latter.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Fonce-upon-a-time-in-america.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Once Upon a Time in America (1984) by Sergio Leone&#39;/&gt;&lt;figcaption&gt;Once Upon a Time in America (1984) by Sergio Leone&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s say this is our code (it is Ruby):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%d/%m/%Y %H:%M &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Obviously, objects of this class are doing too much.
They save log lines to the
file and also format them &amp;mdash; an obvious violation of
a famous
&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;.
An object of this class would be &lt;strong&gt;responsible&lt;/strong&gt; for too many things.
We have to extract some functionality out of it and put that
into another object(s). We have to &lt;strong&gt;decompose&lt;/strong&gt; its responsibility.
No matter where we put it, this is how the
&lt;code&gt;Log&lt;/code&gt; class will look after the extraction:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now it only saves lines to the file, which is perfect. The class
is cohesive and small. Let&amp;#39;s make an instance of it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/tmp/log.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, where do we put the lines with formatting functionality that were just extracted?
There are two approaches to decompose responsibility: horizontal and
vertical. This one is &lt;strong&gt;horizontal&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Line&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%d/%m/%Y %H:%M &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to use &lt;code&gt;Log&lt;/code&gt; and &lt;code&gt;Line&lt;/code&gt; together, we have to do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See why it&amp;#39;s horizontal? Because this script sees them
both. They both are on the same level of visibility. We will always have
to communicate with both of them when we want to log a line. Both
objects of &lt;code&gt;Log&lt;/code&gt; and &lt;code&gt;Line&lt;/code&gt; are in front of us. We have to deal with
two classes in order to log a line:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/uml/653125b6c32d12b7325dba52054c09ca.svg&#39; style=&quot;width:30%&quot;
        alt=&#39;PlantUML SVG diagram&#39; class=&#39;plantuml&#39;/&gt;&lt;/p&gt;

&lt;p&gt;To the contrary, this decomposition of responsibility is &lt;strong&gt;vertical&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimedLog&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%d/%m/%Y %H:%M &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Class &lt;code&gt;TimedLog&lt;/code&gt; is a decorator, and this is how we use them together:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TimedLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, we just put a line in the log:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The responsibility is decomposed vertically. We still have one entry point
into the &lt;code&gt;log&lt;/code&gt; object, but the object &amp;quot;consists&amp;quot; of two objects, one wrapped
into another:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/uml/cad4de541e1ab10d3d9d751c661fe63f.svg&#39; style=&quot;width:20%&quot;
        alt=&#39;PlantUML SVG diagram&#39; class=&#39;plantuml&#39;/&gt;&lt;/p&gt;

&lt;p&gt;In general, I think horizontal decomposition of responsibility is a bad idea,
while vertical is a much better one. That&amp;#39;s because a vertically
decomposed object decreases complexity, while a horizontally decomposed
one actually makes things more complex because its clients have to deal with
more dependencies and more points of contact.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>Objects responsible for too many things are a problem. Because their
complexity is high, they are difficult to maintain and extend.
Decomposition of responsibility is what we do in order to break
these overly complex objects into smaller ones. I see two types of this
refactoring operation: vertical and horizontal. And I believe
the former is better than the latter.</summary></entry><entry><title>Eight Levels of Communication Maturity</title><link href="http://www.yegor256.com/2016/08/23/communication-maturity.html" rel="alternate" type="text/html" title="Eight Levels of Communication Maturity" /><published>2016-08-23T00:00:00+00:00</published><updated>2016-08-23T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/23/communication-maturity</id><content type="html" xml:base="http://www.yegor256.com/2016/08/23/communication-maturity.html">&lt;p&gt;Each software team organizes its communications in its own
specific way. Some use Slack, Trello, or GitHub; others just sit together
in the same room. There are many methods and tools. I believe
it&amp;#39;s possible to rank them by the amount of &lt;strong&gt;damage&lt;/strong&gt; they cause
to your project. This is the list of all of them I&amp;#39;m aware of at the moment.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Fschizopolis.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Schizopolis (1996) by Steven Soderbergh&#39;/&gt;&lt;figcaption&gt;Schizopolis (1996) by Steven Soderbergh&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The damage I&amp;#39;m talking about is caused mostly by the distance between these communication
channels and project artifacts. The farther away people stay from documents,
the bigger the risk of &lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;losing information&lt;/a&gt;.
And lost information is the first source of trouble in any project.&lt;/p&gt;

&lt;p&gt;Here is the list; it starts with the most damaging communication means
and goes down to the most &lt;strong&gt;mature&lt;/strong&gt; and professional ones, which cause the
least amount of trouble:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Coffee Breaks&lt;/strong&gt;.
This is the most dangerous thing &amp;mdash; you can never
keep track of them, you won&amp;#39;t know what they were about, and there
is no &amp;quot;search&amp;quot; button anywhere. Everything you say standing next
to that coffee machine will be lost. Nothing will be converted
to project artifacts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Phone Calls&lt;/strong&gt;.
A bit better than coffee breaks but still a big issue. Phone calls
are completely untraceable. Information you
exchange on those calls is gone forever. Well, you can record them,
but searching through phone call records is a tough task that nobody will
do, ever.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Meetings&lt;/strong&gt;.
This is the next step after coffee breaks, because there is some structure
and minutes. Meetings can be recorded (both on and offline), with their results filed somewhere
and decisions documented. In reality, none of that will actually happen.
Meetings will just kill your time and your sponsor&amp;#39;s money.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Emails&lt;/strong&gt;.
If you can put some formality into emails and discipline all participants,
your email history may be considered a project artifact in itself. How
organized and easily browseable will that artifact be? That&amp;#39;s a good question.
In most cases, it will just be a mess.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mailing Lists&lt;/strong&gt;.
They are better than emails, because some software is archiving them and
making them available and browseable. But it will be difficult to find where
exactly what topic was discussed, where decisions were made and why,
who suggested what, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Slack&lt;/strong&gt;.
There are many similar alternatives that are basically online chats.
The main problem with all of them is that it&amp;#39;s difficult to categorize
such a chat, group messages together, or find something later. It&amp;#39;s merely a flow
of information that becomes useless just a few days after. Of course,
if you really want to find something there, it&amp;#39;s possible. But the quality
of such a &amp;quot;document&amp;quot; is very low.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Trello&lt;/strong&gt;.
By Trello I mean any task/ticket tracking system &amp;mdash; they are great instruments
to immediately turn conversations and discussions into project artifacts.
You don&amp;#39;t need to document anything; it&amp;#39;s already there. The problem is
that they are still rather far away from the main project artifact:
the source code with its commits, merge conflicts, build logs, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt;.
This is the best instrument you can use. It integrates communications
with the product itself. The code you write and the discussions you
have around it are literally in the same place.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which one of these is your project using right now? I would strongly recommend
you stay away from communication channels at the top of this list.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><summary>Each software team organizes its communications in its own
specific way. Some use Slack, Trello, or GitHub; others just sit together
in the same room. There are many methods and tools. I believe
it&amp;#39;s possible to rank them by the amount of damage they cause
to your project. This is the list of all of them I&amp;#39;m aware of at the moment.</summary></entry><entry><title>What’s Wrong With Object-Oriented Programming?</title><link href="http://www.yegor256.com/2016/08/15/what-is-wrong-object-oriented-programming.html" rel="alternate" type="text/html" title="What&#39;s Wrong With Object-Oriented Programming?" /><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/15/what-is-wrong-object-oriented-programming</id><content type="html" xml:base="http://www.yegor256.com/2016/08/15/what-is-wrong-object-oriented-programming.html">&lt;p&gt;Recently, I was trying to convince a few of my readers that
&lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;a better understanding of an object&lt;/a&gt;
in OOP would help us solve many problems in existing pseudo-object-oriented languages.
Then, suddenly, the question came up: &amp;quot;&lt;strong&gt;What problems?&lt;/strong&gt;&amp;quot;
I was puzzled. I thought it was obvious that the vast majority of modern software
written in modern OO languages is unmaintainable and simply a mess.
So I Googled a bit, and this is what I found (in chronological order).&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Fswingers.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Swingers (1996) by Doug Liman&#39;/&gt;&lt;figcaption&gt;Swingers (1996) by Doug Liman&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The list of quotes is sorted in chronological order, with the oldest on
the top:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/edsger-dijkstra.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Edsger_W._Dijkstra&quot;&gt;&lt;strong&gt;Edsger W. Dijkstra&lt;/strong&gt;&lt;/a&gt; (1989)&lt;br/&gt;
&amp;quot;TUG LINES&amp;quot;, Issue 32, August 1989&lt;br/&gt;
&amp;quot;Object oriented programs are offered as alternatives to correct ones&amp;quot;
and
&amp;quot;Object-oriented programming is an exceptionally bad idea
which could only have originated in California.&amp;quot;&lt;/p&gt;

&lt;!-- 1995 --&gt;

&lt;!--
[Paul Graham](https://en.wikipedia.org/wiki/Paul_Graham_%28computer_programmer%29)
in [Ansi Common Lisp](http://amzn.to/29JwmOz), page 408:
&quot;The object-oriented model makes it easy to build up programs
by accretion. What this often means, in practice, is that it
provides a structured way to write spaghetti code.&quot;
--&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/alan-kay.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Alan_Kay&quot;&gt;&lt;strong&gt;Alan Kay&lt;/strong&gt;&lt;/a&gt; (1997)&lt;br/&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=oKg1hTOQXoY&quot;&gt;The Computer Revolution hasn&amp;#39;t happened yet&lt;/a&gt;&lt;br/&gt;
&amp;quot;I invented the term object-oriented, and I can tell you
I did not have C++ in mind.&amp;quot; and
&amp;quot;Java and C++ make you think that the new ideas are like the old ones.
Java is the most distressing thing to happen to computing since MS-DOS.&amp;quot;
(&lt;a href=&quot;http://www.cc.gatech.edu/fac/mark.guzdial/squeak/oopsla.html&quot;&gt;proof&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/paul-graham.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Paul_Graham_%28computer_programmer%29&quot;&gt;&lt;strong&gt;Paul Graham&lt;/strong&gt;&lt;/a&gt; (2003)&lt;br/&gt;
&lt;a href=&quot;http://www.paulgraham.com/hundred.html&quot;&gt;The Hundred-Year Language&lt;/a&gt;&lt;br/&gt;
&amp;quot;Object-oriented programming offers a sustainable way to write spaghetti code.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/richard-mansfield.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;strong&gt;Richard Mansfield&lt;/strong&gt; (2005)&lt;br/&gt;
&lt;a href=&quot;http://www.4js.com/files/documents/products/genero/WhitePaperHasOOPFailed.pdf&quot;&gt;Has OOP Failed?&lt;/a&gt;&lt;br/&gt;
&amp;quot;With OOP-inflected programming languages, computer software becomes more
verbose, less readable, less descriptive, and harder to modify and maintain.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/eric-raymond.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.catb.org/esr/&quot;&gt;&lt;strong&gt;Eric Raymond&lt;/strong&gt;&lt;/a&gt; (2005)&lt;br/&gt;
&lt;a href=&quot;http://catb.org/esr/writings/taoup/html/unix_and_oo.html&quot;&gt;The Art of UNIX Programming&lt;/a&gt;&lt;br/&gt;
&amp;quot;The OO design concept initially proved valuable in the design of graphics
systems, graphical user interfaces, and certain kinds of simulation.
To the surprise and gradual disillusionment of many, it has proven
difficult to demonstrate significant benefits of OO outside those areas.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/jeff-atwood.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://blog.codinghorror.com/&quot;&gt;&lt;strong&gt;Jeff Atwood&lt;/strong&gt;&lt;/a&gt; (2007)&lt;br/&gt;
&lt;a href=&quot;https://blog.codinghorror.com/your-code-oop-or-poo/&quot;&gt;Your Code: OOP or POO?&lt;/a&gt;&lt;br/&gt;
&amp;quot;OO seems to bring at least as many problems to the table as it solves.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/linus-torvalds.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linus_Torvalds&quot;&gt;&lt;strong&gt;Linus Torvalds&lt;/strong&gt;&lt;/a&gt; (2007)&lt;br/&gt;
&lt;a href=&quot;http://article.gmane.org/gmane.comp.version-control.git/57918/&quot;&gt;this email&lt;/a&gt;&lt;br/&gt;
&amp;quot;C++ is a horrible language. ...
C++ leads to really, really bad design choices. ...
In other words, the only way to do good, efficient, and system-level and
portable C++ ends up to limit yourself to all the things that are
basically available in C. And limiting your project to C means that people
don&amp;#39;t screw that up, and also means that you get a lot of programmers that
do actually understand low-level issues and don&amp;#39;t screw things up with any
idiotic &amp;#39;object model&amp;#39; crap.&amp;quot;&lt;/p&gt;

&lt;!-- 2009 --&gt;

&lt;!--
[Rich Hickey](https://github.com/richhickey)
at [Are We There Yet?](https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey), JVM Languages Summit 2009 Keynote:
&quot;...&quot;
--&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/oscar-nierstrasz.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Oscar_Nierstrasz&quot;&gt;&lt;strong&gt;Oscar Nierstrasz&lt;/strong&gt;&lt;/a&gt; (2010)&lt;br/&gt;
&lt;a href=&quot;http://blog.jot.fm/2010/08/26/ten-things-i-hate-about-object-oriented-programming&quot;&gt;Ten Things I Hate About Object-Oriented Programming&lt;/a&gt;&lt;br/&gt;
&amp;quot;OOP is about taming complexity through modeling, but we have not
mastered this yet, possibly because we have difficulty distinguishing
real and accidental complexity.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/rich-hickey.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/richhickey&quot;&gt;&lt;strong&gt;Rich Hickey&lt;/strong&gt;&lt;/a&gt; (2010)&lt;br/&gt;
&lt;a href=&quot;http://www.se-radio.net/2010/03/episode-158-rich-hickey-on-clojure/&quot;&gt;SE Radio, Episode 158&lt;/a&gt;&lt;br/&gt;
&amp;quot;I think that large objected-oriented programs struggle
with increasing complexity as you build this large object graph of
mutable objects. You know, trying to understand and keep in your mind
what will happen when you call a method and what will the side effects be.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/eric-allman.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Eric_Allman&quot;&gt;&lt;strong&gt;Eric Allman&lt;/strong&gt;&lt;/a&gt; (2011)&lt;br/&gt;
&lt;a href=&quot;http://queue.acm.org/blogposting.cfm?id=34658&quot;&gt;Programming Isn&amp;#39;t Fun Any More&lt;/a&gt;&lt;br/&gt;
&amp;quot;I used to be enamored of object-oriented programming. I&amp;#39;m now finding myself
leaning toward believing that it is a plot designed to destroy joy. The
methodology looks clean and elegant at first, but when you actually get
into real programs they rapidly turn into horrid messes.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/joe-armstrong.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;http://joearms.github.io/&quot;&gt;&lt;strong&gt;Joe Armstrong&lt;/strong&gt;&lt;/a&gt; (2011)&lt;br/&gt;
&lt;a href=&quot;http://harmful.cat-v.org/software/OO_programming/why_oo_sucks&quot;&gt;Why OO Sucks&lt;/a&gt;&lt;br/&gt;
&amp;quot;Objects bind functions and data structures together in
indivisible units. I think this is a fundamental error since functions and
data structures belong in totally different worlds.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/rob-pike.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Rob_Pike&quot;&gt;&lt;strong&gt;Rob Pike&lt;/strong&gt;&lt;/a&gt; (2012)&lt;br/&gt;
&lt;a href=&quot;https://plus.google.com/+RobPikeTheHuman/posts/hoJdanihKwb&quot;&gt;here&lt;/a&gt;&lt;br/&gt;
&amp;quot;Object-oriented programming, whose essence is nothing more than
programming using data with associated behaviors, is a powerful idea.
It truly is. But it&amp;#39;s not always the best idea. ...
Sometimes data is just data and functions are just functions.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/john-barker.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://www.linkedin.com/in/johnebgood&quot;&gt;&lt;strong&gt;John Barker&lt;/strong&gt;&lt;/a&gt; (2013)&lt;br/&gt;
&lt;a href=&quot;https://blog.pivotal.io/labs/labs/all-evidence-points-to-oop-being-bullshit&quot;&gt;All evidence points to OOP being bullshit&lt;/a&gt;&lt;br/&gt;
&amp;quot;What OOP introduces are abstractions that attempt to improve code
sharing and security. In many ways, it is still essentially procedural code.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/lawrence-krubner.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://www.linkedin.com/in/krubner&quot;&gt;&lt;strong&gt;Lawrence Krubner&lt;/strong&gt;&lt;/a&gt; (2014)&lt;br/&gt;
&lt;a href=&quot;http://www.smashcompany.com/technology/object-oriented-programming-is-an-expensive-disaster-which-must-end&quot;&gt;Object Oriented Programming is an expensive disaster which must end&lt;/a&gt;&lt;br/&gt;
&amp;quot;We now know that OOP is an experiment that failed.
It is time to move on. It is time that we, as a community, admit that
this idea has failed us, and we must give up on it.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/asaf-shelly.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://www.linkedin.com/in/asafshelly&quot;&gt;&lt;strong&gt;Asaf Shelly&lt;/strong&gt;&lt;/a&gt; (2015)&lt;br/&gt;
&lt;a href=&quot;https://software.intel.com/en-us/blogs/2008/08/22/flaws-of-object-oriented-modeling/&quot;&gt;Flaws of Object Oriented Modeling&lt;/a&gt;&lt;br/&gt;
&amp;quot;Reading an object oriented code you can&amp;#39;t see the big picture and
it is often impossible to review all the small functions that
call the one function that you modified.&amp;quot;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;If you have something to add to this list, please post a comment below.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>Recently, I was trying to convince a few of my readers that
a better understanding of an object
in OOP would help us solve many problems in existing pseudo-object-oriented languages.
Then, suddenly, the question came up: &amp;quot;What problems?&amp;quot;
I was puzzled. I thought it was obvious that the vast majority of modern software
written in modern OO languages is unmaintainable and simply a mess.
So I Googled a bit, and this is what I found (in chronological order).</summary></entry><entry><title>If-Then-Else Is a Code Smell</title><link href="http://www.yegor256.com/2016/08/10/if-then-else-code-smell.html" rel="alternate" type="text/html" title="If-Then-Else Is a Code Smell" /><published>2016-08-10T00:00:00+00:00</published><updated>2016-08-10T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/10/if-then-else-code-smell</id><content type="html" xml:base="http://www.yegor256.com/2016/08/10/if-then-else-code-smell.html">&lt;p&gt;In most cases (maybe even in all of them), if-then-else can and must
be replaced by a decorator or simply another object.
I&amp;#39;ve been planning to write about this for almost a year but only today found
a real case in my own code that perfectly
illustrates the problem. So it&amp;#39;s time to demonstrate it and explain.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Ffargo.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Fargo (1996) by Coen Brothers&#39;/&gt;&lt;figcaption&gt;Fargo (1996) by Coen Brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Take a look at the class
&lt;a href=&quot;https://github.com/yegor256/rultor/blob/1.61.9/src/main/java/com/rultor/dynamo/DyTalk.java&quot;&gt;&lt;code&gt;DyTalk&lt;/code&gt;&lt;/a&gt;
from
&lt;a href=&quot;https://github.com/yegor256/rultor&quot;&gt;yegor256/rultor&lt;/a&gt;
and its method
&lt;a href=&quot;https://github.com/yegor256/rultor/blob/1.61.9/src/main/java/com/rultor/dynamo/DyTalk.java#L127-L169&quot;&gt;&lt;code&gt;modify()&lt;/code&gt;&lt;/a&gt;.
In a nutshell, it prevents you from saving any data to the DynamoDB if there were no
modifications of the XML document. It&amp;#39;s a valid case, and it has to be
validated, but the way it&amp;#39;s implemented is simply wrong. This is
how it works (an oversimplified example):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DyTalk&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Talk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Directive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Apply the modification&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// and save the new XML document&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// to the DynamoDB table.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What&amp;#39;s wrong, you wonder? This if-then-else forking functionality doesn&amp;#39;t really belong
to this object &amp;mdash; that&amp;#39;s what&amp;#39;s wrong. Modifying the XML document
and saving it to the database is &lt;em&gt;its functionality&lt;/em&gt;, while
not saving anything if the modification instructions set is empty is not
(it&amp;#39;s very similar to &lt;a href=&quot;/2016/01/26/defensive-programming.html&quot;&gt;defensive programming&lt;/a&gt;).
Instead, there should be a decorator, which would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickTalk&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Talk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Talk&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Directive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, if and when we need our talk to be more clever in situations where
the list of directives is empty, we decorate it with &lt;code&gt;QuickTalk&lt;/code&gt;.
The benefits are obvious: the &lt;code&gt;DyTalk&lt;/code&gt; class is smaller and therefore
more cohesive.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;If it&amp;#39;s possible to convert if-then-else forking to a decorator, it has to be done&lt;/aside&gt;

&lt;p&gt;But the question is bigger than just that. Can we make a rule out of it? Can we say that
&lt;strong&gt;each and every forking&lt;/strong&gt; is bad and should be moved out of a class? What about
forking that happens inside a method and can&amp;#39;t be converted to a decorator?&lt;/p&gt;

&lt;p&gt;I&amp;#39;m suggesting this simple rule: If it&amp;#39;s possible to convert if-then-else forking
to a decorator, it has to be done. If it&amp;#39;s not done, it&amp;#39;s a code smell.
Make sense?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>In most cases (maybe even in all of them), if-then-else can and must
be replaced by a decorator or simply another object.
I&amp;#39;ve been planning to write about this for almost a year but only today found
a real case in my own code that perfectly
illustrates the problem. So it&amp;#39;s time to demonstrate it and explain.</summary></entry><entry><title>A Distributed Team Delivers Code of Higher Quality</title><link href="http://www.yegor256.com/2016/08/05/distributed-teams-are-higher-quality.html" rel="alternate" type="text/html" title="A Distributed Team Delivers Code of Higher Quality" /><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/05/distributed-teams-are-higher-quality</id><content type="html" xml:base="http://www.yegor256.com/2016/08/05/distributed-teams-are-higher-quality.html">&lt;p&gt;OK, the title is not exactly accurate. I&amp;#39;ve missed the &amp;quot;can&amp;quot; word. A distributed
team &lt;strong&gt;can&lt;/strong&gt; deliver code of much higher quality than a co-located one,
and now I&amp;#39;ll explain why. Of course, not every distributed team can do that.
Most of them can&amp;#39;t even deliver code that works, let alone quality code.
But if a team &amp;mdash; a distributed one &amp;mdash; is managed according to the principles
I&amp;#39;ll explain now, the quality will be much higher than the same team can
achieve if co-located. What I&amp;#39;m going to show you is that working in a
remote mode, if done right, &lt;strong&gt;guarantees&lt;/strong&gt; higher quality of code. Surprised?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Foceans-twelve.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Ocean&amp;amp;apos;s Twelve (2004) by Steven Soderbergh&#39;/&gt;&lt;figcaption&gt;Ocean&amp;#39;s Twelve (2004) by Steven Soderbergh&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are basically four simple ingredients to success ... you know what, there is
actually &lt;em&gt;one&lt;/em&gt; main ingredient, and its name is &lt;strong&gt;control&lt;/strong&gt;. If we want quality
to be at some level, we have to &lt;strong&gt;enforce&lt;/strong&gt; it. We can&amp;#39;t just declare it; we
need to &lt;strong&gt;make&lt;/strong&gt; it high.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Quality can be achieved only if it is controlled and enforced&lt;/aside&gt;

&lt;p&gt;How do software teams make high-quality code? Oh, there are many proven methods.
First, you need a very modern office where &lt;del&gt;programmers&lt;/del&gt; developers
sit on cushioned chairs, play table tennis, drink smoothies, and write
diagrams on walls. Second, you should buy them many books. Books have to be
everywhere in the office, and they have to be about everything from Python
and Haskell to Docker, Agile, and lean startups. The more books, the higher
the quality of the code they write. And third, you have to pay them well. The
more expensive the developer is, the higher the quality he or she writes.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m sure you understand that I&amp;#39;m joking. None of these &amp;quot;proven methods&amp;quot; will either
guarantee quality or motivate serious software engineers. Quality can
be achieved only if it is &lt;strong&gt;controlled and enforced&lt;/strong&gt;. And this is also what
motivates programmers best of all &amp;mdash; the fact that the quality
is so important for management that they find mechanisms of
control and enforcement, and they invest in them. Table tennis and lean
startup books are not even close to those mechanisms.&lt;/p&gt;

&lt;p&gt;So, now let&amp;#39;s discuss those four ingredients of quality enforcement, which
we practice in our projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read-Only Master Branch&lt;/strong&gt;. Nobody can make changes directly to
the master branch; neither the architect nor the project sponsor. The
master branch is technically read-only. This means that in order
to compromise the quality of our code, everyone has to go through a
pull request, pre-flight build, and automated merge procedure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chats Are Prohibited&lt;/strong&gt;. Any modification to our code base, even a very small one,
must be submitted in a pull request. A code review
must also occur in the pull request. We strictly disallow any
&lt;a href=&quot;/2016/08/23/communication-maturity.html&quot;&gt;informal communications&lt;/a&gt;
between programmers, including chats, phone
calls, emails, or face-to-face discussions. This means that the chances
of quality compromises due to friendship, informal agreements, and trade-offs
are very low.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Build Is Fragile&lt;/strong&gt;. We believe that the higher the quality bar, the more
difficult it is to modify any piece of code without breaking the build.
We put a lot of quality checks right into the build to make the lives
of programmers more difficult. Well, this is not our goal, but it
happens. The code has to pass all static analysis
checks, a test coverage threshold, mutability threshold, and many others.
This means that bad code won&amp;#39;t reach the repo, ever.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Micro Payments for Deliverables&lt;/strong&gt;. We pay only for closed tickets, and
they are each very small (up to two hours). We don&amp;#39;t pay for time spent
in the office or in front of the computer. We pay only when tickets
are closed &amp;mdash; no close, no pay. This means that programmers are motivated
to &lt;strong&gt;close&lt;/strong&gt; them, nothing else.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, as you can see, there is an intentionally created conflict. On one hand,
programmers have to close tickets and deliver working code. On the other
hand, it&amp;#39;s rather difficult to do; because the quality bar is high, there is
no room to make compromises, and there is no technical possibility to
go around an issue. Good programmers survive in this conflict and manage to deliver
and get paid. Well-paid.&lt;/p&gt;

&lt;p&gt;And now, to the main point of this blog post &amp;mdash; do you think it&amp;#39;s possible
to build all that in a co-located team? I don&amp;#39;t think so. First of all,
you won&amp;#39;t be able to prohibit
&lt;a href=&quot;/2016/08/23/communication-maturity.html&quot;&gt;informal communications&lt;/a&gt;. No matter how many
times you ask developers to communicate in tickets, they will resolve
most of their technical questions face-to-face. It&amp;#39;s inevitable.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;People are people; nobody likes to hit that quality bar multiple times a day&lt;/aside&gt;

&lt;p&gt;Second, you won&amp;#39;t be able to pay for results only, because programmers will
complain that they are doing a lot of communication in the office that
has to be paid somehow. In reality, they will spend two to three hours per day on
actually writing code, and the rest of the time will be spent on
coffee breaks, Trump talks, and Facebook scrolling. Again, it&amp;#39;s
inevitable.&lt;/p&gt;

&lt;p&gt;And third, people are people. Nobody likes to hit that quality bar
multiple times a day. They will complain, and eventually you will give them
direct access to the master branch. First, you will give it to the architect,
then to a few senior developers, then to a few good friends who you
absolutely trust. Then to everybody, just in case. It&amp;#39;s inevitable.&lt;/p&gt;

&lt;p&gt;To summarize, I believe that co-located teams are just not made for
quality programming. For fun &amp;mdash; yes. For creativity &amp;mdash; maybe.
For burning investors&amp;#39; money &amp;mdash; absolutely. For quality &amp;mdash; not really.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><summary>OK, the title is not exactly accurate. I&amp;#39;ve missed the &amp;quot;can&amp;quot; word. A distributed
team can deliver code of much higher quality than a co-located one,
and now I&amp;#39;ll explain why. Of course, not every distributed team can do that.
Most of them can&amp;#39;t even deliver code that works, let alone quality code.
But if a team &amp;mdash; a distributed one &amp;mdash; is managed according to the principles
I&amp;#39;ll explain now, the quality will be much higher than the same team can
achieve if co-located. What I&amp;#39;m going to show you is that working in a
remote mode, if done right, guarantees higher quality of code. Surprised?</summary></entry><entry><title>8+2 Maturity Levels of Continuous Integration</title><link href="http://www.yegor256.com/2016/08/01/continuous-integration-maturity.html" rel="alternate" type="text/html" title="8+2 Maturity Levels of Continuous Integration" /><published>2016-08-01T00:00:00+00:00</published><updated>2016-08-01T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/01/continuous-integration-maturity</id><content type="html" xml:base="http://www.yegor256.com/2016/08/01/continuous-integration-maturity.html">&lt;p&gt;There are a number of levels you have to go through before your
continuous integration pipeline becomes perfect. I found eight of
them and presented my findings at &lt;a href=&quot;http://slcdevopsdays.org/cr3ativconference/continuous-integration-may-have-negative-effects/&quot;&gt;DevOpsDays&lt;/a&gt;
in Salt Lake City a few weeks ago
(watch the &lt;a href=&quot;https://www.youtube.com/watch?v=3dJP_LtUGgg&quot;&gt;video&lt;/a&gt;).
Now it&amp;#39;s time to write them down and ask
you &amp;mdash; Which level are you at? Post your answer below.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Ftwins.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Twins (1988) by Ivan Reitman&#39;/&gt;&lt;figcaption&gt;Twins (1988) by Ivan Reitman&lt;/figcaption&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;.
Here you just write source code on your computers and maybe somewhere on
the server. The best you can do here is to build it manually, say,
every day. Is it continuous integration? Well, to some extent, provided
you don&amp;#39;t forget to compile and package everything regularly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automated Build&lt;/strong&gt;.
At this level, your build is automated, which means you can compile,
test, and package the entire product with just one line at the command line.
Pay attention; one line. You must be able to hit one button and either
get an error or a successful build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;.
At this level, you keep your source code in Git. You can keep it in some
other source control system, but that would be strange &amp;mdash; Git is the
&lt;em&gt;status quo&lt;/em&gt; at the moment. You should be able to get a new computer,
with nothing in it, check out the source code from a Git repository, and
run a full build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pull Requests&lt;/strong&gt;.
Each and every change to your source code must be submitted through
a pull request, which means that you host your repository on GitHub. You
may host it somewhere else, but again, that would be strange because
GitHub is the &lt;em&gt;status quo&lt;/em&gt; at the moment. Again, nobody should be able to commit
anything directly to the
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;master branch&lt;/a&gt;
except through forks and pull requests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Reviews&lt;/strong&gt;.
Every pull request must pass a mandatory
&lt;a href=&quot;/2015/02/09/serious-code-reviewer.html&quot;&gt;code review&lt;/a&gt;
before it gets merged.
You must have some code review policy that explains who does reviews,
what happens if the author doesn&amp;#39;t agree with the reviewer, etc. But no
pull request may be merged unless it has been reviewed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tests&lt;/strong&gt;.
At this level, your code is covered by unit tests (and integration tests), and every change
comes with a new test. Your automated build runs all tests together and fails
if any of them fail.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;.
Checking the &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality&lt;/a&gt;
of your code without running it is what static analysis
is about. At this level, the quality of your code is checked by the automated
build. If the quality is lower than the threshold, the build fails.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pre-Flight Builds&lt;/strong&gt;.
This idea is explained
&lt;a href=&quot;/2014/10/08/continuous-integration-is-dead.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Production Simulation&lt;/strong&gt;. The build is run in a container, which
simulates production environment and data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stress Tests&lt;/strong&gt;. Performance and stress tests are automated and executed
on every build.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By the way, at the &lt;a href=&quot;https://www.youtube.com/watch?v=3dJP_LtUGgg&quot;&gt;presentation&lt;/a&gt;,
I also mentioned what problems you may encounter at each maturity level.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="devops" /><summary>There are a number of levels you have to go through before your
continuous integration pipeline becomes perfect. I found eight of
them and presented my findings at DevOpsDays
in Salt Lake City a few weeks ago
(watch the video).
Now it&amp;#39;s time to write them down and ask
you &amp;mdash; Which level are you at? Post your answer below.</summary></entry><entry><title>ActiveRecord Is Even Worse Than ORM</title><link href="http://www.yegor256.com/2016/07/26/active-record.html" rel="alternate" type="text/html" title="ActiveRecord Is Even Worse Than ORM" /><published>2016-07-26T00:00:00+00:00</published><updated>2016-07-26T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/26/active-record</id><content type="html" xml:base="http://www.yegor256.com/2016/07/26/active-record.html">&lt;p&gt;You probably remember what &lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;I think&lt;/a&gt;
about ORM, a very popular design pattern. In a nutshell,
it encourages us to turn objects into
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTOs&lt;/a&gt;, which are
anemic, passive, and not objects at all. The consequences are usually dramatic &amp;mdash;
the entire programming paradigm shifts from object-oriented to procedural.
I&amp;#39;ve tried to explain this at a &lt;a href=&quot;https://www.youtube.com/watch?v=aER4uwyFbqQ&quot;&gt;JPoint&lt;/a&gt; and
&lt;a href=&quot;https://www.youtube.com/watch?v=63tS3HNmhiE&quot;&gt;JEEConf&lt;/a&gt; this year. After
each talk, a few people told me that what I&amp;#39;m suggesting is called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Active_record_pattern&quot;&gt;ActiveRecord&lt;/a&gt; or
&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff649690.aspx&quot;&gt;Repository&lt;/a&gt; patterns.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fen-duva-satt-pa-engren.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;En duva satt på en gren och funderade på tillvaron (2014) by Roy Andersson&#39;/&gt;&lt;figcaption&gt;En duva satt på en gren och funderade på tillvaron (2014) by Roy Andersson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Moreover, they claimed that ActiveRecord actually solves the problem
I&amp;#39;ve found in ORM. They said I should explain in my talks that
what I&amp;#39;m offering (SQL-speaking objects) already exists and has a name:
ActiveRecord.&lt;/p&gt;

&lt;p&gt;I disagree. Moreover, I think that ActiveRecord is even worse than ORM.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;What&amp;#39;s even worse in ActiveRecord is that it hides the fact that objects are data containers&lt;/aside&gt;

&lt;p&gt;ORM consists of two parts: the session and
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTOs&lt;/a&gt;, also known as &amp;quot;entities&amp;quot;.
The entities have no functionality; they are just primitive containers for the
data transferred from and to the session. And that is what the problem is &amp;mdash;
objects don&amp;#39;t encapsulate but rather expose data. To understand why this is wrong and why it&amp;#39;s
against the object paradigm, you can read
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;here&lt;/a&gt;, and
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;here&lt;/a&gt;.
Now, let&amp;#39;s just agree that it&amp;#39;s very wrong and move on.&lt;/p&gt;

&lt;p&gt;What solution is ActiveRecord proposing? How is it solving the problem?
It moves the engine into the &lt;strong&gt;parent class&lt;/strong&gt;, which all our entities inherit from.
This is how we were supposed to save our entity to the database in the ORM
scenario (pseudo-code):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Java in a Nutshell&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this is what we do with an ActiveRecord:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Java in a Nutshell&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The method &lt;code&gt;update()&lt;/code&gt; is defined in book&amp;#39;s parent class and uses
book as a &lt;strong&gt;data container&lt;/strong&gt;. When called, it fetches data
from the container (the book) and updates the database. How is it
different than ORM? There is absolutely no difference. The book
is still a container that knows nothing about SQL and any persistence
mechanisms.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s even worse in ActiveRecord, compared to ORM, is that it &lt;strong&gt;hides&lt;/strong&gt;
the fact that objects are data containers. A book, in the second snippet,
&lt;strong&gt;pretends&lt;/strong&gt; to be a &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;proper object&lt;/a&gt;,
while in reality it&amp;#39;s just a dumb data bag.&lt;/p&gt;

&lt;p&gt;I believe this is what misguided those who were saying
that my SQL-speaking objects concept is exactly the same as the ActiveRecord
design pattern (or Repository, which is almost exactly the same).&lt;/p&gt;

&lt;p&gt;No, it&amp;#39;s not.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>You probably remember what I think
about ORM, a very popular design pattern. In a nutshell,
it encourages us to turn objects into
DTOs, which are
anemic, passive, and not objects at all. The consequences are usually dramatic &amp;mdash;
the entire programming paradigm shifts from object-oriented to procedural.
I&amp;#39;ve tried to explain this at a JPoint and
JEEConf this year. After
each talk, a few people told me that what I&amp;#39;m suggesting is called
ActiveRecord or
Repository patterns.</summary></entry><entry><title>Convince Me!</title><link href="http://www.yegor256.com/2016/07/21/convince-me.html" rel="alternate" type="text/html" title="Convince Me!" /><published>2016-07-21T00:00:00+00:00</published><updated>2016-07-21T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/21/convince-me</id><content type="html" xml:base="http://www.yegor256.com/2016/07/21/convince-me.html">&lt;p&gt;I&amp;#39;ve already explained how I understand
the &lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;role&lt;/a&gt;
and &lt;a href=&quot;/2015/05/11/software-architect-responsibilities.html&quot;&gt;responsibilities&lt;/a&gt;
of a software architect.
But one question still remains unanswered, and it often turns into a problem
in our projects: What does a software architect do when the project
sponsor doesn&amp;#39;t like his technical decisions? The architect implements
something in a certain way, and the sponsor (or its representative) says
that it&amp;#39;s not exactly how things should work. What&amp;#39;s next?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fbeasts-of-no-nation.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Beasts of No Nation (2015) by Cary Joji Fukunaga&#39;/&gt;&lt;figcaption&gt;Beasts of No Nation (2015) by Cary Joji Fukunaga&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In our projects, a product owner (PO) is usually a representative of
a project sponsor (the paying customer). Since all our projects are rather
complex Java software packages, POs are very technical people. They
are programmers or used to be programmers. They understand the code
we write, and they want their opinion to be taken into account and
respected.&lt;/p&gt;

&lt;p&gt;And I&amp;#39;m not talking about &lt;a href=&quot;/2015/01/05/how-to-be-honest-and-keep-customer.html&quot;&gt;stupid&lt;/a&gt;
product owners &amp;mdash; those guys are a separate story. I&amp;#39;m talking about a pretty
reasonable PO with his own technical opinion that needs to be heard.&lt;/p&gt;

&lt;p&gt;Here is a practical example. Last week, I was
&lt;a href=&quot;/2015/08/04/nine-steps-start-software-project.html&quot;&gt;starting&lt;/a&gt; a project.
I was an architect. It was a Java server-side module. I decided to use
Maven as a build automation system.&lt;/p&gt;

&lt;p&gt;I created some initial files, configured &lt;code&gt;pom.xml&lt;/code&gt;, briefly explained the
project structure in &lt;code&gt;README.md&lt;/code&gt;, and submitted a pull request. Chris, the product
owner, reviewed it and asked, &amp;quot;Why not Gradle?&amp;quot;&lt;/p&gt;

&lt;p&gt;It was a reasonable question, right? Gradle is another popular build
automation system that I could have used, but I didn&amp;#39;t. The question
is why. It was a pretty innocent question, and I explained the answer right there
in my comment to the pull request. I said Maven was more suitable in
this project because ... blah blah blah.&lt;/p&gt;

&lt;p&gt;But Chris argued back. He was still thinking Gradle was the better choice.
He had his reasons. Meanwhile, I tried to &lt;strong&gt;convince&lt;/strong&gt; him of mine. I tried a few times
and then realized I was doing something wrong. It shouldn&amp;#39;t work like that.&lt;/p&gt;

&lt;p&gt;A software architect should not convince a product owner, a customer, or anybody
else. Instead, an architect must make his decisions and be responsible for the
entire success or failure of the product, just like I
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;explained before&lt;/a&gt;.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;A good architect must collect different opinions before making his own decision&lt;/aside&gt;

&lt;p&gt;There is a simple reason for that. Any attempt to convince anyone
causes a possibility of &amp;quot;responsibility leakage&amp;quot;. What if I fail to convince?
I will have to change my plan and use Gradle, right? What if the product
has problems because of that decision? I will try to blame Chris for that,
right? I can&amp;#39;t be &lt;strong&gt;fully&lt;/strong&gt; responsible for the product anymore, because I was
&amp;quot;forced&amp;quot; to make at least one decision.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t get me wrong; a good architect must collect different opinions before
making his own decision. But collecting Chris&amp;#39;s opinion would look very
different. I would ask him first what he thinks about Maven and Gradle.
He would tell me that he doesn&amp;#39;t like Maven because of this and that. And I
would take that into account. Or maybe not. But my decision would still be
mine, made by myself, under no compulsion by anybody. And Chris would still
be able to blame me for any negative consequences of that decision.&lt;/p&gt;

&lt;p&gt;But what should Chris do if he really doesn&amp;#39;t like my decision? It&amp;#39;s his
money and his product, right? He does care. And he doesn&amp;#39;t want to have
Maven in &lt;strong&gt;his&lt;/strong&gt; product. What does he do? How can he influence my
decision-making process?&lt;/p&gt;

&lt;p&gt;It&amp;#39;s easy. There are two documents in each software project. The first one is
&lt;strong&gt;requirements&lt;/strong&gt;, and the second one is &lt;strong&gt;architecture&lt;/strong&gt;. Chris should use them both
to correct me and point me in the right direction. Here&amp;#39;s how.&lt;/p&gt;

&lt;p&gt;First, if he really doesn&amp;#39;t want to have Maven,
he should make changes to the requirements document. He should
add something like &amp;quot;the build system must be Gradle, because ...&amp;quot;
Or maybe even without the &amp;quot;because&amp;quot; part. It&amp;#39;s up to him.
In that case, I will have to take that into account, and I will.
I know my design decisions are dictated by the requirements.
And not because Chris convinced me or I failed to convince him, but because
that&amp;#39;s what the document says.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;An architect must be an absolute technical dictator during the project and must not have to convince anyone&lt;/aside&gt;

&lt;p&gt;Second, if he is not entirely sure that Gradle is the right choice
and just wants me to be more serious about my decisions, he should
complain (by submitting a bug) about the quality of my
&lt;a href=&quot;/2015/08/04/nine-steps-start-software-project.html&quot;&gt;architecture document&lt;/a&gt;.
He should say the choice to go with Maven is not explained
properly. I will then rethink my decision and will either change
it or explain it better. But again, I will do it not to please
Chris but to fix a reported bug.&lt;/p&gt;

&lt;p&gt;To summarize, an architect must be an absolute technical &lt;strong&gt;dictator&lt;/strong&gt;
during the project and must not have to convince anyone. If that&amp;#39;s not the case,
the entire project faces big risks, simply because the responsibility
will be &amp;quot;leaking&amp;quot;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><category term="architect" /><summary>I&amp;#39;ve already explained how I understand
the role
and responsibilities
of a software architect.
But one question still remains unanswered, and it often turns into a problem
in our projects: What does a software architect do when the project
sponsor doesn&amp;#39;t like his technical decisions? The architect implements
something in a certain way, and the sponsor (or its representative) says
that it&amp;#39;s not exactly how things should work. What&amp;#39;s next?</summary></entry></feed>
