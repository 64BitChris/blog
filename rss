<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://www.yegor256.com/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2017-04-09T20:29:35+00:00</updated><id>http://www.yegor256.com/</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">PDD in Action</title><link href="http://www.yegor256.com/2017/04/05/pdd-in-action.html" rel="alternate" type="text/html" title="PDD in Action" /><published>2017-04-05T00:00:00+00:00</published><updated>2017-04-05T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/04/05/pdd-in-action</id><content type="html" xml:base="http://www.yegor256.com/2017/04/05/pdd-in-action.html">&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://www.0pdd.com&#39;&gt;&lt;img src=&#39;https://avatars2.githubusercontent.com/u/24456188&#39; style=&#39;width:64px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/2009/03/04/pdd.html&quot;&gt;Puzzle-driven development&lt;/a&gt;
(PDD) is a methodology we&amp;#39;ve been practicing on our teams
for more than seven years. Using PDD, we delegate the responsibility of
task decomposition to its performers, eliminating
the role of a project manager. We&amp;#39;ve been using our proprietary software
for that. A month ago, we made it public, open source, and free.
It is available as &lt;a href=&quot;http://www.0pdd.com&quot;&gt;0pdd&lt;/a&gt;&amp;mdash;a GitHub-based chat bot.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;0pdd.com&#39; src=&#39;/images/2017/04/0pdd-screenshot.jpg&#39; longdesc=&#39;#21e37bf5&#39;/&gt;&lt;figcaption id=&#39;21e37bf5&#39;&gt;0pdd.com&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is how you configure it, in two steps. First, you
&lt;a href=&quot;https://help.github.com/articles/inviting-collaborators-to-a-personal-repository/&quot;&gt;grant&lt;/a&gt;
read-only access to &lt;a href=&quot;https://github.com/0pdd&quot;&gt;@0pdd&lt;/a&gt; in GitHub
(either private or public repository)&lt;/p&gt;

&lt;p&gt;Second, you add a &lt;a href=&quot;https://help.github.com/articles/about-webhooks/&quot;&gt;webhook&lt;/a&gt;
to your GitHub repository: &lt;code&gt;http://www.0pdd.com/hook/github&lt;/code&gt; (with just &lt;code&gt;push&lt;/code&gt; event
and content type as &lt;code&gt;application/json&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now, your repository is being watched by &lt;a href=&quot;http://www.0pdd.com&quot;&gt;0pdd&lt;/a&gt;. Every
time you &lt;code&gt;git push&lt;/code&gt; something new, it does a &lt;code&gt;git pull&lt;/code&gt; and retrieves your changes
from GitHub. Then it runs &lt;a href=&quot;http://github.com/yegor256/pdd&quot;&gt;pdd&lt;/a&gt;, a command line tool
that scans the entire code base and finds all occurrences of &lt;code&gt;@todo&lt;/code&gt;
markers.&lt;/p&gt;

&lt;p&gt;For all newly found markers, &lt;a href=&quot;http://www.0pdd.com&quot;&gt;0pdd&lt;/a&gt; will submit new
issues to the GitHub issue-tracking section of your repository.&lt;/p&gt;

&lt;p&gt;Also, when you remove markers from your code base,
&lt;a href=&quot;http://www.0pdd.com&quot;&gt;0pdd&lt;/a&gt; will immediately close issues it created.&lt;/p&gt;

&lt;p&gt;Now, when an issue is assigned to a programmer, we allow him or her
to &lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;cut corners&lt;/a&gt;
and return incomplete code back to the &lt;code&gt;master.&lt;/code&gt; If and when the code is
not complete, we ask the programmer to leave &lt;code&gt;@todo&lt;/code&gt; markers in the code, called
&amp;quot;puzzles.&amp;quot; Later, these puzzles will be assigned to other programmers,
and so on. Eventually, the problem will be fixed when &lt;em&gt;most&lt;/em&gt; puzzles are
resolved.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.0pdd.com&quot;&gt;0pdd&lt;/a&gt; helps you automate this process and provides
a summary report of the current situation with all puzzles in the entire
code base. You can even add a nice badge to your GitHub repo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.0pdd.com/p?name=yegor256/0pdd&quot;&gt;&lt;img src=&quot;http://www.0pdd.com/svg?name=yegor256/0pdd&quot; alt=&quot;PDD status&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click it, you will see the full report of all puzzles
currently present and previously seen.&lt;/p&gt;

&lt;p&gt;This mechanism helps us in many projects. You can use it for free. It&amp;#39;s
an open-source Ruby product; feel free to &lt;a href=&quot;https://github.com/yegor256/0pdd&quot;&gt;contribute&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Puzzle-driven development
(PDD) is a methodology we&amp;#39;ve been practicing on our teams
for more than seven years. Using PDD, we delegate the responsibility of
task decomposition to its performers, eliminating
the role of a project manager. We&amp;#39;ve been using our proprietary software
for that. A month ago, we made it public, open source, and free.
It is available as 0pdd&amp;mdash;a GitHub-based chat bot.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/04/0pdd-screenshot.jpg" /></entry><entry><title type="html">SOLID Is OOP for Dummies</title><link href="http://www.yegor256.com/2017/03/28/solid.html" rel="alternate" type="text/html" title="SOLID Is OOP for Dummies" /><published>2017-03-28T00:00:00+00:00</published><updated>2017-03-28T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/03/28/solid</id><content type="html" xml:base="http://www.yegor256.com/2017/03/28/solid.html">&lt;p&gt;You definitely know the &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29&quot;&gt;SOLID&lt;/a&gt;
acronym. It stands for five principles of
&lt;a href=&quot;/2016/08/15/what-is-wrong-object-oriented-programming.html&quot;&gt;object-oriented programming&lt;/a&gt;
that, if followed, are supposed to
make your code both &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29&quot;&gt;legible and extensible&lt;/a&gt;.
They were introduced almost 30 years ago, but have they
really made us better programmers in the time since?
Do we really understand OOP better thanks to them? Do we write more
&amp;quot;legible and extensible&amp;quot; code? I don&amp;#39;t think so.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Dumb &amp;amp; Dumber (1994) by Peter Farrelly&#39; src=&#39;/images/2017/03/dumb-and-dumber.jpg&#39; longdesc=&#39;#0ebdb718&#39;/&gt;&lt;figcaption id=&#39;0ebdb718&#39;&gt;Dumb &amp;amp; Dumber (1994) by Peter Farrelly&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let&amp;#39;s go one by one and see how they &amp;quot;help.&amp;quot;&lt;/p&gt;

&lt;h2 id=&quot;s&quot;&gt;S&lt;/h2&gt;

&lt;p&gt;The &amp;quot;S&amp;quot; refers to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Single Responsibility Principle&lt;/a&gt;,
which, according to &lt;a href=&quot;http://amzn.to/2m7LmaA&quot;&gt;Clean Code&lt;/a&gt; by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;&gt;Robert Martin&lt;/a&gt;, means that
&amp;quot;a class should have only one reason to change.&amp;quot;&lt;/p&gt;

&lt;p&gt;This statement sounds extremely vague to me, but the book explains it, stating that
objects must be problem-centered and responsible for &amp;quot;one thing.&amp;quot;
It&amp;#39;s up to us to decide what that &lt;em&gt;one thing&lt;/em&gt; is, of course.&lt;/p&gt;

&lt;p&gt;This is what we know as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29&quot;&gt;&amp;quot;high cohesion&amp;quot;&lt;/a&gt;
since &lt;a href=&quot;https://en.wikipedia.org/wiki/Larry_Constantine&quot;&gt;Larry Constantine&lt;/a&gt;
wrote about it in the IBM Systems Journal in 1974.
Why was it necessary to create a new principle 15 years later with an ambiguous name and
a very questionable definition?&lt;/p&gt;

&lt;h2 id=&quot;o&quot;&gt;O&lt;/h2&gt;

&lt;p&gt;This letter is about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Open/closed_principle&quot;&gt;Open/Close Principle&lt;/a&gt;,
which was introduced by Bertrand Meyer in
&lt;a href=&quot;http://amzn.to/2lNxy44&quot;&gt;Object Oriented Software Construction&lt;/a&gt; in 1988.
Simply put, it means that an object should not be modifiable. I can&amp;#39;t agree more
with this.&lt;/p&gt;

&lt;p&gt;But then it says it should be &lt;em&gt;extendable&lt;/em&gt;, literally through
&lt;a href=&quot;https://en.wikipedia.org/wiki/Inheritance_%28object-oriented_programming%29&quot;&gt;implementation inheritance&lt;/a&gt;, which is
&lt;a href=&quot;/2016/09/13/inheritance-is-procedural.html&quot;&gt;known&lt;/a&gt; as an anti-OOP technology.
Thus, this principle is not really applicable to objects and OOP.
It may work with modules and services, but not with objects.&lt;/p&gt;

&lt;h2 id=&quot;l&quot;&gt;L&lt;/h2&gt;

&lt;p&gt;The third letter is for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;Liskov Substitution Principle&lt;/a&gt;,
which was introduced by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Barbara_Liskov&quot;&gt;Barbara Liskov&lt;/a&gt; in 1987.
This one is the most innocent part in the SOLID pentad. In simple words, it states
that if your method expects a
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html&quot;&gt;&lt;code&gt;Collection,&lt;/code&gt;&lt;/a&gt;
an
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html&quot;&gt;&lt;code&gt;ArrayList&lt;/code&gt;&lt;/a&gt;
will work.&lt;/p&gt;

&lt;p&gt;It is also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Subtyping&quot;&gt;subtyping&lt;/a&gt; and is
the foundational component of any object-oriented language. Why do we need to
call it a principle and &amp;quot;follow&amp;quot; it? Is it at all possible to create any
object-oriented software without subtyping? If this one is a principle, let&amp;#39;s
add &amp;quot;variables&amp;quot; and &amp;quot;method calling&amp;quot; here too.&lt;/p&gt;

&lt;p&gt;Honestly, I suspect that this principle was added to SOLID mostly in order
to somehow fill the gap between &amp;quot;SO&amp;quot; and &amp;quot;ID.&amp;quot;&lt;/p&gt;

&lt;h2 id=&quot;i-and-d&quot;&gt;I and D&lt;/h2&gt;

&lt;p&gt;I guess they both were introduced by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;&gt;Robert Martin&lt;/a&gt; while
he was working at Xerox.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Interface_segregation_principle&quot;&gt;Interface Segregation Principle&lt;/a&gt;
states that you must not declare &lt;code&gt;List x&lt;/code&gt; if you only need &lt;code&gt;Collection x&lt;/code&gt;
or even &lt;code&gt;Iterable x.&lt;/code&gt; I can&amp;#39;t agree more. Let&amp;#39;s see the next one.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_inversion_principle&quot;&gt;Dependency Inversion Principle&lt;/a&gt;
means that instead of &lt;code&gt;ArrayList x,&lt;/code&gt; you must
declare &lt;code&gt;List x&lt;/code&gt; and let the provider of the object decide whether
it is
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html&quot;&gt;&lt;code&gt;ArrayList&lt;/code&gt;&lt;/a&gt; or
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html&quot;&gt;&lt;code&gt;LinkedList.&lt;/code&gt;&lt;/a&gt;
This one also sounds reasonable to me.&lt;/p&gt;

&lt;p&gt;However, how is all this different from the good old
&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&quot;&gt;&amp;quot;loose coupling&amp;quot;&lt;/a&gt;
introduced together with cohesion by Constantine in 1974?
Do we really need to simplify and blur in order to learn better?
No, not to learn better, but to &lt;em&gt;sell&lt;/em&gt; better. Here goes my point.&lt;/p&gt;

&lt;h2 id=&quot;my-point-is&quot;&gt;My point is...&lt;/h2&gt;

&lt;p&gt;The point being these principles are nothing but an explanation of
&amp;quot;cohesion and coupling&amp;quot; for dummies in a very primitive, ambiguous,
and marketable way. Dummies will buy books, seminars, and trainings,
but won&amp;#39;t really be able to understand the logic behind them. Do they really
need to? They are just &lt;del&gt;monkeys&lt;/del&gt;
&lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;coders&lt;/a&gt;, right?&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;SOLID is a money-making instrument, not an instrument to make code better.&lt;/aside&gt;

&lt;p&gt;&amp;quot;But an object must be responsible for one thing!&amp;quot; is what I often hear at
conferences. People learn that mantra without even knowing
what cohesion is nor understanding what this &amp;quot;one thing&amp;quot; they are
praying for really is. There is no such thing as &amp;quot;one thing,&amp;quot; guys! There are different
levels of cohesion.&lt;/p&gt;

&lt;p&gt;Who is guilty? Uncle Bob &amp;amp; Co.&lt;/p&gt;

&lt;p&gt;They are no better than
&lt;a href=&quot;/2015/10/16/ridley-scott-and-joseph-goebbels.html&quot;&gt;Ridley Scott&lt;/a&gt;
and other Hollywood money makers who
deliver primitive and easy-to-cry-at movies just to generate a profit. People
are getting dumber by watching&amp;mdash;but this is not of their concern.
The same happens with magic OOP principles&amp;mdash;programmers rely on
them, thinking the truth is right there while the real truth
is not understood even by the creators of this &amp;quot;magic.&amp;quot;&lt;/p&gt;

&lt;p&gt;SOLID is a money-making instrument, not an instrument to make
code better.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">You definitely know the SOLID
acronym. It stands for five principles of
object-oriented programming
that, if followed, are supposed to
make your code both legible and extensible.
They were introduced almost 30 years ago, but have they
really made us better programmers in the time since?
Do we really understand OOP better thanks to them? Do we write more
&amp;quot;legible and extensible&amp;quot; code? I don&amp;#39;t think so.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/03/dumb-and-dumber.jpg" /></entry><entry><title type="html">The TDD That Works for Me</title><link href="http://www.yegor256.com/2017/03/24/tdd-that-works.html" rel="alternate" type="text/html" title="The TDD That Works for Me" /><published>2017-03-24T00:00:00+00:00</published><updated>2017-03-24T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/03/24/tdd-that-works</id><content type="html" xml:base="http://www.yegor256.com/2017/03/24/tdd-that-works.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;Test-driven development&lt;/a&gt; (a.k.a. TDD)
was &lt;a href=&quot;https://www.quora.com/Why-does-Kent-Beck-refer-to-the-rediscovery-of-test-driven-development&quot;&gt;rediscovered&lt;/a&gt;
by &lt;a href=&quot;https://en.wikipedia.org/wiki/Kent_Beck&quot;&gt;Kent Beck&lt;/a&gt; and explained in
&lt;a href=&quot;http://amzn.to/2mTuxCs&quot;&gt;his famous book&lt;/a&gt; in 2002.
In 2014, David Heinemeier Hansson (the creator of Ruby on Rails)
said that TDD &lt;a href=&quot;http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html&quot;&gt;is dead&lt;/a&gt;
and only &lt;a href=&quot;http://david.heinemeierhansson.com/2014/test-induced-design-damage.html&quot;&gt;harms architecture&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;&gt;Robert Martin&lt;/a&gt;
(the inventor of the &lt;a href=&quot;/2017/03/28/solid.html&quot;&gt;SOLID principles&lt;/a&gt;)
&lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2014/04/25/MonogamousTDD.html&quot;&gt;disagreed&lt;/a&gt;
and
&lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2014/04/30/When-tdd-does-not-work.html&quot;&gt;explained&lt;/a&gt;
that TDD may not work only in certain cases.
A few days later, he even
&lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2014/05/02/ProfessionalismAndTDD.html&quot;&gt;compared&lt;/a&gt; the importance of TDD
with the importance of hand-washing for medicine, and added
that &amp;quot;it would not surprise me if, one day, TDD had the force
of law behind it.&amp;quot; Two years later, now just a few months ago,
he wrote &lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2017/03/03/TDD-Harms-Architecture.html&quot;&gt;more&lt;/a&gt;
about it, and &lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2017/03/06/TestingLikeTheTSA.html&quot;&gt;more&lt;/a&gt;,
and &lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2016/11/10/TDD-Doesnt-work.html&quot;&gt;more&lt;/a&gt;.
This subject seems to be hot. Of course, I have my own take on it; let me share.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;La grande bellezza (2013) by Paolo Sorrentino&#39; src=&#39;/images/2017/03/la-grande-bellezza.jpg&#39; longdesc=&#39;#91c781a0&#39;/&gt;&lt;figcaption id=&#39;91c781a0&#39;&gt;La grande bellezza (2013) by Paolo Sorrentino&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In theory, TDD means &amp;quot;writing tests first and code next.&amp;quot; In practice,
according to &lt;a href=&quot;http://www.teamed.io&quot;&gt;my experience&lt;/a&gt; while working with
more than 250 developers over the last four years, it means writing tests
when we&amp;#39;re in a good mood and have nothing else to do. And this is only logical,
if we understand TDD literally, by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Kent_Beck&quot;&gt;the book&lt;/a&gt;.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;I have never done TDD by the book: tests first and code next.&lt;/aside&gt;

&lt;p&gt;Writing a test for a class without having that class in front of you is
&lt;em&gt;difficult&lt;/em&gt;. I would even say impossible, if we are talking about real code,
not calculator examples. It&amp;#39;s also very &lt;em&gt;inefficient&lt;/em&gt;, because tests by definition
are much more rigid than the code they validate&amp;mdash;creating them first will
cause many re-do cycles until the design is stabilized.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve personally &lt;a href=&quot;https://github.com/yegor256&quot;&gt;written&lt;/a&gt; almost 300,000 lines of code in
Java, Ruby, PHP, and JavaScript over the last four years, and I have never
done TDD by the book: &amp;quot;write a test, make it run, make it right.&amp;quot; Ever.&lt;/p&gt;

&lt;h2 id=&quot;code-deploy-break-test-fix&quot;&gt;Code, Deploy, Break, Test, Fix&lt;/h2&gt;

&lt;p&gt;Even though I&amp;#39;m a huge fan of automated testing (unit or integration) and
totally &lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2014/05/02/ProfessionalismAndTDD.html&quot;&gt;agree&lt;/a&gt;
with Uncle Bob: Those who don&amp;#39;t write tests must be put
&lt;a href=&quot;/2015/11/24/imprisonment-for-irresponsible-coding.html&quot;&gt;in jail&lt;/a&gt;,
I just have my own interpretation of TDD. This is how it looks:&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;object data=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2017%2F03%2Fcdbtf.svg&#39; type=&#39;image/svg+xml&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;&gt;&lt;/object&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, I write &lt;strong&gt;code&lt;/strong&gt; without any tests. A lot of code. I implement the
functionality and create the design. Dozens of classes. Of course, the
build is automated, the deployment pipeline is configured, and I can
test the product myself in a sandbox. I make sure
&amp;quot;&lt;a href=&quot;https://blog.codinghorror.com/the-works-on-my-machine-certification-program/&quot;&gt;it works on my machine&lt;/a&gt;.&amp;quot;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, I &lt;strong&gt;deploy&lt;/strong&gt; it to production. Yes, it goes to my &amp;quot;users&amp;quot; without
any tests because it works for me. They are either real users if it&amp;#39;s something
open source or one of my &lt;a href=&quot;/pets.html&quot;&gt;pet projects&lt;/a&gt;, or manual testers if
it&amp;#39;s a money project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, they &lt;strong&gt;break&lt;/strong&gt; it. They either test it or they use it; it doesn&amp;#39;t matter.
They just find problems and report bugs. As many as they can.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Right after some bugs are reported, I pick the most critical of them
and...voilà!...I create an automated &lt;strong&gt;test&lt;/strong&gt;. The bug is a message to me that
my tests are weak; I have to fix them first. A new test will prove that
the code is broken. Or maybe I fix an existing one. This is where I go
&amp;quot;tests first.&amp;quot; I don&amp;#39;t touch the production code until I manage to break
my build and prove the problem&amp;#39;s existence with a new test. Then, I do &lt;code&gt;git commit.&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, it&amp;#39;s time to &lt;strong&gt;fix&lt;/strong&gt; the problem. I make changes to the production
code in order to make sure the build is green again. Then, I do &lt;code&gt;git commit&lt;/code&gt; and
&lt;code&gt;git push.&lt;/code&gt; And I go back to the &amp;quot;deploy&amp;quot; step; the updated product goes to my
users.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once in a while, I have to make serious modifications to the product, like to
introduce a new feature or perform a massive refactoring. In this case, I go
back to the first step and do it without tests.&lt;/p&gt;

&lt;h2 id=&quot;the-reasoning-behind&quot;&gt;The Reasoning Behind&lt;/h2&gt;

&lt;p&gt;The justification behind this no-tests-upfront approach is simple: We don&amp;#39;t
need to test until it&amp;#39;s broken, mostly because we understand that it&amp;#39;s
technically not possible to test everything or to fix all bugs. We have
to fix only what&amp;#39;s visible and intolerable by the business. If the business
doesn&amp;#39;t care or our users/testers don&amp;#39;t see our bugs&amp;mdash;we must not
&lt;strong&gt;waste&lt;/strong&gt; project resources on fixing them.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;I only create tests later when my users express the need for them by reporting bugs.&lt;/aside&gt;

&lt;p&gt;On the other hand, when the business or our users/testers are complaining,
we have to be very strict with ourselves; our testing system is weak and
must be fixed first. We can&amp;#39;t just fix the production code and deploy,
because in this case, we may make this mistake again after some refactoring,
and our tests won&amp;#39;t catch it. The user will find the bug again, and the
business will pay us again to fix it. That will be the &lt;strong&gt;waste&lt;/strong&gt; of resources.&lt;/p&gt;

&lt;p&gt;As you can see, it&amp;#39;s all money-driven. First, don&amp;#39;t fix anything if nobody pays for it.
Second, fix it once and for all if they actually paid. It&amp;#39;s as simple as that.&lt;/p&gt;

&lt;h2 id=&quot;the-dynamics&quot;&gt;The Dynamics&lt;/h2&gt;

&lt;p&gt;Thanks to this test-and-fix-only-when-broken approach, the balance between production
code and test code is not the same over the entire project lifecycle. When the
project starts, there are almost no tests. Then, the number of tests
grows together with the number of bugs. Eventually, the situation stabilizes,
and we can move the product from beta version to the first release.&lt;/p&gt;

&lt;p&gt;I created a simple &lt;a href=&quot;https://github.com/yegor256/tdx&quot;&gt;command line tool&lt;/a&gt;
in order to demonstrate the statistics from a few projects of mine,
to prove my point. Take a look at these graphs:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yegor256/takes&quot;&gt;yegor256/takes&lt;/a&gt; (Web framework, Java):&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;object data=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2017%2F03%2Fcdbtf-takes.svg&#39; type=&#39;image/svg+xml&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;&gt;&lt;/object&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yegor256/xembly&quot;&gt;yegor256/xembly&lt;/a&gt; (XML builder, Java):&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;object data=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2017%2F03%2Fcdbtf-xembly.svg&#39; type=&#39;image/svg+xml&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;&gt;&lt;/object&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jcabi/jcabi-aspects&quot;&gt;jcabi/jcabi-aspects&lt;/a&gt; (AOP library, Java):&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;object data=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2017%2F03%2Fcdbtf-jcabi-aspects.svg&#39; type=&#39;image/svg+xml&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;&gt;&lt;/object&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yegor256/s3auth&quot;&gt;yegor256/s3auth&lt;/a&gt; (S3 gateway, Java):&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;object data=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2017%2F03%2Fcdbtf-s3auth.svg&#39; type=&#39;image/svg+xml&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;&gt;&lt;/object&gt;&lt;/figure&gt;

&lt;p&gt;First commercial project:&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;object data=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2017%2F03%2Fcdbtf-xockets-layer.svg&#39; type=&#39;image/svg+xml&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;&gt;&lt;/object&gt;&lt;/figure&gt;

&lt;p&gt;Second commercial project:&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;object data=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2017%2F03%2Fcdbtf-xockets-hadoop-transport.svg&#39; type=&#39;image/svg+xml&#39; itemprop=&#39;image&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;The figure&#39;&gt;&lt;/object&gt;&lt;/figure&gt;

&lt;p&gt;In each graph, there are two parts. The first one on the top demonstrates
the dynamics of production
&lt;a href=&quot;/2014/11/14/hits-of-code.html&quot;&gt;Hits-of-Code&lt;/a&gt; (green line),
test-related HoC (red line), and the number of issues reported to GitHub (orange line).&lt;/p&gt;

&lt;p&gt;The bottom part shows how big the test-related HoC portion is
relative to all project activity. In other words, it shows how much
&lt;em&gt;effort&lt;/em&gt; the project invested into automated tests, compared with the
total effort.&lt;/p&gt;

&lt;p&gt;This is what I want you to pay attention to:
The shape of the curve is almost the same in every project. It looks
very similar to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Learning_curve&quot;&gt;learning curve&lt;/a&gt;,
where we start to learn fast and then slow down over time:&lt;/p&gt;

&lt;figure class=&#39;unprintable&#39;&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2017%2F03%2Fcdbtf-graph.png&#39; itemprop=&#39;image&#39; style=&#39;width:450px;max-width:100%;&#39; alt=&#39;The figure&#39;/&gt;&lt;/figure&gt;

&lt;p&gt;This perfectly illustrates what I just described above. I don&amp;#39;t need tests
at the beginning of the project; I create them later when
my users express the need for them by reporting bugs.
This dynamic looks only logical to me.&lt;/p&gt;

&lt;p&gt;You can also analyze your project using
&lt;a href=&quot;https://github.com/yegor256/tdx&quot;&gt;my tool&lt;/a&gt; and see the graph. It would be
interesting to learn what kind of curve you will get.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html">Test-driven development (a.k.a. TDD)
was rediscovered
by Kent Beck and explained in
his famous book in 2002.
In 2014, David Heinemeier Hansson (the creator of Ruby on Rails)
said that TDD is dead
and only harms architecture.
Robert Martin
(the inventor of the SOLID principles)
disagreed
and
explained
that TDD may not work only in certain cases.
A few days later, he even
compared the importance of TDD
with the importance of hand-washing for medicine, and added
that &amp;quot;it would not surprise me if, one day, TDD had the force
of law behind it.&amp;quot; Two years later, now just a few months ago,
he wrote more
about it, and more,
and more.
This subject seems to be hot. Of course, I have my own take on it; let me share.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/03/la-grande-bellezza.jpg" /></entry><entry><title type="html">Traits and Mixins Are Not OOP</title><link href="http://www.yegor256.com/2017/03/07/traits-and-mixins.html" rel="alternate" type="text/html" title="Traits and Mixins Are Not OOP" /><published>2017-03-07T00:00:00+00:00</published><updated>2017-03-07T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/03/07/traits-and-mixins</id><content type="html" xml:base="http://www.yegor256.com/2017/03/07/traits-and-mixins.html">&lt;p&gt;Let me say right off the bat that the features we will discuss here are
pure &lt;em&gt;poison&lt;/em&gt; brought to object-oriented programming by those who desperately
needed a lobotomy, just like David West suggested in his
&lt;a href=&quot;http://amzn.to/2ass77O&quot;&gt;Object Thinking&lt;/a&gt; book.
These features have different names, but the most common ones are
&lt;a href=&quot;https://en.wikipedia.org/wiki/Trait_%28computer_programming%29&quot;&gt;traits&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Mixin&quot;&gt;mixins&lt;/a&gt;. I seriously can&amp;#39;t understand
how we can still call programming object-oriented when it has
&lt;a href=&quot;http://stackoverflow.com/questions/925609/mixins-vs-traits&quot;&gt;these features&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Fear and Loathing in Las Vegas (1998) by Terry Gilliam&#39; src=&#39;/images/2014/04/fear-and-loathing-adrenochrome.png&#39; longdesc=&#39;#8efe9524&#39;/&gt;&lt;figcaption id=&#39;8efe9524&#39;&gt;Fear and Loathing in Las Vegas (1998) by Terry Gilliam&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, here&amp;#39;s how they work in a nutshell. Let&amp;#39;s use
&lt;a href=&quot;http://phrogz.net/programmingruby/tut_modules.html&quot;&gt;Ruby modules&lt;/a&gt;
as a sample implementation. Say that we have a class &lt;code&gt;Book&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, we want class &lt;code&gt;Book&lt;/code&gt; to use a static method (a procedure) that
does something useful. We may either define it in a
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;utility class&lt;/a&gt;
and let &lt;code&gt;Book&lt;/code&gt; call it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextUtils&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;caps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My title is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TextUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or we may make it even more &amp;quot;convenient&amp;quot; and &lt;code&gt;extend&lt;/code&gt; our module
in order to access its methods directly:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;TextModule&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;caps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TextModule&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My title is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It seems nice&amp;mdash;if you don&amp;#39;t understand the
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;difference&lt;/a&gt;
between
&lt;a href=&quot;/2016/08/15/what-is-wrong-object-oriented-programming.html&quot;&gt;object-oriented programming&lt;/a&gt;
and static methods. Moreover, if we forget
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;OOP purity&lt;/a&gt;
for a minute, this approach actually looks less readable to me, even though it has
fewer characters; it&amp;#39;s difficult to understand where the method
&lt;code&gt;caps()&lt;/code&gt; is coming from when it&amp;#39;s called just like &lt;code&gt;#{caps(@title)}&lt;/code&gt; instead
of &lt;code&gt;#{TextUtils.caps(@title)}&lt;/code&gt;. Don&amp;#39;t you think?&lt;/p&gt;

&lt;p&gt;Mixins start to play their role better when we &lt;code&gt;include&lt;/code&gt; them. We can
combine them to construct the behavior of the class we&amp;#39;re looking for. Let&amp;#39;s
create two mixins. The first one will be called &lt;code&gt;PlainMixin&lt;/code&gt; and will print the title
of the book the way it is, and the second one will be called &lt;code&gt;CapsMixin&lt;/code&gt; and will
capitalize what&amp;#39;s already printed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CapsMixin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PlainMixin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CapsMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PlainMixin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My title is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Calling &lt;code&gt;Book&lt;/code&gt; without the included mixin will print its title the way
it is. Once we add the &lt;code&gt;include&lt;/code&gt; statement, the behavior of &lt;code&gt;to_s&lt;/code&gt; is
overridden and method &lt;code&gt;print&lt;/code&gt; produces a different result. We can
combine mixins to produce the required functionality. For example,
we can add one more, which will
&lt;a href=&quot;http://stackoverflow.com/a/25136035/187141&quot;&gt;abbreviate&lt;/a&gt; the title to 16 characters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AbbrMixin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^(.{16,}?).*$/m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;\1...&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AbbrMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CapsMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PlainMixin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My title is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m sure you already understand that they both have access to
the private attribute &lt;code&gt;@title&lt;/code&gt; of class &lt;code&gt;Book&lt;/code&gt;. They actually have
full access to &lt;em&gt;everything&lt;/em&gt; in the class. They literally are
&amp;quot;pieces of code&amp;quot; that we &lt;em&gt;inject&lt;/em&gt; into the class to make it more
powerful and complex. What&amp;#39;s wrong with this approach?&lt;/p&gt;

&lt;p&gt;It&amp;#39;s the same issue as with
&lt;a href=&quot;/2016/04/12/java-annotations-are-evil.html&quot;&gt;annotations&lt;/a&gt;,
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTOs&lt;/a&gt;,
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters&lt;/a&gt;,
and &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;utility classes&lt;/a&gt;&amp;mdash;they
tear objects apart and place pieces of functionality in places
where objects don&amp;#39;t see them.&lt;/p&gt;

&lt;p&gt;In the case of mixins, the functionality is
in the Ruby &lt;code&gt;modules&lt;/code&gt;, which make assumptions about the internal structure
of &lt;code&gt;Book&lt;/code&gt; and further assume that the programmer will still understand what&amp;#39;s in &lt;code&gt;Book&lt;/code&gt; after
the internal structure changes. Such assumptions completely violate
the very idea of
&lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;encapsulation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Such a tight coupling between mixins and object private structure
leads to nothing but unmaintainable and difficult to understand code.&lt;/p&gt;

&lt;p&gt;The very obvious alternatives to mixins are
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;composable decorators&lt;/a&gt;.
Take a look at the example given in the
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;article&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AllCapsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TrimmedText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrintableText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TextInFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/a.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Doesn&amp;#39;t it look very similar to what we were doing above with Ruby mixins?&lt;/p&gt;

&lt;p&gt;However, unlike mixins, decorators leave objects small and cohesive, layering
extra functionality on top of them. Mixins do
the opposite&amp;mdash;they make objects more complex and, thanks to that, less
readable and maintainable.&lt;/p&gt;

&lt;p&gt;I honestly believe they are just poison. Whoever invented them
was a long ways from understanding the philosophy of object-oriented design.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">Let me say right off the bat that the features we will discuss here are
pure poison brought to object-oriented programming by those who desperately
needed a lobotomy, just like David West suggested in his
Object Thinking book.
These features have different names, but the most common ones are
traits and
mixins. I seriously can&amp;#39;t understand
how we can still call programming object-oriented when it has
these features.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2014/04/fear-and-loathing-adrenochrome.png" /></entry><entry><title type="html">How to Handle the Problem of Too Many Classes</title><link href="http://www.yegor256.com/2017/02/28/too-many-classes.html" rel="alternate" type="text/html" title="How to Handle the Problem of Too Many Classes" /><published>2017-02-28T00:00:00+00:00</published><updated>2017-02-28T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/02/28/too-many-classes</id><content type="html" xml:base="http://www.yegor256.com/2017/02/28/too-many-classes.html">&lt;p&gt;During nearly &lt;a href=&quot;/talks.html&quot;&gt;every presentation&lt;/a&gt; in which I explain
&lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;my view&lt;/a&gt;
of &lt;a href=&quot;/2016/08/15/what-is-wrong-object-oriented-programming.html&quot;&gt;object-oriented programming&lt;/a&gt;,
there is someone who shares a comment like this:
&amp;quot;If we follow your advice, we will have so many small classes.&amp;quot;
And my answer is always the same: &amp;quot;Of course we will, and that&amp;#39;s great!&amp;quot;
I honestly believe that even if you can&amp;#39;t consider having &amp;quot;a lot of classes&amp;quot; a virtue,
you can&amp;#39;t call it a drawback of any truly object-oriented code either. However,
there may come a point when classes become a problem;
let&amp;#39;s see when, how, and what to do about that.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;El día de la bestia (1995) by Álex de la Iglesia&#39; src=&#39;/images/2017/02/el-dia-de-la-bestia.jpg&#39; longdesc=&#39;#746b98ae&#39;/&gt;&lt;figcaption id=&#39;746b98ae&#39;&gt;El día de la bestia (1995) by Álex de la Iglesia&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There were a number of &amp;quot;rules&amp;quot; previously mentioned that, if applied,
would obviously lead to a large number of classes, including:
a) all public methods &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;must be&lt;/a&gt; declared in interfaces;
b) objects must not have more than four attributes (Section 2.1 of &lt;a href=&quot;/elegant-objects.html&quot;&gt;Elegant Objects&lt;/a&gt;);
c) static methods are &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;not allowed&lt;/a&gt;;
d) constructors &lt;a href=&quot;/2015/05/07/ctors-must-be-code-free.html&quot;&gt;must be&lt;/a&gt; code-free;
e) objects must expose fewer than five public methods (Section 3.1 of &lt;a href=&quot;/elegant-objects.html&quot;&gt;Elegant Objects&lt;/a&gt;).&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Types in OOP constitute your vocabulary, which explains the world around your code.&lt;/aside&gt;

&lt;p&gt;The biggest concern, of course, is maintainability: &amp;quot;If, instead of 50 longer classes,
we had 300 shorter ones, then the code would be way less readable.&amp;quot;
This will most certainly happen if you design them wrong.&lt;/p&gt;

&lt;p&gt;Types (or classes) in OOP constitute your &lt;a href=&quot;https://en.wikipedia.org/wiki/Vocabulary&quot;&gt;&lt;em&gt;vocabulary&lt;/em&gt;&lt;/a&gt;,
which explains the world around your code&amp;mdash;the world your code lives in.
The richer the vocabulary, the more powerful your code.
The more types you have, the better you can understand and explain the world.&lt;/p&gt;

&lt;p&gt;If your vocabulary is big enough, you will say something like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Read the book that is on the table.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With a much smaller vocabulary, the same phrase would sound like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do it with the thing that is on that thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Obviously, it&amp;#39;s easier to read and understand the first phrase. The same
occurs with types in OOP: the more of them you have at your disposal,
the more expressive, bright, and readable your code is.&lt;/p&gt;

&lt;p&gt;Unfortunately, Java and many other languages are not designed with
this concept in mind. Packages, modules, and namespaces don&amp;#39;t really help,
and we usually end up with names like
&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/method/annotation/AbstractCookieValueMethodArgumentResolver.html&quot;&gt;&lt;code&gt;AbstractCookieValueMethodArgumentResolver&lt;/code&gt;&lt;/a&gt; (Spring)
or
&lt;a href=&quot;https://hadoop.apache.org/docs/r3.0.0-alpha1/api/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReaderWrapper.html&quot;&gt;&lt;code&gt;CombineFileRecordReaderWrapper&lt;/code&gt;&lt;/a&gt; (Hadoop).
We&amp;#39;re trying to pack as many semantics into class names as possible so
their users won&amp;#39;t doubt for a second. Then we&amp;#39;re trying to put as many
methods into one class as possible to make life easier for users; they will
use their IDE hints to find the right one.&lt;/p&gt;

&lt;p&gt;This is anything but OOP.&lt;/p&gt;

&lt;p&gt;If your code is object-oriented, your classes must be small, their
names must be nouns, and their method names must be just one word. Here is
what I do in my code to make that happen:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interfaces are nouns&lt;/strong&gt;.
For example, &lt;a href=&quot;http://static.javadoc.io/org.takes/takes/1.1/org/takes/Request.html&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://static.javadoc.io/com.jcabi.incubator/xembly/0.22/org/xembly/Directive.html&quot;&gt;&lt;code&gt;Directive&lt;/code&gt;&lt;/a&gt;, or
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.8.4/src/main/java/io/jare/model/Domain.java&quot;&gt;&lt;code&gt;Domain&lt;/code&gt;&lt;/a&gt;.
There are no exceptions. Types (also known as
&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/concepts/interface.html&quot;&gt;interfaces&lt;/a&gt; in Java)
are the core part of my vocabulary; they have to be nouns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Classes are prefixed&lt;/strong&gt;.
My classes &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;always&lt;/a&gt;
implement interfaces. Thanks to that, I can say they always &lt;em&gt;are&lt;/em&gt;
requests, directives, or domains. And I always want their users to remember that.
Prefixes help. For example,
&lt;a href=&quot;http://static.javadoc.io/org.takes/takes/1.1/org/takes/rq/RqBuffered.html&quot;&gt;&lt;code&gt;RqBuffered&lt;/code&gt;&lt;/a&gt;
is a buffered request,
&lt;a href=&quot;http://static.javadoc.io/org.takes/takes/1.1/org/takes/rq/RqSimple.html&quot;&gt;&lt;code&gt;RqSimple&lt;/code&gt;&lt;/a&gt;
is a simple request,
&lt;a href=&quot;http://static.javadoc.io/org.takes/takes/1.1/org/takes/rq/RqLive.html&quot;&gt;&lt;code&gt;RqLive&lt;/code&gt;&lt;/a&gt;
is a request that represents a &amp;quot;live&amp;quot; HTTP connection,
and
&lt;a href=&quot;http://static.javadoc.io/org.takes/takes/1.1/org/takes/rq/RqWithHeader.html&quot;&gt;&lt;code&gt;RqWithHeader&lt;/code&gt;&lt;/a&gt;
is a request with an extra header.&lt;/p&gt;

&lt;p&gt;An alternative approach is to use the type name as the central part of the
class name and add a prefix that explains implementation details.
For example,
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.8.4/src/main/java/io/jare/dynamo/DyDomain.java&quot;&gt;&lt;code&gt;DyDomain&lt;/code&gt;&lt;/a&gt;
is a domain that persists its data in DynamoDB.
Once you know what that &lt;code&gt;Dy&lt;/code&gt; prefix is for, you can easily understand what
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.8.4/src/main/java/io/jare/dynamo/DyUser.java&quot;&gt;&lt;code&gt;DyUser&lt;/code&gt;&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.8.4/src/main/java/io/jare/dynamo/DyBase.java&quot;&gt;&lt;code&gt;DyBase&lt;/code&gt;&lt;/a&gt;
are about.&lt;/p&gt;

&lt;p&gt;In a medium-sized application or a library, there will be as many as 10 to 15
prefixes you will have to remember, no more. For example, in the
&lt;a href=&quot;http://www.takes.org&quot;&gt;Takes Framework&lt;/a&gt;, there are 24,000 lines of code,
410 Java files, and 10 prefixes: &lt;code&gt;Bc&lt;/code&gt;, &lt;code&gt;Cc&lt;/code&gt;, &lt;code&gt;Tk&lt;/code&gt;, &lt;code&gt;Rq&lt;/code&gt;, &lt;code&gt;Rs&lt;/code&gt;, &lt;code&gt;Fb&lt;/code&gt;,
&lt;code&gt;Fk&lt;/code&gt;, &lt;code&gt;Hm&lt;/code&gt;, &lt;code&gt;Ps&lt;/code&gt;, and &lt;code&gt;Xe&lt;/code&gt;. Not so difficult to remember what they mean, right?&lt;/p&gt;

&lt;p&gt;Among all &lt;a href=&quot;http://static.javadoc.io/org.takes/takes/1.1/allclasses-frame.html&quot;&gt;240 classes&lt;/a&gt;,
the longest name is
&lt;a href=&quot;http://static.javadoc.io/org.takes/takes/1.1/org/takes/rq/RqWithDefaultHeader.html&quot;&gt;&lt;code&gt;RqWithDefaultHeader&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I find this approach to class naming rather convenient. I used it
in these open source projects (in GitHub):
&lt;a href=&quot;https://github.com/yegor256/takes&quot;&gt;yegor256/takes&lt;/a&gt; (10 prefixes),
&lt;a href=&quot;https://github.com/yegor256/jare&quot;&gt;yegor256/jare&lt;/a&gt; (5 prefixes),
&lt;a href=&quot;https://github.com/yegor256/rultor&quot;&gt;yegor256/rultor&lt;/a&gt; (6 prefixes), and
&lt;a href=&quot;https://github.com/yegor256/wring&quot;&gt;yegor256/wring&lt;/a&gt; (5 prefixes).&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">During nearly every presentation in which I explain
my view
of object-oriented programming,
there is someone who shares a comment like this:
&amp;quot;If we follow your advice, we will have so many small classes.&amp;quot;
And my answer is always the same: &amp;quot;Of course we will, and that&amp;#39;s great!&amp;quot;
I honestly believe that even if you can&amp;#39;t consider having &amp;quot;a lot of classes&amp;quot; a virtue,
you can&amp;#39;t call it a drawback of any truly object-oriented code either. However,
there may come a point when classes become a problem;
let&amp;#39;s see when, how, and what to do about that.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/02/el-dia-de-la-bestia.jpg" /></entry><entry><title type="html">Why I Don’t Talk to Google Recruiters</title><link href="http://www.yegor256.com/2017/02/21/say-no-to-google-recruiters.html" rel="alternate" type="text/html" title="Why I Don&#39;t Talk to Google Recruiters" /><published>2017-02-21T00:00:00+00:00</published><updated>2017-02-21T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/02/21/say-no-to-google-recruiters</id><content type="html" xml:base="http://www.yegor256.com/2017/02/21/say-no-to-google-recruiters.html">&lt;p&gt;This is a real story, and it&amp;#39;s not only about Google. I&amp;#39;m getting emails from recruiters
at Amazon, Facebook, and smaller Silicon Valley startups. They
find me somehow, most likely through this blog, my
&lt;a href=&quot;/books.html&quot;&gt;books&lt;/a&gt;, or my &lt;a href=&quot;https://github.com/yegor256&quot;&gt;GitHub account&lt;/a&gt;.
They always start with &amp;quot;We&amp;#39;re so impressed by your profile&amp;quot; and finish with
&amp;quot;Let&amp;#39;s schedule an interview.&amp;quot; I always reply with the same text, and they
always disappear, only to come back in a few months under a different name.
Let me explain my reasons; maybe you will do the same and we can change
this situation in the industry.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;The Deer Hunter (1978) by Michael Cimino&#39; src=&#39;/images/2017/02/the-deer-hunter.jpg&#39; longdesc=&#39;#ddecf58a&#39;/&gt;&lt;figcaption id=&#39;ddecf58a&#39;&gt;The Deer Hunter (1978) by Michael Cimino&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Disclaimer: I do realize that these are multi-billion-dollar companies, the best
in the industry, and I&amp;#39;m nothing compared to them.
I do realize that their recruiters don&amp;#39;t care about my answers&amp;mdash;they
simply click &amp;quot;delete&amp;quot; and move on. I also realize that they will never see
this post, and this article probably won&amp;#39;t change anything. However,
I have to write it.&lt;/p&gt;

&lt;p&gt;This is what I&amp;#39;m sending back to them:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for your email. I&amp;#39;m very interested indeed. I have nothing against
an interview. However, there is one condition: I have to be interviewed by the
person I will be working for. By my future direct manager.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The recruiter who gets this reply never gets back to me.&lt;/p&gt;

&lt;p&gt;Why do I send this?&lt;/p&gt;

&lt;p&gt;Well, because I learned my lesson two years ago,
when Amazon tried to recruit me. I got an email from the company
that said they were so impressed by my profile and couldn&amp;#39;t wait
to start working with me. They needed me, nobody else. I was naive, and the
message did flatter me.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;They paid for my ticket to fly there and a night in a 5-star hotel. I was impressed.&lt;/aside&gt;

&lt;p&gt;We scheduled an interview in the head office in Seattle. They paid for my ticket to fly
there (from San Francisco) and a night in a 5-star hotel. I was impressed. They definitely were
interested. So was I.&lt;/p&gt;

&lt;p&gt;What happened at the interview was, most probably, very close to what
Max Howell &lt;a href=&quot;https://twitter.com/mxcl/status/608682016205344768&quot;&gt;experienced&lt;/a&gt;
&lt;a href=&quot;https://news.ycombinator.com/item?id=9695102&quot;&gt;with Google&lt;/a&gt;:
some programmers who didn&amp;#39;t know a thing about my profile
asked me to invent some algorithms on a white board for almost
four hours. Did I manage? I don&amp;#39;t think so. Did they make me an offer? No.&lt;/p&gt;

&lt;p&gt;What did I learn?&lt;/p&gt;

&lt;p&gt;That it was a waste of time. For both sides.&lt;/p&gt;

&lt;p&gt;Their bureaucratic machine is designed to process hundreds of candidates
a month. In order to fish and attract them, there is an army of
&lt;del&gt;monkeys&lt;/del&gt;
&lt;a href=&quot;/2015/09/29/mayonnaise.html&quot;&gt;recruiters&lt;/a&gt;
sending warm emails to people like me.
They have to screen candidates somehow, and they are too lazy to make this
process effective and creative. They just send them through random
programmers who are supposed to ask as complex questions as possible.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not saying that people who pass their tests are not good programmers.
I&amp;#39;m also not saying that I&amp;#39;m a good programmer&amp;mdash;let&amp;#39;s face it,
I didn&amp;#39;t pass the test. I do believe this filtering system is rather good.
My point is that it contradicts the original email I got from the recruiter.&lt;/p&gt;

&lt;p&gt;If she would have started her email with &amp;quot;We&amp;#39;re looking for an algorithm
expert,&amp;quot; we would never have gotten any further and would not have wasted our time.
Clearly, I&amp;#39;m not an expert in algorithms. There is no point in giving
me binary-tree-traversing questions; I don&amp;#39;t know those answers
and will never be interested in learning them. I&amp;#39;m trying to be an expert
in something else, like &lt;a href=&quot;/2016/11/29/eolang.html&quot;&gt;object-oriented design&lt;/a&gt;,
for example.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;There is no point in giving me binary-tree-traversing questions; I don&amp;#39;t know those answers and will never be interested in learning them.&lt;/aside&gt;

&lt;p&gt;There was a clear mismatch between my profile and the expectations of
the interviewers. I don&amp;#39;t blame them, and I don&amp;#39;t blame her. They
all were just &lt;del&gt;slaves&lt;/del&gt;
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;employees&lt;/a&gt;. I blame myself for not setting
this all straight at the very beginning.&lt;/p&gt;

&lt;p&gt;I should have told her that I didn&amp;#39;t want to be interviewed by &lt;em&gt;some&lt;/em&gt;
programmers, because I would most certainly fail. There was no need to try. I wanted to be interviewed
by the person who really &lt;em&gt;needed&lt;/em&gt; me: my future boss. That person will
understand my profile and won&amp;#39;t ask pointless questions about algorithms, simply because
he or she will know what my duties will be and what kind of problems
I will be capable of solving, if they hired me.&lt;/p&gt;

&lt;p&gt;Unfortunately, as I keep observing from two years of bouncing
such emails back to recruiters, they can&amp;#39;t change anything. They have
to provide formal and standard screening for everybody, beginning with
those same warm and flattering initial promises.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m sorry, recruiters, no more standard interviews for me.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="career" /><category term="mood" /><summary type="html">This is a real story, and it&amp;#39;s not only about Google. I&amp;#39;m getting emails from recruiters
at Amazon, Facebook, and smaller Silicon Valley startups. They
find me somehow, most likely through this blog, my
books, or my GitHub account.
They always start with &amp;quot;We&amp;#39;re so impressed by your profile&amp;quot; and finish with
&amp;quot;Let&amp;#39;s schedule an interview.&amp;quot; I always reply with the same text, and they
always disappear, only to come back in a few months under a different name.
Let me explain my reasons; maybe you will do the same and we can change
this situation in the industry.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/02/the-deer-hunter.jpg" /></entry><entry><title type="html">StackOverflow Is Your Mandatory Tool</title><link href="http://www.yegor256.com/2017/02/14/stackoverflow-is-your-tool.html" rel="alternate" type="text/html" title="StackOverflow Is Your Mandatory Tool" /><published>2017-02-14T00:00:00+00:00</published><updated>2017-02-14T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/02/14/stackoverflow-is-your-tool</id><content type="html" xml:base="http://www.yegor256.com/2017/02/14/stackoverflow-is-your-tool.html">&lt;p&gt;I&amp;#39;ve &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;said before&lt;/a&gt;
that your StackOverflow reputation is very important
to &lt;a href=&quot;http://www.teamed.io&quot;&gt;us&lt;/a&gt; when we make a decision on
how much we should pay
a software developer. However, there were many complaints about this metric.
Take, for example, the ones &lt;a href=&quot;http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html#comment-1704113248&quot;&gt;here&lt;/a&gt;
and &lt;a href=&quot;http://www.yegor256.com/2014/10/29/how-much-do-you-cost.html#comment-1697910905&quot;&gt;here&lt;/a&gt;.
In a nutshell, so many of you
disagreed and said that the number of StackOverflow up-votes was
nothing more than a measurement of the amount of time someone spent answering
stupid questions asked by clueless programmers. Let me disagree and
explain why your activity on this platform is so important to
&lt;a href=&quot;/2017/01/24/career-advice.html&quot;&gt;your career&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Les kidnappeurs (1998) by Graham Guit&#39; src=&#39;/images/2017/02/les-kidnappeurs.jpg&#39; longdesc=&#39;#87a94d52&#39;/&gt;&lt;figcaption id=&#39;87a94d52&#39;&gt;Les kidnappeurs (1998) by Graham Guit&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Basically, your StackOverflow profile demonstrates five skills you either
have or don&amp;#39;t. They may not be as important to an office &lt;del&gt;slave&lt;/del&gt;
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;worker&lt;/a&gt;, but if you&amp;#39;re going to work
&lt;a href=&quot;/2016/08/05/distributed-teams-are-higher-quality.html&quot;&gt;remotely&lt;/a&gt;,
they are crucial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Search&lt;/strong&gt;.
The &lt;a href=&quot;http://www.stackexchange.com&quot;&gt;StackExchange&lt;/a&gt; knowledge base
is huge and contains answers to almost any
software question you may ask. You have to know how to search it,
and not only via Google. You have to be familiar with the platform and
its key features, and you can&amp;#39;t learn that without being an active user.
When your reputation is high, it&amp;#39;s a clear indicator to me, your potential
employer, that you&amp;#39;re aware of how to find the right information in this
knowledge base.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Ask&lt;/strong&gt;.
Asking a friend near the coffee machine is one thing. Asking a community
of 6+ million developers is a totally different thing. You have to learn
how to explain your problem, how to formulate the question, how to label
it and title it. Try it for the first time and you will see that it&amp;#39;s not
easy at all; your questions will sound immature, silly, and ambiguous, and they will
end with &amp;quot;Best regards&amp;quot; (something you shouldn&amp;#39;t do at SO). And, of course,
they will get zero up-votes. Later, when you improve, you will be surprised
to see that more and more of them get up-votes, and your reputation will
grow. This will be the indicator that your &amp;quot;question asking&amp;quot; skill is growing up.
For me, your potential employer, it&amp;#39;s a very important skill.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Answer&lt;/strong&gt;.
Initially, you will be afraid to answer. Then, most of your answers will
be down-voted. Then, some of them will be accepted as best answers. Eventually,
some of them will start getting up-votes. Until that happens, you will go
through a lot of frustration and negative emotions. You will learn how to
make your answers helpful&amp;mdash;not just to your friends, because they don&amp;#39;t want
to offend you by saying that you have no idea what you&amp;#39;re talking about, but
to strangers, who care more about the information you&amp;#39;re able to deliver than they
care about you personally. That&amp;#39;s a skill you can&amp;#39;t buy; you have to earn it.
And it&amp;#39;s crucial in a distributed team.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Deal With Morons&lt;/strong&gt;.
You know what to do with them in the office, but on the Internet, they are
much more aggressive and offensive. And there are many of them. You need
to learn and practice a lot before you become competent enough to fetch
information out of that programming community without pulling your hair
out and screaming at the monitor. StackOverflow will help you a lot,
both through questions you will ask and answers you will try to give. And
you can&amp;#39;t learn that in the office dealing with your friends only.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Deal With Smart-asses&lt;/strong&gt;.
Some people there are very smart and knowledgeable, and they will not always
be polite when your questions or mistakes using the platform border on being
too annoying. Again, your office friends won&amp;#39;t teach you how to
deal with those gurus so you can tap their knowledge; you have
to be actively involved in StackOverflow discussions. This skill is very
important for distributed programming, where you have to solve most of the
problems on your own.&lt;/p&gt;

&lt;p&gt;To summarize, StackOverflow is a must-have &lt;em&gt;instrument&lt;/em&gt; for any modern
software developer, no matter what your programming language, your age,
your project, or your professional level are. It&amp;#39;s like an IDE and
&lt;a href=&quot;/2016/02/09/are-you-still-debugging.html&quot;&gt;unit tests&lt;/a&gt;&amp;mdash;you
just use them in order to develop faster. Some people are still using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Vim_%28text_editor%29&quot;&gt;vim&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Emacs&quot;&gt;emacs&lt;/a&gt;
and writing no tests, but you don&amp;#39;t want to be like them.&lt;/p&gt;

&lt;p&gt;StackOverflow is not just a website where you may have an account if you feel
like it. It&amp;#39;s a &lt;em&gt;mandatory&lt;/em&gt; instrument you have to use if you want me, your
potential employer, to value you as a serious engineer. And if you use
this instrument on a daily basis, your
&lt;a href=&quot;/2016/03/08/pimp-up-your-resume.html&quot;&gt;reputation&lt;/a&gt;
will inevitably reach high levels.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://stackexchange.com/users/63162&#39;&gt;&lt;img src=&#39;http://stackexchange.com/users/flair/63162.png&#39; style=&#39;width:208px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;By the way, this is my &lt;a href=&quot;http://stackexchange.com/users/63162&quot;&gt;StackExchange profile&lt;/a&gt;.
I&amp;#39;ve earned the majority of my reputation a few years ago, so now I&amp;#39;m mostly getting up-votes
for the answers and questions I&amp;#39;ve posted earlier. However, I keep using
StackOverflow as I code,
&lt;a href=&quot;http://stackexchange.com/users/63162/yegor256?tab=activity&quot;&gt;every day&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="career" /><summary type="html">I&amp;#39;ve said before
that your StackOverflow reputation is very important
to us when we make a decision on
how much we should pay
a software developer. However, there were many complaints about this metric.
Take, for example, the ones here
and here.
In a nutshell, so many of you
disagreed and said that the number of StackOverflow up-votes was
nothing more than a measurement of the amount of time someone spent answering
stupid questions asked by clueless programmers. Let me disagree and
explain why your activity on this platform is so important to
your career.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/02/les-kidnappeurs.jpg" /></entry><entry><title type="html">Each Private Static Method Is a Candidate for a New Class</title><link href="http://www.yegor256.com/2017/02/07/private-method-is-new-class.html" rel="alternate" type="text/html" title="Each Private Static Method Is a Candidate for a New Class" /><published>2017-02-07T00:00:00+00:00</published><updated>2017-02-07T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/02/07/private-method-is-new-class</id><content type="html" xml:base="http://www.yegor256.com/2017/02/07/private-method-is-new-class.html">&lt;p&gt;Do you have private static methods that help you break
your algorithms down into smaller parts? I do. Every time I write
a new method, I realize that it can be a new class instead. Of course,
I don&amp;#39;t make classes out of all of them, but that has to be the
goal. Private static methods are not reusable, while classes are&amp;mdash;that
is the main difference between them, and it is crucial.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;The Master (2012) by Paul Thomas Anderson&#39; src=&#39;/images/2017/02/the-master.jpg&#39; longdesc=&#39;#b894db33&#39;/&gt;&lt;figcaption id=&#39;b894db33&#39;&gt;The Master (2012) by Paul Thomas Anderson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is an example of a simple class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;key=&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URLEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;secret=&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URLEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is an obvious code duplication, right? The easiest way to resolve
it is to introduce a private static method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;key=&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;secret=&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URLEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looks much better now. But what will happen if we have another class
that needs the exact same functionality? We will have to copy and paste
this private static method &lt;code&gt;encoded()&lt;/code&gt; into it, right?&lt;/p&gt;

&lt;p&gt;A better alternative would be to introduce a new class &lt;code&gt;Encoded&lt;/code&gt; that
implements the functionality we want to share:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Encoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URLEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;key=&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Encoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;secret=&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Encoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now this functionality is 1) reusable, and 2) testable. We can easily
use this class &lt;code&gt;Encoded&lt;/code&gt; in many other places, and we can create a unit
test for it. We were not able to do that with the private static method before.&lt;/p&gt;

&lt;p&gt;See the point? The rule of thumb I&amp;#39;ve already figured for myself is that
&lt;em&gt;each&lt;/em&gt; private static method is a perfect candidate for a new class. That&amp;#39;s
why we don&amp;#39;t have them at all in &lt;a href=&quot;http://www.eolang.org&quot;&gt;EO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By the way, &lt;em&gt;public&lt;/em&gt; static methods are a different story. They are also evil,
but for &lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;different reasons&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><category term="java" /><summary type="html">Do you have private static methods that help you break
your algorithms down into smaller parts? I do. Every time I write
a new method, I realize that it can be a new class instead. Of course,
I don&amp;#39;t make classes out of all of them, but that has to be the
goal. Private static methods are not reusable, while classes are&amp;mdash;that
is the main difference between them, and it is crucial.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/02/the-master.jpg" /></entry><entry><title type="html">Decorating Envelopes</title><link href="http://www.yegor256.com/2017/01/31/decorating-envelopes.html" rel="alternate" type="text/html" title="Decorating Envelopes" /><published>2017-01-31T00:00:00+00:00</published><updated>2017-01-31T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/01/31/decorating-envelopes</id><content type="html" xml:base="http://www.yegor256.com/2017/01/31/decorating-envelopes.html">&lt;p&gt;&lt;del&gt;Sometimes&lt;/del&gt; Very often I need a
&lt;a href=&quot;/2016/09/20/oop-without-classes.html&quot;&gt;class&lt;/a&gt; that implements an
interface by making an instance of another class. Sound weird? Let me show
you an example. There are many classes of that kind in the
&lt;a href=&quot;http://www.takes.org&quot;&gt;Takes Framework&lt;/a&gt;,
and they all are named like &lt;code&gt;*Wrap&lt;/code&gt;. It&amp;#39;s a convenient design concept that,
unfortunately, looks rather verbose in Java. It would be great to have something
shorter, like in &lt;a href=&quot;http://www.eolang.org&quot;&gt;EO&lt;/a&gt; for example.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;North by Northwest (1959) by Alfred Hitchcock&#39; src=&#39;/images/2017/01/north-by-northwest.jpg&#39; longdesc=&#39;#1633d9e6&#39;/&gt;&lt;figcaption id=&#39;1633d9e6&#39;&gt;North by Northwest (1959) by Alfred Hitchcock&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Take a look at
&lt;a href=&quot;https://github.com/yegor256/takes/blob/1.1/src/main/java/org/takes/rs/RsHtml.java&quot;&gt;&lt;code&gt;RsHtml&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;http://www.takes.org&quot;&gt;Takes Framework&lt;/a&gt;. Its design looks
like this (a simplified version with only one primary constructor):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RsHtml&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RsWrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;RsHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, let&amp;#39;s take a look at that
&lt;a href=&quot;https://github.com/yegor256/takes/blob/1.1/src/main/java/org/takes/rs/RsWrap.java&quot;&gt;&lt;code&gt;RsWrap&lt;/code&gt;&lt;/a&gt;
it extends:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RsWrap&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you see, this &amp;quot;decorator&amp;quot; doesn&amp;#39;t do anything except &amp;quot;just decorating.&amp;quot;
It encapsulates another &lt;code&gt;Response&lt;/code&gt; and passes through all method calls.&lt;/p&gt;

&lt;p&gt;If it&amp;#39;s not clear yet, I&amp;#39;ll explain the purpose of &lt;code&gt;RsHtml&lt;/code&gt;. Let&amp;#39;s
say you have text and you want to create a &lt;code&gt;Response&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// you have it already&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HTTP_OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of doing this
&lt;a href=&quot;/2015/02/26/composable-decorators.html&quot;&gt;composition of decorators&lt;/a&gt;
over and over again in many places, you use &lt;code&gt;RsHtml&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// you have it already&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is very convenient, but that &lt;code&gt;RsWrap&lt;/code&gt; is very verbose. There are too many
lines that don&amp;#39;t do anything special; they just forward all method
calls to the encapsulated &lt;code&gt;Response&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How about we introduce a new concept, &amp;quot;decorators&amp;quot;, with a new
keyword, &lt;code&gt;decorates&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RsHtml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorates&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;RsHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsWithStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, in order to create an object, we just call:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RsHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We don&amp;#39;t have any new methods in the decorators, just constructors.
The only purpose for these guys is to create other objects and encapsulate
them. They are not really full-purpose objects. They only help us
create other objects.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why I would call them &amp;quot;decorating envelopes.&amp;quot;&lt;/p&gt;

&lt;p&gt;This idea may look very similar to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29&quot;&gt;Factory&lt;/a&gt; design pattern,
but it doesn&amp;#39;t have
&lt;a href=&quot;/2014/05/05/oop-alternative-to-utility-classes.html&quot;&gt;static methods&lt;/a&gt;,
which we are trying to avoid in
&lt;a href=&quot;/2016/08/15/what-is-wrong-object-oriented-programming.html&quot;&gt;object-oriented programming&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><category term="oop" /><summary type="html">Sometimes Very often I need a
class that implements an
interface by making an instance of another class. Sound weird? Let me show
you an example. There are many classes of that kind in the
Takes Framework,
and they all are named like *Wrap. It&amp;#39;s a convenient design concept that,
unfortunately, looks rather verbose in Java. It would be great to have something
shorter, like in EO for example.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/01/north-by-northwest.jpg" /></entry><entry><title type="html">16 Don’ts of Career Growth</title><link href="http://www.yegor256.com/2017/01/24/career-advice.html" rel="alternate" type="text/html" title="16 Don&#39;ts of Career Growth" /><published>2017-01-24T00:00:00+00:00</published><updated>2017-01-24T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/01/24/career-advice</id><content type="html" xml:base="http://www.yegor256.com/2017/01/24/career-advice.html">&lt;p&gt;I get questions like this all the time: How does one become a senior
software developer or an architect? How does one grow from a junior just
starting to write Java code to the leader of a software team that is
driving a BMW and making $150K+ per year? What are the exact steps that
won&amp;#39;t waste time and will get you there faster? Let me share what I think might
be helpful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;The Grand Budapest Hotel (2014) by Wes Anderson&#39; src=&#39;/images/2017/01/the-grand-budapest-hotel.jpg&#39; longdesc=&#39;#3c7b6134&#39;/&gt;&lt;figcaption id=&#39;3c7b6134&#39;&gt;The Grand Budapest Hotel (2014) by Wes Anderson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Before writing this, I &lt;a href=&quot;https://www.google.com/webhp?q=career%20advice%20software%20developer&quot;&gt;Googled&lt;/a&gt;
a bit and found a lot of interesting suggestions, like to
be helpful, make friends, be language agnostic, code a lot,
try to prove your bosses wrong, avoid conflicts, exercise, etc.
Some of them are good, while others are very wrong, but most of them are just too far
away from the main point.&lt;/p&gt;

&lt;p&gt;I want to share what I believe will look more or less like explicit instructions
of what to do tomorrow to become a $100-per-hour software architect
in a few years. Well, they worked and keep working for me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Loyal&lt;/strong&gt;.
The company you are working for at the moment is just a training
ground, nothing else. Don&amp;#39;t invest an &lt;del&gt;extra&lt;/del&gt; minute of your time into it.
Be selfish; think only about yourself and your personal skills,
knowledge, and experience. They pay you to be dedicated and loyal?
Well, that&amp;#39;s their fault. Use them to learn new technologies, experiment
with new ideas, train and educate yourself, get new certificates,
meet new people, etc. They must work &lt;em&gt;for you&lt;/em&gt;, not the other way around.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;They pay you to be dedicated and loyal? Well, that&amp;#39;s their fault.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Work&lt;/strong&gt;.
Make sure programming is your &lt;em&gt;hobby&lt;/em&gt;, not your job. Everything else
must be secondary, including your family, friends, and WoW.
Software engineering is your family, your passion, your friend, and your life.
Without that attitude, you will always be a slave to those who think like
that. You must not work; you must have fun in front of the laptop. More
fun than you&amp;#39;re having anywhere else. Never do anything that is not fun.
If you notice you&amp;#39;re writing some code because you &amp;quot;have to&amp;quot; instead of
because &amp;quot;you want to,&amp;quot; stop immediately. Something is going wrong and
you&amp;#39;re shooting yourself in the foot; your career is in trouble.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Make Friends&lt;/strong&gt;.
I&amp;#39;m talking about professional relationships in the office, within your projects,
at the company you&amp;#39;re working for. Remember that 99 percent of people will not
become experts. They will remain who they are&amp;mdash;regular
programmers with no passion or ambition. What&amp;#39;s really bad for you is that they will
want you to stay &lt;em&gt;with them&lt;/em&gt;. Nobody will enjoy seeing your growth, and your
closest friends will become your enemies. Not explicitly, but subconsciously they
will do everything they can to prevent you from getting better and leaving
them. And you will have to leave them if you grow up. To avoid all that,
stay professional and don&amp;#39;t make friends at work.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Nobody will enjoy seeing your growth, and your closest friends will become your enemies.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Helpful&lt;/strong&gt;.
There are more than 10 million programmers in the world. They all need help. Why
do you need to help that dude sitting next to you in the office? You won&amp;#39;t
save the world by helping people around you&amp;mdash;forget that religious
nonsense. If you really want to do good for the software industry, focus
on bigger things: make an open source product, write a book, or improve
the documentation of the project you are working on. By
&lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;helping&lt;/a&gt;
people around you and solving &lt;em&gt;their&lt;/em&gt; problems, you just cripple them,
nothing else.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Ask for Help&lt;/strong&gt;.
Expect the same attitude from programmers around you. Again, the same argument applies:
There are &lt;a href=&quot;https://sostats.github.io/&quot;&gt;more than 6 million accounts&lt;/a&gt;
registered on the StackExchange platform; if you need help, ask them. Don&amp;#39;t ask
your friends or colleagues. Train yourself to get help from public sources
or from your project documentation. By asking people around you, you&amp;#39;re making
your life easier in the short term only. In the long run, you will lack that
important skill of knowing how to find information. You will become
a hostage to those friends who help you. Also, don&amp;#39;t learn from people around you;
learn from books, StackOverflow, and open source software.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;You must be prepared to say &amp;quot;No&amp;quot; to your friends, your family, your habits, your wishes, your projects, colleagues, classes, methods, and lines of code.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Waste Time&lt;/strong&gt;.
This is probably the most important advice, which I have to give myself
first of all&amp;mdash;unfortunately, I waste a lot of time. Any growth is always
about saying &amp;quot;No.&amp;quot; You must be prepared to say it to your friends, your
family, your habits, your wishes, your projects, colleagues, classes,
methods, and lines of code. Stop the projects that are taking time and giving
nothing back. Don&amp;#39;t call back those whom you don&amp;#39;t need. Yes, they need you,
but you don&amp;#39;t need them. This may sound harsh and selfish, but that&amp;#39;s the
only way to get where you want to be. Time is your main resource; be
very greedy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Skimp on Growth&lt;/strong&gt;.
You must invest into yourself. First of all, you have to buy books. Don&amp;#39;t steal
them, even though
&lt;a href=&quot;/2016/11/09/why-no-ebooks.html&quot;&gt;you can&lt;/a&gt;.
Buy them, spending your &lt;em&gt;own&lt;/em&gt; money. You will take
them way more serious. You will respect yourself for owning the library.
You will feel that software engineering is forever with you; it&amp;#39;s not temporary,
it&amp;#39;s not just a job, it&amp;#39;s your life. Two books per month is your
absolute minimum. Second, pay for certificates for the
same reasons. Third, purchase software; don&amp;#39;t steal it. Finally, don&amp;#39;t be
cheap on your laptop. It is much more important than your car or a birthday
gift for your spouse. Your laptop is your instrument; it must be
&lt;del&gt;good and expensive&lt;/del&gt; made by Apple. You must go &amp;quot;all in&amp;quot; if you want
to win.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Work Full-Time&lt;/strong&gt;.
As much as possible, try to stay away from full-time, 9-to-5 jobs&amp;mdash;they
pause your professional growth. Permanent or long-term employment gives you
a stable income, a comfortable office environment, a predictable set of
technical problems to solve, and the ability to become an expert over a small
territory. At the same time, it takes away &lt;em&gt;fear&lt;/em&gt;. That&amp;#39;s right, fear. You
are not afraid anymore, and that&amp;#39;s why you stop growing. To grow and grow fast,
you must always be challenged by new tasks, new teams, new projects, and new job
interviews. You must always prove that you are worth something. Ideally,
you must work on two to three projects part-time and change them every 6 to 12 months.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Cheap&lt;/strong&gt;.
Forget the stories that teach &amp;quot;money is not everything, and an interesting project
is much more important&amp;quot;&amp;mdash;they are for losers. Money
&lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;is everything&lt;/a&gt;.
An interesting project will be &lt;em&gt;properly&lt;/em&gt; funded. If it&amp;#39;s not funded, the market
doesn&amp;#39;t need it. What are you doing there then? The only answer is that you&amp;#39;re
not as good as &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;others&lt;/a&gt;;
that&amp;#39;s how they managed to buy you. My advice is to
never pay attention to those cheap stories;
&lt;a href=&quot;/2016/01/12/good-programmers-dont-work-for-equity.html&quot;&gt;demand cash&lt;/a&gt;, up front, as
much as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Skeptical About Certifications&lt;/strong&gt;.
Many programmers think certifications are not important now because
they don&amp;#39;t really validate anything and are issued simply for money by
big companies. Don&amp;#39;t think like that. Certifications help you formalize
your knowledge, put borders around it, and remove gaps. And they demonstrate
to most of your potential employers that you&amp;#39;re truly &lt;em&gt;serious&lt;/em&gt; about software
engineering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Ignore Management&lt;/strong&gt;.
Being a good programmer is not the same as being a good architect or
a team leader. To move higher in that hierarchy, you must understand
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;project management&lt;/a&gt;.
And it&amp;#39;s not just being nice to people and wearing
a suit. It&amp;#39;s a science, with a lot of rules, principles, methods,
and best practices. You must study them and become very good at them. Just
as good as you are in Java or C++. Start with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Project_Management_Body_of_Knowledge&quot;&gt;PMBOK&lt;/a&gt; and earn your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Project_Management_Professional&quot;&gt;PMP&lt;/a&gt; certification.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Underestimate English&lt;/strong&gt;.
Most of my readers are not native English speakers, just like myself.
I&amp;#39;m addressing this paragraph to you: You must improve your speaking and
writing skills; it&amp;#39;s very important. You will never become an
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;expensive&lt;/a&gt;
software architect if you can&amp;#39;t speak and write well. And it can&amp;#39;t be
Russian in English words. It must be as the English people talk in San Francisco,
not in Moscow. The best advice to learn it: Watch English movies with subtitles.
You must speak like Matt Damon or Al Pacino, but not like
&lt;a href=&quot;https://www.youtube.com/watch?v=_0uM_xh7WOg&amp;amp;t=29s&quot;&gt;Mutko&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Ignore Open Source&lt;/strong&gt;.
You must be active in the open source community. It&amp;#39;s
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;a must&lt;/a&gt;. You either
have your own open source project or you actively contribute to an existing
one. Either way, it&amp;#39;s crucial. Working in a closed
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office environment&lt;/a&gt; is
one thing, while writing code that is visible to the entire world is a totally
different thing. Most programmers are simply afraid of that, and they make
up many excuses for why they are not there. Don&amp;#39;t be one of them. Yes, it&amp;#39;s
difficult, it&amp;#39;s stressful, it will consume a lot of your private time, and
nobody will pay you for it. Do it anyway&amp;mdash;this is the fastest way
to grow. Moreover, I would recommend you try to open as much source code
as possible, even if you write it for private and commercial projects.
Some companies won&amp;#39;t be against that.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;I should be able to Google your name and find a lot of professional links, not just your Tinder profile.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Be Invisible&lt;/strong&gt;.
Make sure you have Facebook, Twitter, LinkedIn, and Instagram accounts, along
with a blog. You must be present on the Internet. You&amp;#39;re a serious software
architect? I should be able to Google your name and find a lot of professional
links, not just your Tinder profile. And they will Google your name; don&amp;#39;t
ever doubt that. My book &lt;a href=&quot;/256-bloghacks.html&quot;&gt;&amp;quot;256 Bloghacks&amp;quot;&lt;/a&gt; may
help you understand how to do it right.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Stay Home&lt;/strong&gt;.
Attend seminars, meetups, and software conferences. At least once a month,
you must go somewhere where other programmers are hanging out. You don&amp;#39;t
need to be super active and make a lot of friends&amp;mdash;just be
there and watch. Eventually you will realize that it&amp;#39;s time to become
a speaker. Remember that it doesn&amp;#39;t really matter how much your
coworkers respect you. What matters is what the &lt;em&gt;market&lt;/em&gt; thinks about you.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Playing GTA &amp;#39;til 3 a.m. is not what successful and happy software architects do.&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t Forget to Relax&lt;/strong&gt;.
Nobody likes those smelly dorks who only get one haircut per year. They will
hire you and respect you as a coder, but they will never take you
seriously as a candidate for a role with a lot of &lt;del&gt;money&lt;/del&gt; responsibility. You will
always look like a mentally unstable person. Instead, you must look &amp;quot;like business,&amp;quot; even
though you are a geek. That&amp;#39;s why it&amp;#39;s very important to pay attention to
how you spend your free time&amp;mdash;how you relax. Playing GTA &amp;#39;til 3 a.m. is not
what successful and happy software architects do. Instead, here is your
short list of activities: sports, tourism, and night clubs.
Be a normal person&amp;mdash;that&amp;#39;s the point.&lt;/p&gt;

&lt;p&gt;Did I miss anything important?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="career" /><summary type="html">I get questions like this all the time: How does one become a senior
software developer or an architect? How does one grow from a junior just
starting to write Java code to the leader of a software team that is
driving a BMW and making $150K+ per year? What are the exact steps that
won&amp;#39;t waste time and will get you there faster? Let me share what I think might
be helpful.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/01/the-grand-budapest-hotel.jpg" /></entry></feed>
