<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://www.yegor256.com/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2018-01-23T15:23:03+00:00</updated><id>http://www.yegor256.com/</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Are You a Coder or a Developer?</title><link href="http://www.yegor256.com/2018/01/23/sociotech-skills.html" rel="alternate" type="text/html" title="Are You a Coder or a Developer?" /><published>2018-01-23T00:00:00+00:00</published><updated>2018-01-23T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/23/sociotech-skills</id><content type="html" xml:base="http://www.yegor256.com/2018/01/23/sociotech-skills.html">&lt;p&gt;Software development and coding are two different things. Usually,
the former includes the latter, but not always. Coding produces
lines of code, while software development creates products. Unfortunately,
the majority of programmers joining &lt;a href=&quot;http://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;
now are &lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;coders&lt;/a&gt;.
Even though they claim to be developers, in reality they are lacking the very
important &lt;a href=&quot;https://en.wikipedia.org/wiki/Sociotechnical_system&quot;&gt;sociotechnical&lt;/a&gt;
skills that differentiate product creators from lines-of-code writers.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Hard Men (1996) by J.K. Amalou&#39; src=&#39;/images/2018/01/hardmen.jpg&#39; longdesc=&#39;#716b804f&#39;/&gt;&lt;figcaption id=&#39;716b804f&#39;&gt;Hard Men (1996) by J.K. Amalou&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let me show you the symptoms first.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s call him Mario. He is a very skilled
Java developer, as his &lt;a href=&quot;/2016/03/08/pimp-up-your-resume.html&quot;&gt;resume&lt;/a&gt;
says. He&amp;#39;s been in the industry for ten years or so,
done a few enterprise projects; he seems to be very seasoned. We give him
access to the project and assign a few GitHub tickets.&lt;/p&gt;

&lt;p&gt;In a few hours I get a Facebook message a page long. It says that
he is very glad to be on the project, but &lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;doesn&amp;#39;t understand&lt;/a&gt;
a thing yet
and needs help. Here is a list of questions he prepared and he&amp;#39;s ready for
a phone call to get them answered.&lt;/p&gt;

&lt;p&gt;I reply: &amp;quot;Dude, I love you like a brother, but I don&amp;#39;t have time to answer
your questions. Not because I&amp;#39;m lazy or don&amp;#39;t appreciate your work... Actually,
yes, exactly because of that. I am lazy and don&amp;#39;t want to answer any questions over Messenger.
My answers will be totally wasted, if you, for example, quit the project
tomorrow. Or if someone else joins us in a week and has
exactly the same set of questions. Do I have to explain all over again? I&amp;#39;m too
&lt;del&gt;old&lt;/del&gt; lazy for that.&amp;quot;&lt;/p&gt;

&lt;p&gt;He most probably thinks that I&amp;#39;m an &lt;a href=&quot;/testimonials.html&quot;&gt;arrogant prick&lt;/a&gt;, but what can he do? He
reads &lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;my article&lt;/a&gt;
on this very subject and says &amp;quot;OK, I got it.&amp;quot;&lt;/p&gt;

&lt;p&gt;In half an hour Mario submits a ticket to another (!) repository. The title
is &amp;quot;The problem&amp;quot; and the description says &amp;quot;Help me understand the project.&amp;quot;&lt;/p&gt;

&lt;p&gt;What do I do, as an architect of the project? I close the ticket with a quick
message: &amp;quot;Please, make your tickets more specific.&amp;quot; My response is just one
step away from &amp;quot;Get lost,&amp;quot; but what else can I say? Mario doesn&amp;#39;t know
&lt;a href=&quot;/2014/11/24/principles-of-bug-tracking.html&quot;&gt;how to use&lt;/a&gt;
the ticketing system. He&amp;#39;s most probably been working all his life
in a &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;cozy office&lt;/a&gt;,
where everybody around was his friend. Not even using
chat, just asking questions across the table. I&amp;#39;m asking him to
do something he has never done before. Of course, he doesn&amp;#39;t know how.
He feels ashamed, I suspect.&lt;/p&gt;

&lt;p&gt;What happens next? He comes right back at me in Messenger, with the same
set of questions. Actually, his reaction will depend on his personality.
It may either be anger, confusion, or
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;something else&lt;/a&gt;. But the bottom line
is that Mario is not a software developer, he&amp;#39;s a coder.
He doesn&amp;#39;t understand the dynamics of a modern software project, he doesn&amp;#39;t
know how to use its
&lt;a href=&quot;/2016/08/23/communication-maturity.html&quot;&gt;communication&lt;/a&gt;
instruments, and he has no sociotechnical skills:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Searching for, and finding, information&lt;/li&gt;
&lt;li&gt;Submitting questions, collecting answers&lt;/li&gt;
&lt;li&gt;Adding knowledge to the repository&lt;/li&gt;
&lt;li&gt;Submitting code changes&lt;/li&gt;
&lt;li&gt;Arguing in writing, reviewing changes&lt;/li&gt;
&lt;li&gt;Closing tickets and preventing them from closing&lt;/li&gt;
&lt;li&gt;Maintaining discipline in repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same happens to almost everybody who joins us, unfortunately.&lt;/p&gt;

&lt;p&gt;A modern software project is much more a social activity than code writing.
Knowing how to interact with the team and deal with information
is much more important than knowing how to use design patterns. The only
way to learn these skills is &lt;em&gt;practice&lt;/em&gt;. I&amp;#39;ve &lt;a href=&quot;https://www.facebook.com/yegor256/videos/10214943124281537/&quot;&gt;said it&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=GS45LzE3LPQ&quot;&gt;many times&lt;/a&gt;,
let me repeat it again: If you are not an
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;open source&lt;/a&gt;
and StackOverflow
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;activist&lt;/a&gt;, you most
likely won&amp;#39;t have these skills.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Software development and coding are two different things. Usually,
the former includes the latter, but not always. Coding produces
lines of code, while software development creates products. Unfortunately,
the majority of programmers joining Zerocracy
now are coders.
Even though they claim to be developers, in reality they are lacking the very
important sociotechnical
skills that differentiate product creators from lines-of-code writers.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/hardmen.jpg" /></entry><entry><title type="html">The Educational Aspect of Static Analysis</title><link href="http://www.yegor256.com/2018/01/16/educational-aspect-of-static-analysis.html" rel="alternate" type="text/html" title="The Educational Aspect of Static Analysis" /><published>2018-01-16T00:00:00+00:00</published><updated>2018-01-16T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/16/educational-aspect-of-static-analysis</id><content type="html" xml:base="http://www.yegor256.com/2018/01/16/educational-aspect-of-static-analysis.html">&lt;p&gt;&lt;a href=&quot;https://github.com/yegor256/cactoos/issues/544&quot;&gt;Very often&lt;/a&gt;
new programmers who join our projects ask us whether we
have auto-formatting instruments to make Java code look exactly
the way &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;Qulice&lt;/a&gt;
expects. (Qulice is the static analyzer we use.) I always reply that having
such an automated code polisher would only be harmful and wouldn&amp;#39;t help
the project and its members improve and grow. Here is why I think so.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Blind Fury (1989) by Phillip Noyce&#39; src=&#39;/images/2018/01/blind-fury.jpg&#39; longdesc=&#39;#5789f117&#39;/&gt;&lt;figcaption id=&#39;5789f117&#39;&gt;Blind Fury (1989) by Phillip Noyce&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Static analysis, the way we do it in combination with
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;read-only master branch&lt;/a&gt;,
is a fully automated uncompromising review of your pull request, mostly
intended to spot code formatting mistakes. Say we want Java code in
our entire repository to look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, you refactor it as part of a bigger task, and submit a pull request like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For some of you this may not seem like a big difference, since both code snippets
compile without issues and work exactly the same way. However, for us,
the repository maintainers, it is a big deal. We do want our classes to always be
&lt;code&gt;final&lt;/code&gt;, we do want them to be immutable (so all attributes should also be &lt;code&gt;final&lt;/code&gt;),
we want to prefix all attribute references with &lt;code&gt;this.&lt;/code&gt;, and we want the
code to be formatted the same way, since we believe that the uniformity
of the code seriously increases its maintainability.&lt;/p&gt;

&lt;p&gt;Of course, we could create a tool which you could then use to re-format
the code, to make it look the way we want. But in that case you would
never &lt;em&gt;learn&lt;/em&gt; what the project wants from you and &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You will not know the reasoning behind our rules. You will never think about them.
You will not really care about them. But they are not only about the formatting
of spaces and brackets. There are &lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;over 900&lt;/a&gt;
of them in &lt;a href=&quot;http://www.qulice.com&quot;&gt;Qulice&lt;/a&gt; and some of
them were designed especially for the object-oriented philosophy
&lt;a href=&quot;http://www.elegantobjects.org&quot;&gt;we&lt;/a&gt; are preaching.&lt;/p&gt;

&lt;p&gt;Thus, simply put, we don&amp;#39;t want you to go through the static analysis phase easily.
We want you to suffer in order to learn.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="quality" /><summary type="html">Very often
new programmers who join our projects ask us whether we
have auto-formatting instruments to make Java code look exactly
the way Qulice
expects. (Qulice is the static analyzer we use.) I always reply that having
such an automated code polisher would only be harmful and wouldn&amp;#39;t help
the project and its members improve and grow. Here is why I think so.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/blind-fury.jpg" /></entry><entry><title type="html">Five Stages of Microbudgeting</title><link href="http://www.yegor256.com/2018/01/09/micro-budgeting.html" rel="alternate" type="text/html" title="Five Stages of Microbudgeting" /><published>2018-01-09T00:00:00+00:00</published><updated>2018-01-09T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/09/micro-budgeting</id><content type="html" xml:base="http://www.yegor256.com/2018/01/09/micro-budgeting.html">&lt;p&gt;Microtasking, which &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;I explained&lt;/a&gt;
in an earlier post, works only when each task has a very specific reward
for success and a punishment for failure.
I &lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;believe&lt;/a&gt;
that the best reward and punishment instrument is money. The budget
is fixed, the programmer gets it only when the task is completed (reward), no matter
how much time it cost; if it is not completed, there is no money at all
(punishment). Pure and simple. However, a logical question arises: how can we
know upfront what is the right budget? Who sets it?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Taxi Driver (1976) by Martin Scorsese&#39; src=&#39;/images/2018/01/taxi-driver.jpg&#39; longdesc=&#39;#1d81308e&#39;/&gt;&lt;figcaption id=&#39;1d81308e&#39;&gt;Taxi Driver (1976) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;When we started to play with microtasking in our projects, in 2009, we were
asking programmers to estimate each task. It did work, but only with very
simple and obvious tasks. More complex ones almost always suffered
from either under-estimating or padding&amp;mdash;numbers were either very small
and task performers were complaining in the end, or they were too big and
customers were asking for refunds. It was not a manageable situation.&lt;/p&gt;

&lt;p&gt;Then, we realized that it would be better if all tasks were rather
small, with exactly the same budget. We tried to use two hours as a universal
and fixed estimate. Everything else that didn&amp;#39;t fit&amp;mdash;programmers were allowed
to reject. This model didn&amp;#39;t really work either, because our managers had
to deal with a very large amount of rejected tasks and didn&amp;#39;t know how to make
them smaller, since they were not programmers.&lt;/p&gt;

&lt;p&gt;Finally, in March 2010 we found a solution, which was labeled
&lt;a href=&quot;/2010/03/04/pdd.html&quot;&gt;Puzzle Driven Development&lt;/a&gt; (PDD). According to
this concept: 1) Any task has a very small fixed budget (we use 30 minutes);
2) The task performer is allowed to complete only part of the task;
3) The code that is being returned to &lt;code&gt;master&lt;/code&gt; must include &lt;code&gt;@todo&lt;/code&gt; markers, called &amp;quot;puzzles&amp;quot;;
4) Puzzles are automatically converted to new tasks.&lt;/p&gt;

&lt;p&gt;The beauty of this approach is that the most complicated part of the software
project management&amp;mdash;scope decomposition&amp;mdash;is moved to the shoulders
of those who are the best at it: programmers.&lt;/p&gt;

&lt;p&gt;We are using PDD in all our projects now and have even created a public instrument
for GitHub repositories, which allows anyone to play with PDD at no cost:
&lt;a href=&quot;/2017/04/05/pdd-in-action.html&quot;&gt;0pdd.com&lt;/a&gt;. This is exactly
the same tool we are using in our commercial projects.&lt;/p&gt;

&lt;p&gt;However, if and when you decide to apply microbudgeting to your project,
together with PDD, there will be problems. Psychological ones mostly. In my
experience, people go through five stages when they face microbudgeting
for the first time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Denial&lt;/strong&gt;.
They ask &amp;quot;How is it possible?&amp;quot; and then refuse to hear any explanations.
There are many reasons why microbudgeting and microtasking may not
work&amp;mdash;you will hear them all. Very often they demand a traditional
model of payment, especially if they were invited. They just say that
our model is insane, and if we want to see them work on our projects we have to
pay for as much time as they spend. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Anger&lt;/strong&gt;.
Some of them decide to try. Thanks to their previous multi-year experience,
they expect to be
paid by the end of the day/week/month, no matter what they were doing. Very soon they
realize that the total income for the first day of work was $0.00, even though
they were doing something. They get very angry. They call us crooks, fraudsters,
and many other names. Asking them to read the &lt;a href=&quot;http://datum.zerocracy.com/pages/policy.html&quot;&gt;policy&lt;/a&gt;
again doesn&amp;#39;t help. They simply can&amp;#39;t believe that we are
not going to pay them anything, even
though they were doing something. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bargaining&lt;/strong&gt;.
Almost everybody at this stage recommends we change the model. They
explain why it&amp;#39;s not really effective and how great it would be if we
would pay them the traditional way. They give us examples of their previous
projects, send references from previous employees, and criticize
my blog posts. With some of them I try to argue, when their criticism
is constructive. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Depression&lt;/strong&gt;.
Most programmers are used to doing work because they feel guilty
if the task is not done or the bug is not fixed. Microbudgeting requires
a completely opposite attitude: we all are supposed to work because
we are greedy. Money has to motivate us, not guilt. If there is no money,
we don&amp;#39;t work. Most people, when they see this new motivational paradigm
and don&amp;#39;t see the usual guilt, lose coordination and don&amp;#39;t know what to do.
They can&amp;#39;t really achieve anything, because there is no traditional manager
standing behind them and pushing them forward. They are supposed to go for
the money. They don&amp;#39;t, and so they don&amp;#39;t make any money. Most of them quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Acceptance&lt;/strong&gt;.
Finally, the best of them realize that the model can work if they
follow the rules, which are very simple: be greedy, selfish, egoistic,
money-driven, result-oriented, lazy, misanthropic, heartless, and arrogant.
They accept the fact that they lose, compete, work, and make money only
when they produce results. They start enjoying meritocracy at its best.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You understand already that the vast majority of those who try to work with us
can&amp;#39;t really get to the final point&amp;mdash;they quit somewhere in the middle.
Most probably something very similar will happen on your projects too.&lt;/p&gt;

&lt;p&gt;What is the solution? I don&amp;#39;t really know.&lt;/p&gt;

&lt;p&gt;Statistically speaking, three to five people out of a hundred manage to survive and
become effective and productive. Thus, to build a team of twenty people
you will have to screen and try at least 400.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="xdsd" /><summary type="html">Microtasking, which I explained
in an earlier post, works only when each task has a very specific reward
for success and a punishment for failure.
I believe
that the best reward and punishment instrument is money. The budget
is fixed, the programmer gets it only when the task is completed (reward), no matter
how much time it cost; if it is not completed, there is no money at all
(punishment). Pure and simple. However, a logical question arises: how can we
know upfront what is the right budget? Who sets it?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/taxi-driver.jpg" /></entry><entry><title type="html">Operator new() is Toxic</title><link href="http://www.yegor256.com/2018/01/02/operator-new-is-toxic.html" rel="alternate" type="text/html" title="Operator new() is Toxic" /><published>2018-01-02T00:00:00+00:00</published><updated>2018-01-02T00:00:00+00:00</updated><id>http://www.yegor256.com/2018/01/02/operator-new-is-toxic</id><content type="html" xml:base="http://www.yegor256.com/2018/01/02/operator-new-is-toxic.html">&lt;p&gt;To instantiate objects, in most object-oriented languages,
including Java, Ruby, and C++, we use operator &lt;code&gt;new()&lt;/code&gt;. Well, unless
we use static factory methods, which we don&amp;#39;t use because
&lt;a href=&quot;/2017/11/14/static-factory-methods.html&quot;&gt;they are evil&lt;/a&gt;.
Even though it looks so easy to make a new object any time we need it,
I would recommend to be more careful with this rather toxic operator.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;The Gift (2015) by Joel Edgerton&#39; src=&#39;/images/2018/01/the-gift.jpg&#39; longdesc=&#39;#63533835&#39;/&gt;&lt;figcaption id=&#39;63533835&#39;&gt;The Gift (2015) by Joel Edgerton&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m sure you understand that the problem with this operator is that
it couples objects, making testing and reuse very difficult or even impossible.
Let&amp;#39;s say there is a story in a file that we need to read as a UTF-8 text
(I&amp;#39;m using
&lt;a href=&quot;http://static.javadoc.io/org.cactoos/cactoos/0.25.6/org/cactoos/text/TextOf.html&quot;&gt;&lt;code&gt;TextOf&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;http://www.cactoos.org&quot;&gt;Cactoos&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It seems super simple, but the problem is obvious: class &lt;code&gt;Story&lt;/code&gt; can&amp;#39;t
be reused. It can only read one particular file. Moreover, testing it
will be rather difficult, since it reads the content from exactly one place,
which can&amp;#39;t be changed at all. More formally this problem is known as an
&lt;em&gt;unbreakable dependency&lt;/em&gt;&amp;mdash;we can&amp;#39;t break the link between &lt;code&gt;Story&lt;/code&gt;
and &lt;code&gt;/tmp/story.txt&lt;/code&gt;&amp;mdash;they are together forever.&lt;/p&gt;

&lt;p&gt;To solve this we need to introduce a constructor and let &lt;code&gt;Story&lt;/code&gt; accept
the location of the content as an argument:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, each user of the &lt;code&gt;Story&lt;/code&gt; has to know the name of the file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#39;s not really
convenient, especially for those users who were using &lt;code&gt;Story&lt;/code&gt; before, knowing
nothing about the file path. To help them we introduce
a &lt;a href=&quot;/2015/05/28/one-primary-constructor.html&quot;&gt;secondary constructor&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Here!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we just make an instance through a no-arguments constructor, just like
we did before:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m sure you&amp;#39;re well aware of this technique, which is also known
as &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;dependency injection&lt;/a&gt;.
I&amp;#39;m actually not saying anything new. What I want you to pay attention to here is
the location and the amount of &lt;code&gt;new&lt;/code&gt; operators in all three code snippets.&lt;/p&gt;

&lt;p&gt;In the first snippet both &lt;code&gt;new&lt;/code&gt; operators are in the method &lt;code&gt;text()&lt;/code&gt;.
In the second snippet we lost one of them. In the third snippet one operator
is in the method, while the second one moved up, to the constructor.&lt;/p&gt;

&lt;p&gt;Remember this fact and let&amp;#39;s move on.&lt;/p&gt;

&lt;p&gt;What if the file is not in UTF-8 encoding but in &lt;a href=&quot;https://en.wikipedia.org/wiki/KOI8-R&quot;&gt;KOI8-R&lt;/a&gt;?
Class &lt;code&gt;TextOf&lt;/code&gt; and then method &lt;code&gt;Story.text()&lt;/code&gt; will throw an exception.
However, class &lt;code&gt;TextOf&lt;/code&gt; is capable of reading in any encoding, it just
needs to have a secondary argument for its constructor:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;KOI8_R&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to make &lt;code&gt;Story&lt;/code&gt; capable of using different encodings, we need to
introduce a few additional secondary constructors and modify its primary
constructor:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/story.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardEncodings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#39;s just dependency injection, but pay attention to the locations
of the operator &lt;code&gt;new&lt;/code&gt;. They are all in the
constructors now and none of them are left in the method &lt;code&gt;text()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The tendency here is obvious to me: the more the &lt;code&gt;new&lt;/code&gt; operators stay in the
methods, the less reusable and testable is the class.&lt;/p&gt;

&lt;p&gt;In other words, operator &lt;code&gt;new&lt;/code&gt; is a rather toxic thing, so try to keep its
usage to a minimum in your methods. Make sure you instantiate everything
or almost everything in your secondary constructors.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">To instantiate objects, in most object-oriented languages,
including Java, Ruby, and C++, we use operator new(). Well, unless
we use static factory methods, which we don&amp;#39;t use because
they are evil.
Even though it looks so easy to make a new object any time we need it,
I would recommend to be more careful with this rather toxic operator.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2018/01/the-gift.jpg" /></entry><entry><title type="html">The Formula for Software Quality</title><link href="http://www.yegor256.com/2017/12/26/software-quality-formula.html" rel="alternate" type="text/html" title="The Formula for Software Quality" /><published>2017-12-26T00:00:00+00:00</published><updated>2017-12-26T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/12/26/software-quality-formula</id><content type="html" xml:base="http://www.yegor256.com/2017/12/26/software-quality-formula.html">&lt;p&gt;How do you define the quality of a software product? There is definitely an
intrinsic emotional component to it, which means satisfaction for the user,
willingness to pay, appreciation, positive attitude, and all that. However,
if we put emotions aside, how can we really measure it?
The IEEE &lt;a href=&quot;https://standards.ieee.org/findstds/standard/610.12-1990.html&quot;&gt;says&lt;/a&gt; that
quality is the degree to which a product meets its requirements or
user expectations. But what is the formula? Can we say that it
satisfies requirements and expectations to, say, 73%?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Coco Chanel &amp;amp; Igor Stravinsky (2009) by Jan Kounen&#39; src=&#39;/images/2017/12/coco-chanel-and-igor-stravinsky.jpg&#39; longdesc=&#39;#f962b2fa&#39;/&gt;&lt;figcaption id=&#39;f962b2fa&#39;&gt;Coco Chanel &amp;amp; Igor Stravinsky (2009) by Jan Kounen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is the formula and the logic I&amp;#39;m suggesting.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/2017/05/23/unlimited-number-of-bugs.html&quot;&gt;we know&lt;/a&gt;,
any software product has an unlimited number of bugs. Some of them
are discovered and fixed by the development team, let&amp;#39;s call them &lt;em&gt;F&lt;/em&gt;.
Some of them are discovered by the end users, let&amp;#39;s call them &lt;em&gt;U&lt;/em&gt;. Thus,
the total amount of bugs we are aware of, out of an infinity of them, is &lt;em&gt;F+U&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Obviously, the smaller &lt;em&gt;U&lt;/em&gt; is, the higher the quality. Ideally, &lt;em&gt;U&lt;/em&gt; has
to be zero, which will mean that users don&amp;#39;t see any bugs at all. How can
we achieve that, if the total amount of bugs is infinite? The only possible
way to do it is to increase &lt;em&gt;F&lt;/em&gt;, hoping that &lt;em&gt;U&lt;/em&gt; will decrease automatically.&lt;/p&gt;

&lt;p&gt;Thus, the quality of a product can be measured as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://latex.codecogs.com/svg.latex?$$Q%20=%20%5Cfrac%7BF%7D%7BF%20+%20U%7D$$&#39;/&gt;&lt;/p&gt;

&lt;p&gt;We simply divide the amount of bugs found by the total amount of bugs
visible. Thus, the more bugs we manage to find before our users see them, the higher the
quality.&lt;/p&gt;

&lt;p&gt;A quality of 100% means that no bugs are found by the users. A quality
of 0% means that all bugs are found by them.&lt;/p&gt;

&lt;p&gt;Does it make sense?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="quality" /><category term="management" /><summary type="html">How do you define the quality of a software product? There is definitely an
intrinsic emotional component to it, which means satisfaction for the user,
willingness to pay, appreciation, positive attitude, and all that. However,
if we put emotions aside, how can we really measure it?
The IEEE says that
quality is the degree to which a product meets its requirements or
user expectations. But what is the formula? Can we say that it
satisfies requirements and expectations to, say, 73%?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/12/coco-chanel-and-igor-stravinsky.jpg" /></entry><entry><title type="html">SRP is a Hoax</title><link href="http://www.yegor256.com/2017/12/19/srp-is-hoax.html" rel="alternate" type="text/html" title="SRP is a Hoax" /><published>2017-12-19T00:00:00+00:00</published><updated>2017-12-19T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/12/19/srp-is-hoax</id><content type="html" xml:base="http://www.yegor256.com/2017/12/19/srp-is-hoax.html">&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Single Responsibility Principle&lt;/a&gt;,
according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;&gt;Robert Martin&lt;/a&gt;&amp;#39;s
&lt;a href=&quot;http://amzn.to/2m7LmaA&quot;&gt;Clean Code&lt;/a&gt;,
means that &amp;quot;a class should have only one reason to change.&amp;quot;
Let&amp;#39;s try to decrypt this rather vague statement and see how it
helps us design better object-oriented software. If it does.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;The Thomas Crown Affair (1999) by John McTiernan&#39; src=&#39;/images/2017/12/the-thomas-crown-affair.jpg&#39; longdesc=&#39;#e55eaeb4&#39;/&gt;&lt;figcaption id=&#39;e55eaeb4&#39;&gt;The Thomas Crown Affair (1999) by John McTiernan&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I mentioned SRP once in &lt;a href=&quot;/2017/03/28/solid.html&quot;&gt;my post about SOLID&lt;/a&gt;,
saying that it doesn&amp;#39;t really help programmers understand the good old
&amp;quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29&quot;&gt;high cohesion&lt;/a&gt;&amp;quot;
concept, which was introduced by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Larry_Constantine&quot;&gt;Larry Constantine&lt;/a&gt;
back in 1974. Now let&amp;#39;s see it by example and analyze how we can
improve a class, with the SRP in mind, and whether it will become
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;more object-oriented&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s try the class &lt;a href=&quot;https://github.com/jcabi/jcabi-s3/blob/0.18/src/main/java/com/jcabi/s3/AwsOcket.java&quot;&gt;&lt;code&gt;AwsOcket&lt;/code&gt;&lt;/a&gt;
from &lt;a href=&quot;http://s3.jcabi.com&quot;&gt;jcabi-s3&lt;/a&gt; (I&amp;#39;ve simplified the code):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AwsOcket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Correct me if I&amp;#39;m wrong, but according to SRP this class is responsible for
too many things:
1) checking the existence of an object in AWS S3,
2) reading its content, and
3) modifying its content.
Right? It&amp;#39;s not a good design and it must be changed.&lt;/p&gt;

&lt;p&gt;In order to change it and make it responsible for just one thing we must introduce
a getter, which will return an AWS client and then create three new classes:
&lt;code&gt;ExistenceChecker&lt;/code&gt;, &lt;code&gt;ContentReader&lt;/code&gt;, and &lt;code&gt;ContentWriter&lt;/code&gt;. They will check,
read, and write. Now, in order to read the content and print it to the
console I&amp;#39;m currently doing this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tomorrow, if I refactor the class, I will be doing this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExistenceChecker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aside from the fact that these checkers, readers, and writers are not really
classes, but pure holders of procedures, the usage of this &lt;code&gt;ocket&lt;/code&gt; turns
into a nightmare. We can&amp;#39;t really know anymore what will happen with it
when we pass it somewhere. We can&amp;#39;t, for example, guarantee that the content
that is coming from it is decrypted or decoded on the fly. We simply can&amp;#39;t
decorate it. It is not an object anymore, but a holder of an AWS client,
which is used by some other classes somewhere.&lt;/p&gt;

&lt;p&gt;Yes, now it is responsible for only one thing: encapsulating the reference
to the AWS client. It is a perfect class as far as SRP is concerned. But it
is not an object anymore.&lt;/p&gt;

&lt;p&gt;The same will happen with any class if you apply the SRP principle to its
full extent: it will become a holder of data or of other objects, with a
collection of setters and getters on top of them. Maybe with one extra
method in addition to those.&lt;/p&gt;

&lt;p&gt;My point is that SRP is a wrong idea.&lt;/p&gt;

&lt;p&gt;Making classes small and cohesive is a good
idea, but making them responsible &amp;quot;for one thing&amp;quot; is a misleading simplification
of a &amp;quot;high cohesion&amp;quot; concept. It only turns them into dumb carriers of something
else, instead of being encapsulators and decorators of smaller entities, to
construct bigger ones.&lt;/p&gt;

&lt;p&gt;In our fight for this fake SRP idea we lose a much more important principle,
which really is about true object-oriented programming and thinking:
encapsulation. It is much less important how many things an object is
responsible for than how tightly it protects the entities it encapsulates.
A monster object with a hundred methods is much less of a problem than a DTO with five pairs of
getters and setters! This is because a DTO spreads the problem all over the code,
where we can&amp;#39;t even find it, while the monster object is always right in front
of us and we can always refactor it into smaller pieces.&lt;/p&gt;

&lt;p&gt;Encapsulation comes first, size goes next, if ever.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">The Single Responsibility Principle,
according to Robert Martin&amp;#39;s
Clean Code,
means that &amp;quot;a class should have only one reason to change.&amp;quot;
Let&amp;#39;s try to decrypt this rather vague statement and see how it
helps us design better object-oriented software. If it does.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/12/the-thomas-crown-affair.jpg" /></entry><entry><title type="html">Alan Kay Was Wrong About Him Being Wrong</title><link href="http://www.yegor256.com/2017/12/12/alan-kay-was-wrong.html" rel="alternate" type="text/html" title="Alan Kay Was Wrong About Him Being Wrong" /><published>2017-12-12T00:00:00+00:00</published><updated>2017-12-12T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/12/12/alan-kay-was-wrong</id><content type="html" xml:base="http://www.yegor256.com/2017/12/12/alan-kay-was-wrong.html">&lt;p&gt;From time to time someone asks me what I think about what
&lt;a href=&quot;https://en.wikipedia.org/wiki/Alan_Kay&quot;&gt;Alan Kay&lt;/a&gt;, the father of OOP,
the designer of &lt;a href=&quot;https://en.wikipedia.org/wiki/Smalltalk&quot;&gt;Smalltalk&lt;/a&gt;,
the first object-oriented language,
&lt;a href=&quot;http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html&quot;&gt;said&lt;/a&gt;
in 1998 about OOP. He literally said that the very
term &amp;quot;object&amp;quot; was misleading and a more appropriate one would be &amp;quot;messaging.&amp;quot;
Here is what I think.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Rain Man (1988) by Barry Levinson&#39; src=&#39;/images/2017/12/rain-man.jpg&#39; longdesc=&#39;#7b3f07bb&#39;/&gt;&lt;figcaption id=&#39;7b3f07bb&#39;&gt;Rain Man (1988) by Barry Levinson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I believe that there are two orthogonal means of interaction between objects:
messaging and composition. Let&amp;#39;s say, we have a point and a canvas:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is how messaging would look:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with messaging is that it keeps objects on the same
level of abstraction. They communicate
as equal and independent &amp;quot;modules,&amp;quot; sending
&lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;data messages&lt;/a&gt; to each other.
Even though they look object-oriented, the entire communication pattern
is very procedural. We try to encapsulate as much as we can inside a single
object, however inevitably still having to expose a lot of its data in order to
be able to &amp;quot;connect&amp;quot; it with other objects.&lt;/p&gt;

&lt;p&gt;We turn objects into &amp;quot;little computers,&amp;quot; as &lt;a href=&quot;http://amzn.to/2npiZZQ&quot;&gt;some books&lt;/a&gt; refer to them. They
expect data to come in, they process the data, and return back some new data.
The maintainability problem is not really solved with this approach&amp;mdash;we
still have to deal with a lot of data, remembering its semantic outside of
the objects. In other words, there is no true encapsulation.&lt;/p&gt;

&lt;p&gt;On the other hand, this is how composition would look instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintedOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every time we need objects to communicate we create a bigger object that
encapsulates more primitive ones, letting them interact inside. Of course,
the data will also go from object to object, but that will happen
inside a bigger object. We can even make the encapsulator
and the encapsulated &amp;quot;friends,&amp;quot; as &lt;a href=&quot;/2016/12/20/can-objects-be-friends.html&quot;&gt;I suggested before&lt;/a&gt;,
to make that interaction more transparent and avoid data exposure through
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters&lt;/a&gt; or
even
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;printers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me
&lt;a href=&quot;http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html&quot;&gt;quote&lt;/a&gt;
Alan Kay again:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The key in making great and growable systems is much more to design how
  its modules communicate rather than what their internal properties
  and behaviors should be.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems to me that he means &lt;em&gt;modules&lt;/em&gt;, which are not objects. These are
different things. Modules are elements of the architecture, while objects
are elements of the design. These are two different levels. At the level of
architecture we obviously need messages and Kay&amp;#39;s statement is perfectly correct.
However, at the level of design we need composable structures,
to increase maintainability and messaging is not what can help us achieve
this goal.&lt;/p&gt;

&lt;p&gt;Thus, I believe Alan Kay was right when he invented objects, called them
objects, and gave their programming style the &amp;quot;object-oriented&amp;quot; title.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><summary type="html">From time to time someone asks me what I think about what
Alan Kay, the father of OOP,
the designer of Smalltalk,
the first object-oriented language,
said
in 1998 about OOP. He literally said that the very
term &amp;quot;object&amp;quot; was misleading and a more appropriate one would be &amp;quot;messaging.&amp;quot;
Here is what I think.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/12/rain-man.jpg" /></entry><entry><title type="html">DAO is Yet Another OOP Shame</title><link href="http://www.yegor256.com/2017/12/05/data-access-object.html" rel="alternate" type="text/html" title="DAO is Yet Another OOP Shame" /><published>2017-12-05T00:00:00+00:00</published><updated>2017-12-05T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/12/05/data-access-object</id><content type="html" xml:base="http://www.yegor256.com/2017/12/05/data-access-object.html">&lt;p&gt;Someone asked me what I think about DAO and I realized that, even
though I wrote about
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;ORM&lt;/a&gt;,
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTO&lt;/a&gt;,
and
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters&lt;/a&gt;,
I haven&amp;#39;t had a chance
yet to mention DAO. Here is my take on it: it&amp;#39;s as much of a shame
as its friends&amp;mdash;ORM, DTO, and getters. In a nutshell,
a &lt;a href=&quot;http://www.oracle.com/technetwork/java/dataaccessobject-138824.html&quot;&gt;Data Access Object&lt;/a&gt;
is an object &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_access_object&quot;&gt;that&lt;/a&gt;
&amp;quot;provides an abstract interface to some type of database or other
persistence mechanism.&amp;quot; The purpose is noble, but the implementation
is terrible.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Requiem for a Dream (2000) by Darren Aronofsky&#39; src=&#39;/images/2017/12/requiem-for-a-dream.jpg&#39; longdesc=&#39;#edf81e4e&#39;/&gt;&lt;figcaption id=&#39;edf81e4e&#39;&gt;Requiem for a Dream (2000) by Darren Aronofsky&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is how it &lt;a href=&quot;https://stackoverflow.com/a/19154487/187141&quot;&gt;may look&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookDAO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Other methods here ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The idea is simple&amp;mdash;method &lt;code&gt;find()&lt;/code&gt; creates
a &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTO&lt;/a&gt;
&lt;code&gt;Book&lt;/code&gt;, someone else injects new data into it and calls &lt;code&gt;update()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BookDAO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BookDAOFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBookDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Don Quixote&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What is wrong, you ask? Everything that was wrong with
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;ORM&lt;/a&gt;,
but instead of a &amp;quot;session&amp;quot; we have this DAO. The problem remains the
same: the &lt;code&gt;book&lt;/code&gt; is not an object, but a data container. I quote
my own three-year-old statement from the &lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;ORM article&lt;/a&gt;,
with a slight change in the name:
&amp;quot;DAO, instead of encapsulating database interaction inside an object,
extracts it away, literally tearing a solid and cohesive living organism apart.&amp;quot;
For more details, please check that article.&lt;/p&gt;

&lt;p&gt;However, I have to say that I have something like DAOs in most of my
&lt;a href=&quot;/pets.html&quot;&gt;pet projects&lt;/a&gt;, but they
don&amp;#39;t return or accept DTOs. Instead, they return objects and sometimes accept
operations on them. Here are a few examples. Look at this
&lt;a href=&quot;https://github.com/yegor256/wring/blob/0.17.4/src/main/java/io/wring/model/Pipes.java&quot;&gt;&lt;code&gt;Pipes&lt;/code&gt;&lt;/a&gt;
interface from
&lt;a href=&quot;/2016/03/15/wring-dispatcher-github-notifications.html&quot;&gt;Wring.io&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pipes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Pipe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Its method &lt;a href=&quot;https://github.com/yegor256/wring/blob/0.17.4/src/main/java/io/wring/model/Pipes.java#L55&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;
creates a new item in the &amp;quot;collection&amp;quot; and method
&lt;a href=&quot;https://github.com/yegor256/wring/blob/0.17.4/src/main/java/io/wring/model/Pipes.java#L62&quot;&gt;&lt;code&gt;pipe()&lt;/code&gt;&lt;/a&gt;
returns a single object from the collection. The
&lt;a href=&quot;https://github.com/yegor256/wring/blob/0.17.4/src/main/java/io/wring/model/Pipe.java&quot;&gt;&lt;code&gt;Pipe&lt;/code&gt;&lt;/a&gt;
is not a DTO, it is
a normal object that is fully capable of doing all necessary database
operations, without any help from a DAO. For example, there is
&lt;a href=&quot;https://github.com/yegor256/wring/blob/0.17.4/src/main/java/io/wring/model/Pipe.java#L63&quot;&gt;&lt;code&gt;Pipe.status(String)&lt;/code&gt;&lt;/a&gt;
method to update its status. I&amp;#39;m not going to use &lt;code&gt;Pipes&lt;/code&gt; for that, I just do
&lt;code&gt;pipe.status(&amp;quot;Hello, world!&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is yet another example from
&lt;a href=&quot;/2016/03/30/jare-instant-free-cdn.html&quot;&gt;Jare.io&lt;/a&gt;: interface
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.11/src/main/java/io/jare/model/Base.java&quot;&gt;&lt;code&gt;Base&lt;/code&gt;&lt;/a&gt;
which returns a list of objects of type
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.11/src/main/java/io/jare/model/Domain.java&quot;&gt;&lt;code&gt;Domain&lt;/code&gt;&lt;/a&gt;.
Then, when we want to delete a domain, we just call
&lt;a href=&quot;https://github.com/yegor256/jare/blob/0.11/src/main/java/io/jare/model/Domain.java#L54&quot;&gt;&lt;code&gt;domain.delete()&lt;/code&gt;&lt;/a&gt;.
The domain is fully capable of doing all necessary database manipulations.&lt;/p&gt;

&lt;p&gt;The problem with DAO is right in its name, I believe. It says that we are
accessing &amp;quot;data&amp;quot; and does exactly that: goes to the database, retrieves
some data, and returns &lt;em&gt;data&lt;/em&gt;. Not an object, but data, also known as a
&amp;quot;data transfer object.&amp;quot; As we &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;discussed before&lt;/a&gt;,
direct data manipulations are what break encapsulation and make
object-oriented code procedural and unmaintainable.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html">Someone asked me what I think about DAO and I realized that, even
though I wrote about
ORM,
DTO,
and
getters,
I haven&amp;#39;t had a chance
yet to mention DAO. Here is my take on it: it&amp;#39;s as much of a shame
as its friends&amp;mdash;ORM, DTO, and getters. In a nutshell,
a Data Access Object
is an object that
&amp;quot;provides an abstract interface to some type of database or other
persistence mechanism.&amp;quot; The purpose is noble, but the implementation
is terrible.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/12/requiem-for-a-dream.jpg" /></entry><entry><title type="html">How Micro Is Your Tasking?</title><link href="http://www.yegor256.com/2017/11/28/microtasking.html" rel="alternate" type="text/html" title="How Micro Is Your Tasking?" /><published>2017-11-28T00:00:00+00:00</published><updated>2017-11-28T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/11/28/microtasking</id><content type="html" xml:base="http://www.yegor256.com/2017/11/28/microtasking.html">&lt;p&gt;&amp;quot;What are you doing now?&amp;quot;&amp;mdash;when you hear this question
from your boss, be aware: you&amp;#39;re dealing with a
&lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;micromanager&lt;/a&gt;.
Keeping us busy is the key objective of these creatures and this
is what makes them so annoying. To the contrary,
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;effective managers&lt;/a&gt;
make sure we are &lt;em&gt;productive&lt;/em&gt;, meaning that our results satisfy
their expectations. They are not interested in knowing what we are
doing to deliver them&amp;mdash;they manage the project, instead of managing us.
And the first step to making the project manageable is to decompose its
scope into smaller pieces.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;Carlito&amp;#39;s Way (1993) by Brian De Palma&#39; src=&#39;/images/2017/11/carlitos-way.jpg&#39; longdesc=&#39;#fa318a0d&#39;/&gt;&lt;figcaption id=&#39;fa318a0d&#39;&gt;Carlito&amp;#39;s Way (1993) by Brian De Palma&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Imagine you want to re-design your apartment, having a few thousand
dollars for this job. You hire a group of people and give them all your
money up front. They ask you to come back in two months, when everything will
be ready. You say &amp;quot;OK&amp;quot; and wait for two months. I&amp;#39;m sure you already know
what I&amp;#39;m getting at&amp;mdash;this project most probably will be a failure, to
some extent. In the worst case you won&amp;#39;t see these guys ever, they will just
steal your money. In the best case, they will do something that will
look &amp;quot;nice,&amp;quot; but not as nice as you expected.&lt;/p&gt;

&lt;h2 id=&quot;why-do-we-micromanage&quot;&gt;Why do we micromanage?&lt;/h2&gt;

&lt;p&gt;What do you do in order to increase your chances of getting the best case scenario?
That&amp;#39;s right, you micromanage them: you visit them every day, you ask them
the famous &amp;quot;What are you doing now?&amp;quot; question, you push them when they are
getting lazy, you control, you dominate, you annoy, you
&amp;quot;stay on top,&amp;quot; you play the guilt card when they miss or forget,
you &lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;punish&lt;/a&gt;
them every way you can.&lt;/p&gt;

&lt;p&gt;You don&amp;#39;t do that because you&amp;#39;re evil. You just know that otherwise they
will trash your apartment, will forget things, will miss
something, will make mistakes, will spend more time and money than they are
supposed to, will choose wrong fabrics, will purchase the furniture
you don&amp;#39;t like, and will do many other things you&amp;#39;re well aware of if you&amp;#39;ve
ever dealt with interior designers and house builders.&lt;/p&gt;

&lt;p&gt;The more aggressive you are, the higher the chances you win.&lt;/p&gt;

&lt;p&gt;And it&amp;#39;s not because you are evil. You&amp;#39;re not evil, you&amp;#39;re stupid
(not you personally, my dear and respected reader, but you get the point).&lt;/p&gt;

&lt;p&gt;The problem is that the project is not manageable. That&amp;#39;s why you
have to resort to the last possible measure&amp;mdash;micromanagement. Why is the
project not manageable? Because its scope is not broken down into
pieces. It contains a large single job called &amp;quot;Redesign The Apartment.&amp;quot;&lt;/p&gt;

&lt;p&gt;One of the key success factors for manageability is the famous 0/100 rule, which
requires any task to be either &amp;quot;in progress&amp;quot; or &amp;quot;complete.&amp;quot; There can be
nothing in the middle. When such a rule is in place, the task can be
delegated to its performer and they can become responsible for its completion,
they can be trusted.&lt;/p&gt;

&lt;p&gt;We can&amp;#39;t &amp;quot;trust&amp;quot; our single large task to the performer, simply because it&amp;#39;s too
big to be trusted. If they fail, the cost of failure will be too high. We have
to take a &lt;em&gt;micro&lt;/em&gt;-scope and get into the task to manage it from the inside,
annoying its performers, whom we are supposed to trust. The micromanagement
we do is &lt;em&gt;inevitable&lt;/em&gt;, because the scope is not broken down.&lt;/p&gt;

&lt;p&gt;Scope decomposition was invented mostly in order to solve this very problem:
to make the project more manageable. We need small tasks in the scope in order
to be able to delegate them and never go inside in order to check what&amp;#39;s going on
there, who is doing what, why, and where.&lt;/p&gt;

&lt;p&gt;The smaller the tasks we can break the scope into, the better.&lt;/p&gt;

&lt;h2 id=&quot;how-small-can-tasks-be&quot;&gt;How small can tasks be?&lt;/h2&gt;

&lt;p&gt;In our projects we break project scope into tasks of 30 minutes each.
This may sound too extreme for you, but it works for us. We call them micro-tasks.
We started to practice micro-tasking about seven years ago. We experimented
with different task sizes, from 10 hours to 15 minutes, but eventually
came down to 30 minutes.&lt;/p&gt;

&lt;p&gt;When tasks are bigger, we lose the manageability and simply get back to
macro-tasking. When tasks are smaller, the context switching overhead
becomes too annoying.&lt;/p&gt;

&lt;p&gt;In our experience, a senior programmer, if fully dedicated to a project, completes
6-10 tasks a day. This means that they spend 3-5 hours working, while
the rest of the time is spent on doing something else. This is a much more
effective use of work time than we can achieve with traditional macro-tasking
management, where programmers barely work for two hours a day, spending
the rest of their time on something else (my personal observation).&lt;/p&gt;

&lt;h2 id=&quot;what-obstacles-did-we-have&quot;&gt;What obstacles did we have?&lt;/h2&gt;

&lt;p&gt;If you decide to go for micro-tasking, you will most likely have the same or similar
obstacles that we&amp;#39;ve had. Here is a short list of them and my advice, which
may help if one day you decide to break a &amp;quot;Develop a Mobile App&amp;quot; task
into, say, 2,500+ micro tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vagueness&lt;/strong&gt;.
Definition of done, exit criteria, requirements, expectations&amp;mdash;there
are many names, which are all about our inability to define
what exactly we expect programmers to do. Software development
by definition includes a lot of unknowns, creativity, experiments,
and risks. Programmers will tell you that they can&amp;#39;t guarantee anything
in most cases, and can&amp;#39;t really give any valid promises.
We solve that by
&lt;a href=&quot;/2010/03/04/pdd.html&quot;&gt;PDD&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distraction&lt;/strong&gt;.
Programmers are used to doing many different things at the same time:
they write code, help others, watch YouTube, scroll Facebook,
swear at Reddit, and read my blog. Initially most of them
won&amp;#39;t like the idea of having explicit tasks in front of them,
simply because they put a structure on their work time, making it
much more visible to the management. They will tell you that they
have many other things to do aside from your bloody tasks.
We solve that by
&lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;paying by result&lt;/a&gt; and
&lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;prohibition of chitchats&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Laziness&lt;/strong&gt;.
Just like that apartment designers, programmers also love to get paid
and do nothing. Who doesn&amp;#39;t, right? They will tell you that their
work is more complicated than you think, that they need much more time,
that they need to investigate the problem first, that reading
documentation also takes a lot of time, etc. They are simply spoiled
by the &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;traditional macro-tasking&lt;/a&gt;
where they are paid by the month and nobody
really controls their results. They are used to being &lt;del&gt;office slaves&lt;/del&gt; lazy.
We solve that by
&lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;paying by result&lt;/a&gt;
and the lazy ones simply quit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Responsibility&lt;/strong&gt;.
Micro-tasking will make individual results visible. When tasks are large
people tend to work with them in groups and it&amp;#39;s unclear exactly who is responsible
for failures and successes. Smaller tasks emphasize mistakes
and make people &amp;quot;pay&amp;quot; for them. Not necessarily with cash,
but definitely some way or other. Most programmers will find this concept
very new and disturbing&amp;mdash;they&amp;#39;ve almost never paid for their own
mistakes before and never had their own tasks. The responsibility was
always spread across the group.
We solve that by
&lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;monetary rewards and punishments&lt;/a&gt;,
which make them very motivated and failure-ready.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Resentment&lt;/strong&gt;.
This is one of the most popular and the most annoying of problems: they
will tell you that they are &amp;quot;not monkeys.&amp;quot; They will actually combine
all problems listed above and say that the right way to solve them
is to give programmers freedom and let them do their job, since they
are smart enough and don&amp;#39;t need any management from the top. And they
will mostly be saying it quite honestly, with no intent to manipulate. The thing
is that they are used to macro-tasking and believe that this is the
only and the right way.
I&amp;#39;m trying to solve this by writing this very blog post.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There could be something else, but this is a more or less an exhaustive list
of the problems we were faced with.&lt;/p&gt;

&lt;h2 id=&quot;where-micro-tasking-didnt-work&quot;&gt;Where micro-tasking didn&amp;#39;t work&lt;/h2&gt;

&lt;p&gt;Obviously, any approach has its pros and cons. Micro-tasking seems to be
the most effective management paradigm for us. However, it&amp;#39;s not applicable
everywhere, according to our experience. There are territories where
we failed to apply it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Prototyping&lt;/strong&gt;.
Every project or a new big feature starts with a prototype, which
requires one or two people sitting next to each other, thinking, and
experimenting. We tried to break this piece of work into smaller
parts, but failed. It seems that this process has to be done as a single
solid work package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;UI/UX&lt;/strong&gt;.
We were mostly working with server-side Java/Ruby/C++ projects for the last
few years and didn&amp;#39;t have many opportunities to apply micro-tasking to the
UI/UX jobs. However, whatever we did try never really worked: graphic
designers weren&amp;#39;t able to decompose their tasks into smaller parts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customers&lt;/strong&gt;.
We tried to decompose the task of eliciting requirements from our
clients and failed a few times. Maybe our clients were stupid
(I doubt that), maybe requirements were too complex, or maybe
our system analysts were not professional enough. The bottom line
is that we realized that such a task must be done as a solid piece of
work, without any decomposition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fire-fighting&lt;/strong&gt;.
When the speed of delivery is the most important concern, micro-tasking
doesn&amp;#39;t work for us. The overhead for dispatching and specifying tasks
was taking too much time. When something is really urgent, we have
to do the traditional macro-tasking and just &amp;quot;make it work.&amp;quot; Then
we get back to micro-tasking.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything else, including programming, unit testing, manual testing,
performance/load testing, integration testing, deployment, code review,
documentation, and even training, can and must be managed via micro tasks.&lt;/p&gt;

&lt;h2 id=&quot;what-benefits-do-we-get&quot;&gt;What benefits do we get?&lt;/h2&gt;

&lt;p&gt;The most important benefit of micro-tasking is that the project becomes
more manageable, as was mentioned above. Here is a more detailed break
down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Money works&lt;/strong&gt;.
When tasks are very small, we can use good old dollar bills
to motivate programmers. We can throw away literally
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;all other&lt;/a&gt;
instruments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;We pay less&lt;/strong&gt;.
We seriously lower our expenses, even though hourly rates of our programmers
are
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;higher&lt;/a&gt;
than many other projects can afford. I did a more or less
&lt;a href=&quot;/2014/04/11/cost-of-loc.html&quot;&gt;detailed analysis&lt;/a&gt;
a few years ago, which demonstrated that our projects
were 30 (!) times more cost efficient than traditional ones.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Motivation is high&lt;/strong&gt;.
Despite a very common stereotype that small and isolated tasks demotivate
their performers, we see quite the opposite reaction: programmers
are excited when it finally becomes possible to work within well-defined
and explicit boundaries, independently, and in isolation. Not all of them, though.
My personal observation is: only 25% of them can understand and enjoy
micro-tasking. Others are either not professional enough or spoiled
by &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office slavery&lt;/a&gt;,
where it&amp;#39;s possible to do almost nothing and stay very respected and well rewarded.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Turnover is not painful&lt;/strong&gt;.
To make micro-tasking possible the management has to learn how to
specify them: explicitly, unambiguously, and fast. When such a high
level of transparency, formality, and agility (at the same time) is
achieved, the project becomes less dependent on
&lt;a href=&quot;/2015/12/29/turnover-is-good-for-maintainability.html&quot;&gt;experts&lt;/a&gt;.
We lose the fear of losing people, because almost everything
we need to know about the project is inside our task tracking system
and project documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easier to parallel&lt;/strong&gt;.
Smaller tasks are easier to delegate to a larger amount of programmers.
In some projects we sometimes have over 40 programmers at the same time, while
the amount of tasks is relatively small (up to 200).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Metrics work&lt;/strong&gt;.
When one programmer closes 40-50 tasks per week and another one closes
5-10, it does mean something, keeping in mind that all tasks are almost
equal in size. We use this metric (and a few others) to make organizational
and discipline decisions. In a macro-tasking environment almost no HR metrics
really work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Quality is enforceable&lt;/strong&gt;.
Large amounts of small tasks implies that we constantly and frequently
close them. Each closure is an important point for quality control. That&amp;#39;s
exactly where we have the ability to say &amp;quot;No&amp;quot; and reject the deliverables
that violate our quality standards. With big tasks this &amp;quot;No&amp;quot; is much more
painful for programmers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Risks are acceptable&lt;/strong&gt;.
It&amp;#39;s impossible to accept the risk of the entire apartment redesign failure,
since its cost is too high&amp;mdash;a few thousand dollars. However,
it is absolutely affordable to accept a risk of a kitchen lamp installation.
Even if it falls and breaks, we will spend a few dollars and buy a new one.
We don&amp;#39;t need to control the &amp;quot;lamp person&amp;quot;&amp;mdash;we have a luxury
to delegate and trust.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The benefits programmers get overlap with our benefits. If they
are professional and motivated enough they find it effective and productive
to work with micro tasks, which are always well defined and properly paid.&lt;/p&gt;

&lt;h2 id=&quot;are-we-monkeys-or-not&quot;&gt;Are we monkeys or not?&lt;/h2&gt;

&lt;p&gt;Now the most typical complaint we hear about micro-tasking is: &amp;quot;It is for
junior programmers who are OK with being code monkeys.&amp;quot; To be honest,
I also thought so a few years ago, when we started to experiment with
&lt;a href=&quot;/2014/04/17/how-xdsd-is-different.html&quot;&gt;XDSD&lt;/a&gt;. What I quickly
found out is that the most professional and self-motivated developers
were enjoying micro-tasking, while their less mature and less skilled colleagues
were finding it difficult to keep up.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">&amp;quot;What are you doing now?&amp;quot;&amp;mdash;when you hear this question
from your boss, be aware: you&amp;#39;re dealing with a
micromanager.
Keeping us busy is the key objective of these creatures and this
is what makes them so annoying. To the contrary,
effective managers
make sure we are productive, meaning that our results satisfy
their expectations. They are not interested in knowing what we are
doing to deliver them&amp;mdash;they manage the project, instead of managing us.
And the first step to making the project manageable is to decompose its
scope into smaller pieces.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/11/carlitos-way.jpg" /></entry><entry><title type="html">Trust. Pay. Lose.</title><link href="http://www.yegor256.com/2017/11/21/trust-pay-lose.html" rel="alternate" type="text/html" title="Trust. Pay. Lose." /><published>2017-11-21T00:00:00+00:00</published><updated>2017-11-21T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/11/21/trust-pay-lose</id><content type="html" xml:base="http://www.yegor256.com/2017/11/21/trust-pay-lose.html">&lt;p&gt;&amp;quot;Listen up, dude,&amp;quot; a friend of mine said when he called yesterday, &amp;quot;I trusted them
for over a year&amp;mdash;we&amp;#39;ve been partners. They&amp;#39;ve been programming it all
and I was busy doing business development. Now they&amp;#39;ve quit and
I&amp;#39;m left with nothing! What am I supposed to do with all these
JavaScript files? How do I even know they are mine? Moreover, they don&amp;#39;t even
want to cooperate. I feel like a hostage. Please, help me out!&amp;quot;
What could I say? &amp;quot;It&amp;#39;s too late, dude,&amp;quot; was my answer, &amp;quot;but the
good news is&amp;mdash;you are not the first to have this problem.&amp;quot;&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;The Godfather (1972) by Francis Ford Coppola&#39; src=&#39;/images/2017/11/godfather.jpg&#39; longdesc=&#39;#d7b7beb5&#39;/&gt;&lt;figcaption id=&#39;d7b7beb5&#39;&gt;The Godfather (1972) by Francis Ford Coppola&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&amp;quot;Trust, pay, lose&amp;quot; is what I would call this very typical scenario.&lt;/p&gt;

&lt;p&gt;First, you &lt;strong&gt;trust&lt;/strong&gt; your programmers. You call them partners.
You believe in them. You are sure that you picked the best ones. They seem
to be very reliable. You look at their
&lt;a href=&quot;/2016/03/08/pimp-up-your-resume.html&quot;&gt;resumes&lt;/a&gt; and feel excited. They
know JavaScript, and DevOps, and GitHub, and even Big Data. They definitely
are the best. Moreover, they&amp;#39;ve been in this business for ten years. What else
do you need, right?&lt;/p&gt;

&lt;p&gt;Second, you &lt;strong&gt;pay&lt;/strong&gt; them. How else would they work, right? True talent
is expensive, we all &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;know that&lt;/a&gt;.
They bill you &lt;a href=&quot;/2014/10/21/incremental-billing.html&quot;&gt;regularly&lt;/a&gt;
for &lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;the time&lt;/a&gt; they
spend working on your project. You
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;feel excited&lt;/a&gt;
to see how your money
turns into the software that works. They
demonstrate new versions regularly. There are bugs, of course, but this is how it
&lt;a href=&quot;/2015/06/18/good-programmers-bug-free.html&quot;&gt;should be&lt;/a&gt;,
right? They &lt;a href=&quot;/2017/01/10/how-to-teach-customers.html&quot;&gt;explain&lt;/a&gt;
everything to you and you keep paying.&lt;/p&gt;

&lt;p&gt;Finally, you &lt;strong&gt;lose&lt;/strong&gt; when you realize that it&amp;#39;s their software,
&lt;a href=&quot;/2015/05/04/how-to-protect-business-idea.html&quot;&gt;not yours&lt;/a&gt;.
They quit because of some business reasons and you&amp;#39;re left with nothing.
You can&amp;#39;t understand those files. You don&amp;#39;t even have them, since they
are somewhere in the programmers&amp;#39; Git repository. You hire some more people
to help you save what&amp;#39;s left, but they say that it&amp;#39;s time to start
everything from scratch. Your frustration is enormous and you&amp;#39;re ready
to go back to the first step&amp;mdash;you trust these new guys, because they
definitely seem legit, not like those previous crooks.&lt;/p&gt;

&lt;p&gt;Seems familiar?&lt;/p&gt;

&lt;p&gt;What is the alternative, you ask?&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t trust.&lt;/p&gt;

&lt;p&gt;Instead, before you start a project, hire an
&lt;a href=&quot;/2014/12/18/independent-technical-reviews.html&quot;&gt;independent expert&lt;/a&gt;,
who will regularly (ideally, every two weeks) review everything
these guys are doing and tell you where and how you &lt;em&gt;may&lt;/em&gt; lose.
This expert will maintain a Risk List for you. You will take necessary
preemptive actions.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t trust us programmers. We are smart, lazy and spoiled.&lt;/p&gt;

&lt;p&gt;You will lose.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">&amp;quot;Listen up, dude,&amp;quot; a friend of mine said when he called yesterday, &amp;quot;I trusted them
for over a year&amp;mdash;we&amp;#39;ve been partners. They&amp;#39;ve been programming it all
and I was busy doing business development. Now they&amp;#39;ve quit and
I&amp;#39;m left with nothing! What am I supposed to do with all these
JavaScript files? How do I even know they are mine? Moreover, they don&amp;#39;t even
want to cooperate. I feel like a hostage. Please, help me out!&amp;quot;
What could I say? &amp;quot;It&amp;#39;s too late, dude,&amp;quot; was my answer, &amp;quot;but the
good news is&amp;mdash;you are not the first to have this problem.&amp;quot;</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.yegor256.com/images/2017/11/godfather.jpg" /></entry></feed>
