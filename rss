<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2016-08-24T06:25:31+00:00</updated><id>http://www.yegor256.com/</id><title>Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><entry><title>Eight Levels of Communication Maturity</title><link href="http://www.yegor256.com/2016/08/23/communication-maturity.html" rel="alternate" type="text/html" title="Eight Levels of Communication Maturity" /><published>2016-08-23T00:00:00+00:00</published><updated>2016-08-23T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/23/communication-maturity</id><content type="html" xml:base="http://www.yegor256.com/2016/08/23/communication-maturity.html">&lt;p&gt;Each software team organizes its communications in its own
specific way. Some use Slack, Trello, or GitHub; others just sit together
in the same room. There are many methods and tools. I believe
it&amp;#39;s possible to rank them by the amount of &lt;strong&gt;damage&lt;/strong&gt; they cause
to your project. This is the list of all of them I&amp;#39;m aware of at the moment.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Fschizopolis.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Schizopolis (1996) by Steven Soderbergh&#39;/&gt;&lt;figcaption&gt;Schizopolis (1996) by Steven Soderbergh&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The damage I&amp;#39;m talking about is caused mostly by the distance between these communication
channels and project artifacts. The farther away people stay from documents,
the bigger the risk of &lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;losing information&lt;/a&gt;.
And lost information is the first source of trouble in any project.&lt;/p&gt;

&lt;p&gt;Here is the list; it starts with the most damaging communication means
and goes down to the most &lt;strong&gt;mature&lt;/strong&gt; and professional ones, which cause the
least amount of trouble:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Coffee Breaks&lt;/strong&gt;.
This is the most dangerous thing &amp;mdash; you can never
keep track of them, you won&amp;#39;t know what they were about, and there
is no &amp;quot;search&amp;quot; button anywhere. Everything you say standing next
to that coffee machine will be lost. Nothing will be converted
to project artifacts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Phone Calls&lt;/strong&gt;.
A bit better than coffee breaks but still a big issue. Phone calls
are completely untraceable. Information you
exchange on those calls is gone forever. Well, you can record them,
but searching through phone call records is a tough task that nobody will
do, ever.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Meetings&lt;/strong&gt;.
This is the next step after coffee breaks, because there is some structure
and minutes. Meetings can be recorded (both on and offline), with their results filed somewhere
and decisions documented. In reality, none of that will actually happen.
Meetings will just kill your time and your sponsor&amp;#39;s money.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Emails&lt;/strong&gt;.
If you can put some formality into emails and discipline all participants,
your email history may be considered a project artifact in itself. How
organized and easily browseable will that artifact be? That&amp;#39;s a good question.
In most cases, it will just be a mess.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mailing Lists&lt;/strong&gt;.
They are better than emails, because some software is archiving them and
making them available and browseable. But it will be difficult to find where
exactly what topic was discussed, where decisions were made and why,
who suggested what, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Slack&lt;/strong&gt;.
There are many similar alternatives that are basically online chats.
The main problem with all of them is that it&amp;#39;s difficult to categorize
such a chat, group messages together, or find something later. It&amp;#39;s merely a flow
of information that becomes useless just a few days after. Of course,
if you really want to find something there, it&amp;#39;s possible. But the quality
of such a &amp;quot;document&amp;quot; is very low.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Trello&lt;/strong&gt;.
By Trello I mean any task/ticket tracking system &amp;mdash; they are great instruments
to immediately turn conversations and discussions into project artifacts.
You don&amp;#39;t need to document anything; it&amp;#39;s already there. The problem is
that they are still rather far away from the main project artifact:
the source code with its commits, merge conflicts, build logs, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt;.
This is the best instrument you can use. It integrates communications
with the product itself. The code you write and the discussions you
have around it are literally in the same place.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which one of these is your project using right now? I would strongly recommend
you stay away from communication channels at the top of this list.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><summary>Each software team organizes its communications in its own
specific way. Some use Slack, Trello, or GitHub; others just sit together
in the same room. There are many methods and tools. I believe
it&amp;#39;s possible to rank them by the amount of damage they cause
to your project. This is the list of all of them I&amp;#39;m aware of at the moment.</summary></entry><entry><title>Whatâ€™s Wrong With Object-Oriented Programming?</title><link href="http://www.yegor256.com/2016/08/15/what-is-wrong-object-oriented-programming.html" rel="alternate" type="text/html" title="What&#39;s Wrong With Object-Oriented Programming?" /><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/15/what-is-wrong-object-oriented-programming</id><content type="html" xml:base="http://www.yegor256.com/2016/08/15/what-is-wrong-object-oriented-programming.html">&lt;p&gt;Recently, I was trying to convince a few of my readers that
&lt;a href=&quot;/2016/07/14/who-is-object.html&quot;&gt;a better understanding of an object&lt;/a&gt;
in OOP would help us solve many problems in existing pseudo-object-oriented languages.
Then, suddenly, the question came up: &amp;quot;&lt;strong&gt;What problems?&lt;/strong&gt;&amp;quot;
I was puzzled. I thought it was obvious that the vast majority of modern software
written in modern OO languages is unmaintainable and simply a mess.
So I Googled a bit, and this is what I found (in chronological order).&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Fswingers.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Swingers (1996) by Doug Liman&#39;/&gt;&lt;figcaption&gt;Swingers (1996) by Doug Liman&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The list of quotes is sorted in chronological order, with the oldest on
the top:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/edsger-dijkstra.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Edsger_W._Dijkstra&quot;&gt;&lt;strong&gt;Edsger W. Dijkstra&lt;/strong&gt;&lt;/a&gt; (1989)&lt;br/&gt;
&amp;quot;TUG LINES&amp;quot;, Issue 32, August 1989&lt;br/&gt;
&amp;quot;Object oriented programs are offered as alternatives to correct ones&amp;quot;
and
&amp;quot;Object-oriented programming is an exceptionally bad idea
which could only have originated in California.&amp;quot;&lt;/p&gt;

&lt;!-- 1995 --&gt;

&lt;!--
[Paul Graham](https://en.wikipedia.org/wiki/Paul_Graham_%28computer_programmer%29)
in [Ansi Common Lisp](http://amzn.to/29JwmOz), page 408:
&quot;The object-oriented model makes it easy to build up programs
by accretion. What this often means, in practice, is that it
provides a structured way to write spaghetti code.&quot;
--&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/alan-kay.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Alan_Kay&quot;&gt;&lt;strong&gt;Alan Kay&lt;/strong&gt;&lt;/a&gt; (1997)&lt;br/&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=oKg1hTOQXoY&quot;&gt;The Computer Revolution hasn&amp;#39;t happened yet&lt;/a&gt;&lt;br/&gt;
&amp;quot;I invented the term object-oriented, and I can tell you
I did not have C++ in mind.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/paul-graham.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Paul_Graham_%28computer_programmer%29&quot;&gt;&lt;strong&gt;Paul Graham&lt;/strong&gt;&lt;/a&gt; (2003)&lt;br/&gt;
&lt;a href=&quot;http://www.paulgraham.com/hundred.html&quot;&gt;The Hundred-Year Language&lt;/a&gt;&lt;br/&gt;
&amp;quot;Object-oriented programming offers a sustainable way to write spaghetti code.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/richard-mansfield.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;strong&gt;Richard Mansfield&lt;/strong&gt; (2005)&lt;br/&gt;
&lt;a href=&quot;http://www.4js.com/files/documents/products/genero/WhitePaperHasOOPFailed.pdf&quot;&gt;Has OOP Failed?&lt;/a&gt;&lt;br/&gt;
&amp;quot;With OOP-inflected programming languages, computer software becomes more
verbose, less readable, less descriptive, and harder to modify and maintain.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/eric-raymond.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.catb.org/esr/&quot;&gt;&lt;strong&gt;Eric Raymond&lt;/strong&gt;&lt;/a&gt; (2005)&lt;br/&gt;
&lt;a href=&quot;http://catb.org/esr/writings/taoup/html/unix_and_oo.html&quot;&gt;The Art of UNIX Programming&lt;/a&gt;&lt;br/&gt;
&amp;quot;The OO design concept initially proved valuable in the design of graphics
systems, graphical user interfaces, and certain kinds of simulation.
To the surprise and gradual disillusionment of many, it has proven
difficult to demonstrate significant benefits of OO outside those areas.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/jeff-atwood.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://blog.codinghorror.com/&quot;&gt;&lt;strong&gt;Jeff Atwood&lt;/strong&gt;&lt;/a&gt; (2007)&lt;br/&gt;
&lt;a href=&quot;https://blog.codinghorror.com/your-code-oop-or-poo/&quot;&gt;Your Code: OOP or POO?&lt;/a&gt;&lt;br/&gt;
&amp;quot;OO seems to bring at least as many problems to the table as it solves.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/linus-torvalds.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linus_Torvalds&quot;&gt;&lt;strong&gt;Linus Torvalds&lt;/strong&gt;&lt;/a&gt; (2007)&lt;br/&gt;
&lt;a href=&quot;http://article.gmane.org/gmane.comp.version-control.git/57918/&quot;&gt;this email&lt;/a&gt;&lt;br/&gt;
&amp;quot;C++ is a horrible language. ...
C++ leads to really, really bad design choices. ...
In other words, the only way to do good, efficient, and system-level and
portable C++ ends up to limit yourself to all the things that are
basically available in C. And limiting your project to C means that people
don&amp;#39;t screw that up, and also means that you get a lot of programmers that
do actually understand low-level issues and don&amp;#39;t screw things up with any
idiotic &amp;#39;object model&amp;#39; crap.&amp;quot;&lt;/p&gt;

&lt;!-- 2009 --&gt;

&lt;!--
[Rich Hickey](https://github.com/richhickey)
at [Are We There Yet?](https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey), JVM Languages Summit 2009 Keynote:
&quot;...&quot;
--&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/oscar-nierstrasz.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Oscar_Nierstrasz&quot;&gt;&lt;strong&gt;Oscar Nierstrasz&lt;/strong&gt;&lt;/a&gt; (2010)&lt;br/&gt;
&lt;a href=&quot;http://blog.jot.fm/2010/08/26/ten-things-i-hate-about-object-oriented-programming&quot;&gt;Ten Things I Hate About Object-Oriented Programming&lt;/a&gt;&lt;br/&gt;
&amp;quot;OOP is about taming complexity through modeling, but we have not
mastered this yet, possibly because we have difficulty distinguishing
real and accidental complexity.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/rich-hickey.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/richhickey&quot;&gt;&lt;strong&gt;Rich Hickey&lt;/strong&gt;&lt;/a&gt; (2010)&lt;br/&gt;
&lt;a href=&quot;http://www.se-radio.net/2010/03/episode-158-rich-hickey-on-clojure/&quot;&gt;SE Radio, Episode 158&lt;/a&gt;&lt;br/&gt;
&amp;quot;I think that large objected-oriented programs struggle
with increasing complexity as you build this large object graph of
mutable objects. You know, trying to understand and keep in your mind
what will happen when you call a method and what will the side effects be.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/eric-allman.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Eric_Allman&quot;&gt;&lt;strong&gt;Eric Allman&lt;/strong&gt;&lt;/a&gt; (2011)&lt;br/&gt;
&lt;a href=&quot;http://queue.acm.org/blogposting.cfm?id=34658&quot;&gt;Programming Isn&amp;#39;t Fun Any More&lt;/a&gt;&lt;br/&gt;
&amp;quot;I used to be enamored of object-oriented programming. I&amp;#39;m now finding myself
leaning toward believing that it is a plot designed to destroy joy. The
methodology looks clean and elegant at first, but when you actually get
into real programs they rapidly turn into horrid messes.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/joe-armstrong.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;http://joearms.github.io/&quot;&gt;&lt;strong&gt;Joe Armstrong&lt;/strong&gt;&lt;/a&gt; (2011)&lt;br/&gt;
&lt;a href=&quot;http://harmful.cat-v.org/software/OO_programming/why_oo_sucks&quot;&gt;Why OO Sucks&lt;/a&gt;&lt;br/&gt;
&amp;quot;Objects bind functions and data structures together in
indivisible units. I think this is a fundamental error since functions and
data structures belong in totally different worlds.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/rob-pike.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Rob_Pike&quot;&gt;&lt;strong&gt;Rob Pike&lt;/strong&gt;&lt;/a&gt; (2012)&lt;br/&gt;
&lt;a href=&quot;https://plus.google.com/+RobPikeTheHuman/posts/hoJdanihKwb&quot;&gt;here&lt;/a&gt;&lt;br/&gt;
&amp;quot;Object-oriented programming, whose essence is nothing more than
programming using data with associated behaviors, is a powerful idea.
It truly is. But it&amp;#39;s not always the best idea. ...
Sometimes data is just data and functions are just functions.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/john-barker.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://www.linkedin.com/in/johnebgood&quot;&gt;&lt;strong&gt;John Barker&lt;/strong&gt;&lt;/a&gt; (2013)&lt;br/&gt;
&lt;a href=&quot;https://blog.pivotal.io/labs/labs/all-evidence-points-to-oop-being-bullshit&quot;&gt;All evidence points to OOP being bullshit&lt;/a&gt;&lt;br/&gt;
&amp;quot;What OOP introduces are abstractions that attempt to improve code
sharing and security. In many ways, it is still essentially procedural code.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/lawrence-krubner.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://www.linkedin.com/in/krubner&quot;&gt;&lt;strong&gt;Lawrence Krubner&lt;/strong&gt;&lt;/a&gt; (2014)&lt;br/&gt;
&lt;a href=&quot;http://www.smashcompany.com/technology/object-oriented-programming-is-an-expensive-disaster-which-must-end&quot;&gt;Object Oriented Programming is an expensive disaster which must end&lt;/a&gt;&lt;br/&gt;
&amp;quot;We now know that OOP is an experiment that failed.
It is time to move on. It is time that we, as a community, admit that
this idea has failed us, and we must give up on it.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/asaf-shelly.jpg&quot; class=&quot;quote-author&quot;/&gt;&lt;br/&gt;
&lt;a href=&quot;https://www.linkedin.com/in/asafshelly&quot;&gt;&lt;strong&gt;Asaf Shelly&lt;/strong&gt;&lt;/a&gt; (2015)&lt;br/&gt;
&lt;a href=&quot;https://software.intel.com/en-us/blogs/2008/08/22/flaws-of-object-oriented-modeling/&quot;&gt;Flaws of Object Oriented Modeling&lt;/a&gt;&lt;br/&gt;
&amp;quot;Reading an object oriented code you can&amp;#39;t see the big picture and
it is often impossible to review all the small functions that
call the one function that you modified.&amp;quot;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;I can&amp;#39;t prove this quote (maybe you can help?):&lt;/p&gt;

&lt;p&gt;Alan Kay:
&amp;quot;Java and C++ make you think that the new ideas are like the old ones.
Java is the most distressing thing to happen to computing since MS-DOS.&amp;quot;&lt;/p&gt;

&lt;p&gt;If you have something to add to this list, please post a comment below.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>Recently, I was trying to convince a few of my readers that
a better understanding of an object
in OOP would help us solve many problems in existing pseudo-object-oriented languages.
Then, suddenly, the question came up: &amp;quot;What problems?&amp;quot;
I was puzzled. I thought it was obvious that the vast majority of modern software
written in modern OO languages is unmaintainable and simply a mess.
So I Googled a bit, and this is what I found (in chronological order).</summary></entry><entry><title>If-Then-Else Is a Code Smell</title><link href="http://www.yegor256.com/2016/08/10/if-then-else-code-smell.html" rel="alternate" type="text/html" title="If-Then-Else Is a Code Smell" /><published>2016-08-10T00:00:00+00:00</published><updated>2016-08-10T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/10/if-then-else-code-smell</id><content type="html" xml:base="http://www.yegor256.com/2016/08/10/if-then-else-code-smell.html">&lt;p&gt;In most cases (maybe even in all of them), if-then-else can and must
be replaced by a decorator or simply another object.
I&amp;#39;ve been planning to write about this for almost a year but only today found
a real case in my own code that perfectly
illustrates the problem. So it&amp;#39;s time to demonstrate it and explain.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Ffargo.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Fargo (1996) by Coen Brothers&#39;/&gt;&lt;figcaption&gt;Fargo (1996) by Coen Brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Take a look at the class
&lt;a href=&quot;https://github.com/yegor256/rultor/blob/1.61.9/src/main/java/com/rultor/dynamo/DyTalk.java&quot;&gt;&lt;code&gt;DyTalk&lt;/code&gt;&lt;/a&gt;
from
&lt;a href=&quot;https://github.com/yegor256/rultor&quot;&gt;yegor256/rultor&lt;/a&gt;
and its method
&lt;a href=&quot;https://github.com/yegor256/rultor/blob/1.61.9/src/main/java/com/rultor/dynamo/DyTalk.java#L127-L169&quot;&gt;&lt;code&gt;modify()&lt;/code&gt;&lt;/a&gt;.
In a nutshell, it prevents you from saving any data to the DynamoDB if there were no
modifications of the XML document. It&amp;#39;s a valid case, and it has to be
validated, but the way it&amp;#39;s implemented is simply wrong. This is
how it works (an oversimplified example):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DyTalk&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Talk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Directive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Apply the modification&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// and save the new XML document&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// to the DynamoDB table.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What&amp;#39;s wrong, you wonder? This if-then-else forking functionality doesn&amp;#39;t really belong
to this object &amp;mdash; that&amp;#39;s what&amp;#39;s wrong. Modifying the XML document
and saving it to the database is &lt;em&gt;its functionality&lt;/em&gt;, while
not saving anything if the modification instructions set is empty is not
(it&amp;#39;s very similar to &lt;a href=&quot;/2016/01/26/defensive-programming.html&quot;&gt;defensive programming&lt;/a&gt;).
Instead, there should be a decorator, which would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickTalk&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Talk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Talk&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Directive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, if and when we need our talk to be more clever in situations where
the list of directives is empty, we decorate it with &lt;code&gt;QuickTalk&lt;/code&gt;.
The benefits are obvious: the &lt;code&gt;DyTalk&lt;/code&gt; class is smaller and therefore
more cohesive.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;If it&amp;#39;s possible to convert if-then-else forking to a decorator, it has to be done&lt;/aside&gt;

&lt;p&gt;But the question is bigger than just that. Can we make a rule out of it? Can we say that
&lt;strong&gt;each and every forking&lt;/strong&gt; is bad and should be moved out of a class? What about
forking that happens inside a method and can&amp;#39;t be converted to a decorator?&lt;/p&gt;

&lt;p&gt;I&amp;#39;m suggesting this simple rule: If it&amp;#39;s possible to convert if-then-else forking
to a decorator, it has to be done. If it&amp;#39;s not done, it&amp;#39;s a code smell.
Make sense?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>In most cases (maybe even in all of them), if-then-else can and must
be replaced by a decorator or simply another object.
I&amp;#39;ve been planning to write about this for almost a year but only today found
a real case in my own code that perfectly
illustrates the problem. So it&amp;#39;s time to demonstrate it and explain.</summary></entry><entry><title>A Distributed Team Delivers Code of Higher Quality</title><link href="http://www.yegor256.com/2016/08/05/distributed-teams-are-higher-quality.html" rel="alternate" type="text/html" title="A Distributed Team Delivers Code of Higher Quality" /><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/05/distributed-teams-are-higher-quality</id><content type="html" xml:base="http://www.yegor256.com/2016/08/05/distributed-teams-are-higher-quality.html">&lt;p&gt;OK, the title is not exactly accurate. I&amp;#39;ve missed the &amp;quot;can&amp;quot; word. A distributed
team &lt;strong&gt;can&lt;/strong&gt; deliver code of much higher quality than a co-located one,
and now I&amp;#39;ll explain why. Of course, not every distributed team can do that.
Most of them can&amp;#39;t even deliver code that works, let alone quality code.
But if a team &amp;mdash; a distributed one &amp;mdash; is managed according to the principles
I&amp;#39;ll explain now, the quality will be much higher than the same team can
achieve if co-located. What I&amp;#39;m going to show you is that working in a
remote mode, if done right, &lt;strong&gt;guarantees&lt;/strong&gt; higher quality of code. Surprised?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Foceans-twelve.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Ocean&amp;amp;apos;s Twelve (2004) by Steven Soderbergh&#39;/&gt;&lt;figcaption&gt;Ocean&amp;#39;s Twelve (2004) by Steven Soderbergh&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are basically four simple ingredients to success ... you know what, there is
actually &lt;em&gt;one&lt;/em&gt; main ingredient, and its name is &lt;strong&gt;control&lt;/strong&gt;. If we want quality
to be at some level, we have to &lt;strong&gt;enforce&lt;/strong&gt; it. We can&amp;#39;t just declare it; we
need to &lt;strong&gt;make&lt;/strong&gt; it high.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Quality can be achieved only if it is controlled and enforced&lt;/aside&gt;

&lt;p&gt;How do software teams make high-quality code? Oh, there are many proven methods.
First, you need a very modern office where &lt;del&gt;programmers&lt;/del&gt; developers
sit on cushioned chairs, play table tennis, drink smoothies, and write
diagrams on walls. Second, you should buy them many books. Books have to be
everywhere in the office, and they have to be about everything from Python
and Haskell to Docker, Agile, and lean startups. The more books, the higher
the quality of the code they write. And third, you have to pay them well. The
more expensive the developer is, the higher the quality he or she writes.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m sure you understand that I&amp;#39;m joking. None of these &amp;quot;proven methods&amp;quot; will either
guarantee quality or motivate serious software engineers. Quality can
be achieved only if it is &lt;strong&gt;controlled and enforced&lt;/strong&gt;. And this is also what
motivates programmers best of all &amp;mdash; the fact that the quality
is so important for management that they find mechanisms of
control and enforcement, and they invest in them. Table tennis and lean
startup books are not even close to those mechanisms.&lt;/p&gt;

&lt;p&gt;So, now let&amp;#39;s discuss those four ingredients of quality enforcement, which
we practice in our projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read-Only Master Branch&lt;/strong&gt;. Nobody can make changes directly to
the master branch; neither the architect nor the project sponsor. The
master branch is technically read-only. This means that in order
to compromise the quality of our code, everyone has to go through a
pull request, pre-flight build, and automated merge procedure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chats Are Prohibited&lt;/strong&gt;. Any modification to our codebase, even a very small one,
must be submitted in a pull request. A code review
must also occur in the pull request. We strictly disallow any
&lt;a href=&quot;/2016/08/23/communication-maturity.html&quot;&gt;informal communications&lt;/a&gt;
between programmers, including chats, phone
calls, emails, or face-to-face discussions. This means that the chances
of quality compromises due to friendship, informal agreements, and trade-offs
are very low.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Build Is Fragile&lt;/strong&gt;. We believe that the higher the quality bar, the more
difficult it is to modify any piece of code without breaking the build.
We put a lot of quality checks right into the build to make the lives
of programmers more difficult. Well, this is not our goal, but it
happens. The code has to pass all static analysis
checks, a test coverage threshold, mutability threshold, and many others.
This means that bad code won&amp;#39;t reach the repo, ever.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Micro Payments for Deliverables&lt;/strong&gt;. We pay only for closed tickets, and
they are each very small (up to two hours). We don&amp;#39;t pay for time spent
in the office or in front of the computer. We pay only when tickets
are closed &amp;mdash; no close, no pay. This means that programmers are motivated
to &lt;strong&gt;close&lt;/strong&gt; them, nothing else.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, as you can see, there is an intentionally created conflict. On one hand,
programmers have to close tickets and deliver working code. On the other
hand, it&amp;#39;s rather difficult to do; because the quality bar is high, there is
no room to make compromises, and there is no technical possibility to
go around an issue. Good programmers survive in this conflict and manage to deliver
and get paid. Well-paid.&lt;/p&gt;

&lt;p&gt;And now, to the main point of this blog post &amp;mdash; do you think it&amp;#39;s possible
to build all that in a co-located team? I don&amp;#39;t think so. First of all,
you won&amp;#39;t be able to prohibit
&lt;a href=&quot;/2016/08/23/communication-maturity.html&quot;&gt;informal communications&lt;/a&gt;. No matter how many
times you ask developers to communicate in tickets, they will resolve
most of their technical questions face-to-face. It&amp;#39;s inevitable.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;People are people; nobody likes to hit that quality bar multiple times a day&lt;/aside&gt;

&lt;p&gt;Second, you won&amp;#39;t be able to pay for results only, because programmers will
complain that they are doing a lot of communication in the office that
has to be paid somehow. In reality, they will spend two to three hours per day on
actually writing code, and the rest of the time will be spent on
coffee breaks, Trump talks, and Facebook scrolling. Again, it&amp;#39;s
inevitable.&lt;/p&gt;

&lt;p&gt;And third, people are people. Nobody likes to hit that quality bar
multiple times a day. They will complain, and eventually you will give them
direct access to the master branch. First, you will give it to the architect,
then to a few senior developers, then to a few good friends who you
absolutely trust. Then to everybody, just in case. It&amp;#39;s inevitable.&lt;/p&gt;

&lt;p&gt;To summarize, I believe that co-located teams are just not made for
quality programming. For fun &amp;mdash; yes. For creativity &amp;mdash; maybe.
For burning investors&amp;#39; money &amp;mdash; absolutely. For quality &amp;mdash; not really.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><summary>OK, the title is not exactly accurate. I&amp;#39;ve missed the &amp;quot;can&amp;quot; word. A distributed
team can deliver code of much higher quality than a co-located one,
and now I&amp;#39;ll explain why. Of course, not every distributed team can do that.
Most of them can&amp;#39;t even deliver code that works, let alone quality code.
But if a team &amp;mdash; a distributed one &amp;mdash; is managed according to the principles
I&amp;#39;ll explain now, the quality will be much higher than the same team can
achieve if co-located. What I&amp;#39;m going to show you is that working in a
remote mode, if done right, guarantees higher quality of code. Surprised?</summary></entry><entry><title>8+2 Maturity Levels of Continuous Integration</title><link href="http://www.yegor256.com/2016/08/01/continuous-integration-maturity.html" rel="alternate" type="text/html" title="8+2 Maturity Levels of Continuous Integration" /><published>2016-08-01T00:00:00+00:00</published><updated>2016-08-01T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/08/01/continuous-integration-maturity</id><content type="html" xml:base="http://www.yegor256.com/2016/08/01/continuous-integration-maturity.html">&lt;p&gt;There are a number of levels you have to go through before your
continuous integration pipeline becomes perfect. I found eight of
them and presented my findings at &lt;a href=&quot;http://slcdevopsdays.org/cr3ativconference/continuous-integration-may-have-negative-effects/&quot;&gt;DevOpsDays&lt;/a&gt;
in Salt Lake City a few weeks ago
(watch the &lt;a href=&quot;https://www.youtube.com/watch?v=3dJP_LtUGgg&quot;&gt;video&lt;/a&gt;).
Now it&amp;#39;s time to write them down and ask
you &amp;mdash; Which level are you at? Post your answer below.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F08%2Ftwins.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Twins (1988) by Ivan Reitman&#39;/&gt;&lt;figcaption&gt;Twins (1988) by Ivan Reitman&lt;/figcaption&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;.
Here you just write source code on your computers and maybe somewhere on
the server. The best you can do here is to build it manually, say,
every day. Is it continuous integration? Well, to some extent, provided
you don&amp;#39;t forget to compile and package everything regularly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automated Build&lt;/strong&gt;.
At this level, your build is automated, which means you can compile,
test, and package the entire product with just one line at the command line.
Pay attention; one line. You must be able to hit one button and either
get an error or a successful build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;.
At this level, you keep your source code in Git. You can keep it in some
other source control system, but that would be strange &amp;mdash; Git is the
&lt;em&gt;status quo&lt;/em&gt; at the moment. You should be able to get a new computer,
with nothing in it, check out the source code from a Git repository, and
run a full build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pull Requests&lt;/strong&gt;.
Each and every change to your source code must be submitted through
a pull request, which means that you host your repository on GitHub. You
may host it somewhere else, but again, that would be strange because
GitHub is the &lt;em&gt;status quo&lt;/em&gt; at the moment. Again, nobody should be able to commit
anything directly to the
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;master branch&lt;/a&gt;
except through forks and pull requests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Reviews&lt;/strong&gt;.
Every pull request must pass a mandatory
&lt;a href=&quot;/2015/02/09/serious-code-reviewer.html&quot;&gt;code review&lt;/a&gt;
before it gets merged.
You must have some code review policy that explains who does reviews,
what happens if the author doesn&amp;#39;t agree with the reviewer, etc. But no
pull request may be merged unless it has been reviewed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tests&lt;/strong&gt;.
At this level, your code is covered by unit tests (and integration tests), and every change
comes with a new test. Your automated build runs all tests together and fails
if any of them fail.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;.
Checking the &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality&lt;/a&gt;
of your code without running it is what static analysis
is about. At this level, the quality of your code is checked by the automated
build. If the quality is lower than the threshold, the build fails.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pre-Flight Builds&lt;/strong&gt;.
This idea is explained
&lt;a href=&quot;/2014/10/08/continuous-integration-is-dead.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Production Simulation&lt;/strong&gt;. The build is run in a container, which
simulates production environment and data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stress Tests&lt;/strong&gt;. Performance and stress tests are automated and executed
on every build.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By the way, at the &lt;a href=&quot;https://www.youtube.com/watch?v=3dJP_LtUGgg&quot;&gt;presentation&lt;/a&gt;,
I also mentioned what problems you may encounter at each maturity level.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="devops" /><summary>There are a number of levels you have to go through before your
continuous integration pipeline becomes perfect. I found eight of
them and presented my findings at DevOpsDays
in Salt Lake City a few weeks ago
(watch the video).
Now it&amp;#39;s time to write them down and ask
you &amp;mdash; Which level are you at? Post your answer below.</summary></entry><entry><title>ActiveRecord Is Even Worse Than ORM</title><link href="http://www.yegor256.com/2016/07/26/active-record.html" rel="alternate" type="text/html" title="ActiveRecord Is Even Worse Than ORM" /><published>2016-07-26T00:00:00+00:00</published><updated>2016-07-26T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/26/active-record</id><content type="html" xml:base="http://www.yegor256.com/2016/07/26/active-record.html">&lt;p&gt;You probably remember what &lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;I think&lt;/a&gt;
about ORM, a very popular design pattern. In a nutshell,
it encourages us to turn objects into
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTOs&lt;/a&gt;, which are
anemic, passive, and not objects at all. The consequences are usually dramatic &amp;mdash;
the entire programming paradigm shifts from object-oriented to procedural.
I&amp;#39;ve tried to explain this at a &lt;a href=&quot;https://www.youtube.com/watch?v=aER4uwyFbqQ&quot;&gt;JPoint&lt;/a&gt; and
&lt;a href=&quot;https://www.youtube.com/watch?v=63tS3HNmhiE&quot;&gt;JEEConf&lt;/a&gt; this year. After
each talk, a few people told me that what I&amp;#39;m suggesting is called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Active_record_pattern&quot;&gt;ActiveRecord&lt;/a&gt; or
&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff649690.aspx&quot;&gt;Repository&lt;/a&gt; patterns.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fen-duva-satt-pa-engren.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;En duva satt pÃ¥ en gren och funderade pÃ¥ tillvaron (2014) by Roy Andersson&#39;/&gt;&lt;figcaption&gt;En duva satt pÃ¥ en gren och funderade pÃ¥ tillvaron (2014) by Roy Andersson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Moreover, they claimed that ActiveRecord actually solves the problem
I&amp;#39;ve found in ORM. They said I should explain in my talks that
what I&amp;#39;m offering (SQL-speaking objects) already exists and has a name:
ActiveRecord.&lt;/p&gt;

&lt;p&gt;I disagree. Moreover, I think that ActiveRecord is even worse than ORM.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;What&amp;#39;s even worse in ActiveRecord is that it hides the fact that objects are data containers&lt;/aside&gt;

&lt;p&gt;ORM consists of two parts: the session and
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTOs&lt;/a&gt;, also known as &amp;quot;entities&amp;quot;.
The entities have no functionality; they are just primitive containers for the
data transferred from and to the session. And that is what the problem is &amp;mdash;
objects don&amp;#39;t encapsulate but rather expose data. To understand why this is wrong and why it&amp;#39;s
against the object paradigm, you can read
&lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;here&lt;/a&gt;, and
&lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;here&lt;/a&gt;.
Now, let&amp;#39;s just agree that it&amp;#39;s very wrong and move on.&lt;/p&gt;

&lt;p&gt;What solution is ActiveRecord proposing? How is it solving the problem?
It moves the engine into the &lt;strong&gt;parent class&lt;/strong&gt;, which all our entities inherit from.
This is how we were supposed to save our entity to the database in the ORM
scenario (pseudo-code):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Java in a Nutshell&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this is what we do with an ActiveRecord:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Java in a Nutshell&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The method &lt;code&gt;update()&lt;/code&gt; is defined in book&amp;#39;s parent class and uses
book as a &lt;strong&gt;data container&lt;/strong&gt;. When called, it fetches data
from the container (the book) and updates the database. How is it
different than ORM? There is absolutely no difference. The book
is still a container that knows nothing about SQL and any persistence
mechanisms.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s even worse in ActiveRecord, compared to ORM, is that it &lt;strong&gt;hides&lt;/strong&gt;
the fact that objects are data containers. A book, in the second snippet,
&lt;strong&gt;pretends&lt;/strong&gt; to be a &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;proper object&lt;/a&gt;,
while in reality it&amp;#39;s just a dumb data bag.&lt;/p&gt;

&lt;p&gt;I believe this is what misguided those who were saying
that my SQL-speaking objects concept is exactly the same as the ActiveRecord
design pattern (or Repository, which is almost exactly the same).&lt;/p&gt;

&lt;p&gt;No, it&amp;#39;s not.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>You probably remember what I think
about ORM, a very popular design pattern. In a nutshell,
it encourages us to turn objects into
DTOs, which are
anemic, passive, and not objects at all. The consequences are usually dramatic &amp;mdash;
the entire programming paradigm shifts from object-oriented to procedural.
I&amp;#39;ve tried to explain this at a JPoint and
JEEConf this year. After
each talk, a few people told me that what I&amp;#39;m suggesting is called
ActiveRecord or
Repository patterns.</summary></entry><entry><title>Convince Me!</title><link href="http://www.yegor256.com/2016/07/21/convince-me.html" rel="alternate" type="text/html" title="Convince Me!" /><published>2016-07-21T00:00:00+00:00</published><updated>2016-07-21T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/21/convince-me</id><content type="html" xml:base="http://www.yegor256.com/2016/07/21/convince-me.html">&lt;p&gt;I&amp;#39;ve already explained how I understand
the &lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;role&lt;/a&gt;
and &lt;a href=&quot;/2015/05/11/software-architect-responsibilities.html&quot;&gt;responsibilities&lt;/a&gt;
of a software architect.
But one question still remains unanswered, and it often turns into a problem
in our projects: What does a software architect do when the project
sponsor doesn&amp;#39;t like his technical decisions? The architect implements
something in a certain way, and the sponsor (or its representative) says
that it&amp;#39;s not exactly how things should work. What&amp;#39;s next?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fbeasts-of-no-nation.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Beasts of No Nation (2015) by Cary Joji Fukunaga&#39;/&gt;&lt;figcaption&gt;Beasts of No Nation (2015) by Cary Joji Fukunaga&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In our projects, a product owner (PO) is usually a representative of
a project sponsor (the paying customer). Since all our projects are rather
complex Java software packages, POs are very technical people. They
are programmers or used to be programmers. They understand the code
we write, and they want their opinion to be taken into account and
respected.&lt;/p&gt;

&lt;p&gt;And I&amp;#39;m not talking about &lt;a href=&quot;/2015/01/05/how-to-be-honest-and-keep-customer.html&quot;&gt;stupid&lt;/a&gt;
product owners &amp;mdash; those guys are a separate story. I&amp;#39;m talking about a pretty
reasonable PO with his own technical opinion that needs to be heard.&lt;/p&gt;

&lt;p&gt;Here is a practical example. Last week, I was
&lt;a href=&quot;/2015/08/04/nine-steps-start-software-project.html&quot;&gt;starting&lt;/a&gt; a project.
I was an architect. It was a Java server-side module. I decided to use
Maven as a build automation system.&lt;/p&gt;

&lt;p&gt;I created some initial files, configured &lt;code&gt;pom.xml&lt;/code&gt;, briefly explained the
project structure in &lt;code&gt;README.md&lt;/code&gt;, and submitted a pull request. Chris, the product
owner, reviewed it and asked, &amp;quot;Why not Gradle?&amp;quot;&lt;/p&gt;

&lt;p&gt;It was a reasonable question, right? Gradle is another popular build
automation system that I could have used, but I didn&amp;#39;t. The question
is why. It was a pretty innocent question, and I explained the answer right there
in my comment to the pull request. I said Maven was more suitable in
this project because ... blah blah blah.&lt;/p&gt;

&lt;p&gt;But Chris argued back. He was still thinking Gradle was the better choice.
He had his reasons. Meanwhile, I tried to &lt;strong&gt;convince&lt;/strong&gt; him of mine. I tried a few times
and then realized I was doing something wrong. It shouldn&amp;#39;t work like that.&lt;/p&gt;

&lt;p&gt;A software architect should not convince a product owner, a customer, or anybody
else. Instead, an architect must make his decisions and be responsible for the
entire success or failure of the product, just like I
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;explained before&lt;/a&gt;.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;A good architect must collect different opinions before making his own decision&lt;/aside&gt;

&lt;p&gt;There is a simple reason for that. Any attempt to convince anyone
causes a possibility of &amp;quot;responsibility leakage&amp;quot;. What if I fail to convince?
I will have to change my plan and use Gradle, right? What if the product
has problems because of that decision? I will try to blame Chris for that,
right? I can&amp;#39;t be &lt;strong&gt;fully&lt;/strong&gt; responsible for the product anymore, because I was
&amp;quot;forced&amp;quot; to make at least one decision.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t get me wrong; a good architect must collect different opinions before
making his own decision. But collecting Chris&amp;#39;s opinion would look very
different. I would ask him first what he thinks about Maven and Gradle.
He would tell me that he doesn&amp;#39;t like Maven because of this and that. And I
would take that into account. Or maybe not. But my decision would still be
mine, made by myself, under no compulsion by anybody. And Chris would still
be able to blame me for any negative consequences of that decision.&lt;/p&gt;

&lt;p&gt;But what should Chris do if he really doesn&amp;#39;t like my decision? It&amp;#39;s his
money and his product, right? He does care. And he doesn&amp;#39;t want to have
Maven in &lt;strong&gt;his&lt;/strong&gt; product. What does he do? How can he influence my
decision-making process?&lt;/p&gt;

&lt;p&gt;It&amp;#39;s easy. There are two documents in each software project. The first one is
&lt;strong&gt;requirements&lt;/strong&gt;, and the second one is &lt;strong&gt;architecture&lt;/strong&gt;. Chris should use them both
to correct me and point me in the right direction. Here&amp;#39;s how.&lt;/p&gt;

&lt;p&gt;First, if he really doesn&amp;#39;t want to have Maven,
he should make changes to the requirements document. He should
add something like &amp;quot;the build system must be Gradle, because ...&amp;quot;
Or maybe even without the &amp;quot;because&amp;quot; part. It&amp;#39;s up to him.
In that case, I will have to take that into account, and I will.
I know my design decisions are dictated by the requirements.
And not because Chris convinced me or I failed to convince him, but because
that&amp;#39;s what the document says.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;An architect must be an absolute technical dictator during the project and must not have to convince anyone&lt;/aside&gt;

&lt;p&gt;Second, if he is not entirely sure that Gradle is the right choice
and just wants me to be more serious about my decisions, he should
complain (by submitting a bug) about the quality of my
&lt;a href=&quot;/2015/08/04/nine-steps-start-software-project.html&quot;&gt;architecture document&lt;/a&gt;.
He should say the choice to go with Maven is not explained
properly. I will then rethink my decision and will either change
it or explain it better. But again, I will do it not to please
Chris but to fix a reported bug.&lt;/p&gt;

&lt;p&gt;To summarize, an architect must be an absolute technical &lt;strong&gt;dictator&lt;/strong&gt;
during the project and must not have to convince anyone. If that&amp;#39;s not the case,
the entire project faces big risks, simply because the responsibility
will be &amp;quot;leaking&amp;quot;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><category term="architect" /><summary>I&amp;#39;ve already explained how I understand
the role
and responsibilities
of a software architect.
But one question still remains unanswered, and it often turns into a problem
in our projects: What does a software architect do when the project
sponsor doesn&amp;#39;t like his technical decisions? The architect implements
something in a certain way, and the sponsor (or its representative) says
that it&amp;#39;s not exactly how things should work. What&amp;#39;s next?</summary></entry><entry><title>The Law of Demeter Doesnâ€™t Mean One Dot</title><link href="http://www.yegor256.com/2016/07/18/law-of-demeter.html" rel="alternate" type="text/html" title="The Law of Demeter Doesn&#39;t Mean One Dot" /><published>2016-07-18T00:00:00+00:00</published><updated>2016-07-18T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/18/law-of-demeter</id><content type="html" xml:base="http://www.yegor256.com/2016/07/18/law-of-demeter.html">&lt;p&gt;You&amp;#39;ve probably heard about that 30-year-old
&lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Law of Demeter&lt;/a&gt; (LoD). Someone
asked me recently what I think about it. And not just what I think, but
how it is possible to keep objects small and obey the LoD. According to the
law, we&amp;#39;re not allowed to do something like &lt;code&gt;book.pages().last().text()&lt;/code&gt;.
Instead, we&amp;#39;re supposed to go with &lt;code&gt;book.textOfLastPage()&lt;/code&gt;.
It puzzled me, because I strongly disagree. I believe the first construct
is perfectly valid in OOP. So I&amp;#39;ve done some research to find out
whether this law is really a law. What I found out is that the law is
perfect, but its common understanding in the OOP world is simply wrong
(not surprisingly).&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fspartacus.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Spartacus (1960) by Stanley Kubrick&#39;/&gt;&lt;figcaption&gt;Spartacus (1960) by Stanley Kubrick&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ccs.neu.edu/research/demeter/papers/law-of-demeter/oopsla88-law-of-demeter.pdf&quot;&gt;Object-Oriented Programming: An Objective Sense of Style&lt;/a&gt;
K.Lieberherr, I.Holland, and A.Riel, OOPSLA&amp;#39;88 Proceedings, 1988.&lt;/p&gt;

&lt;p&gt;This is where it was introduced. Let&amp;#39;s see what it literally says (look for
Section 3 in that PDF document). Say it&amp;#39;s a Java class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All four calls to four different &lt;code&gt;hello()&lt;/code&gt; methods are legal, according
to the LoD. So what would be illegal, I ask myself? No surprise;
the answer is this: &lt;code&gt;a.x.hello()&lt;/code&gt;. That would be illegal. Directly
accessing the attribute from another object and then talking to it
is not allowed by the law.&lt;/p&gt;

&lt;p&gt;But we don&amp;#39;t do that anyway. We&amp;#39;re talking about &lt;code&gt;book.pages().last().text()&lt;/code&gt;.
In this chain of method calls, we&amp;#39;re not accessing any attributes. We&amp;#39;re
asking our objects to build new objects for us. What does the law say about
that? Let me read it and quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Objects created by m(), or by functions or methods that m() calls, are considered as arguments of m()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, the object &lt;code&gt;Pages&lt;/code&gt; that method call &lt;code&gt;book.pages()&lt;/code&gt; returns
is a perfectly valid object that can be used. Then, we can call method
&lt;code&gt;last()&lt;/code&gt; on it and get an object &lt;code&gt;Page&lt;/code&gt;, and then call method &lt;code&gt;text()&lt;/code&gt;, etc. This
is a perfectly valid scenario that doesn&amp;#39;t violate the law at all, just
as I expected.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;So the bottom line is that the Law of Demeter is not against method chaining at all&lt;/aside&gt;

&lt;p&gt;So where does this common understanding of the law come from? Why does
&lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Wikipedia&lt;/a&gt;
call it a rule of &amp;quot;one dot&amp;quot; and say that
&amp;quot;an object should avoid invoking methods of a member object returned by another method&amp;quot;?
This is absolutely to the contrary of what the original paper says!
What&amp;#39;s going on?&lt;/p&gt;

&lt;p&gt;The answer is simple: &lt;a href=&quot;/2014/09/16/getters-and-setters-are-evil.html&quot;&gt;getters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The majority of OOP developers think most object methods that
return anything are getters. And getters, indeed, are no different than
direct access to object attributes. That&amp;#39;s why Wikipedia actually says
&amp;quot;no direct access to attributes and, since most of your methods are getters,
don&amp;#39;t touch them either, silly.&amp;quot;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s just sad to see.&lt;/p&gt;

&lt;p&gt;So the bottom line is that the Law of Demeter is not against
method chaining at all. Of course, it&amp;#39;s against getters and direct attribute
access. But who isn&amp;#39;t, right?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>You&amp;#39;ve probably heard about that 30-year-old
Law of Demeter (LoD). Someone
asked me recently what I think about it. And not just what I think, but
how it is possible to keep objects small and obey the LoD. According to the
law, we&amp;#39;re not allowed to do something like book.pages().last().text().
Instead, we&amp;#39;re supposed to go with book.textOfLastPage().
It puzzled me, because I strongly disagree. I believe the first construct
is perfectly valid in OOP. So I&amp;#39;ve done some research to find out
whether this law is really a law. What I found out is that the law is
perfect, but its common understanding in the OOP world is simply wrong
(not surprisingly).</summary></entry><entry><title>Who Is an Object?</title><link href="http://www.yegor256.com/2016/07/14/who-is-object.html" rel="alternate" type="text/html" title="Who Is an Object?" /><published>2016-07-14T00:00:00+00:00</published><updated>2016-07-14T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/14/who-is-object</id><content type="html" xml:base="http://www.yegor256.com/2016/07/14/who-is-object.html">&lt;p&gt;There are thousands of books about object-oriented programming and
hundreds of object-oriented languages, and I believe most (read &amp;quot;all&amp;quot;) of them
give us an incorrect definition of an &amp;quot;object&amp;quot;. That&amp;#39;s why the entire
OOP world is so full of misconceptions and mistakes. Their
definition of an object is limited by the hardware architecture they
are working with and that&amp;#39;s why is very primitive and mechanical.
I&amp;#39;d like to introduce a better one.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fjackass-the-movie.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Jackass: The Movie (2002) by Jeff Tremaine&#39;/&gt;&lt;figcaption&gt;Jackass: The Movie (2002) by Jeff Tremaine&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;What is an object? I&amp;#39;ve done a little research, and this is what I&amp;#39;ve found:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;Objects may contain data, in the form of fields, often known as attributes;
and code, in the form of procedures, often known as methods&amp;quot;
&amp;mdash; &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;Wikipedia&lt;/a&gt; at the time of writing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;An object stores its state in fields and exposes its behavior through methods&amp;quot;
&amp;mdash; &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/concepts/object.html&quot;&gt;What Is an Object?&lt;/a&gt; by Oracle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;Each object looks quite a bit like a little computer &amp;mdash;
it has a state, and it has operations that you can ask it to perform&amp;quot;
&amp;mdash; &lt;a href=&quot;http://amzn.to/1PBmQpm&quot;&gt;Thinking in Java&lt;/a&gt;, 4th Ed., Bruce Eckel, p. 16.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;A class is a collection of data fields that hold values
and methods that operate on those values&amp;quot;
&amp;mdash; &lt;a href=&quot;http://amzn.to/28PEqSi&quot;&gt;Java in a Nutshell&lt;/a&gt;, 6th Ed., Evans and Flanagan, p. 98.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;An object is some memory that holds a value of some type&amp;quot;
&amp;mdash; &lt;a href=&quot;http://amzn.to/1XyGCtk&quot;&gt;The C++ Programming Language&lt;/a&gt;, 4th Ed., Bjarne Stroustrup, p. 40.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;quot;An object consists of some private memory and a set of operations&amp;quot;
&amp;mdash; &lt;a href=&quot;http://amzn.to/1UhYinp&quot;&gt;Smalltalk-80&lt;/a&gt;, Goldberg and Robson, p. 6.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is common throughout all these definitions is the word &amp;quot;contains&amp;quot; (or &amp;quot;holds&amp;quot;,
&amp;quot;consists&amp;quot;, &amp;quot;has&amp;quot;, etc.). They all think that an object is a &lt;em&gt;box with data&lt;/em&gt;.
And this perspective is exactly what I&amp;#39;m strongly against.&lt;/p&gt;

&lt;p&gt;If we look at how C++ or Java are implemented, such a definition of an
object will sound &lt;em&gt;technically&lt;/em&gt; correct. Indeed, for each object, Java Virtual
Machine allocates a few bytes in memory in order to store object
attributes there. Thus, we can technically say, in that language,
that an object is an in-memory box with data.&lt;/p&gt;

&lt;p&gt;Right, but this is just a corner case!&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s try to imagine another object-oriented language that doesn&amp;#39;t
store object attributes in memory. Confused? Bear with me for a minute.
Let&amp;#39;s say that in that language we define an object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;c {
  vin: v,
  engine: e
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, &lt;code&gt;vin&lt;/code&gt; and &lt;code&gt;engine&lt;/code&gt; are attributes of object &lt;code&gt;c&lt;/code&gt; (it&amp;#39;s a car; let&amp;#39;s
forget about classes for now to focus strictly on objects). Thus, there is
a simple object that has two attributes. The first one is car&amp;#39;s VIN, and the
second one is its engine. The VIN is an object &lt;code&gt;v&lt;/code&gt;, while the engine is &lt;code&gt;e&lt;/code&gt;.
To make it easier to understand, this is how a similar object would
look in Java:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,...&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;8&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;8&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 17 chars&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;#39;m not entirely sure about JVM, but in C++ such an object will take
exactly 25 bytes in memory (assuming it&amp;#39;s 64-bit x86 architecture). The
first 17 bytes will be taken by the array of chars and another 8 bytes
by a pointer to the block in memory with object &lt;code&gt;e&lt;/code&gt;.
That&amp;#39;s how the C++ compiler understands objects and translates them to
the x86 architecture. In C++, objects are just data structures with
clearly defined allocation of data attributes.&lt;/p&gt;

&lt;p&gt;In that example, attributes &lt;code&gt;vin&lt;/code&gt; and &lt;code&gt;engine&lt;/code&gt; are not equal:
&lt;code&gt;vin&lt;/code&gt; is &amp;quot;data&amp;quot;, while &lt;code&gt;engine&lt;/code&gt; is a &amp;quot;pointer&amp;quot; to another object.
I intentionally made it this way in order to demonstrate that calling
an object a box with data is possible only with &lt;code&gt;vin&lt;/code&gt;. Only when
the data are located right &amp;quot;inside&amp;quot; the object can we say that the
object is actually a box for the data. With &lt;code&gt;engine&lt;/code&gt;, it isn&amp;#39;t
really true because there is no data technically &lt;em&gt;inside&lt;/em&gt; the object. Instead, there is a
&lt;em&gt;pointer&lt;/em&gt; to another object. If our object would only have an
&lt;code&gt;engine&lt;/code&gt; attribute, it would take just 8 bytes in memory, with none of them
actually occupied by &amp;quot;data&amp;quot;.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Objects are no longer boxes with data; they know where the data is, but they don&amp;#39;t contain the data&lt;/aside&gt;

&lt;p&gt;Now, let&amp;#39;s get back to our new pseudo language. Let&amp;#39;s imagine it treats
objects very differently than C++ &amp;mdash; it doesn&amp;#39;t keep object attributes
in memory &lt;em&gt;at all&lt;/em&gt;. It doesn&amp;#39;t have pointers, and it doesn&amp;#39;t know anything about
x86 architecture. It just &lt;em&gt;knows&lt;/em&gt; somehow what attributes belong to an object.&lt;/p&gt;

&lt;p&gt;Thus, in our language, objects are no longer boxes with data both technically
and conceptually. They know where the data is, but they don&amp;#39;t
&lt;em&gt;contain&lt;/em&gt; the data. They &lt;em&gt;represent&lt;/em&gt; the data, as well as other objects and entities.
Indeed, the object &lt;code&gt;c&lt;/code&gt; in our imaginary language represents two other objects:
a VIN and an engine.&lt;/p&gt;

&lt;p&gt;To summarize, we have to understand that even though a mechanical
definition of an object is correct in most programming languages on the
market at the moment, it is very incorrect conceptually because it
treats an object as a box with data that are too visible to
the outside world. That visibility provokes us to think &lt;em&gt;procedurally&lt;/em&gt;
and try to access that data as much as possible.&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/266oJr4&#39;&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2015%2F04%2Fbook-object-thinking.jpg&#39; style=&#39;width:96px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;If we would think of an object as a &lt;strong&gt;representative&lt;/strong&gt; of data instead of
a container of them, we would not want to get ahold of data as soon as
possible. We would understand that the data are far away and we can&amp;#39;t
just easily touch them. We should communicate with an object &amp;mdash; and how
exactly it communicates with the data is not our concern.&lt;/p&gt;

&lt;p&gt;I hope that in the near future, the market will introduce new object-oriented
languages that won&amp;#39;t store objects as in-memory data structures, even
technically.&lt;/p&gt;

&lt;p&gt;By the way, here is the definition of an object from my favorite book,
&lt;a href=&quot;http://amzn.to/266oJr4&quot;&gt;Object Thinking&lt;/a&gt; by David West, p. 66:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An object is the equivalent of the quanta from which the universe is constructed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What do you think? Is it close to the &amp;quot;representative&amp;quot; definition I just
proposed?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>There are thousands of books about object-oriented programming and
hundreds of object-oriented languages, and I believe most (read &amp;quot;all&amp;quot;) of them
give us an incorrect definition of an &amp;quot;object&amp;quot;. That&amp;#39;s why the entire
OOP world is so full of misconceptions and mistakes. Their
definition of an object is limited by the hardware architecture they
are working with and that&amp;#39;s why is very primitive and mechanical.
I&amp;#39;d like to introduce a better one.</summary></entry><entry><title>Twelve Mistakes in Agile Manifesto</title><link href="http://www.yegor256.com/2016/07/11/mistakes-in-agile-manifesto.html" rel="alternate" type="text/html" title="Twelve Mistakes in Agile Manifesto" /><published>2016-07-11T00:00:00+00:00</published><updated>2016-07-11T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/07/11/mistakes-in-agile-manifesto</id><content type="html" xml:base="http://www.yegor256.com/2016/07/11/mistakes-in-agile-manifesto.html">&lt;p&gt;Nowadays, &lt;a href=&quot;http://www.agilemanifesto.org/&quot;&gt;Agile Manifesto&lt;/a&gt; is a Bible of
numerous software teams. It contains
&lt;a href=&quot;http://agilemanifesto.org/principles.html&quot;&gt;12 principles&lt;/a&gt; which
 show us how software development should be organized.
These principles were invented in 2001.
Generally, I like and agree with all of them. However, in practice, most software teams
misunderstand them. Consequently, here is a summary of what&amp;#39;s going on and my
interpretation of each principle.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F07%2Fhail-caesar.jpg&#39; style=&#39;width:600px;max-width:100%;&#39; alt=&#39;Hail, Caesar! (2016) by Coen Brothers&#39;/&gt;&lt;figcaption&gt;Hail, Caesar! (2016) by Coen Brothers&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Principle #1&lt;/strong&gt;:
&amp;quot;Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;If the customer is not satisfied, we find another customer&lt;/aside&gt;

&lt;p&gt;By focusing on &amp;quot;satisfy the customer&amp;quot;, Agile adepts totally forget about
the &amp;quot;through&amp;quot; part. They think that a &lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;happy customer&lt;/a&gt;
is their true objective, while &amp;quot;continuous delivery&amp;quot; is something that obviously
helps, though not crucially. However, this is quite the opposite &amp;mdash; the customer
will be satisfied &lt;strong&gt;if&lt;/strong&gt; the software is perfectly created and delivered. If the
customer is not satisfied, we find another customer &amp;mdash; that&amp;#39;s the
true spirit a professional software team should adhere to. I believe that&amp;#39;s what
 the Manifesto means. We make sure that our process is
&amp;quot;early and continuous&amp;quot;, which will result to customer satisfaction. We focus on improving
our process, not satisfying the customer. Satisfaction is the consequence, not
the primary objective.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #2&lt;/strong&gt;:
&amp;quot;Welcome changing requirements, even late in development. Agile processes harness change for the customer&amp;#39;s competitive advantage.&amp;quot;&lt;/p&gt;

&lt;p&gt;Most Agile teams understand the word &amp;quot;welcome&amp;quot; here as a permission to forget
about any &lt;a href=&quot;/2015/11/10/ten-mistakes-in-specs.html&quot;&gt;requirements&lt;/a&gt;
management at all. What is the easiest way to welcome
change? Obviously, just get rid of any requirement documents!
In this case, any change will be welcome, since it won&amp;#39;t affect anything.
There simply won&amp;#39;t be anything to affect. But this is not what the Manifesto
means! This principle means that our requirements management process is so
&lt;strong&gt;powerful&lt;/strong&gt; that it can accept change at any moment. However, it&amp;#39;s rather difficult to
achieve, if requirements are actually documented.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #3&lt;/strong&gt;:
&amp;quot;Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.&amp;quot;&lt;/p&gt;

&lt;p&gt;This terrific rule is usually understood as an order for the entire team. The
team has to frequently deliver, while programmers are free to deliver almost
nothing and who knows when. I think the Manifesto here is emphasizing on
both individual and group responsibilities to frequently deliver. I also think
that this frequency should be way higher than just a &amp;quot;couple of weeks&amp;quot;. Today, with
modern technologies and instruments, we can deliver way faster &amp;mdash; several
times a day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #4&lt;/strong&gt;:
&amp;quot;Business people and developers must work together daily throughout the project.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Working together means quicker turnarounds in communication not lack or roles and responsibilites&lt;/aside&gt;

&lt;p&gt;Working together doesn&amp;#39;t mean working without clearly defined
rules and processes. However, most teams understand this principle as
a legalization of chaos. They think that since we work together, we don&amp;#39;t need to define roles
any more, we should not document &lt;a href=&quot;/2015/11/10/ten-mistakes-in-specs.html&quot;&gt;requirements&lt;/a&gt;,
we shouldn&amp;#39;t care about responsibilities. Ultimately in the end, we neither know who is
doing what nor the team&amp;#39;s structure. That&amp;#39;s not what the Manifesto
is talking about! &amp;quot;Working together&amp;quot; means quicker turnarounds in communication and
shorter response cycles. It definitely doesn&amp;#39;t mean lack of roles and responsibilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #5&lt;/strong&gt;:
&amp;quot;Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Trust doesn&amp;#39;t mean lack of control&lt;/aside&gt;

&lt;p&gt;Trust is a great word and concept, but it doesn&amp;#39;t replace another equally great
word &amp;mdash; control. Most Agile teams think that trust means
exactly that &amp;mdash; complete lack of any validation, verification, responsibility,
and control. &amp;quot;We trust our programmers to write perfect codes&amp;quot; &amp;mdash;
I&amp;#39;ve heard that countless times which is simply wrong. This principle means something completely different.
It means that when clearly defined tasks are assigned to their
performers, we fully delegate responsibilities to them. We
&lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;motivate&lt;/a&gt;
them to be fully responsible for the end result. However, we
&lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;don&amp;#39;t help&lt;/a&gt; them.
Instead, we trust them as self-sufficient individuals, capable
of completing assigned tasks on their own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #6&lt;/strong&gt;:
&amp;quot;The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Face-to-face doesn&amp;#39;t mean at the same office, especially now&lt;/aside&gt;

&lt;p&gt;Face-to-face doesn&amp;#39;t mean sitting in the same office. The Manifesto doesn&amp;#39;t say
anything about co-located or distributed teams. It&amp;#39;s obvious that in modern software projects,
virtual communications (over video calls) are way more effective than
staying together in the same country, same city, same office, and same room.
Therefore, most Agile adepts still promote on-site development style, using
Agile Manifesto as proof. That&amp;#39;s a mistake; face-to-face means something
totally different from what it meant 15 years ago, when the Manifesto was written.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #7&lt;/strong&gt;:
&amp;quot;Working software is the primary measure of progress.&amp;quot;&lt;/p&gt;

&lt;p&gt;This doesn&amp;#39;t mean that we should not measure anything else. Of course, the
working software is the &lt;strong&gt;primary&lt;/strong&gt; measure, but there are many other
measures, which we can and must use. For example, the amount of features
documented, implemented and delivered;
or the amount of lines of code added to the project (don&amp;#39;t smile, &lt;a href=&quot;/2014/11/14/hits-of-code.html&quot;&gt;read&lt;/a&gt;);
or the amount of &lt;a href=&quot;/2015/09/10/testing-exit-criteria.html&quot;&gt;bugs found&lt;/a&gt;;
or the amounts of &lt;a href=&quot;/2016/01/19/how-expensive-is-outsourcing.html&quot;&gt;dollars spent&lt;/a&gt;.
There are many other metrics. We can use many of them. However, a typical
mistake many Agile teams are doing is just ignoring them all. They say
&amp;quot;we measure only the end result&amp;quot;. That&amp;#39;s not what the Manifesto
is suggesting to do though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #8&lt;/strong&gt;:
&amp;quot;Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;We must remember that any project is first of all a money burning machine&lt;/aside&gt;

&lt;p&gt;This doesn&amp;#39;t mean that we should indefinitely &lt;a href=&quot;/2015/06/02/how-to-estimate-software-cost.html&quot;&gt;burn&lt;/a&gt;
customers&amp;#39; money. Yes, we
should be developing at some given speed, but we should always remember
whose money we&amp;#39;re spending &amp;mdash; customers&amp;#39; money. The Manifesto doesn&amp;#39;t say anything
about the cost of development and that&amp;#39;s probably because it was written by
those who make money (programmers), not those who spend it (customers). We must therefore
remember that any project is first of all a money burning machine. That&amp;#39;s why
the team must always measure its
&lt;a href=&quot;/2016/01/19/how-expensive-is-outsourcing.html&quot;&gt;burn rate&lt;/a&gt;
and make sure it&amp;#39;s aligned with
the amount of business value the team delivers. Just being a
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;happy team&lt;/a&gt;
is not what the Manifesto suggests, but that&amp;#39;s exactly how many understand this principle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #9&lt;/strong&gt;:
&amp;quot;Continuous attention to technical excellence and good design enhances agility.&amp;quot;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s a perfect principle that says so much and doesn&amp;#39;t say anything at
the same time. What exactly is &amp;quot;attention&amp;quot;? I can explain. It means
&lt;a href=&quot;/2015/10/13/competition-without-rules.html&quot;&gt;rules and policies&lt;/a&gt;.
First of all, any policy means &lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;punishment&lt;/a&gt; to those
who violate rules. Thus, if an Agile team really means continuous
attention to technical excellence, it must have a &lt;a href=&quot;/2014/08/13/strict-code-quality-control.html&quot;&gt;quality policy&lt;/a&gt;.
That policy must clearly define which design is good and which is bad, which piece
of Java code is excellent, which is ugly, etc. Additionally, the policy must say
what happens to those who &lt;a href=&quot;/2015/11/24/imprisonment-for-irresponsible-coding.html&quot;&gt;violate&lt;/a&gt;
the principles of excellence. However, most Agile
teams understand &amp;quot;quality&amp;quot; as a great flag to hang on the wall, but
get scared when I ask, &amp;quot;what happens if someone delivers low quality?&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #10&lt;/strong&gt;:
&amp;quot;Simplicity &amp;mdash; the art of maximizing the amount of work not done &amp;mdash; is essential.&amp;quot;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s a great rule which most Agile teams don&amp;#39;t follow at all. This principle
means that our tasks are small and simple enough to make sure they are either
doable or cancellable. Huge tasks are the biggest threat to manageability of
any team, be it Agile or not. This principle encourages us to give programmers
small tasks, which they can easily be completed. However, most of Agile adepts
simplicity being equal to stupidity. They are not equal. A simple task doesn&amp;#39;t
mean a stupid or non-important tasks. A simple task is a clearly defined, small,
and doable work order.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #11&lt;/strong&gt;:
&amp;quot;The best architectures, requirements, and designs emerge from self-organizing teams.&amp;quot;&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Self-organized doesn&amp;#39;t mean un-organized&lt;/aside&gt;

&lt;p&gt;Self-organized doesn&amp;#39;t mean un-organized. This rule is often translated
as a legalization of &lt;strong&gt;anarchy&lt;/strong&gt;. We don&amp;#39;t need any project managers,
processes, discipline, rules, or policies &amp;mdash; we&amp;#39;ve got
&lt;a href=&quot;/2016/02/18/holacracy-autocracy.html&quot;&gt;holacracy&lt;/a&gt; instead!
We also don&amp;#39;t need a software architect &amp;mdash; our programmers can make
all technical decisions at regular &lt;a href=&quot;/2015/07/13/meetings-are-legalized-robbery.html&quot;&gt;meetings&lt;/a&gt;!
Furthermore, we don&amp;#39;t want our programmers
to be individually responsible for anything &amp;mdash; they are always together
in all risks and issues. Stop that nonsense! This is not what the Manifesto means.
A self-organizing team is a team that doesn&amp;#39;t need any supervision from the outside;
a team that has clearly defined roles from the inside;
a team with a perfect inner discipline;
a team with professional &lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;management&lt;/a&gt;.
Not with the lack of all that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principle #12&lt;/strong&gt;:
&amp;quot;At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.&amp;quot;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s a great principle which is translated into so-called retrospective
meetings. They work just fine as long as decisions
make the team better. Unfortunately, in most cases, programmers in Agile teams are
trying to &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;survive&lt;/a&gt;,
instead of making their teams more effective. Even though the
principle says that the team has to become more effective, those retrospective
meetings help programmers to become more effective (read &amp;quot;more secure&amp;quot;) in
the team. That&amp;#39;s only natural for people, but leads to the overall degradation
of the team. It&amp;#39;s well known that the best team is the one that is capable of
quickly and inevitably &lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;rejecting&lt;/a&gt;
bad elements. Does your team do that effectively?
Do retrospective meetings help in that? I doubt it. Therefore, I believe that
what the Manifesto means here is not the meetings. It means that the team must have
an effective mechanism of self-regulation and self-improvement. Additionally, retrospective
meetings simply can&amp;#39;t be that mechanism because they prevent the team from making
difficult disciplinary decisions.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><category term="agile" /><summary>Nowadays, Agile Manifesto is a Bible of
numerous software teams. It contains
12 principles which
 show us how software development should be organized.
These principles were invented in 2001.
Generally, I like and agree with all of them. However, in practice, most software teams
misunderstand them. Consequently, here is a summary of what&amp;#39;s going on and my
interpretation of each principle.</summary></entry></feed>
