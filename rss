<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="http://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2017-01-03T11:44:15+00:00</updated><id>http://www.yegor256.com/</id><title>Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><entry><title>How Much Do You Love Conflict?</title><link href="http://www.yegor256.com/2017/01/03/how-much-you-love-conflicts.html" rel="alternate" type="text/html" title="How Much Do You Love Conflict?" /><published>2017-01-03T00:00:00+00:00</published><updated>2017-01-03T00:00:00+00:00</updated><id>http://www.yegor256.com/2017/01/03/how-much-you-love-conflicts</id><content type="html" xml:base="http://www.yegor256.com/2017/01/03/how-much-you-love-conflicts.html">&lt;p&gt;Conflict is what progress is made of. A professional and well-managed
team loves conflicts and creates them on a daily basis. A professional
project manager provokes conflicts and makes sure none of them end
in a consensus. Does that sound strange? It&amp;#39;s not sarcasm. Read on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2017/01/being-flynn.jpg&#39;/&gt;&lt;figcaption&gt;Being Flynn (2012) by Paul Weitz&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Have you ever heard the term &amp;quot;win-win?&amp;quot; Do you know what it means? My guess is that
most of my readers aren&amp;#39;t exactly sure what this is about, even though
it&amp;#39;s used very often. Let me explain. In any conflict,
there are three possible outcomes: lose-lose, win-lose, and win-win.
The first one is the worst, and the last one is the best. Here is an example.&lt;/p&gt;

&lt;p&gt;Say your wife wants to watch a movie, and you want to watch a
baseball game. That&amp;#39;s a conflict. It starts with a confrontation of &lt;em&gt;positions&lt;/em&gt;.
Your position is, &amp;quot;I want this game,&amp;quot; while her position is,
&amp;quot;I want this movie.&amp;quot;&lt;/p&gt;

&lt;p&gt;The easiest way is to hold to these positions no matter what, but very soon
your conflict will turn into a fight and maybe eventually a divorce.&lt;/p&gt;

&lt;p&gt;Project management offers a few
&lt;a href=&quot;https://en.wikipedia.org/wiki/Conflict_resolution&quot;&gt;conflict resolution techniques&lt;/a&gt;
that can help you and your wife get out of this confrontation without asking the police for help.
No matter which technique you use, the result will be either lose-lose,
win-lose, or win-win.&lt;/p&gt;

&lt;h2 id=&quot;lose-lose&quot;&gt;Lose-Lose&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Compromise&quot;&gt;Compromise&lt;/a&gt;
is the worst outcome, and it&amp;#39;s known as lose-lose. For example,
you both agree on watching the news&amp;mdash;that&amp;#39;s a compromise. Neither of you will
get what you wanted, a movie or a baseball game. You both lose.
Who gains in this case? You neighbors and the police, since there will be no
fight. Will the problem really be solved? No. You both will hate
each other even more, because neither of your desires were satisfied. The
divorce is still coming closer.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;If we resolve conflicts through compromises, everybody suffers except those management monkeys&lt;/aside&gt;

&lt;p&gt;The same happens in software team conflicts&amp;mdash;if and when we resolve
them through compromises, everybody suffers except those
&lt;a href=&quot;/2015/09/29/mayonnaise.html&quot;&gt;management and HR monkeys&lt;/a&gt;
who only care about a peaceful
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office&lt;/a&gt; environment. They don&amp;#39;t
want to see us fighting over a piece of damn Java code. Moreover, they
don&amp;#39;t really understand what the fight is about. They know nothing
about that &lt;a href=&quot;/2016/06/27/singletons-must-die.html&quot;&gt;Singleton&lt;/a&gt;
design pattern and can&amp;#39;t understand why these guys
are almost ready to kill each other just because one of them says
it&amp;#39;s a pattern and the other one calls it an
&lt;a href=&quot;/2016/02/03/design-patterns-and-anti-patterns.html&quot;&gt;anti-pattern&lt;/a&gt;, insists
that the project must not use it, and threatens everybody with an immediate
discharge if they don&amp;#39;t listen.&lt;/p&gt;

&lt;p&gt;Such a fight freaks everybody out. Everybody who sees positions and doesn&amp;#39;t
see &lt;em&gt;interests&lt;/em&gt;, that is. Remember, the position is, &amp;quot;I want to see the movie&amp;quot; and
&amp;quot;I want to use a singleton.&amp;quot; The only thing a confrontation of
positions can produce is a fight, and the only solution is a compromise:
&amp;quot;You guys need a good &lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;team-building party&lt;/a&gt;
so you become friends and lose &lt;del&gt;balls&lt;/del&gt; the desire to fight.&amp;quot; That&amp;#39;s what those
monkeys build: teams. They believe that when the team is &amp;quot;strong,&amp;quot;
there will be no fights, no conflicts, no arguments, no design patterns,
no anti-patterns, and ... no senior developers. There will be just one
permanent compromise over everything.&lt;/p&gt;

&lt;p&gt;In a family, compromises lead to divorces. In a software team, the best talent
just leaves. They simply don&amp;#39;t want to see their interests being disrespected
all the time, just for the sake of &lt;em&gt;avoiding&lt;/em&gt; fights. Stay away from compromises;
they are pure evil for both a family and a team.&lt;/p&gt;

&lt;h2 id=&quot;win-lose&quot;&gt;Win-Lose&lt;/h2&gt;

&lt;p&gt;The second option, which is a bit better than a compromise, is to use force:
&amp;quot;I&amp;#39;m a man, so you do what I say; we will watch the game!&amp;quot; or
&amp;quot;I feel sick; let me watch a movie.&amp;quot; In either case, one of you will
get what he or she initially wanted. Even though this approach looks
less &amp;quot;democratic,&amp;quot; it&amp;#39;s way more effective, mostly because
it doesn&amp;#39;t involve any third parties: There is no interest of
the police or neighbors involved, and the family resolves the conflict internally
and naturally.&lt;/p&gt;

&lt;p&gt;Both of you understand exactly why you&amp;#39;re watching that game now: because
the male part of the family is physically stronger. Even though it may sound
super annoying to you, my Californian readers, such a family would be way
farther from a divorce than the one that used to make compromises, especially
if the winning party is not always the same.&lt;/p&gt;

&lt;p&gt;If your software team has a &lt;del&gt;moronic&lt;/del&gt; experienced
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;architect&lt;/a&gt;, you will
most likely work in this conflict resolution model. He or she will make decisions,
and you will have to go along. I wrote about such an architect
&lt;a href=&quot;/2016/07/21/convince-me.html&quot;&gt;here&lt;/a&gt;
and &lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;here&lt;/a&gt;.
I said there that an architect must be a dictator, making decisions and taking
full responsibility for them.&lt;/p&gt;

&lt;p&gt;If the architect is super smart, respected by everybody, and immortal, this
force-based conflict resolution technique will work perfectly. The project
will move forward fast, because everybody will work instead of think. There
will be only one person who thinks&amp;mdash;the architect.&lt;/p&gt;

&lt;p&gt;The main drawback of this win-lose approach is the &amp;quot;lose&amp;quot; part: Someone
is always losing. And it&amp;#39;s not about an offense, even though that&amp;#39;s also important.
It&amp;#39;s about us missing some valuable information. You will never know why
your wife wanted to watch that movie or why that junior developer
was suggesting you use NoSQL instead of SQL. You will just force them both
to shut up and follow your will. While they did, you still &amp;quot;lost&amp;quot; something. So
basically it&amp;#39;s the team that is losing something, not just your wife or that
junior developer.&lt;/p&gt;

&lt;h2 id=&quot;win-win&quot;&gt;Win-Win&lt;/h2&gt;

&lt;p&gt;The most difficult and yet most effective way to resolve a conflict is to
collaborate in order to discover the interests of all parties and find
a solution that satisfies them all. You start by asking, &amp;quot;Why do you want to
watch that movie?&amp;quot; to learn what exactly is behind that aggressive
&amp;quot;I want the movie&amp;quot; position. Again, there is a huge difference between
a position and an interest.&lt;/p&gt;

&lt;p&gt;You may hear this back: &amp;quot;I&amp;#39;m just tired.&amp;quot; So the real interest is to &lt;em&gt;relax&lt;/em&gt;,
not to watch the movie. The movie was just one of the options to get rest.
Now, knowing her real interest, you may come up with, &amp;quot;How about I watch
the game and give you a massage at the same time?&amp;quot; This way, the divorce may never happen.&lt;/p&gt;

&lt;p&gt;Thus, the first important step is to help everybody abandon their &lt;em&gt;positions&lt;/em&gt;
and honestly expose their &lt;em&gt;interests&lt;/em&gt;. When that&amp;#39;s done, we can all start to work
not against each other but against the problem: With what solution will all our
interests be satisfied at the same time?&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;A truly professional software team is full of conflicts&lt;/aside&gt;

&lt;p&gt;We will ask that junior developer: &amp;quot;Why do you think we need NoSQL?&amp;quot; It&amp;#39;s
very likely that we will hear something like, &amp;quot;I just want to learn this new
concept.&amp;quot; This is his real interest&amp;mdash;to learn something new while
working on this project. Maybe we can offer him some other technology to
learn? Maybe we can move him to another project where NoSQL is used? There
are many options. But the first step is to understand what he really
wants. Not what position he took, but what was his real motivation for it.&lt;/p&gt;

&lt;p&gt;A truly professional software team is full of conflicts, which are always
being resolved by collaboration. The team is not afraid of conflicts. Instead,
it &lt;em&gt;welcomes&lt;/em&gt; them, because they help reveal the real interests of all parties
involved and make a lot of information visible and available.&lt;/p&gt;

&lt;p&gt;Truly professional team players always try to &lt;em&gt;provoke&lt;/em&gt; conflicts in order to gain
an opportunity to resolve them through collaboration, thereby exiting through the win-win door.
That&amp;#39;s how the team grows&amp;mdash;not by hiding conflicts and making compromises,
but by provoking them, making different interests visible, and finding the
most optimal solutions.&lt;/p&gt;

&lt;p&gt;Be aware, though, that this is way more difficult than organizing
&lt;a href=&quot;/2016/12/06/how-to-pay-programmers-less.html&quot;&gt;team-building parties&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><summary>Conflict is what progress is made of. A professional and well-managed
team loves conflicts and creates them on a daily basis. A professional
project manager provokes conflicts and makes sure none of them end
in a consensus. Does that sound strange? It&amp;#39;s not sarcasm. Read on.</summary></entry><entry><title>Can Objects Be Friends?</title><link href="http://www.yegor256.com/2016/12/20/can-objects-be-friends.html" rel="alternate" type="text/html" title="Can Objects Be Friends?" /><published>2016-12-20T00:00:00+00:00</published><updated>2016-12-20T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/12/20/can-objects-be-friends</id><content type="html" xml:base="http://www.yegor256.com/2016/12/20/can-objects-be-friends.html">&lt;p&gt;As &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;discussed before&lt;/a&gt;,
proper encapsulation leads to a complete absence
of &amp;quot;naked data.&amp;quot; However, the question remains: How can objects
interact if they can&amp;#39;t exchange data? Eventually we have to expose
some data in order to let other objects use it, right? Yes, that&amp;#39;s true.
However, I guess I have a solution that keeps encapsulation in place
while allowing objects to interact.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/12/raging-bull.jpg&#39;/&gt;&lt;figcaption&gt;Raging Bull (1980) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Say that this is our object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d C&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It represents a temperature. The only behavior it exposes is printing
the temperature in Celsius. We don&amp;#39;t want to expose &lt;code&gt;t&lt;/code&gt;, because
that will lead to the &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;&amp;quot;naked data&amp;quot;&lt;/a&gt;
problem. We want to keep &lt;code&gt;t&lt;/code&gt; secret, and that&amp;#39;s a good desire.&lt;/p&gt;

&lt;p&gt;Now, we want to have the ability to print temperature in Fahrenheit. The most
obvious approach would be to introduce another method, &lt;code&gt;toFahrenheitString()&lt;/code&gt;,
or add a Boolean flag to the object, which will change the behavior
of method &lt;code&gt;toString()&lt;/code&gt;, right? Either one of these solutions is better than adding
a method &lt;code&gt;getT()&lt;/code&gt;, but neither one is perfect.&lt;/p&gt;

&lt;p&gt;What if we create this decorator:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TempFahrenheit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TempCelsius&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;%d F&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It should work just great:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TempFahrenheit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TempCelsius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only problem is that it won&amp;#39;t compile in Java, because class
&lt;code&gt;TempFahrenheit&lt;/code&gt; is not allowed to access private &lt;code&gt;t&lt;/code&gt; in class &lt;code&gt;TempCelsius&lt;/code&gt;.
And if we make &lt;code&gt;t&lt;/code&gt; public, everybody will be able to read it directly, and we&amp;#39;ll have
that &amp;quot;naked data&amp;quot; problem&amp;mdash;a severe violation of encapsulation.&lt;/p&gt;

&lt;p&gt;However, if we allow that access &lt;em&gt;only&lt;/em&gt; to one class, everything will be fine.
Something like this (won&amp;#39;t work in Java; it&amp;#39;s just a concept):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TempCelsius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;trust&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TempFahrenheit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// here!&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d C&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since this &lt;code&gt;trust&lt;/code&gt; keyword is placed into the class that allows access,
we won&amp;#39;t have the &amp;quot;naked data&amp;quot; problem&amp;mdash;we will always know exactly which
objects posses knowledge about &lt;code&gt;t&lt;/code&gt;. When we change
something about &lt;code&gt;t&lt;/code&gt;, we know exactly where to update the code.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

&lt;p&gt;P.S. After discussing this idea below in comments I
&lt;a href=&quot;http://www.yegor256.com/2016/12/20/can-objects-be-friends.html#comment-3068629632&quot;&gt;started&lt;/a&gt; to think
that we don&amp;#39;t need that &lt;code&gt;trust&lt;/code&gt; keyword at all. Instead, we should just
give all decorators access to all private attributes of an object.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><category term="java" /><summary>As discussed before,
proper encapsulation leads to a complete absence
of &amp;quot;naked data.&amp;quot; However, the question remains: How can objects
interact if they can&amp;#39;t exchange data? Eventually we have to expose
some data in order to let other objects use it, right? Yes, that&amp;#39;s true.
However, I guess I have a solution that keeps encapsulation in place
while allowing objects to interact.</summary></entry><entry><title>MVC vs. OOP</title><link href="http://www.yegor256.com/2016/12/13/mvc-vs-oop.html" rel="alternate" type="text/html" title="MVC vs. OOP" /><published>2016-12-13T00:00:00+00:00</published><updated>2016-12-13T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/12/13/mvc-vs-oop</id><content type="html" xml:base="http://www.yegor256.com/2016/12/13/mvc-vs-oop.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;Model-View-Controller&lt;/a&gt;
(MVC) is an architectural pattern we all are well aware of.
It&amp;#39;s a de-facto standard for almost all UI and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Web_framework&quot;&gt;Web frameworks&lt;/a&gt;. It is convenient
and easy to use. It is simple and effective. It is a great concept ...
for a procedural programmer. If your software is object-oriented, you
should dislike MVC as much as I do. Here is why.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/12/hot-shots.jpg&#39;/&gt;&lt;figcaption&gt;Hot Shots! (1991) by Jim Abrahams&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This is how MVC architecture looks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/uml/45d05ab3bd9a93ad88ec209352b62f60.svg&#39; style=&quot;width:35%&quot;
        alt=&#39;PlantUML SVG diagram&#39; class=&#39;plantuml&#39;/&gt;&lt;/p&gt;

&lt;p&gt;Controller is &lt;em&gt;in charge&lt;/em&gt;, taking care of the data received from Model
and injecting it into View&amp;mdash;and this is exactly the problem. The data escapes
the Model and becomes &amp;quot;naked,&amp;quot; which is a big problem, as we
&lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;agreed earlier&lt;/a&gt;.
OOP is all about encapsulation&amp;mdash;data hiding.&lt;/p&gt;

&lt;p&gt;MVC architecture does exactly the opposite by &lt;em&gt;exposing&lt;/em&gt; the data and hiding
behavior. The controller deals with the data directly, making decisions about
its purpose and properties, while the objects, which are supposed to know
everything about the data and hide it, remain &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;anemic&lt;/a&gt;.
That is exactly the principle any procedural architecture is built upon; the
code is in charge of the data. Take this C++ code, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// controller&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_from_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// model&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The speed is %d mph&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// view&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function &lt;code&gt;print_speed()&lt;/code&gt; is the controller. It gets the data &lt;code&gt;s&lt;/code&gt; from
the model &lt;code&gt;load_from_engine()&lt;/code&gt; and renders it via the view &lt;code&gt;printf()&lt;/code&gt;. Only
the controller knows that the data is in miles per hour. The engine
returns &lt;code&gt;int&lt;/code&gt; without any properties. The controller simply assumed that
that data is in mph. If we want to create a similar controller somewhere
else, we will have to make a similar assumption again and again. That&amp;#39;s what the
&amp;quot;naked data&amp;quot; problem is about, and it leads to serious maintainability issues.&lt;/p&gt;

&lt;p&gt;This is an object-oriented alternative to the code above (pseudo-C++):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintedSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// view&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FormattedSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// controller&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpeedFromEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// model&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, &lt;code&gt;SpeedFromEngine.speed()&lt;/code&gt;
returns speed in mph, as an integer; &lt;code&gt;FormattedSpeed.speed()&lt;/code&gt; returns
&lt;code&gt;&amp;quot;%d mph&amp;quot;&lt;/code&gt;; and finally, &lt;code&gt;PrintedSpeed.to_str()&lt;/code&gt; returns the full text of the
message. We can call them &amp;quot;model, view, and controller,&amp;quot; but in reality they
are just objects decorating each other. It&amp;#39;s still the same entity&amp;mdash;the speed.
But it gets more complex and intelligent by being decorated.&lt;/p&gt;

&lt;p&gt;We don&amp;#39;t tear the concept of speed apart. The speed is the speed, no matter
who works with it and where it is presented. It just gets new behavior
from decorators. It grows, but never falls apart.&lt;/p&gt;

&lt;p&gt;To summarize, Controller is a pure &lt;em&gt;procedural&lt;/em&gt; component in the MVC trio,
which turns Model into a passive data holder and View into
a passive data renderer. The controll&lt;b&gt;er&lt;/b&gt;, the hold&lt;b&gt;er&lt;/b&gt;,
the render&lt;b&gt;er&lt;/b&gt; ...
Is it &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;really OOP&lt;/a&gt;?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><category term="java" /><summary>Model-View-Controller
(MVC) is an architectural pattern we all are well aware of.
It&amp;#39;s a de-facto standard for almost all UI and
Web frameworks. It is convenient
and easy to use. It is simple and effective. It is a great concept ...
for a procedural programmer. If your software is object-oriented, you
should dislike MVC as much as I do. Here is why.</summary></entry><entry><title>How to Pay Programmers Less</title><link href="http://www.yegor256.com/2016/12/06/how-to-pay-programmers-less.html" rel="alternate" type="text/html" title="How to Pay Programmers Less" /><published>2016-12-06T00:00:00+00:00</published><updated>2016-12-06T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/12/06/how-to-pay-programmers-less</id><content type="html" xml:base="http://www.yegor256.com/2016/12/06/how-to-pay-programmers-less.html">&lt;p&gt;To create software, you need programmers. Unfortunately. They are expensive,
lazy, and almost impossible to control. The software they create either works or doesn&amp;#39;t, but
you still have to pay them, every month. Of course, it&amp;#39;s always better to pay less.
However, sometimes they may figure out they are being
underpaid and quit. How do you prevent that? &lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;Unfortunately&lt;/a&gt;,
we can&amp;#39;t use violence any more, but there are some other mechanisms. Let me
share.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/12/ben-hur.jpg&#39;/&gt;&lt;figcaption&gt;Ben-Hur (1959) by William Wyler&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Keep salaries secret&lt;/strong&gt;.
It&amp;#39;s obvious: Don&amp;#39;t let them discuss
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;salaries&lt;/a&gt;. They must keep this information
secret. Warn them or even sign
&lt;a href=&quot;/2015/05/04/how-to-protect-business-idea.html&quot;&gt;NDAs&lt;/a&gt; prohibiting any talks about wages, bonuses,
compensation plans, etc. They must feel that this information is toxic and
never even talk to each other about salaries. If they don&amp;#39;t know how much
their coworkers are getting, they won&amp;#39;t raise salary questions for much longer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give raises randomly&lt;/strong&gt;.
There should be no system behind your salary upgrades or
&lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;firing decisions&lt;/a&gt;. You give
them raises when you feel like it, not when they are being more productive
or effective. Try to make your decisions unpredictable. Unpredictability creates
fear, and this is exactly what you need. They will be afraid of you and will
not complain about being underpaid for a long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No conferences&lt;/strong&gt;.
Don&amp;#39;t allow them to attend meetups or
conferences. They may meet &lt;a href=&quot;/2015/09/29/mayonnaise.html&quot;&gt;recruiters&lt;/a&gt; there
and find out that their salaries are not
&lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;fair enough&lt;/a&gt;. Promote the idea
that conferences are just a waste of time. It&amp;#39;s better to organize events in the
&lt;a href=&quot;/2016/08/05/distributed-teams-are-higher-quality.html&quot;&gt;office&lt;/a&gt;.
They always have to stay together, never free to meet programmers from other companies.
The less they know, the safer you are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No work from home&lt;/strong&gt;.
The office must be their second home. Well, preferably the first one. They
must go there every day, have a desk there, a computer, a chair, and a stapler.
They will be emotionally attached to the place and it will be very difficult
to leave, no matter how underpaid they will be. Never allow them to work
&lt;a href=&quot;/2016/08/05/distributed-teams-are-higher-quality.html&quot;&gt;remotely&lt;/a&gt;&amp;mdash;they
may start thinking about a new home with a bigger salary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spy on them&lt;/strong&gt;.
Make sure they all use your email server, computers, servers, and even mobile phones.
Install software that tracks all their messages. Ideally, you should have
a security department watching all of them and regularly informing
you about abnormal or suspicious behavior (office cameras will help too). Any contact with other
companies should be considered suspicious. Employees must know you&amp;#39;re spying on them.
Extra fear is always helpful.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Brainwash them regularly by communicating how great your company is&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Make a deal with competitors&lt;/strong&gt;.
Contact your major competitors in the region and agree to not head-hunt
their programmers if they don&amp;#39;t touch yours. If they reject
this deal, try to recruit a few of their key engineers. Just offer to double
their salaries. You won&amp;#39;t really hire them, of course, but this move will definitely shake
your local market, and competitors will be afraid of you. They will agree to never
touch your &lt;del&gt;slaves&lt;/del&gt; developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promote corporate values&lt;/strong&gt;.
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;Brainwash&lt;/a&gt;
them regularly by communicating how great your company is, how big its
mission is, and how important their contribution is. The numbers on their
paychecks will look way less important compared to the multi-billion-dollar
market the team is trying to dominate. They will sacrifice for a while.
For quite a long time, this trick will work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build a family&lt;/strong&gt;.
Corporate parties, Friday beer, team building events, bowling, birthdays,
lunches and team nights&amp;mdash;use these
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;tools&lt;/a&gt;
to create a feeling that your company is their family. Money is not really what good people talk
about in a family, right? Asking for a raise will sound like a betrayal
of family values&amp;mdash;they will be afraid to do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stress them&lt;/strong&gt;.
They must not feel relaxed, it&amp;#39;s not in your favor. Make sure they
have tight deadlines, complex problems to solve, and enough guilt on
their shoulders. They won&amp;#39;t ask for a raise, constantly feeling guilty
for letting you down with project goals. Try to make them responsible
for failures as much as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make promises&lt;/strong&gt;.
You don&amp;#39;t need to keep them, but you have to make them: promise to
raise their salaries soon, or by the time you
raise investments, or by the time a big contract is signed, or when
&amp;quot;the time is right.&amp;quot; It is important
to always make your promises dependable on events that are out of your
control&amp;mdash;your hands must always be clean.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Instead of giving someone a raise, it&amp;#39;s always better to buy a new PlayStation for the office&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Buy them cushion chairs and tennis tables&lt;/strong&gt;.
Spend just a little on all those funny office things, and they will
pay you back big time, through the ability to underpay your programmers.
A fancy and professional coffee machine will cost you $1,000 and make
it possible to save $200 to $300 on each programmer monthly. Do the math.
Make yourself a rule that instead of giving someone a raise, it&amp;#39;s always
better to buy a new PlayStation for the office. Also, let them bring
their &lt;del&gt;spouses&lt;/del&gt; pets to the office&amp;mdash;they will &lt;del&gt;work&lt;/del&gt; stay
longer for less money.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give them sound titles&lt;/strong&gt;.
Call them Vice Presidents, for example VP of Engineering, VP of Technology,
VP of Whatever. Not a big deal for you, but very important for them. The salary
will be much less valuable than the title they can put on their LinkedIn
profiles. If you&amp;#39;re running out of Vice Presidents, try
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;Senior Architect&lt;/a&gt;,
Lead Technical Lead, Chief Scientist, etc.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;They will keep working for you for less money just because you&amp;#39;re good friends&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Help them survive&lt;/strong&gt;.
Most programmers are rather stupid when it comes to managing money. They simply don&amp;#39;t
know how to buy insurance, how to plan a retirement fund, or even how to
pay taxes. You help them, to your own benefit, of course. They will be
happy to feel safe in your hands, and won&amp;#39;t leave you. They won&amp;#39;t ask
for a raise, either, because they will feel bad about even starting such a negotiation.
You must be the &amp;quot;parent,&amp;quot; and they will be the &amp;quot;kids.&amp;quot; It&amp;#39;s a good old model.
It works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be a friend&lt;/strong&gt;.
This is the last and most powerful technique. You have to be a friend
to your programmers. It&amp;#39;s very difficult to negotiate money with a friend&amp;mdash;they
won&amp;#39;t be able to do it easily. They will keep working for you for less money
just because you&amp;#39;re good friends. How do you become friends? Well, meet their
families, invite them over for dinner at your house, give them birthday
gifts&amp;mdash;all those tricks. They will save you a lot of money.&lt;/p&gt;

&lt;p&gt;Did I forget anything?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="mood" /><category term="sarcasm" /><summary>To create software, you need programmers. Unfortunately. They are expensive,
lazy, and almost impossible to control. The software they create either works or doesn&amp;#39;t, but
you still have to pay them, every month. Of course, it&amp;#39;s always better to pay less.
However, sometimes they may figure out they are being
underpaid and quit. How do you prevent that? Unfortunately,
we can&amp;#39;t use violence any more, but there are some other mechanisms. Let me
share.</summary></entry><entry><title>EO</title><link href="http://www.yegor256.com/2016/11/29/eolang.html" rel="alternate" type="text/html" title="EO" /><published>2016-11-29T00:00:00+00:00</published><updated>2016-11-29T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/11/29/eolang</id><content type="html" xml:base="http://www.yegor256.com/2016/11/29/eolang.html">&lt;p&gt;It&amp;#39;s time to do it! We&amp;#39;ve started work on a new programming language. Its
name is &lt;strong&gt;EO&lt;/strong&gt; (as in
&lt;a href=&quot;/elegant-objects.html&quot;&gt;Elegant Objects&lt;/a&gt; or in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Esperanto&quot;&gt;Esperanto&lt;/a&gt;): &lt;a href=&quot;http://www.eolang.org&quot;&gt;eolang.org&lt;/a&gt;.
It&amp;#39;s open source and community driven:
&lt;a href=&quot;https://github.com/yegor256/eo&quot;&gt;yegor256/eo&lt;/a&gt; GitHub repo. It&amp;#39;s still in
very early draft form, but the direction is more or less clear: It has to be
truly object-oriented, with no compromises. You&amp;#39;re welcome to join us.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/11/vicky-cristina-barcelona.jpg&#39;/&gt;&lt;figcaption&gt;Vicky Cristina Barcelona (2008) by Woody Allen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Why yet another language? Because there are no object-oriented languages
on the market that are really object-oriented, to my knowledge. Here are the
things I think do not belong in a pure object-oriented language:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;static methods&lt;/li&gt;
&lt;li&gt;classes (only types and objects)&lt;/li&gt;
&lt;li&gt;implementation inheritance&lt;/li&gt;
&lt;li&gt;mutability&lt;/li&gt;
&lt;li&gt;NULL&lt;/li&gt;
&lt;li&gt;reflection&lt;/li&gt;
&lt;li&gt;constants&lt;/li&gt;
&lt;li&gt;type casting&lt;/li&gt;
&lt;li&gt;annotations&lt;/li&gt;
&lt;li&gt;flow control (&lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many other minor mistakes that Java and C++ are full of.&lt;/p&gt;

&lt;p&gt;At the moment, we think that EO will compile into Java. Not into byte-code,
but into &lt;code&gt;.java&lt;/code&gt; files, later compilable to byte-code.&lt;/p&gt;

&lt;p&gt;I really count on your contribution. Please submit your ideas as
tickets and pull request to the
&lt;a href=&quot;https://github.com/yegor256/eo&quot;&gt;yegor256/eo&lt;/a&gt; GitHub repo.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><summary>It&amp;#39;s time to do it! We&amp;#39;ve started work on a new programming language. Its
name is EO (as in
Elegant Objects or in
Esperanto): eolang.org.
It&amp;#39;s open source and community driven:
yegor256/eo GitHub repo. It&amp;#39;s still in
very early draft form, but the direction is more or less clear: It has to be
truly object-oriented, with no compromises. You&amp;#39;re welcome to join us.</summary></entry><entry><title>Encapsulation Covers Up Naked Data</title><link href="http://www.yegor256.com/2016/11/21/naked-data.html" rel="alternate" type="text/html" title="Encapsulation Covers Up Naked Data" /><published>2016-11-21T00:00:00+00:00</published><updated>2016-11-21T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/11/21/naked-data</id><content type="html" xml:base="http://www.yegor256.com/2016/11/21/naked-data.html">&lt;p&gt;Encapsulation is the core principle of object-oriented programming
that makes objects solid, cohesive, trustworthy, etc. But
what exactly is encapsulation? Does it only protect against access
to private attributes from outside an object? I think it&amp;#39;s much more.
Encapsulation leads to the absence of &lt;em&gt;naked&lt;/em&gt; data on all levels and in all forms.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/11/borat.jpg&#39;/&gt;&lt;figcaption&gt;Borat: Cultural Learnings of America for Make Benefit Glorious Nation of Kazakhstan (2006) by Larry Charles&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This is what naked data is (C code):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The temperature is %d F&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here &lt;code&gt;t&lt;/code&gt; is the data, which is publicly accessible by the code around it.
Anyone can modify it or read it.&lt;/p&gt;

&lt;p&gt;Why is that bad? For one reason: tight and hidden coupling.&lt;/p&gt;

&lt;p&gt;The code around &lt;code&gt;t&lt;/code&gt; inevitably makes a lot of assumptions about the data. For
example, both lines after &lt;code&gt;int t&lt;/code&gt; decided that the temperature is in Fahrenheit.
At the moment of writing, this may be true, but this assumption couples the
code with the data. If tomorrow we change &lt;code&gt;t&lt;/code&gt; to Celsius, the code won&amp;#39;t know
about this change. That&amp;#39;s why I call this coupling &lt;em&gt;hidden&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we change the type of &lt;code&gt;t&lt;/code&gt; from &lt;code&gt;int&lt;/code&gt; to, say, &lt;code&gt;double&lt;/code&gt;, the &lt;code&gt;printf&lt;/code&gt;
line won&amp;#39;t print anything after the decimal point. Again, the coupling is
there, but it&amp;#39;s hidden. Later on, we simply won&amp;#39;t be able to find all the places in our
code where we made these or other assumptions about &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will seriously affect maintainability.&lt;/p&gt;

&lt;p&gt;And this is not a solution, as you can imagine (Java now):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks like an object, but the data is still naked. Anyone can retrieve
&lt;code&gt;t&lt;/code&gt; from the object and decide whether it&amp;#39;s Fahrenheit or Celsius, whether
it has digits after the dot or not, etc. This is not encapsulation yet!&lt;/p&gt;

&lt;p&gt;The only way to encapsulate &lt;code&gt;t&lt;/code&gt; is to make sure nobody can touch
it either directly or by retrieving it from an object. How do we do that?
Just stop exposing data and start exposing functionality. Here is how,
for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d F&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We don&amp;#39;t allow anyone to retrieve &lt;code&gt;t&lt;/code&gt; anymore. All they can do is
convert temperature to text. If and when we decide to change &lt;code&gt;t&lt;/code&gt; to Celsius,
we will do it just once and in one place: in the class &lt;code&gt;Temperature&lt;/code&gt;.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Any data elements that escape objects are naked and lead to maintainability problems&lt;/aside&gt;

&lt;p&gt;If we need other functions in the future, like math operations or conversion
to Celsius, we add more methods to class &lt;code&gt;Temperature&lt;/code&gt;. But we never
let anyone touch or know about &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This idea is close to
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;&amp;quot;printers instead of getters,&amp;quot;&lt;/a&gt;
which we discussed earlier, though from a much wider perspective.
Here I&amp;#39;m saying that any data elements that escape objects are &lt;em&gt;naked&lt;/em&gt;
and lead to maintainability problems.&lt;/p&gt;

&lt;p&gt;The question is how we can work entirely without naked data, right? Eventually
we have to let objects exchange data, don&amp;#39;t we? Yes, that&amp;#39;s true. But not entirely.
I&amp;#39;ll explain that in
&lt;a href=&quot;/2016/12/20/can-objects-be-friends.html&quot;&gt;my next post&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="oop" /><category term="java" /><summary>Encapsulation is the core principle of object-oriented programming
that makes objects solid, cohesive, trustworthy, etc. But
what exactly is encapsulation? Does it only protect against access
to private attributes from outside an object? I think it&amp;#39;s much more.
Encapsulation leads to the absence of naked data on all levels and in all forms.</summary></entry><entry><title>Software Conferences to Attend</title><link href="http://www.yegor256.com/2016/11/18/software-conferences-to-attend.html" rel="alternate" type="text/html" title="Software Conferences to Attend" /><published>2016-11-18T00:00:00+00:00</published><updated>2016-11-18T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/11/18/software-conferences-to-attend</id><content type="html" xml:base="http://www.yegor256.com/2016/11/18/software-conferences-to-attend.html">&lt;p&gt;This is &lt;em&gt;my&lt;/em&gt; list of software conferences that are worth attending,
as a speaker and a listener; with a focus on Java and project management.
I will try to update this list regularly, mostly not to forget where
I have to submit my talks. Hopefully the list will help you too,
to make the right choice and never miss their CFP deadlines.&lt;/p&gt;

&lt;!--more--&gt;

&lt;table&gt;
&lt;colgroup&gt;
  &lt;col class=&quot;x-name&quot;/&gt;
  &lt;col class=&quot;x-place&quot;/&gt;
  &lt;col class=&quot;x-when&quot;/&gt;
  &lt;col class=&quot;x-cfp&quot;/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
  &lt;td&gt;Name&lt;/td&gt;
  &lt;td&gt;Place&lt;/td&gt;
  &lt;td&gt;When&lt;/td&gt;
  &lt;td&gt;CFP&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td colspan=&quot;4&quot; class=&quot;x-hr&quot;&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://jeeconf.com/&quot;&gt;JEEConf&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Kiev&lt;/td&gt;
  &lt;td&gt;May&lt;/td&gt;
  &lt;td&gt;Jan&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://kiev2017.agileee.org/&quot;&gt;AgileEE&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Kiev&lt;/td&gt;
  &lt;td&gt;Apr&lt;/td&gt;
  &lt;td&gt;Jan&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://geekout.ee/&quot;&gt;GeekOUT&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Tallinn&lt;/td&gt;
  &lt;td&gt;Jun&lt;/td&gt;
  &lt;td&gt;Feb&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;San Francisco&lt;/td&gt;
  &lt;td&gt;Sep&lt;/td&gt;
  &lt;td&gt;Mar&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://www.devoxx.com/&quot;&gt;Devoxx&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Antwerp&lt;/td&gt;
  &lt;td&gt;Nov&lt;/td&gt;
  &lt;td&gt;Apr&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://javazone.no/&quot;&gt;JavaZone&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Oslo&lt;/td&gt;
  &lt;td&gt;Sep&lt;/td&gt;
  &lt;td&gt;Apr&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.oredev.org/&quot;&gt;Øredev&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Malmö&lt;/td&gt;
  &lt;td&gt;Nov&lt;/td&gt;
  &lt;td&gt;Apr&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://qconsf.com/&quot;&gt;QCon&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;San Francisco&lt;/td&gt;
  &lt;td&gt;Nov&lt;/td&gt;
  &lt;td&gt;May&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.jfokus.se/&quot;&gt;JFokus&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Stockholm&lt;/td&gt;
  &lt;td&gt;Feb&lt;/td&gt;
  &lt;td&gt;Jun&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://jpoint.ru/en/&quot;&gt;JPoint&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Moscow&lt;/td&gt;
  &lt;td&gt;Apr&lt;/td&gt;
  &lt;td&gt;Dec&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://geecon.org/&quot;&gt;GeeCON&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;Krakow&lt;/td&gt;
  &lt;td&gt;May&lt;/td&gt;
  &lt;td&gt;Dec&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Did I forget anything?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="conferences" /><summary>This is my list of software conferences that are worth attending,
as a speaker and a listener; with a focus on Java and project management.
I will try to update this list regularly, mostly not to forget where
I have to submit my talks. Hopefully the list will help you too,
to make the right choice and never miss their CFP deadlines.</summary></entry><entry><title>Why I Don’t Publish E-Books</title><link href="http://www.yegor256.com/2016/11/09/why-no-ebooks.html" rel="alternate" type="text/html" title="Why I Don&#39;t Publish E-Books" /><published>2016-11-09T00:00:00+00:00</published><updated>2016-11-09T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/11/09/why-no-ebooks</id><content type="html" xml:base="http://www.yegor256.com/2016/11/09/why-no-ebooks.html">&lt;p&gt;Very often readers of &lt;a href=&quot;/books.html&quot;&gt;my books&lt;/a&gt; ask me why
I don&amp;#39;t publish them in digital format as e-books for Amazon Kindle,
EPUB, FB2, or simply PDF. There are a few reasons. It&amp;#39;s time
to summarize them all and explain why dead trees are the only way
to go if you want to read my content.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/11/addams-family.jpg&#39;/&gt;&lt;figcaption&gt;The Addams Family (1991) by Barry Sonnenfeld&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First of all, there is a simple technical reason:&lt;/p&gt;

&lt;figure class=&#39;badge&#39;&gt;&lt;a href=&#39;http://amzn.to/2fBsTPn&#39;&gt;&lt;img src=&#39;http://cf.jare.io/?u=http%3A%2F%2Fwww.yegor256.com%2Fimages%2F2016%2F11%2Fctan-lion.jpg&#39; style=&#39;width:92px;max-width:100%;&#39; alt=&#39;badge&#39;/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;I don&amp;#39;t know how to format them&lt;/strong&gt;.
I type all my books in &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt;.
To my knowledge, it&amp;#39;s the best and
most powerful typesetting software. If you don&amp;#39;t use it yet, you
absolutely must read
&lt;a href=&quot;http://amzn.to/2fBsTPn&quot;&gt;The TeX Book&lt;/a&gt; by Donald Knuth. Even if you&amp;#39;re not
going to become a book writer or publisher, you must read the book.
You will enjoy reading and will simply fall in love with TeX. The only
problem with TeX is that it formats texts for a fixed page size, unlike
HTML and many other digital formats. When I write my books, I know exactly
the size of their pages, and everything is formatted to look perfect
on paper. I simply don&amp;#39;t know how to do the same for all digital formats.
I&amp;#39;m sure it&amp;#39;s possible, but I don&amp;#39;t know how.&lt;/p&gt;

&lt;p&gt;Second, there is an emotional reason:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I don&amp;#39;t like digital books&lt;/strong&gt;.
Call me old school, but I don&amp;#39;t like to read on screen. I like how
books feel, how they smell, and how they become &amp;quot;friends.&amp;quot; I like
to make notes, bookmarks, fold pages, etc. I believe what&amp;#39;s very important is
not just the content, but the way you &amp;quot;feel&amp;quot; it. With a digital book,
this emotional aspect of reading is gone; all books are the same. You don&amp;#39;t
feel a book at all, because it&amp;#39;s just a Kindle in your hands. You may say
that not everybody is like me. Well, yes, but I want the world to be
the way I like it. Not the way it is.&lt;/p&gt;

&lt;p&gt;All other reasons are derived from the fact that a digital book will
inevitably be stolen and posted on torrents or somewhere
else, for free download. A digital book will become a &lt;em&gt;free&lt;/em&gt; book very quickly.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Let&amp;#39;s just agree that a digital book means a free book&lt;/aside&gt;

&lt;p&gt;Let me tell you a funny story. I received an email a few months ago from a &amp;quot;Korean
book publisher.&amp;quot; The email said it was very interested in translating
&lt;a href=&quot;/elegant-objects.html&quot;&gt;Elegant Objects&lt;/a&gt; into Korean and publishing in its
local market. To start the process, the email said, the company needed my book in PDF.
I replied that I was ready to send a printed copy, which was
definitely enough for a translator to work on. The sender disappeared. I&amp;#39;ve checked
its website and found no real evidence of previously published books. I guess it
was just a scam, an attempt to get a digital copy of the book. Funny, huh?&lt;/p&gt;

&lt;p&gt;Thus, let&amp;#39;s just agree that a digital book means a free book at the moment
of writing, in this world. And here is why I don&amp;#39;t want my books to be free:&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;Not only because I&amp;#39;m greedy, but because I want you to take my books seriously&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;I want to earn&lt;/strong&gt;.
Not only because I need to pay my bills, but mostly because I want
to stay motivated. I&amp;#39;ve made almost $12,000 by selling the first volume of
&lt;a href=&quot;/elegant-objects.html&quot;&gt;Elegant Objects&lt;/a&gt; over the last 10 months. Do you
think I&amp;#39;m motivated enough to write the second volume. Of course I am!
Would I be as motivated as I am now if I would have made $500 instead? I don&amp;#39;t think
so. Most probably, you would never see any more books from me.
And it&amp;#39;s not just about dollars.
It&amp;#39;s mostly about the appreciation I feel from you. Every payment
I get from Amazon tells me that I definitely deliver something valuable.
With a free book, I will get no appreciation and no cash.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I want you to pay&lt;/strong&gt;.
Not only because I&amp;#39;m greedy, but mostly because I want you to take my
books seriously. As a reader myself, I pay almost no attention to
books that cost $1.99 or nothing. I understand that their authors themselves
were not serious about them. Why are they cheap or free? They were so easy to write?
Their authors don&amp;#39;t believe that anyone would pay any decent money for them?
Their authors are afraid of refunds? Probably a combination of all that.
I strongly believe that good products must cost good money. If it&amp;#39;s free,
it&amp;#39;s bad (or there are some hidden costs or concealed promotion of something else).&lt;/p&gt;

&lt;p&gt;Because of all that, you get no digital books. Only printed ones.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="mood" /><summary>Very often readers of my books ask me why
I don&amp;#39;t publish them in digital format as e-books for Amazon Kindle,
EPUB, FB2, or simply PDF. There are a few reasons. It&amp;#39;s time
to summarize them all and explain why dead trees are the only way
to go if you want to read my content.</summary></entry><entry><title>Software Quality Award, 2017</title><link href="http://www.yegor256.com/2016/10/23/award-2017.html" rel="alternate" type="text/html" title="Software Quality Award, 2017" /><published>2016-10-23T00:00:00+00:00</published><updated>2016-10-23T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/10/23/award-2017</id><content type="html" xml:base="http://www.yegor256.com/2016/10/23/award-2017.html">&lt;p&gt;This is the third year of the
&lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. The prize
is still the same&amp;mdash;&lt;strong&gt;$4,096&lt;/strong&gt;.
The rules are still the same. Read on.
Previous years are here:
&lt;a href=&quot;/2015/04/16/award.html&quot;&gt;2015&lt;/a&gt;,
&lt;a href=&quot;/2015/10/17/award-2016.html&quot;&gt;2016&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Registration is open! Fill
&lt;a href=&quot;https://docs.google.com/forms/d/1QCRWPAyqnuecBSWAexDcVklNhclI4R6ckhNY5CzE9x4&quot;&gt;this form&lt;/a&gt;
to submit.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One person can submit &lt;strong&gt;only one&lt;/strong&gt; project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Submissions are accepted until the &lt;strong&gt;September 1, 2017&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I will check the commit history to make sure you&amp;#39;re the main contributor to the project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I reserve the right to reject any submission without explanation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All submissions will be published on this page (including rejected ones).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Results will be announced &lt;strong&gt;October 15, 2017&lt;/strong&gt; on this page and by email.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The best project will receive &lt;strong&gt;$4,096&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Final decisions will be made by me and are not negotiable
(although I may invite other people to help me make the right decision).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Winners that received any cash prizes in previous years can&amp;#39;t submit again.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each project must be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open source (in GitHub).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least 10,000 lines of code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least one year old.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object-oriented (that&amp;#39;s the only thing I understand).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best project is selected using this &lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;criteria&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What doesn&amp;#39;t matter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Popularity. Even if nobody is using your
product, it is still eligible for this award. I don&amp;#39;t care about
popularity; quality is the key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Programming language. I believe that any language, used correctly,
can be applied to design a high-quality product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Buzz and trends. Even if your project is yet another parser of command
line arguments, it&amp;#39;s still eligible for the award. I don&amp;#39;t care about
your marketing position; quality is all.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, if you want to sponsor this award and increase the bonus,
&lt;a href=&quot;mailto:me@yegor256.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;These projects submitted so far (in order of submission):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SimonKagstrom/kcov&quot;&gt;SimonKagstrom/kcov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JnRouvignac/AutoRefactor&quot;&gt;JnRouvignac/AutoRefactor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/javaslang/javaslang&quot;&gt;javaslang/javaslang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/HDouss/jeometry&quot;&gt;HDouss/jeometry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="quality" /><summary>This is the third year of the
Software Quality Award. The prize
is still the same&amp;mdash;$4,096.
The rules are still the same. Read on.
Previous years are here:
2015,
2016.

Registration is open! Fill
this form
to submit.</summary></entry><entry><title>Command, Control, and Innovate</title><link href="http://www.yegor256.com/2016/09/27/command-control-innovate.html" rel="alternate" type="text/html" title="Command, Control, and Innovate" /><published>2016-09-27T00:00:00+00:00</published><updated>2016-09-27T00:00:00+00:00</updated><id>http://www.yegor256.com/2016/09/27/command-control-innovate</id><content type="html" xml:base="http://www.yegor256.com/2016/09/27/command-control-innovate.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Command_and_control&quot;&gt;Command and control&lt;/a&gt;
has worked effectively in military units across the world
for thousands of years. But apparently we&amp;#39;ve just discovered
that the best companies are built on different verbs, which
are inspire, delegate, trust, lead, innovate, etc. The question is
whether we really uncovered something new that our
predecessors failed to understand for ages or something
else is going on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&#39;jb_picture&#39;&gt;&lt;img itemprop=&#39;image&#39; alt=&#39;front image&#39; src=&#39;/images/2016/09/andrei-rublev.jpg&#39;/&gt;&lt;figcaption&gt;Andrei Rublev (1966) by Andrei Tarkovsky&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;We are lazy and greedy animals. To work and produce something
for someone, we need two things: motivation and punishment. The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Carrot_and_stick&quot;&gt;carrot and stick&lt;/a&gt;
has been a dominating principle in management for thousands of years.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Colosseum&quot;&gt;The Colosseum&lt;/a&gt;
was built not because people enjoyed building it
but rather thanks to a simple rule: Good slaves ate, and bad ones were beaten to death.
A primitive form of command-and-control management was most
effective at that time, both in civil and military arenas.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;The external strength of any army is ensured by its internal discipline&lt;/aside&gt;

&lt;p&gt;Once slavery became illegal in the 19th century,
the simple rule changed: Good workers were paid, while
bad ones were fired. 150 years ago in most countries, losing a
job literally meant starvation and sometimes death, so it was not really
far away from beating slaves to death.
Because a hundred years ago there were nearly no mechanisms for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Social_protection&quot;&gt;social protection&lt;/a&gt;,
capitalists were allowed to do almost anything
they wanted. A slightly more advanced but still rather primitive form
of command and control was the best management paradigm.&lt;/p&gt;

&lt;p&gt;Besides that, the armies of all time have always been built as hierarchies
with very strict and deterministic definitions of responsibilities
and authorities. Since the time of &lt;a href=&quot;https://en.wikipedia.org/wiki/Sun_Tzu&quot;&gt;Sun Tzu&lt;/a&gt;, the external
strength of any army was ensured by its internal discipline, which
was always about a clear and explicit chain of commands, rewards, and
punishments.&lt;/p&gt;

&lt;p&gt;The situation started to change only recently, in the 20th century.
Three trends dramatically influenced the balance of power between
employers and employees, masters and slaves, managers and managees:
socialism, computers, and education.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First of all, socialism is slowly taking over capitalism.
Workers gradually obtain more rights and protections
while employers lose them every year.
Losing a job is not a tragedy for us anymore.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Second, the complexity of the tasks we perform at our workplaces
is growing, mostly thanks to computers.
We are not as easily replaceable as we were a few hundred years ago.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Third, we are getting smarter every year. Most of us know how to read
and write. We learn more, faster, partially due to the Internet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to these three major trends, it&amp;#39;s almost impossible to apply
the same primitive command-and-control management anymore: Modern workers
are not the same as those who built the Colosseum in ancient Rome.
We are very different, and our carrots and sticks must also be very
different in order to be effective. Still, giving us carrots
and sticks is absolutely necessary, because we are still lazy and greedy,
just like the guys who built the Colosseum. Likewise,
we need motivation and punishment in order to produce
something for someone.&lt;/p&gt;

&lt;aside class=&#39;quote&#39;&gt;They still adhere to command and control but mask it as inspire and trust&lt;/aside&gt;

&lt;p&gt;What about creativity and inspiration? Just like the architects of
the Colosseum, we need people today to create iPads and Facebooks,
but management and coordination are what really make projects happen.
And command and control is the only working mechanism for coordinating
humans.&lt;/p&gt;

&lt;p&gt;However, what management is doing now is absolutely evil and unethical.
They still adhere to command and control but mask it as inspire and trust. They
use carrots and sticks but redefine them as appreciation and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Peer_pressure&quot;&gt;peer pressure&lt;/a&gt;.
They lie to us that we are not animals anymore and don&amp;#39;t
need command and control, while at the same time doing
&lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;exactly that&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The primary victim of this slick approach is our mental health.
A thousand years ago, masters physically damaged their slaves;
today they damage us &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;mentally&lt;/a&gt;.
Which one is worse? Where are we heading?
I predict serious problems in the near future.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor@teamed.io</email></author><category term="management" /><summary>Command and control
has worked effectively in military units across the world
for thousands of years. But apparently we&amp;#39;ve just discovered
that the best companies are built on different verbs, which
are inspire, delegate, trust, lead, innovate, etc. The question is
whether we really uncovered something new that our
predecessors failed to understand for ages or something
else is going on.</summary></entry></feed>
